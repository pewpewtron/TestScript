/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 970.0, "minX": 0.0, "maxY": 13009.0, "series": [{"data": [[0.0, 3118.0], [0.1, 3161.0], [0.2, 3268.0], [0.3, 3438.0], [0.4, 3543.0], [0.5, 3733.0], [0.6, 3812.0], [0.7, 3818.0], [0.8, 3871.0], [0.9, 4003.0], [1.0, 4031.0], [1.1, 7738.0], [1.2, 8060.0], [1.3, 8119.0], [1.4, 8154.0], [1.5, 8164.0], [1.6, 8208.0], [1.7, 8212.0], [1.8, 8225.0], [1.9, 8264.0], [2.0, 8286.0], [2.1, 8301.0], [2.2, 8326.0], [2.3, 8331.0], [2.4, 8374.0], [2.5, 8388.0], [2.6, 8394.0], [2.7, 8401.0], [2.8, 8408.0], [2.9, 8419.0], [3.0, 8437.0], [3.1, 8441.0], [3.2, 8451.0], [3.3, 8453.0], [3.4, 8459.0], [3.5, 8471.0], [3.6, 8472.0], [3.7, 8477.0], [3.8, 8488.0], [3.9, 8489.0], [4.0, 8501.0], [4.1, 8507.0], [4.2, 8511.0], [4.3, 8517.0], [4.4, 8528.0], [4.5, 8531.0], [4.6, 8531.0], [4.7, 8535.0], [4.8, 8542.0], [4.9, 8542.0], [5.0, 8551.0], [5.1, 8552.0], [5.2, 8554.0], [5.3, 8556.0], [5.4, 8562.0], [5.5, 8569.0], [5.6, 8569.0], [5.7, 8570.0], [5.8, 8572.0], [5.9, 8573.0], [6.0, 8574.0], [6.1, 8579.0], [6.2, 8580.0], [6.3, 8581.0], [6.4, 8581.0], [6.5, 8582.0], [6.6, 8585.0], [6.7, 8586.0], [6.8, 8586.0], [6.9, 8587.0], [7.0, 8590.0], [7.1, 8592.0], [7.2, 8595.0], [7.3, 8600.0], [7.4, 8601.0], [7.5, 8603.0], [7.6, 8604.0], [7.7, 8606.0], [7.8, 8606.0], [7.9, 8609.0], [8.0, 8612.0], [8.1, 8615.0], [8.2, 8615.0], [8.3, 8616.0], [8.4, 8618.0], [8.5, 8619.0], [8.6, 8621.0], [8.7, 8621.0], [8.8, 8622.0], [8.9, 8626.0], [9.0, 8628.0], [9.1, 8629.0], [9.2, 8630.0], [9.3, 8633.0], [9.4, 8634.0], [9.5, 8635.0], [9.6, 8640.0], [9.7, 8641.0], [9.8, 8642.0], [9.9, 8644.0], [10.0, 8644.0], [10.1, 8647.0], [10.2, 8651.0], [10.3, 8652.0], [10.4, 8653.0], [10.5, 8655.0], [10.6, 8655.0], [10.7, 8656.0], [10.8, 8657.0], [10.9, 8658.0], [11.0, 8658.0], [11.1, 8659.0], [11.2, 8660.0], [11.3, 8661.0], [11.4, 8663.0], [11.5, 8663.0], [11.6, 8664.0], [11.7, 8664.0], [11.8, 8665.0], [11.9, 8667.0], [12.0, 8668.0], [12.1, 8670.0], [12.2, 8670.0], [12.3, 8670.0], [12.4, 8671.0], [12.5, 8672.0], [12.6, 8672.0], [12.7, 8672.0], [12.8, 8673.0], [12.9, 8673.0], [13.0, 8675.0], [13.1, 8675.0], [13.2, 8677.0], [13.3, 8677.0], [13.4, 8679.0], [13.5, 8680.0], [13.6, 8681.0], [13.7, 8682.0], [13.8, 8685.0], [13.9, 8686.0], [14.0, 8689.0], [14.1, 8690.0], [14.2, 8692.0], [14.3, 8692.0], [14.4, 8694.0], [14.5, 8696.0], [14.6, 8696.0], [14.7, 8698.0], [14.8, 8701.0], [14.9, 8701.0], [15.0, 8701.0], [15.1, 8701.0], [15.2, 8702.0], [15.3, 8703.0], [15.4, 8703.0], [15.5, 8703.0], [15.6, 8704.0], [15.7, 8706.0], [15.8, 8708.0], [15.9, 8710.0], [16.0, 8710.0], [16.1, 8710.0], [16.2, 8710.0], [16.3, 8712.0], [16.4, 8713.0], [16.5, 8715.0], [16.6, 8715.0], [16.7, 8718.0], [16.8, 8720.0], [16.9, 8721.0], [17.0, 8721.0], [17.1, 8723.0], [17.2, 8723.0], [17.3, 8724.0], [17.4, 8725.0], [17.5, 8725.0], [17.6, 8725.0], [17.7, 8726.0], [17.8, 8726.0], [17.9, 8727.0], [18.0, 8727.0], [18.1, 8728.0], [18.2, 8729.0], [18.3, 8730.0], [18.4, 8730.0], [18.5, 8730.0], [18.6, 8732.0], [18.7, 8733.0], [18.8, 8733.0], [18.9, 8734.0], [19.0, 8734.0], [19.1, 8734.0], [19.2, 8735.0], [19.3, 8736.0], [19.4, 8737.0], [19.5, 8738.0], [19.6, 8738.0], [19.7, 8741.0], [19.8, 8742.0], [19.9, 8742.0], [20.0, 8742.0], [20.1, 8743.0], [20.2, 8743.0], [20.3, 8744.0], [20.4, 8744.0], [20.5, 8745.0], [20.6, 8745.0], [20.7, 8746.0], [20.8, 8746.0], [20.9, 8747.0], [21.0, 8748.0], [21.1, 8748.0], [21.2, 8751.0], [21.3, 8751.0], [21.4, 8751.0], [21.5, 8752.0], [21.6, 8752.0], [21.7, 8752.0], [21.8, 8753.0], [21.9, 8753.0], [22.0, 8754.0], [22.1, 8755.0], [22.2, 8756.0], [22.3, 8758.0], [22.4, 8759.0], [22.5, 8759.0], [22.6, 8760.0], [22.7, 8760.0], [22.8, 8760.0], [22.9, 8761.0], [23.0, 8761.0], [23.1, 8762.0], [23.2, 8762.0], [23.3, 8763.0], [23.4, 8764.0], [23.5, 8764.0], [23.6, 8765.0], [23.7, 8766.0], [23.8, 8766.0], [23.9, 8767.0], [24.0, 8767.0], [24.1, 8768.0], [24.2, 8770.0], [24.3, 8770.0], [24.4, 8772.0], [24.5, 8773.0], [24.6, 8773.0], [24.7, 8774.0], [24.8, 8775.0], [24.9, 8776.0], [25.0, 8776.0], [25.1, 8776.0], [25.2, 8777.0], [25.3, 8777.0], [25.4, 8778.0], [25.5, 8779.0], [25.6, 8779.0], [25.7, 8782.0], [25.8, 8782.0], [25.9, 8782.0], [26.0, 8783.0], [26.1, 8784.0], [26.2, 8785.0], [26.3, 8785.0], [26.4, 8786.0], [26.5, 8787.0], [26.6, 8787.0], [26.7, 8788.0], [26.8, 8789.0], [26.9, 8789.0], [27.0, 8790.0], [27.1, 8791.0], [27.2, 8791.0], [27.3, 8792.0], [27.4, 8793.0], [27.5, 8793.0], [27.6, 8793.0], [27.7, 8793.0], [27.8, 8794.0], [27.9, 8794.0], [28.0, 8794.0], [28.1, 8794.0], [28.2, 8794.0], [28.3, 8795.0], [28.4, 8795.0], [28.5, 8795.0], [28.6, 8795.0], [28.7, 8796.0], [28.8, 8798.0], [28.9, 8798.0], [29.0, 8800.0], [29.1, 8800.0], [29.2, 8800.0], [29.3, 8801.0], [29.4, 8801.0], [29.5, 8801.0], [29.6, 8802.0], [29.7, 8803.0], [29.8, 8803.0], [29.9, 8804.0], [30.0, 8804.0], [30.1, 8805.0], [30.2, 8806.0], [30.3, 8807.0], [30.4, 8808.0], [30.5, 8808.0], [30.6, 8809.0], [30.7, 8809.0], [30.8, 8809.0], [30.9, 8810.0], [31.0, 8811.0], [31.1, 8811.0], [31.2, 8811.0], [31.3, 8812.0], [31.4, 8812.0], [31.5, 8812.0], [31.6, 8813.0], [31.7, 8814.0], [31.8, 8814.0], [31.9, 8814.0], [32.0, 8814.0], [32.1, 8815.0], [32.2, 8816.0], [32.3, 8816.0], [32.4, 8816.0], [32.5, 8816.0], [32.6, 8817.0], [32.7, 8817.0], [32.8, 8818.0], [32.9, 8818.0], [33.0, 8818.0], [33.1, 8819.0], [33.2, 8820.0], [33.3, 8821.0], [33.4, 8821.0], [33.5, 8822.0], [33.6, 8823.0], [33.7, 8823.0], [33.8, 8824.0], [33.9, 8824.0], [34.0, 8824.0], [34.1, 8825.0], [34.2, 8825.0], [34.3, 8826.0], [34.4, 8826.0], [34.5, 8826.0], [34.6, 8826.0], [34.7, 8827.0], [34.8, 8829.0], [34.9, 8830.0], [35.0, 8830.0], [35.1, 8831.0], [35.2, 8831.0], [35.3, 8831.0], [35.4, 8832.0], [35.5, 8832.0], [35.6, 8833.0], [35.7, 8833.0], [35.8, 8834.0], [35.9, 8834.0], [36.0, 8834.0], [36.1, 8835.0], [36.2, 8836.0], [36.3, 8836.0], [36.4, 8836.0], [36.5, 8837.0], [36.6, 8838.0], [36.7, 8838.0], [36.8, 8838.0], [36.9, 8838.0], [37.0, 8839.0], [37.1, 8839.0], [37.2, 8840.0], [37.3, 8840.0], [37.4, 8841.0], [37.5, 8841.0], [37.6, 8841.0], [37.7, 8842.0], [37.8, 8842.0], [37.9, 8843.0], [38.0, 8843.0], [38.1, 8844.0], [38.2, 8844.0], [38.3, 8845.0], [38.4, 8847.0], [38.5, 8848.0], [38.6, 8848.0], [38.7, 8849.0], [38.8, 8849.0], [38.9, 8850.0], [39.0, 8850.0], [39.1, 8850.0], [39.2, 8850.0], [39.3, 8851.0], [39.4, 8852.0], [39.5, 8852.0], [39.6, 8852.0], [39.7, 8853.0], [39.8, 8853.0], [39.9, 8853.0], [40.0, 8853.0], [40.1, 8854.0], [40.2, 8854.0], [40.3, 8856.0], [40.4, 8856.0], [40.5, 8856.0], [40.6, 8857.0], [40.7, 8858.0], [40.8, 8858.0], [40.9, 8860.0], [41.0, 8860.0], [41.1, 8861.0], [41.2, 8861.0], [41.3, 8862.0], [41.4, 8862.0], [41.5, 8862.0], [41.6, 8863.0], [41.7, 8864.0], [41.8, 8865.0], [41.9, 8865.0], [42.0, 8866.0], [42.1, 8869.0], [42.2, 8869.0], [42.3, 8870.0], [42.4, 8870.0], [42.5, 8870.0], [42.6, 8871.0], [42.7, 8871.0], [42.8, 8871.0], [42.9, 8871.0], [43.0, 8872.0], [43.1, 8872.0], [43.2, 8873.0], [43.3, 8873.0], [43.4, 8873.0], [43.5, 8874.0], [43.6, 8874.0], [43.7, 8874.0], [43.8, 8875.0], [43.9, 8875.0], [44.0, 8875.0], [44.1, 8876.0], [44.2, 8876.0], [44.3, 8876.0], [44.4, 8876.0], [44.5, 8877.0], [44.6, 8878.0], [44.7, 8878.0], [44.8, 8879.0], [44.9, 8879.0], [45.0, 8879.0], [45.1, 8880.0], [45.2, 8881.0], [45.3, 8882.0], [45.4, 8882.0], [45.5, 8882.0], [45.6, 8883.0], [45.7, 8883.0], [45.8, 8883.0], [45.9, 8884.0], [46.0, 8884.0], [46.1, 8885.0], [46.2, 8885.0], [46.3, 8886.0], [46.4, 8886.0], [46.5, 8886.0], [46.6, 8887.0], [46.7, 8887.0], [46.8, 8887.0], [46.9, 8887.0], [47.0, 8887.0], [47.1, 8888.0], [47.2, 8889.0], [47.3, 8890.0], [47.4, 8892.0], [47.5, 8892.0], [47.6, 8892.0], [47.7, 8892.0], [47.8, 8892.0], [47.9, 8892.0], [48.0, 8893.0], [48.1, 8893.0], [48.2, 8893.0], [48.3, 8894.0], [48.4, 8894.0], [48.5, 8894.0], [48.6, 8895.0], [48.7, 8895.0], [48.8, 8896.0], [48.9, 8896.0], [49.0, 8896.0], [49.1, 8898.0], [49.2, 8898.0], [49.3, 8898.0], [49.4, 8899.0], [49.5, 8900.0], [49.6, 8900.0], [49.7, 8901.0], [49.8, 8901.0], [49.9, 8902.0], [50.0, 8903.0], [50.1, 8903.0], [50.2, 8903.0], [50.3, 8903.0], [50.4, 8904.0], [50.5, 8904.0], [50.6, 8904.0], [50.7, 8904.0], [50.8, 8905.0], [50.9, 8905.0], [51.0, 8906.0], [51.1, 8907.0], [51.2, 8907.0], [51.3, 8908.0], [51.4, 8909.0], [51.5, 8909.0], [51.6, 8910.0], [51.7, 8911.0], [51.8, 8911.0], [51.9, 8911.0], [52.0, 8913.0], [52.1, 8914.0], [52.2, 8914.0], [52.3, 8914.0], [52.4, 8915.0], [52.5, 8916.0], [52.6, 8917.0], [52.7, 8917.0], [52.8, 8917.0], [52.9, 8917.0], [53.0, 8918.0], [53.1, 8918.0], [53.2, 8918.0], [53.3, 8919.0], [53.4, 8919.0], [53.5, 8920.0], [53.6, 8920.0], [53.7, 8921.0], [53.8, 8921.0], [53.9, 8921.0], [54.0, 8922.0], [54.1, 8922.0], [54.2, 8923.0], [54.3, 8925.0], [54.4, 8925.0], [54.5, 8925.0], [54.6, 8926.0], [54.7, 8927.0], [54.8, 8928.0], [54.9, 8928.0], [55.0, 8929.0], [55.1, 8929.0], [55.2, 8930.0], [55.3, 8931.0], [55.4, 8931.0], [55.5, 8932.0], [55.6, 8932.0], [55.7, 8933.0], [55.8, 8934.0], [55.9, 8935.0], [56.0, 8935.0], [56.1, 8935.0], [56.2, 8937.0], [56.3, 8937.0], [56.4, 8937.0], [56.5, 8938.0], [56.6, 8938.0], [56.7, 8938.0], [56.8, 8940.0], [56.9, 8940.0], [57.0, 8940.0], [57.1, 8941.0], [57.2, 8941.0], [57.3, 8941.0], [57.4, 8942.0], [57.5, 8943.0], [57.6, 8944.0], [57.7, 8944.0], [57.8, 8944.0], [57.9, 8945.0], [58.0, 8945.0], [58.1, 8946.0], [58.2, 8946.0], [58.3, 8947.0], [58.4, 8948.0], [58.5, 8948.0], [58.6, 8949.0], [58.7, 8951.0], [58.8, 8951.0], [58.9, 8951.0], [59.0, 8952.0], [59.1, 8952.0], [59.2, 8952.0], [59.3, 8952.0], [59.4, 8953.0], [59.5, 8954.0], [59.6, 8954.0], [59.7, 8955.0], [59.8, 8955.0], [59.9, 8955.0], [60.0, 8956.0], [60.1, 8957.0], [60.2, 8958.0], [60.3, 8959.0], [60.4, 8960.0], [60.5, 8961.0], [60.6, 8962.0], [60.7, 8962.0], [60.8, 8962.0], [60.9, 8963.0], [61.0, 8964.0], [61.1, 8964.0], [61.2, 8964.0], [61.3, 8965.0], [61.4, 8966.0], [61.5, 8966.0], [61.6, 8966.0], [61.7, 8967.0], [61.8, 8969.0], [61.9, 8969.0], [62.0, 8969.0], [62.1, 8970.0], [62.2, 8970.0], [62.3, 8971.0], [62.4, 8972.0], [62.5, 8972.0], [62.6, 8973.0], [62.7, 8974.0], [62.8, 8974.0], [62.9, 8974.0], [63.0, 8976.0], [63.1, 8977.0], [63.2, 8978.0], [63.3, 8979.0], [63.4, 8979.0], [63.5, 8979.0], [63.6, 8980.0], [63.7, 8980.0], [63.8, 8983.0], [63.9, 8984.0], [64.0, 8985.0], [64.1, 8985.0], [64.2, 8985.0], [64.3, 8986.0], [64.4, 8987.0], [64.5, 8987.0], [64.6, 8989.0], [64.7, 8989.0], [64.8, 8989.0], [64.9, 8990.0], [65.0, 8990.0], [65.1, 8991.0], [65.2, 8991.0], [65.3, 8993.0], [65.4, 8994.0], [65.5, 8995.0], [65.6, 8996.0], [65.7, 8996.0], [65.8, 8997.0], [65.9, 8997.0], [66.0, 8998.0], [66.1, 8999.0], [66.2, 8999.0], [66.3, 8999.0], [66.4, 9000.0], [66.5, 9001.0], [66.6, 9002.0], [66.7, 9002.0], [66.8, 9004.0], [66.9, 9006.0], [67.0, 9006.0], [67.1, 9007.0], [67.2, 9007.0], [67.3, 9008.0], [67.4, 9008.0], [67.5, 9010.0], [67.6, 9011.0], [67.7, 9011.0], [67.8, 9013.0], [67.9, 9014.0], [68.0, 9015.0], [68.1, 9015.0], [68.2, 9016.0], [68.3, 9017.0], [68.4, 9017.0], [68.5, 9020.0], [68.6, 9021.0], [68.7, 9022.0], [68.8, 9023.0], [68.9, 9025.0], [69.0, 9025.0], [69.1, 9026.0], [69.2, 9026.0], [69.3, 9027.0], [69.4, 9027.0], [69.5, 9028.0], [69.6, 9028.0], [69.7, 9029.0], [69.8, 9030.0], [69.9, 9031.0], [70.0, 9032.0], [70.1, 9032.0], [70.2, 9032.0], [70.3, 9032.0], [70.4, 9034.0], [70.5, 9035.0], [70.6, 9036.0], [70.7, 9037.0], [70.8, 9038.0], [70.9, 9039.0], [71.0, 9039.0], [71.1, 9039.0], [71.2, 9040.0], [71.3, 9042.0], [71.4, 9043.0], [71.5, 9043.0], [71.6, 9044.0], [71.7, 9045.0], [71.8, 9046.0], [71.9, 9046.0], [72.0, 9047.0], [72.1, 9048.0], [72.2, 9049.0], [72.3, 9050.0], [72.4, 9050.0], [72.5, 9051.0], [72.6, 9052.0], [72.7, 9053.0], [72.8, 9053.0], [72.9, 9053.0], [73.0, 9054.0], [73.1, 9054.0], [73.2, 9055.0], [73.3, 9056.0], [73.4, 9057.0], [73.5, 9059.0], [73.6, 9061.0], [73.7, 9061.0], [73.8, 9062.0], [73.9, 9063.0], [74.0, 9063.0], [74.1, 9064.0], [74.2, 9065.0], [74.3, 9065.0], [74.4, 9066.0], [74.5, 9067.0], [74.6, 9067.0], [74.7, 9070.0], [74.8, 9070.0], [74.9, 9072.0], [75.0, 9074.0], [75.1, 9074.0], [75.2, 9075.0], [75.3, 9076.0], [75.4, 9077.0], [75.5, 9077.0], [75.6, 9078.0], [75.7, 9080.0], [75.8, 9080.0], [75.9, 9082.0], [76.0, 9082.0], [76.1, 9083.0], [76.2, 9084.0], [76.3, 9086.0], [76.4, 9087.0], [76.5, 9087.0], [76.6, 9088.0], [76.7, 9088.0], [76.8, 9089.0], [76.9, 9092.0], [77.0, 9093.0], [77.1, 9093.0], [77.2, 9094.0], [77.3, 9095.0], [77.4, 9096.0], [77.5, 9099.0], [77.6, 9099.0], [77.7, 9100.0], [77.8, 9100.0], [77.9, 9102.0], [78.0, 9103.0], [78.1, 9105.0], [78.2, 9107.0], [78.3, 9107.0], [78.4, 9108.0], [78.5, 9109.0], [78.6, 9112.0], [78.7, 9117.0], [78.8, 9118.0], [78.9, 9118.0], [79.0, 9118.0], [79.1, 9120.0], [79.2, 9121.0], [79.3, 9122.0], [79.4, 9123.0], [79.5, 9123.0], [79.6, 9125.0], [79.7, 9126.0], [79.8, 9127.0], [79.9, 9130.0], [80.0, 9131.0], [80.1, 9133.0], [80.2, 9133.0], [80.3, 9133.0], [80.4, 9134.0], [80.5, 9135.0], [80.6, 9135.0], [80.7, 9136.0], [80.8, 9137.0], [80.9, 9138.0], [81.0, 9138.0], [81.1, 9139.0], [81.2, 9140.0], [81.3, 9141.0], [81.4, 9142.0], [81.5, 9142.0], [81.6, 9143.0], [81.7, 9151.0], [81.8, 9153.0], [81.9, 9153.0], [82.0, 9157.0], [82.1, 9159.0], [82.2, 9161.0], [82.3, 9163.0], [82.4, 9164.0], [82.5, 9166.0], [82.6, 9166.0], [82.7, 9167.0], [82.8, 9168.0], [82.9, 9169.0], [83.0, 9174.0], [83.1, 9175.0], [83.2, 9175.0], [83.3, 9176.0], [83.4, 9176.0], [83.5, 9176.0], [83.6, 9177.0], [83.7, 9181.0], [83.8, 9183.0], [83.9, 9183.0], [84.0, 9186.0], [84.1, 9187.0], [84.2, 9187.0], [84.3, 9189.0], [84.4, 9190.0], [84.5, 9190.0], [84.6, 9191.0], [84.7, 9192.0], [84.8, 9193.0], [84.9, 9193.0], [85.0, 9195.0], [85.1, 9195.0], [85.2, 9196.0], [85.3, 9196.0], [85.4, 9199.0], [85.5, 9199.0], [85.6, 9203.0], [85.7, 9205.0], [85.8, 9208.0], [85.9, 9210.0], [86.0, 9211.0], [86.1, 9211.0], [86.2, 9215.0], [86.3, 9217.0], [86.4, 9219.0], [86.5, 9219.0], [86.6, 9222.0], [86.7, 9223.0], [86.8, 9224.0], [86.9, 9226.0], [87.0, 9228.0], [87.1, 9228.0], [87.2, 9233.0], [87.3, 9233.0], [87.4, 9235.0], [87.5, 9237.0], [87.6, 9240.0], [87.7, 9246.0], [87.8, 9248.0], [87.9, 9248.0], [88.0, 9250.0], [88.1, 9253.0], [88.2, 9259.0], [88.3, 9265.0], [88.4, 9267.0], [88.5, 9269.0], [88.6, 9272.0], [88.7, 9272.0], [88.8, 9273.0], [88.9, 9276.0], [89.0, 9276.0], [89.1, 9282.0], [89.2, 9283.0], [89.3, 9290.0], [89.4, 9295.0], [89.5, 9296.0], [89.6, 9298.0], [89.7, 9298.0], [89.8, 9310.0], [89.9, 9311.0], [90.0, 9313.0], [90.1, 9316.0], [90.2, 9323.0], [90.3, 9323.0], [90.4, 9327.0], [90.5, 9330.0], [90.6, 9333.0], [90.7, 9333.0], [90.8, 9334.0], [90.9, 9336.0], [91.0, 9337.0], [91.1, 9340.0], [91.2, 9342.0], [91.3, 9342.0], [91.4, 9347.0], [91.5, 9348.0], [91.6, 9348.0], [91.7, 9348.0], [91.8, 9362.0], [91.9, 9367.0], [92.0, 9367.0], [92.1, 9368.0], [92.2, 9374.0], [92.3, 9375.0], [92.4, 9377.0], [92.5, 9381.0], [92.6, 9390.0], [92.7, 9394.0], [92.8, 9399.0], [92.9, 9401.0], [93.0, 9407.0], [93.1, 9408.0], [93.2, 9414.0], [93.3, 9423.0], [93.4, 9425.0], [93.5, 9427.0], [93.6, 9430.0], [93.7, 9438.0], [93.8, 9450.0], [93.9, 9451.0], [94.0, 9452.0], [94.1, 9457.0], [94.2, 9463.0], [94.3, 9477.0], [94.4, 9480.0], [94.5, 9480.0], [94.6, 9482.0], [94.7, 9484.0], [94.8, 9490.0], [94.9, 9500.0], [95.0, 9506.0], [95.1, 9509.0], [95.2, 9514.0], [95.3, 9523.0], [95.4, 9540.0], [95.5, 9540.0], [95.6, 9547.0], [95.7, 9559.0], [95.8, 9566.0], [95.9, 9570.0], [96.0, 9574.0], [96.1, 9582.0], [96.2, 9582.0], [96.3, 9585.0], [96.4, 9589.0], [96.5, 9590.0], [96.6, 9595.0], [96.7, 9606.0], [96.8, 9615.0], [96.9, 9621.0], [97.0, 9624.0], [97.1, 9625.0], [97.2, 9627.0], [97.3, 9637.0], [97.4, 9655.0], [97.5, 9663.0], [97.6, 9669.0], [97.7, 9677.0], [97.8, 9680.0], [97.9, 9686.0], [98.0, 9701.0], [98.1, 9701.0], [98.2, 9709.0], [98.3, 9725.0], [98.4, 9725.0], [98.5, 9744.0], [98.6, 9758.0], [98.7, 9783.0], [98.8, 9783.0], [98.9, 9826.0], [99.0, 9881.0], [99.1, 9988.0], [99.2, 10568.0], [99.3, 10761.0], [99.4, 10940.0], [99.5, 11556.0], [99.6, 12579.0], [99.7, 12585.0], [99.8, 12654.0], [99.9, 12993.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[0.0, 3118.0], [0.1, 3161.0], [0.2, 3256.0], [0.3, 3270.0], [0.4, 3287.0], [0.5, 3318.0], [0.6, 3352.0], [0.7, 3360.0], [0.8, 3373.0], [0.9, 3384.0], [1.0, 3394.0], [1.1, 3399.0], [1.2, 3401.0], [1.3, 3412.0], [1.4, 3435.0], [1.5, 3451.0], [1.6, 3468.0], [1.7, 3479.0], [1.8, 3514.0], [1.9, 3530.0], [2.0, 3534.0], [2.1, 3535.0], [2.2, 3543.0], [2.3, 3552.0], [2.4, 3560.0], [2.5, 3572.0], [2.6, 3580.0], [2.7, 3598.0], [2.8, 3600.0], [2.9, 3606.0], [3.0, 3613.0], [3.1, 3614.0], [3.2, 3618.0], [3.3, 3626.0], [3.4, 3633.0], [3.5, 3635.0], [3.6, 3641.0], [3.7, 3663.0], [3.8, 3669.0], [3.9, 3673.0], [4.0, 3676.0], [4.1, 3679.0], [4.2, 3680.0], [4.3, 3685.0], [4.4, 3698.0], [4.5, 3699.0], [4.6, 3704.0], [4.7, 3710.0], [4.8, 3717.0], [4.9, 3717.0], [5.0, 3725.0], [5.1, 3733.0], [5.2, 3733.0], [5.3, 3737.0], [5.4, 3750.0], [5.5, 3753.0], [5.6, 3754.0], [5.7, 3758.0], [5.8, 3768.0], [5.9, 3775.0], [6.0, 3781.0], [6.1, 3783.0], [6.2, 3786.0], [6.3, 3800.0], [6.4, 3800.0], [6.5, 3801.0], [6.6, 3812.0], [6.7, 3821.0], [6.8, 3829.0], [6.9, 3833.0], [7.0, 3846.0], [7.1, 3861.0], [7.2, 3862.0], [7.3, 3871.0], [7.4, 3877.0], [7.5, 3878.0], [7.6, 3881.0], [7.7, 3895.0], [7.8, 3898.0], [7.9, 3903.0], [8.0, 3910.0], [8.1, 3913.0], [8.2, 3917.0], [8.3, 3930.0], [8.4, 3931.0], [8.5, 3931.0], [8.6, 3943.0], [8.7, 3947.0], [8.8, 3950.0], [8.9, 3956.0], [9.0, 3959.0], [9.1, 3960.0], [9.2, 3963.0], [9.3, 3969.0], [9.4, 3970.0], [9.5, 3978.0], [9.6, 3982.0], [9.7, 3999.0], [9.8, 4003.0], [9.9, 4007.0], [10.0, 4014.0], [10.1, 4016.0], [10.2, 4026.0], [10.3, 4030.0], [10.4, 4031.0], [10.5, 4033.0], [10.6, 4036.0], [10.7, 4042.0], [10.8, 4052.0], [10.9, 4058.0], [11.0, 4069.0], [11.1, 4079.0], [11.2, 4091.0], [11.3, 4108.0], [11.4, 4109.0], [11.5, 4116.0], [11.6, 4124.0], [11.7, 4130.0], [11.8, 4137.0], [11.9, 4141.0], [12.0, 4145.0], [12.1, 4152.0], [12.2, 4166.0], [12.3, 4169.0], [12.4, 4172.0], [12.5, 4175.0], [12.6, 4186.0], [12.7, 4191.0], [12.8, 4195.0], [12.9, 4209.0], [13.0, 4209.0], [13.1, 4221.0], [13.2, 4224.0], [13.3, 4225.0], [13.4, 4236.0], [13.5, 4267.0], [13.6, 4269.0], [13.7, 4273.0], [13.8, 4277.0], [13.9, 4286.0], [14.0, 4287.0], [14.1, 4295.0], [14.2, 4310.0], [14.3, 4321.0], [14.4, 4337.0], [14.5, 4339.0], [14.6, 4339.0], [14.7, 4348.0], [14.8, 4350.0], [14.9, 4354.0], [15.0, 4361.0], [15.1, 4363.0], [15.2, 4373.0], [15.3, 4375.0], [15.4, 4388.0], [15.5, 4391.0], [15.6, 4392.0], [15.7, 4406.0], [15.8, 4411.0], [15.9, 4416.0], [16.0, 4422.0], [16.1, 4428.0], [16.2, 4433.0], [16.3, 4442.0], [16.4, 4461.0], [16.5, 4466.0], [16.6, 4472.0], [16.7, 4474.0], [16.8, 4483.0], [16.9, 4492.0], [17.0, 4495.0], [17.1, 4499.0], [17.2, 4500.0], [17.3, 4506.0], [17.4, 4510.0], [17.5, 4512.0], [17.6, 4522.0], [17.7, 4527.0], [17.8, 4529.0], [17.9, 4532.0], [18.0, 4549.0], [18.1, 4553.0], [18.2, 4555.0], [18.3, 4561.0], [18.4, 4575.0], [18.5, 4575.0], [18.6, 4580.0], [18.7, 4584.0], [18.8, 4585.0], [18.9, 4587.0], [19.0, 4592.0], [19.1, 4593.0], [19.2, 4596.0], [19.3, 4610.0], [19.4, 4611.0], [19.5, 4613.0], [19.6, 4622.0], [19.7, 4623.0], [19.8, 4627.0], [19.9, 4631.0], [20.0, 4634.0], [20.1, 4636.0], [20.2, 4637.0], [20.3, 4642.0], [20.4, 4642.0], [20.5, 4645.0], [20.6, 4653.0], [20.7, 4655.0], [20.8, 4656.0], [20.9, 4662.0], [21.0, 4670.0], [21.1, 4672.0], [21.2, 4677.0], [21.3, 4694.0], [21.4, 4697.0], [21.5, 4705.0], [21.6, 4708.0], [21.7, 4708.0], [21.8, 4714.0], [21.9, 4718.0], [22.0, 4719.0], [22.1, 4719.0], [22.2, 4724.0], [22.3, 4725.0], [22.4, 4729.0], [22.5, 4736.0], [22.6, 4740.0], [22.7, 4741.0], [22.8, 4747.0], [22.9, 4762.0], [23.0, 4776.0], [23.1, 4778.0], [23.2, 4796.0], [23.3, 4802.0], [23.4, 4805.0], [23.5, 4808.0], [23.6, 4812.0], [23.7, 4814.0], [23.8, 4816.0], [23.9, 4818.0], [24.0, 4822.0], [24.1, 4825.0], [24.2, 4831.0], [24.3, 4833.0], [24.4, 4833.0], [24.5, 4835.0], [24.6, 4836.0], [24.7, 4838.0], [24.8, 4854.0], [24.9, 4856.0], [25.0, 4868.0], [25.1, 4871.0], [25.2, 4872.0], [25.3, 4874.0], [25.4, 4879.0], [25.5, 4882.0], [25.6, 4883.0], [25.7, 4886.0], [25.8, 4889.0], [25.9, 4892.0], [26.0, 4900.0], [26.1, 4904.0], [26.2, 4912.0], [26.3, 4914.0], [26.4, 4918.0], [26.5, 4922.0], [26.6, 4923.0], [26.7, 4925.0], [26.8, 4933.0], [26.9, 4934.0], [27.0, 4936.0], [27.1, 4944.0], [27.2, 4944.0], [27.3, 4946.0], [27.4, 4954.0], [27.5, 4956.0], [27.6, 4956.0], [27.7, 4962.0], [27.8, 4963.0], [27.9, 4965.0], [28.0, 4967.0], [28.1, 4969.0], [28.2, 4974.0], [28.3, 4979.0], [28.4, 4980.0], [28.5, 4982.0], [28.6, 4985.0], [28.7, 4987.0], [28.8, 4989.0], [28.9, 4990.0], [29.0, 4993.0], [29.1, 4995.0], [29.2, 5000.0], [29.3, 5001.0], [29.4, 5002.0], [29.5, 5002.0], [29.6, 5006.0], [29.7, 5007.0], [29.8, 5010.0], [29.9, 5012.0], [30.0, 5014.0], [30.1, 5015.0], [30.2, 5016.0], [30.3, 5022.0], [30.4, 5024.0], [30.5, 5024.0], [30.6, 5029.0], [30.7, 5031.0], [30.8, 5031.0], [30.9, 5033.0], [31.0, 5039.0], [31.1, 5040.0], [31.2, 5041.0], [31.3, 5043.0], [31.4, 5047.0], [31.5, 5050.0], [31.6, 5053.0], [31.7, 5057.0], [31.8, 5060.0], [31.9, 5063.0], [32.0, 5069.0], [32.1, 5070.0], [32.2, 5074.0], [32.3, 5076.0], [32.4, 5077.0], [32.5, 5080.0], [32.6, 5083.0], [32.7, 5086.0], [32.8, 5087.0], [32.9, 5087.0], [33.0, 5089.0], [33.1, 5090.0], [33.2, 5091.0], [33.3, 5092.0], [33.4, 5096.0], [33.5, 5101.0], [33.6, 5103.0], [33.7, 5104.0], [33.8, 5105.0], [33.9, 5106.0], [34.0, 5107.0], [34.1, 5112.0], [34.2, 5115.0], [34.3, 5117.0], [34.4, 5117.0], [34.5, 5118.0], [34.6, 5122.0], [34.7, 5124.0], [34.8, 5126.0], [34.9, 5126.0], [35.0, 5126.0], [35.1, 5129.0], [35.2, 5130.0], [35.3, 5132.0], [35.4, 5133.0], [35.5, 5133.0], [35.6, 5133.0], [35.7, 5134.0], [35.8, 5135.0], [35.9, 5136.0], [36.0, 5138.0], [36.1, 5140.0], [36.2, 5141.0], [36.3, 5141.0], [36.4, 5143.0], [36.5, 5144.0], [36.6, 5145.0], [36.7, 5147.0], [36.8, 5147.0], [36.9, 5148.0], [37.0, 5150.0], [37.1, 5151.0], [37.2, 5152.0], [37.3, 5153.0], [37.4, 5153.0], [37.5, 5154.0], [37.6, 5154.0], [37.7, 5157.0], [37.8, 5162.0], [37.9, 5163.0], [38.0, 5165.0], [38.1, 5166.0], [38.2, 5167.0], [38.3, 5167.0], [38.4, 5168.0], [38.5, 5168.0], [38.6, 5169.0], [38.7, 5172.0], [38.8, 5173.0], [38.9, 5173.0], [39.0, 5176.0], [39.1, 5179.0], [39.2, 5179.0], [39.3, 5181.0], [39.4, 5184.0], [39.5, 5185.0], [39.6, 5186.0], [39.7, 5188.0], [39.8, 5190.0], [39.9, 5190.0], [40.0, 5192.0], [40.1, 5193.0], [40.2, 5194.0], [40.3, 5196.0], [40.4, 5197.0], [40.5, 5198.0], [40.6, 5200.0], [40.7, 5201.0], [40.8, 5201.0], [40.9, 5203.0], [41.0, 5205.0], [41.1, 5210.0], [41.2, 5210.0], [41.3, 5211.0], [41.4, 5212.0], [41.5, 5213.0], [41.6, 5215.0], [41.7, 5216.0], [41.8, 5218.0], [41.9, 5221.0], [42.0, 5223.0], [42.1, 5225.0], [42.2, 5226.0], [42.3, 5226.0], [42.4, 5226.0], [42.5, 5227.0], [42.6, 5228.0], [42.7, 5229.0], [42.8, 5230.0], [42.9, 5231.0], [43.0, 5231.0], [43.1, 5231.0], [43.2, 5233.0], [43.3, 5234.0], [43.4, 5234.0], [43.5, 5236.0], [43.6, 5238.0], [43.7, 5239.0], [43.8, 5240.0], [43.9, 5242.0], [44.0, 5243.0], [44.1, 5243.0], [44.2, 5243.0], [44.3, 5244.0], [44.4, 5245.0], [44.5, 5247.0], [44.6, 5248.0], [44.7, 5248.0], [44.8, 5249.0], [44.9, 5251.0], [45.0, 5251.0], [45.1, 5253.0], [45.2, 5255.0], [45.3, 5257.0], [45.4, 5258.0], [45.5, 5262.0], [45.6, 5263.0], [45.7, 5264.0], [45.8, 5267.0], [45.9, 5268.0], [46.0, 5269.0], [46.1, 5272.0], [46.2, 5274.0], [46.3, 5275.0], [46.4, 5277.0], [46.5, 5282.0], [46.6, 5285.0], [46.7, 5285.0], [46.8, 5289.0], [46.9, 5293.0], [47.0, 5293.0], [47.1, 5295.0], [47.2, 5296.0], [47.3, 5296.0], [47.4, 5299.0], [47.5, 5302.0], [47.6, 5303.0], [47.7, 5303.0], [47.8, 5305.0], [47.9, 5305.0], [48.0, 5308.0], [48.1, 5308.0], [48.2, 5310.0], [48.3, 5311.0], [48.4, 5313.0], [48.5, 5314.0], [48.6, 5314.0], [48.7, 5315.0], [48.8, 5316.0], [48.9, 5318.0], [49.0, 5319.0], [49.1, 5320.0], [49.2, 5320.0], [49.3, 5325.0], [49.4, 5328.0], [49.5, 5328.0], [49.6, 5328.0], [49.7, 5329.0], [49.8, 5332.0], [49.9, 5332.0], [50.0, 5333.0], [50.1, 5333.0], [50.2, 5334.0], [50.3, 5334.0], [50.4, 5334.0], [50.5, 5334.0], [50.6, 5335.0], [50.7, 5337.0], [50.8, 5338.0], [50.9, 5338.0], [51.0, 5339.0], [51.1, 5340.0], [51.2, 5343.0], [51.3, 5343.0], [51.4, 5344.0], [51.5, 5344.0], [51.6, 5347.0], [51.7, 5347.0], [51.8, 5347.0], [51.9, 5350.0], [52.0, 5352.0], [52.1, 5352.0], [52.2, 5352.0], [52.3, 5353.0], [52.4, 5353.0], [52.5, 5354.0], [52.6, 5355.0], [52.7, 5356.0], [52.8, 5357.0], [52.9, 5360.0], [53.0, 5361.0], [53.1, 5361.0], [53.2, 5363.0], [53.3, 5367.0], [53.4, 5367.0], [53.5, 5370.0], [53.6, 5370.0], [53.7, 5373.0], [53.8, 5374.0], [53.9, 5374.0], [54.0, 5376.0], [54.1, 5377.0], [54.2, 5378.0], [54.3, 5379.0], [54.4, 5379.0], [54.5, 5380.0], [54.6, 5380.0], [54.7, 5381.0], [54.8, 5381.0], [54.9, 5382.0], [55.0, 5385.0], [55.1, 5386.0], [55.2, 5388.0], [55.3, 5388.0], [55.4, 5388.0], [55.5, 5388.0], [55.6, 5389.0], [55.7, 5389.0], [55.8, 5391.0], [55.9, 5392.0], [56.0, 5393.0], [56.1, 5395.0], [56.2, 5395.0], [56.3, 5396.0], [56.4, 5397.0], [56.5, 5398.0], [56.6, 5399.0], [56.7, 5400.0], [56.8, 5401.0], [56.9, 5404.0], [57.0, 5404.0], [57.1, 5406.0], [57.2, 5407.0], [57.3, 5407.0], [57.4, 5408.0], [57.5, 5409.0], [57.6, 5412.0], [57.7, 5413.0], [57.8, 5414.0], [57.9, 5415.0], [58.0, 5416.0], [58.1, 5417.0], [58.2, 5418.0], [58.3, 5419.0], [58.4, 5419.0], [58.5, 5420.0], [58.6, 5421.0], [58.7, 5422.0], [58.8, 5425.0], [58.9, 5425.0], [59.0, 5427.0], [59.1, 5427.0], [59.2, 5431.0], [59.3, 5431.0], [59.4, 5433.0], [59.5, 5434.0], [59.6, 5435.0], [59.7, 5436.0], [59.8, 5440.0], [59.9, 5440.0], [60.0, 5442.0], [60.1, 5445.0], [60.2, 5445.0], [60.3, 5446.0], [60.4, 5449.0], [60.5, 5449.0], [60.6, 5449.0], [60.7, 5453.0], [60.8, 5453.0], [60.9, 5455.0], [61.0, 5457.0], [61.1, 5459.0], [61.2, 5460.0], [61.3, 5461.0], [61.4, 5462.0], [61.5, 5462.0], [61.6, 5463.0], [61.7, 5463.0], [61.8, 5464.0], [61.9, 5465.0], [62.0, 5465.0], [62.1, 5466.0], [62.2, 5466.0], [62.3, 5468.0], [62.4, 5468.0], [62.5, 5468.0], [62.6, 5469.0], [62.7, 5470.0], [62.8, 5470.0], [62.9, 5470.0], [63.0, 5473.0], [63.1, 5475.0], [63.2, 5476.0], [63.3, 5478.0], [63.4, 5482.0], [63.5, 5483.0], [63.6, 5484.0], [63.7, 5486.0], [63.8, 5486.0], [63.9, 5488.0], [64.0, 5490.0], [64.1, 5490.0], [64.2, 5491.0], [64.3, 5494.0], [64.4, 5495.0], [64.5, 5496.0], [64.6, 5496.0], [64.7, 5498.0], [64.8, 5498.0], [64.9, 5499.0], [65.0, 5499.0], [65.1, 5500.0], [65.2, 5501.0], [65.3, 5503.0], [65.4, 5503.0], [65.5, 5506.0], [65.6, 5506.0], [65.7, 5507.0], [65.8, 5507.0], [65.9, 5509.0], [66.0, 5512.0], [66.1, 5513.0], [66.2, 5514.0], [66.3, 5517.0], [66.4, 5517.0], [66.5, 5519.0], [66.6, 5519.0], [66.7, 5521.0], [66.8, 5521.0], [66.9, 5524.0], [67.0, 5524.0], [67.1, 5526.0], [67.2, 5529.0], [67.3, 5532.0], [67.4, 5533.0], [67.5, 5535.0], [67.6, 5536.0], [67.7, 5536.0], [67.8, 5538.0], [67.9, 5539.0], [68.0, 5539.0], [68.1, 5543.0], [68.2, 5543.0], [68.3, 5544.0], [68.4, 5546.0], [68.5, 5547.0], [68.6, 5548.0], [68.7, 5548.0], [68.8, 5550.0], [68.9, 5554.0], [69.0, 5555.0], [69.1, 5555.0], [69.2, 5557.0], [69.3, 5557.0], [69.4, 5561.0], [69.5, 5562.0], [69.6, 5562.0], [69.7, 5564.0], [69.8, 5566.0], [69.9, 5568.0], [70.0, 5569.0], [70.1, 5570.0], [70.2, 5571.0], [70.3, 5573.0], [70.4, 5575.0], [70.5, 5575.0], [70.6, 5576.0], [70.7, 5578.0], [70.8, 5580.0], [70.9, 5580.0], [71.0, 5580.0], [71.1, 5585.0], [71.2, 5585.0], [71.3, 5588.0], [71.4, 5590.0], [71.5, 5591.0], [71.6, 5591.0], [71.7, 5592.0], [71.8, 5594.0], [71.9, 5594.0], [72.0, 5597.0], [72.1, 5597.0], [72.2, 5598.0], [72.3, 5600.0], [72.4, 5602.0], [72.5, 5603.0], [72.6, 5604.0], [72.7, 5605.0], [72.8, 5606.0], [72.9, 5606.0], [73.0, 5607.0], [73.1, 5608.0], [73.2, 5609.0], [73.3, 5612.0], [73.4, 5613.0], [73.5, 5613.0], [73.6, 5614.0], [73.7, 5616.0], [73.8, 5617.0], [73.9, 5620.0], [74.0, 5622.0], [74.1, 5623.0], [74.2, 5623.0], [74.3, 5625.0], [74.4, 5627.0], [74.5, 5628.0], [74.6, 5629.0], [74.7, 5630.0], [74.8, 5630.0], [74.9, 5630.0], [75.0, 5633.0], [75.1, 5637.0], [75.2, 5639.0], [75.3, 5641.0], [75.4, 5643.0], [75.5, 5644.0], [75.6, 5645.0], [75.7, 5646.0], [75.8, 5646.0], [75.9, 5648.0], [76.0, 5651.0], [76.1, 5652.0], [76.2, 5655.0], [76.3, 5657.0], [76.4, 5657.0], [76.5, 5657.0], [76.6, 5659.0], [76.7, 5659.0], [76.8, 5660.0], [76.9, 5661.0], [77.0, 5662.0], [77.1, 5663.0], [77.2, 5664.0], [77.3, 5665.0], [77.4, 5666.0], [77.5, 5667.0], [77.6, 5668.0], [77.7, 5669.0], [77.8, 5671.0], [77.9, 5675.0], [78.0, 5675.0], [78.1, 5676.0], [78.2, 5677.0], [78.3, 5677.0], [78.4, 5680.0], [78.5, 5682.0], [78.6, 5683.0], [78.7, 5683.0], [78.8, 5684.0], [78.9, 5685.0], [79.0, 5686.0], [79.1, 5689.0], [79.2, 5689.0], [79.3, 5689.0], [79.4, 5691.0], [79.5, 5692.0], [79.6, 5693.0], [79.7, 5695.0], [79.8, 5696.0], [79.9, 5698.0], [80.0, 5699.0], [80.1, 5700.0], [80.2, 5701.0], [80.3, 5701.0], [80.4, 5702.0], [80.5, 5704.0], [80.6, 5706.0], [80.7, 5707.0], [80.8, 5708.0], [80.9, 5709.0], [81.0, 5710.0], [81.1, 5711.0], [81.2, 5711.0], [81.3, 5715.0], [81.4, 5720.0], [81.5, 5722.0], [81.6, 5722.0], [81.7, 5724.0], [81.8, 5725.0], [81.9, 5728.0], [82.0, 5728.0], [82.1, 5728.0], [82.2, 5729.0], [82.3, 5729.0], [82.4, 5731.0], [82.5, 5733.0], [82.6, 5734.0], [82.7, 5735.0], [82.8, 5736.0], [82.9, 5736.0], [83.0, 5737.0], [83.1, 5739.0], [83.2, 5739.0], [83.3, 5742.0], [83.4, 5743.0], [83.5, 5743.0], [83.6, 5744.0], [83.7, 5744.0], [83.8, 5745.0], [83.9, 5747.0], [84.0, 5749.0], [84.1, 5751.0], [84.2, 5751.0], [84.3, 5751.0], [84.4, 5752.0], [84.5, 5753.0], [84.6, 5755.0], [84.7, 5757.0], [84.8, 5758.0], [84.9, 5759.0], [85.0, 5760.0], [85.1, 5762.0], [85.2, 5763.0], [85.3, 5763.0], [85.4, 5768.0], [85.5, 5769.0], [85.6, 5771.0], [85.7, 5771.0], [85.8, 5771.0], [85.9, 5773.0], [86.0, 5774.0], [86.1, 5774.0], [86.2, 5779.0], [86.3, 5783.0], [86.4, 5784.0], [86.5, 5784.0], [86.6, 5785.0], [86.7, 5788.0], [86.8, 5788.0], [86.9, 5790.0], [87.0, 5791.0], [87.1, 5794.0], [87.2, 5795.0], [87.3, 5797.0], [87.4, 5797.0], [87.5, 5802.0], [87.6, 5805.0], [87.7, 5805.0], [87.8, 5806.0], [87.9, 5808.0], [88.0, 5809.0], [88.1, 5809.0], [88.2, 5813.0], [88.3, 5814.0], [88.4, 5815.0], [88.5, 5818.0], [88.6, 5821.0], [88.7, 5821.0], [88.8, 5824.0], [88.9, 5827.0], [89.0, 5827.0], [89.1, 5829.0], [89.2, 5830.0], [89.3, 5832.0], [89.4, 5832.0], [89.5, 5834.0], [89.6, 5835.0], [89.7, 5836.0], [89.8, 5837.0], [89.9, 5839.0], [90.0, 5840.0], [90.1, 5844.0], [90.2, 5844.0], [90.3, 5846.0], [90.4, 5848.0], [90.5, 5848.0], [90.6, 5850.0], [90.7, 5854.0], [90.8, 5855.0], [90.9, 5857.0], [91.0, 5860.0], [91.1, 5861.0], [91.2, 5865.0], [91.3, 5868.0], [91.4, 5870.0], [91.5, 5871.0], [91.6, 5872.0], [91.7, 5873.0], [91.8, 5875.0], [91.9, 5877.0], [92.0, 5877.0], [92.1, 5881.0], [92.2, 5881.0], [92.3, 5883.0], [92.4, 5885.0], [92.5, 5888.0], [92.6, 5888.0], [92.7, 5892.0], [92.8, 5893.0], [92.9, 5895.0], [93.0, 5899.0], [93.1, 5900.0], [93.2, 5906.0], [93.3, 5907.0], [93.4, 5908.0], [93.5, 5912.0], [93.6, 5913.0], [93.7, 5916.0], [93.8, 5928.0], [93.9, 5931.0], [94.0, 5943.0], [94.1, 5947.0], [94.2, 5951.0], [94.3, 5955.0], [94.4, 5955.0], [94.5, 5958.0], [94.6, 5971.0], [94.7, 5975.0], [94.8, 5978.0], [94.9, 5980.0], [95.0, 5986.0], [95.1, 5996.0], [95.2, 6001.0], [95.3, 6012.0], [95.4, 6033.0], [95.5, 6036.0], [95.6, 6059.0], [95.7, 6070.0], [95.8, 6077.0], [95.9, 6085.0], [96.0, 6088.0], [96.1, 6105.0], [96.2, 6106.0], [96.3, 6137.0], [96.4, 6156.0], [96.5, 6157.0], [96.6, 6167.0], [96.7, 6185.0], [96.8, 6187.0], [96.9, 6206.0], [97.0, 6222.0], [97.1, 6223.0], [97.2, 6339.0], [97.3, 6378.0], [97.4, 6460.0], [97.5, 6464.0], [97.6, 6562.0], [97.7, 6749.0], [97.8, 6767.0], [97.9, 6948.0], [98.0, 7146.0], [98.1, 7149.0], [98.2, 7223.0], [98.3, 7257.0], [98.4, 7259.0], [98.5, 7317.0], [98.6, 7326.0], [98.7, 7358.0], [98.8, 7358.0], [98.9, 7403.0], [99.0, 7440.0], [99.1, 7455.0], [99.2, 7492.0], [99.3, 7548.0], [99.4, 7551.0], [99.5, 7557.0], [99.6, 7623.0], [99.7, 7636.0], [99.8, 7838.0], [99.9, 7958.0]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[0.0, 970.0], [0.1, 992.0], [0.2, 1034.0], [0.3, 1058.0], [0.4, 1100.0], [0.5, 1103.0], [0.6, 1114.0], [0.7, 1138.0], [0.8, 1149.0], [0.9, 1168.0], [1.0, 1186.0], [1.1, 1290.0], [1.2, 1445.0], [1.3, 1590.0], [1.4, 1742.0], [1.5, 1826.0], [1.6, 1959.0], [1.7, 2013.0], [1.8, 2398.0], [1.9, 2664.0], [2.0, 2795.0], [2.1, 2806.0], [2.2, 2814.0], [2.3, 2852.0], [2.4, 2860.0], [2.5, 2865.0], [2.6, 2870.0], [2.7, 2881.0], [2.8, 2884.0], [2.9, 2891.0], [3.0, 2894.0], [3.1, 2897.0], [3.2, 2899.0], [3.3, 2903.0], [3.4, 2903.0], [3.5, 2904.0], [3.6, 2906.0], [3.7, 2910.0], [3.8, 2916.0], [3.9, 2922.0], [4.0, 2927.0], [4.1, 2929.0], [4.2, 2931.0], [4.3, 2932.0], [4.4, 2935.0], [4.5, 2942.0], [4.6, 2943.0], [4.7, 2944.0], [4.8, 2946.0], [4.9, 2947.0], [5.0, 2949.0], [5.1, 2951.0], [5.2, 2951.0], [5.3, 2963.0], [5.4, 2968.0], [5.5, 2970.0], [5.6, 2970.0], [5.7, 2971.0], [5.8, 2972.0], [5.9, 2973.0], [6.0, 2976.0], [6.1, 2979.0], [6.2, 2981.0], [6.3, 2981.0], [6.4, 2985.0], [6.5, 2986.0], [6.6, 2990.0], [6.7, 2993.0], [6.8, 2993.0], [6.9, 2995.0], [7.0, 2996.0], [7.1, 2998.0], [7.2, 3000.0], [7.3, 3003.0], [7.4, 3005.0], [7.5, 3006.0], [7.6, 3008.0], [7.7, 3008.0], [7.8, 3011.0], [7.9, 3013.0], [8.0, 3014.0], [8.1, 3016.0], [8.2, 3018.0], [8.3, 3021.0], [8.4, 3025.0], [8.5, 3029.0], [8.6, 3029.0], [8.7, 3030.0], [8.8, 3032.0], [8.9, 3034.0], [9.0, 3035.0], [9.1, 3039.0], [9.2, 3040.0], [9.3, 3042.0], [9.4, 3042.0], [9.5, 3043.0], [9.6, 3044.0], [9.7, 3047.0], [9.8, 3048.0], [9.9, 3048.0], [10.0, 3049.0], [10.1, 3049.0], [10.2, 3052.0], [10.3, 3053.0], [10.4, 3055.0], [10.5, 3057.0], [10.6, 3059.0], [10.7, 3062.0], [10.8, 3062.0], [10.9, 3063.0], [11.0, 3064.0], [11.1, 3065.0], [11.2, 3066.0], [11.3, 3066.0], [11.4, 3067.0], [11.5, 3068.0], [11.6, 3069.0], [11.7, 3070.0], [11.8, 3071.0], [11.9, 3072.0], [12.0, 3072.0], [12.1, 3074.0], [12.2, 3076.0], [12.3, 3077.0], [12.4, 3079.0], [12.5, 3081.0], [12.6, 3084.0], [12.7, 3085.0], [12.8, 3086.0], [12.9, 3087.0], [13.0, 3089.0], [13.1, 3091.0], [13.2, 3094.0], [13.3, 3096.0], [13.4, 3100.0], [13.5, 3100.0], [13.6, 3103.0], [13.7, 3105.0], [13.8, 3105.0], [13.9, 3105.0], [14.0, 3106.0], [14.1, 3106.0], [14.2, 3107.0], [14.3, 3109.0], [14.4, 3111.0], [14.5, 3112.0], [14.6, 3113.0], [14.7, 3113.0], [14.8, 3115.0], [14.9, 3117.0], [15.0, 3118.0], [15.1, 3119.0], [15.2, 3120.0], [15.3, 3120.0], [15.4, 3122.0], [15.5, 3123.0], [15.6, 3123.0], [15.7, 3124.0], [15.8, 3126.0], [15.9, 3128.0], [16.0, 3129.0], [16.1, 3130.0], [16.2, 3131.0], [16.3, 3132.0], [16.4, 3135.0], [16.5, 3136.0], [16.6, 3137.0], [16.7, 3137.0], [16.8, 3141.0], [16.9, 3142.0], [17.0, 3144.0], [17.1, 3148.0], [17.2, 3149.0], [17.3, 3149.0], [17.4, 3150.0], [17.5, 3151.0], [17.6, 3152.0], [17.7, 3153.0], [17.8, 3153.0], [17.9, 3153.0], [18.0, 3154.0], [18.1, 3154.0], [18.2, 3157.0], [18.3, 3158.0], [18.4, 3159.0], [18.5, 3160.0], [18.6, 3161.0], [18.7, 3161.0], [18.8, 3166.0], [18.9, 3169.0], [19.0, 3169.0], [19.1, 3172.0], [19.2, 3175.0], [19.3, 3175.0], [19.4, 3177.0], [19.5, 3178.0], [19.6, 3178.0], [19.7, 3180.0], [19.8, 3181.0], [19.9, 3182.0], [20.0, 3185.0], [20.1, 3185.0], [20.2, 3189.0], [20.3, 3196.0], [20.4, 3196.0], [20.5, 3196.0], [20.6, 3197.0], [20.7, 3200.0], [20.8, 3201.0], [20.9, 3202.0], [21.0, 3204.0], [21.1, 3207.0], [21.2, 3207.0], [21.3, 3208.0], [21.4, 3208.0], [21.5, 3210.0], [21.6, 3212.0], [21.7, 3213.0], [21.8, 3213.0], [21.9, 3214.0], [22.0, 3215.0], [22.1, 3217.0], [22.2, 3221.0], [22.3, 3223.0], [22.4, 3224.0], [22.5, 3224.0], [22.6, 3225.0], [22.7, 3225.0], [22.8, 3229.0], [22.9, 3232.0], [23.0, 3233.0], [23.1, 3235.0], [23.2, 3238.0], [23.3, 3238.0], [23.4, 3238.0], [23.5, 3239.0], [23.6, 3239.0], [23.7, 3241.0], [23.8, 3242.0], [23.9, 3242.0], [24.0, 3245.0], [24.1, 3247.0], [24.2, 3248.0], [24.3, 3251.0], [24.4, 3251.0], [24.5, 3251.0], [24.6, 3252.0], [24.7, 3252.0], [24.8, 3253.0], [24.9, 3255.0], [25.0, 3257.0], [25.1, 3260.0], [25.2, 3263.0], [25.3, 3265.0], [25.4, 3265.0], [25.5, 3268.0], [25.6, 3273.0], [25.7, 3273.0], [25.8, 3275.0], [25.9, 3277.0], [26.0, 3277.0], [26.1, 3278.0], [26.2, 3280.0], [26.3, 3281.0], [26.4, 3281.0], [26.5, 3283.0], [26.6, 3284.0], [26.7, 3284.0], [26.8, 3285.0], [26.9, 3288.0], [27.0, 3288.0], [27.1, 3289.0], [27.2, 3291.0], [27.3, 3292.0], [27.4, 3292.0], [27.5, 3296.0], [27.6, 3297.0], [27.7, 3297.0], [27.8, 3301.0], [27.9, 3301.0], [28.0, 3302.0], [28.1, 3303.0], [28.2, 3303.0], [28.3, 3304.0], [28.4, 3307.0], [28.5, 3308.0], [28.6, 3311.0], [28.7, 3312.0], [28.8, 3312.0], [28.9, 3314.0], [29.0, 3316.0], [29.1, 3316.0], [29.2, 3317.0], [29.3, 3318.0], [29.4, 3319.0], [29.5, 3321.0], [29.6, 3324.0], [29.7, 3324.0], [29.8, 3324.0], [29.9, 3326.0], [30.0, 3327.0], [30.1, 3327.0], [30.2, 3329.0], [30.3, 3329.0], [30.4, 3333.0], [30.5, 3335.0], [30.6, 3336.0], [30.7, 3336.0], [30.8, 3337.0], [30.9, 3338.0], [31.0, 3348.0], [31.1, 3350.0], [31.2, 3350.0], [31.3, 3352.0], [31.4, 3354.0], [31.5, 3355.0], [31.6, 3359.0], [31.7, 3359.0], [31.8, 3360.0], [31.9, 3361.0], [32.0, 3361.0], [32.1, 3363.0], [32.2, 3363.0], [32.3, 3365.0], [32.4, 3368.0], [32.5, 3369.0], [32.6, 3372.0], [32.7, 3373.0], [32.8, 3374.0], [32.9, 3376.0], [33.0, 3376.0], [33.1, 3376.0], [33.2, 3378.0], [33.3, 3380.0], [33.4, 3380.0], [33.5, 3382.0], [33.6, 3382.0], [33.7, 3386.0], [33.8, 3388.0], [33.9, 3389.0], [34.0, 3390.0], [34.1, 3394.0], [34.2, 3395.0], [34.3, 3396.0], [34.4, 3397.0], [34.5, 3399.0], [34.6, 3400.0], [34.7, 3402.0], [34.8, 3404.0], [34.9, 3407.0], [35.0, 3407.0], [35.1, 3411.0], [35.2, 3411.0], [35.3, 3412.0], [35.4, 3413.0], [35.5, 3413.0], [35.6, 3415.0], [35.7, 3416.0], [35.8, 3418.0], [35.9, 3419.0], [36.0, 3421.0], [36.1, 3422.0], [36.2, 3422.0], [36.3, 3423.0], [36.4, 3423.0], [36.5, 3423.0], [36.6, 3424.0], [36.7, 3424.0], [36.8, 3425.0], [36.9, 3427.0], [37.0, 3429.0], [37.1, 3430.0], [37.2, 3433.0], [37.3, 3434.0], [37.4, 3434.0], [37.5, 3435.0], [37.6, 3436.0], [37.7, 3436.0], [37.8, 3436.0], [37.9, 3437.0], [38.0, 3437.0], [38.1, 3438.0], [38.2, 3438.0], [38.3, 3439.0], [38.4, 3441.0], [38.5, 3443.0], [38.6, 3445.0], [38.7, 3446.0], [38.8, 3451.0], [38.9, 3451.0], [39.0, 3453.0], [39.1, 3455.0], [39.2, 3455.0], [39.3, 3455.0], [39.4, 3456.0], [39.5, 3456.0], [39.6, 3457.0], [39.7, 3457.0], [39.8, 3457.0], [39.9, 3459.0], [40.0, 3460.0], [40.1, 3462.0], [40.2, 3466.0], [40.3, 3467.0], [40.4, 3468.0], [40.5, 3468.0], [40.6, 3469.0], [40.7, 3470.0], [40.8, 3470.0], [40.9, 3471.0], [41.0, 3471.0], [41.1, 3473.0], [41.2, 3474.0], [41.3, 3475.0], [41.4, 3476.0], [41.5, 3477.0], [41.6, 3477.0], [41.7, 3478.0], [41.8, 3481.0], [41.9, 3484.0], [42.0, 3485.0], [42.1, 3486.0], [42.2, 3487.0], [42.3, 3488.0], [42.4, 3489.0], [42.5, 3489.0], [42.6, 3490.0], [42.7, 3491.0], [42.8, 3492.0], [42.9, 3492.0], [43.0, 3493.0], [43.1, 3496.0], [43.2, 3496.0], [43.3, 3497.0], [43.4, 3497.0], [43.5, 3498.0], [43.6, 3498.0], [43.7, 3499.0], [43.8, 3499.0], [43.9, 3501.0], [44.0, 3503.0], [44.1, 3504.0], [44.2, 3505.0], [44.3, 3506.0], [44.4, 3506.0], [44.5, 3509.0], [44.6, 3511.0], [44.7, 3511.0], [44.8, 3513.0], [44.9, 3514.0], [45.0, 3515.0], [45.1, 3515.0], [45.2, 3515.0], [45.3, 3515.0], [45.4, 3516.0], [45.5, 3517.0], [45.6, 3519.0], [45.7, 3519.0], [45.8, 3519.0], [45.9, 3519.0], [46.0, 3520.0], [46.1, 3523.0], [46.2, 3523.0], [46.3, 3525.0], [46.4, 3526.0], [46.5, 3526.0], [46.6, 3527.0], [46.7, 3532.0], [46.8, 3534.0], [46.9, 3535.0], [47.0, 3536.0], [47.1, 3537.0], [47.2, 3538.0], [47.3, 3542.0], [47.4, 3543.0], [47.5, 3543.0], [47.6, 3544.0], [47.7, 3545.0], [47.8, 3545.0], [47.9, 3546.0], [48.0, 3547.0], [48.1, 3547.0], [48.2, 3548.0], [48.3, 3549.0], [48.4, 3549.0], [48.5, 3550.0], [48.6, 3553.0], [48.7, 3553.0], [48.8, 3554.0], [48.9, 3557.0], [49.0, 3557.0], [49.1, 3558.0], [49.2, 3559.0], [49.3, 3560.0], [49.4, 3560.0], [49.5, 3564.0], [49.6, 3564.0], [49.7, 3565.0], [49.8, 3565.0], [49.9, 3565.0], [50.0, 3567.0], [50.1, 3569.0], [50.2, 3570.0], [50.3, 3571.0], [50.4, 3571.0], [50.5, 3572.0], [50.6, 3574.0], [50.7, 3574.0], [50.8, 3576.0], [50.9, 3576.0], [51.0, 3577.0], [51.1, 3578.0], [51.2, 3579.0], [51.3, 3579.0], [51.4, 3580.0], [51.5, 3583.0], [51.6, 3585.0], [51.7, 3589.0], [51.8, 3589.0], [51.9, 3589.0], [52.0, 3590.0], [52.1, 3591.0], [52.2, 3593.0], [52.3, 3593.0], [52.4, 3595.0], [52.5, 3596.0], [52.6, 3597.0], [52.7, 3597.0], [52.8, 3597.0], [52.9, 3599.0], [53.0, 3601.0], [53.1, 3602.0], [53.2, 3603.0], [53.3, 3606.0], [53.4, 3607.0], [53.5, 3608.0], [53.6, 3609.0], [53.7, 3609.0], [53.8, 3610.0], [53.9, 3611.0], [54.0, 3613.0], [54.1, 3614.0], [54.2, 3614.0], [54.3, 3614.0], [54.4, 3618.0], [54.5, 3619.0], [54.6, 3621.0], [54.7, 3621.0], [54.8, 3623.0], [54.9, 3624.0], [55.0, 3625.0], [55.1, 3626.0], [55.2, 3627.0], [55.3, 3629.0], [55.4, 3630.0], [55.5, 3631.0], [55.6, 3634.0], [55.7, 3634.0], [55.8, 3635.0], [55.9, 3636.0], [56.0, 3636.0], [56.1, 3637.0], [56.2, 3638.0], [56.3, 3639.0], [56.4, 3640.0], [56.5, 3642.0], [56.6, 3642.0], [56.7, 3644.0], [56.8, 3645.0], [56.9, 3646.0], [57.0, 3647.0], [57.1, 3650.0], [57.2, 3650.0], [57.3, 3651.0], [57.4, 3654.0], [57.5, 3654.0], [57.6, 3655.0], [57.7, 3656.0], [57.8, 3657.0], [57.9, 3658.0], [58.0, 3659.0], [58.1, 3660.0], [58.2, 3660.0], [58.3, 3664.0], [58.4, 3665.0], [58.5, 3666.0], [58.6, 3671.0], [58.7, 3675.0], [58.8, 3677.0], [58.9, 3680.0], [59.0, 3682.0], [59.1, 3683.0], [59.2, 3683.0], [59.3, 3685.0], [59.4, 3692.0], [59.5, 3693.0], [59.6, 3694.0], [59.7, 3694.0], [59.8, 3700.0], [59.9, 3700.0], [60.0, 3703.0], [60.1, 3706.0], [60.2, 3707.0], [60.3, 3708.0], [60.4, 3708.0], [60.5, 3709.0], [60.6, 3710.0], [60.7, 3712.0], [60.8, 3715.0], [60.9, 3716.0], [61.0, 3720.0], [61.1, 3723.0], [61.2, 3726.0], [61.3, 3729.0], [61.4, 3730.0], [61.5, 3731.0], [61.6, 3733.0], [61.7, 3734.0], [61.8, 3735.0], [61.9, 3737.0], [62.0, 3738.0], [62.1, 3738.0], [62.2, 3741.0], [62.3, 3743.0], [62.4, 3744.0], [62.5, 3744.0], [62.6, 3746.0], [62.7, 3748.0], [62.8, 3748.0], [62.9, 3750.0], [63.0, 3750.0], [63.1, 3755.0], [63.2, 3758.0], [63.3, 3763.0], [63.4, 3764.0], [63.5, 3767.0], [63.6, 3769.0], [63.7, 3771.0], [63.8, 3772.0], [63.9, 3774.0], [64.0, 3774.0], [64.1, 3775.0], [64.2, 3778.0], [64.3, 3780.0], [64.4, 3780.0], [64.5, 3782.0], [64.6, 3784.0], [64.7, 3787.0], [64.8, 3788.0], [64.9, 3790.0], [65.0, 3791.0], [65.1, 3795.0], [65.2, 3797.0], [65.3, 3799.0], [65.4, 3802.0], [65.5, 3802.0], [65.6, 3805.0], [65.7, 3806.0], [65.8, 3809.0], [65.9, 3811.0], [66.0, 3812.0], [66.1, 3816.0], [66.2, 3819.0], [66.3, 3820.0], [66.4, 3820.0], [66.5, 3824.0], [66.6, 3825.0], [66.7, 3826.0], [66.8, 3834.0], [66.9, 3835.0], [67.0, 3836.0], [67.1, 3837.0], [67.2, 3841.0], [67.3, 3843.0], [67.4, 3845.0], [67.5, 3850.0], [67.6, 3852.0], [67.7, 3853.0], [67.8, 3854.0], [67.9, 3854.0], [68.0, 3856.0], [68.1, 3858.0], [68.2, 3860.0], [68.3, 3861.0], [68.4, 3864.0], [68.5, 3867.0], [68.6, 3873.0], [68.7, 3875.0], [68.8, 3887.0], [68.9, 3887.0], [69.0, 3897.0], [69.1, 3900.0], [69.2, 3901.0], [69.3, 3904.0], [69.4, 3906.0], [69.5, 3915.0], [69.6, 3920.0], [69.7, 3921.0], [69.8, 3921.0], [69.9, 3923.0], [70.0, 3928.0], [70.1, 3928.0], [70.2, 3930.0], [70.3, 3934.0], [70.4, 3943.0], [70.5, 3943.0], [70.6, 3946.0], [70.7, 3947.0], [70.8, 3949.0], [70.9, 3953.0], [71.0, 3958.0], [71.1, 3959.0], [71.2, 3962.0], [71.3, 3965.0], [71.4, 3971.0], [71.5, 3984.0], [71.6, 3988.0], [71.7, 3999.0], [71.8, 4000.0], [71.9, 4002.0], [72.0, 4005.0], [72.1, 4013.0], [72.2, 4013.0], [72.3, 4016.0], [72.4, 4026.0], [72.5, 4031.0], [72.6, 4032.0], [72.7, 4033.0], [72.8, 4035.0], [72.9, 4038.0], [73.0, 4040.0], [73.1, 4041.0], [73.2, 4043.0], [73.3, 4046.0], [73.4, 4049.0], [73.5, 4052.0], [73.6, 4055.0], [73.7, 4062.0], [73.8, 4064.0], [73.9, 4069.0], [74.0, 4080.0], [74.1, 4081.0], [74.2, 4082.0], [74.3, 4089.0], [74.4, 4091.0], [74.5, 4098.0], [74.6, 4106.0], [74.7, 4109.0], [74.8, 4110.0], [74.9, 4113.0], [75.0, 4116.0], [75.1, 4125.0], [75.2, 4128.0], [75.3, 4134.0], [75.4, 4135.0], [75.5, 4137.0], [75.6, 4137.0], [75.7, 4141.0], [75.8, 4155.0], [75.9, 4160.0], [76.0, 4164.0], [76.1, 4173.0], [76.2, 4178.0], [76.3, 4181.0], [76.4, 4183.0], [76.5, 4185.0], [76.6, 4187.0], [76.7, 4190.0], [76.8, 4191.0], [76.9, 4194.0], [77.0, 4195.0], [77.1, 4202.0], [77.2, 4205.0], [77.3, 4213.0], [77.4, 4218.0], [77.5, 4221.0], [77.6, 4225.0], [77.7, 4227.0], [77.8, 4237.0], [77.9, 4257.0], [78.0, 4260.0], [78.1, 4260.0], [78.2, 4267.0], [78.3, 4272.0], [78.4, 4280.0], [78.5, 4281.0], [78.6, 4281.0], [78.7, 4288.0], [78.8, 4292.0], [78.9, 4298.0], [79.0, 4308.0], [79.1, 4312.0], [79.2, 4317.0], [79.3, 4336.0], [79.4, 4338.0], [79.5, 4340.0], [79.6, 4341.0], [79.7, 4356.0], [79.8, 4359.0], [79.9, 4361.0], [80.0, 4364.0], [80.1, 4368.0], [80.2, 4370.0], [80.3, 4379.0], [80.4, 4382.0], [80.5, 4383.0], [80.6, 4400.0], [80.7, 4411.0], [80.8, 4415.0], [80.9, 4425.0], [81.0, 4436.0], [81.1, 4443.0], [81.2, 4446.0], [81.3, 4449.0], [81.4, 4462.0], [81.5, 4466.0], [81.6, 4470.0], [81.7, 4470.0], [81.8, 4475.0], [81.9, 4483.0], [82.0, 4486.0], [82.1, 4487.0], [82.2, 4490.0], [82.3, 4506.0], [82.4, 4510.0], [82.5, 4522.0], [82.6, 4534.0], [82.7, 4539.0], [82.8, 4541.0], [82.9, 4544.0], [83.0, 4552.0], [83.1, 4560.0], [83.2, 4563.0], [83.3, 4576.0], [83.4, 4588.0], [83.5, 4589.0], [83.6, 4593.0], [83.7, 4597.0], [83.8, 4602.0], [83.9, 4609.0], [84.0, 4643.0], [84.1, 4645.0], [84.2, 4648.0], [84.3, 4654.0], [84.4, 4658.0], [84.5, 4664.0], [84.6, 4664.0], [84.7, 4672.0], [84.8, 4682.0], [84.9, 4684.0], [85.0, 4703.0], [85.1, 4706.0], [85.2, 4711.0], [85.3, 4718.0], [85.4, 4736.0], [85.5, 4744.0], [85.6, 4754.0], [85.7, 4755.0], [85.8, 4765.0], [85.9, 4775.0], [86.0, 4792.0], [86.1, 4809.0], [86.2, 4824.0], [86.3, 4824.0], [86.4, 4831.0], [86.5, 4858.0], [86.6, 4867.0], [86.7, 4876.0], [86.8, 4882.0], [86.9, 4886.0], [87.0, 4889.0], [87.1, 4896.0], [87.2, 4905.0], [87.3, 4913.0], [87.4, 4920.0], [87.5, 4931.0], [87.6, 4941.0], [87.7, 4945.0], [87.8, 4952.0], [87.9, 4958.0], [88.0, 4961.0], [88.1, 4965.0], [88.2, 4976.0], [88.3, 4983.0], [88.4, 4987.0], [88.5, 5011.0], [88.6, 5015.0], [88.7, 5017.0], [88.8, 5022.0], [88.9, 5026.0], [89.0, 5031.0], [89.1, 5034.0], [89.2, 5036.0], [89.3, 5041.0], [89.4, 5053.0], [89.5, 5054.0], [89.6, 5072.0], [89.7, 5078.0], [89.8, 5081.0], [89.9, 5092.0], [90.0, 5092.0], [90.1, 5106.0], [90.2, 5113.0], [90.3, 5114.0], [90.4, 5116.0], [90.5, 5121.0], [90.6, 5129.0], [90.7, 5137.0], [90.8, 5147.0], [90.9, 5147.0], [91.0, 5154.0], [91.1, 5166.0], [91.2, 5171.0], [91.3, 5182.0], [91.4, 5184.0], [91.5, 5188.0], [91.6, 5193.0], [91.7, 5196.0], [91.8, 5200.0], [91.9, 5205.0], [92.0, 5212.0], [92.1, 5213.0], [92.2, 5214.0], [92.3, 5216.0], [92.4, 5218.0], [92.5, 5225.0], [92.6, 5232.0], [92.7, 5235.0], [92.8, 5243.0], [92.9, 5246.0], [93.0, 5251.0], [93.1, 5256.0], [93.2, 5266.0], [93.3, 5268.0], [93.4, 5268.0], [93.5, 5269.0], [93.6, 5270.0], [93.7, 5287.0], [93.8, 5291.0], [93.9, 5294.0], [94.0, 5295.0], [94.1, 5306.0], [94.2, 5307.0], [94.3, 5307.0], [94.4, 5316.0], [94.5, 5318.0], [94.6, 5321.0], [94.7, 5329.0], [94.8, 5338.0], [94.9, 5344.0], [95.0, 5346.0], [95.1, 5349.0], [95.2, 5356.0], [95.3, 5358.0], [95.4, 5367.0], [95.5, 5367.0], [95.6, 5371.0], [95.7, 5381.0], [95.8, 5382.0], [95.9, 5401.0], [96.0, 5404.0], [96.1, 5409.0], [96.2, 5422.0], [96.3, 5427.0], [96.4, 5428.0], [96.5, 5430.0], [96.6, 5432.0], [96.7, 5432.0], [96.8, 5440.0], [96.9, 5453.0], [97.0, 5453.0], [97.1, 5456.0], [97.2, 5458.0], [97.3, 5462.0], [97.4, 5468.0], [97.5, 5476.0], [97.6, 5476.0], [97.7, 5498.0], [97.8, 5505.0], [97.9, 5509.0], [98.0, 5512.0], [98.1, 5515.0], [98.2, 5517.0], [98.3, 5531.0], [98.4, 5534.0], [98.5, 5537.0], [98.6, 5540.0], [98.7, 5550.0], [98.8, 5576.0], [98.9, 5586.0], [99.0, 5605.0], [99.1, 5608.0], [99.2, 5614.0], [99.3, 5626.0], [99.4, 5631.0], [99.5, 5648.0], [99.6, 5668.0], [99.7, 5690.0], [99.8, 5771.0], [99.9, 5806.0], [100.0, 5811.0]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 346.0, "series": [{"data": [[8200.0, 8.0], [8300.0, 10.0], [8400.0, 22.0], [8500.0, 56.0], [8600.0, 127.0], [8700.0, 240.0], [9200.0, 71.0], [8800.0, 346.0], [8900.0, 286.0], [9000.0, 191.0], [9100.0, 133.0], [9300.0, 53.0], [9400.0, 34.0], [9600.0, 23.0], [9500.0, 30.0], [9700.0, 14.0], [9900.0, 1.0], [10000.0, 1.0], [9800.0, 4.0], [10500.0, 2.0], [10700.0, 1.0], [10900.0, 2.0], [11500.0, 1.0], [11600.0, 1.0], [12500.0, 2.0], [12600.0, 2.0], [13000.0, 1.0], [12900.0, 1.0], [12800.0, 1.0], [3100.0, 2.0], [3300.0, 1.0], [3200.0, 2.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 1.0], [3800.0, 4.0], [3900.0, 1.0], [4000.0, 2.0], [4200.0, 1.0], [7800.0, 1.0], [7700.0, 1.0], [8100.0, 6.0], [8000.0, 1.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[3100.0, 2.0], [3200.0, 5.0], [3300.0, 13.0], [3400.0, 10.0], [3500.0, 17.0], [3600.0, 30.0], [3700.0, 29.0], [3800.0, 27.0], [3900.0, 32.0], [4000.0, 26.0], [4200.0, 22.0], [4100.0, 26.0], [4300.0, 26.0], [4600.0, 38.0], [4500.0, 35.0], [4400.0, 25.0], [4800.0, 45.0], [4700.0, 31.0], [4900.0, 54.0], [5000.0, 73.0], [5100.0, 119.0], [5200.0, 117.0], [5300.0, 156.0], [5400.0, 142.0], [5500.0, 122.0], [5600.0, 131.0], [5800.0, 94.0], [5700.0, 126.0], [6100.0, 12.0], [5900.0, 36.0], [6000.0, 16.0], [6300.0, 5.0], [6200.0, 5.0], [6500.0, 2.0], [6400.0, 2.0], [6700.0, 3.0], [6800.0, 1.0], [6900.0, 1.0], [7100.0, 3.0], [7400.0, 7.0], [7300.0, 7.0], [7200.0, 5.0], [7500.0, 6.0], [7600.0, 2.0], [7800.0, 3.0], [7900.0, 1.0], [8000.0, 1.0]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[900.0, 2.0], [1000.0, 4.0], [1100.0, 11.0], [1200.0, 2.0], [1400.0, 2.0], [1500.0, 1.0], [1600.0, 1.0], [1700.0, 2.0], [1800.0, 1.0], [1900.0, 2.0], [2000.0, 2.0], [2300.0, 1.0], [2600.0, 1.0], [2800.0, 19.0], [2700.0, 3.0], [2900.0, 65.0], [3000.0, 105.0], [3100.0, 122.0], [3200.0, 119.0], [3300.0, 113.0], [3400.0, 155.0], [3500.0, 153.0], [3600.0, 114.0], [3700.0, 93.0], [3800.0, 63.0], [3900.0, 45.0], [4000.0, 46.0], [4200.0, 31.0], [4100.0, 42.0], [4300.0, 28.0], [4400.0, 28.0], [4500.0, 25.0], [4600.0, 21.0], [4700.0, 17.0], [4800.0, 19.0], [4900.0, 22.0], [5000.0, 26.0], [5100.0, 29.0], [5300.0, 30.0], [5200.0, 39.0], [5400.0, 31.0], [5500.0, 21.0], [5600.0, 12.0], [5800.0, 2.0], [5700.0, 3.0]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3393.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 21.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3393.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 46.18973561430794, "minX": 1.60602036E12, "maxY": 50.0, "series": [{"data": [[1.60602066E12, 46.18973561430794], [1.60602048E12, 50.0], [1.60602054E12, 50.0], [1.60602036E12, 50.0], [1.60602042E12, 50.0], [1.6060206E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602066E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3107.0, "minX": 1.0, "maxY": 9076.0, "series": [{"data": [[2.0, 3118.0], [3.0, 3268.0], [4.0, 3256.0], [5.0, 3384.0], [6.0, 7738.0], [7.0, 3613.0], [8.0, 8060.0], [9.0, 3438.0], [10.0, 8213.0], [11.0, 3735.0], [12.0, 3543.0], [13.0, 8375.0], [14.0, 7878.0], [15.0, 8162.0], [16.0, 8679.0], [17.0, 3812.0], [18.0, 3845.0], [19.0, 8141.0], [20.0, 8619.0], [21.0, 8154.0], [22.0, 4003.0], [23.0, 3913.0], [24.0, 8833.0], [25.0, 8962.0], [26.0, 3871.0], [27.0, 8746.0], [28.0, 9076.0], [29.0, 3818.0], [30.0, 8836.0], [31.0, 8865.0], [33.0, 8931.0], [32.0, 3733.0], [35.0, 8761.0], [34.0, 8703.0], [37.0, 4031.0], [36.0, 8751.0], [39.0, 8778.0], [38.0, 8862.0], [41.0, 8698.0], [40.0, 8910.0], [43.0, 8841.0], [42.0, 8748.0], [45.0, 8825.0], [44.0, 4277.0], [47.0, 8677.0], [46.0, 8856.0], [49.0, 8511.0], [48.0, 8712.0], [50.0, 8970.778928136418], [1.0, 3161.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[49.2755765819042, 8907.592548787694]], "isOverall": false, "label": "SELECT Test-Aggregated", "isController": true}, {"data": [[32.0, 3733.0], [2.0, 3118.0], [37.0, 4030.0], [9.0, 3437.0], [44.0, 4277.0], [11.0, 3734.0], [12.0, 3543.0], [3.0, 3268.0], [50.0, 5204.327555289898], [4.0, 3256.0], [1.0, 3161.0], [17.0, 3812.0], [18.0, 3845.0], [5.0, 3384.0], [22.0, 4003.0], [23.0, 3913.0], [26.0, 3871.0], [7.0, 3613.0], [29.0, 3818.0]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[49.646363098758144, 5187.85097575399]], "isOverall": false, "label": "(POST) Admin Login-Aggregated", "isController": false}, {"data": [[33.0, 3376.0], [35.0, 3238.0], [34.0, 3185.0], [36.0, 3208.0], [39.0, 3107.0], [38.0, 3251.0], [41.0, 3201.0], [40.0, 3355.0], [43.0, 3277.0], [42.0, 3327.0], [45.0, 3591.0], [47.0, 3485.0], [46.0, 3536.0], [49.0, 3470.0], [48.0, 3537.0], [50.0, 3765.8580998781963], [6.0, 3208.0], [8.0, 3415.0], [10.0, 3574.0], [13.0, 3614.0], [14.0, 3225.0], [15.0, 3585.0], [16.0, 3693.0], [19.0, 3496.0], [20.0, 3580.0], [21.0, 3510.0], [24.0, 3658.0], [25.0, 3601.0], [27.0, 3593.0], [28.0, 3602.0], [30.0, 3553.0], [31.0, 3485.0]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}, {"data": [[49.62522414823671, 3759.7579199043626]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 129635.36666666667, "minX": 1.60602036E12, "maxY": 2585232.75, "series": [{"data": [[1.60602066E12, 1308072.4666666666], [1.60602048E12, 1777304.8833333333], [1.60602054E12, 1758947.5333333334], [1.60602036E12, 2585232.75], [1.60602042E12, 1732743.9], [1.6060206E12, 1785164.1833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60602066E12, 238266.48333333334], [1.60602048E12, 323733.63333333336], [1.60602054E12, 320408.51666666666], [1.60602036E12, 129635.36666666667], [1.60602042E12, 315666.45], [1.6060206E12, 325138.95]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602066E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3161.4220183486245, "minX": 1.60602036E12, "maxY": 9314.348623853204, "series": [{"data": [[1.60602066E12, 8443.548672566363], [1.60602048E12, 8893.381924198253], [1.60602054E12, 8894.661764705885], [1.60602036E12, 9314.348623853204], [1.60602042E12, 8995.797619047622], [1.6060206E12, 9026.795252225511]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.60602066E12, 4900.7607655502425], [1.60602048E12, 5172.3223880597025], [1.60602054E12, 5109.7824773413895], [1.60602036E12, 5986.122448979593], [1.60602042E12, 5213.895384615387], [1.6060206E12, 5086.787790697672]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[1.60602066E12, 3889.8653846153843], [1.60602048E12, 3695.5830903790097], [1.60602054E12, 3767.767647058823], [1.60602036E12, 3161.4220183486245], [1.60602042E12, 3749.872023809525], [1.6060206E12, 3940.074183976262]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602066E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60602036E12, "maxY": 2756.2244897959176, "series": [{"data": [[1.60602066E12, 0.0], [1.60602048E12, 0.0], [1.60602054E12, 0.0], [1.60602036E12, 0.0], [1.60602042E12, 0.0], [1.6060206E12, 0.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.60602066E12, 2547.1578947368416], [1.60602048E12, 2675.671641791046], [1.60602054E12, 2666.5256797583083], [1.60602036E12, 2756.2244897959176], [1.60602042E12, 2654.593846153846], [1.6060206E12, 2622.418604651162]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[1.60602066E12, 1822.4134615384621], [1.60602048E12, 1725.2944606414005], [1.60602054E12, 1772.1382352941182], [1.60602036E12, 1283.9266055045866], [1.60602042E12, 1738.66369047619], [1.6060206E12, 1844.2106824925818]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602066E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60602036E12, "maxY": 10.360544217687067, "series": [{"data": [[1.60602066E12, 0.0], [1.60602048E12, 0.0], [1.60602054E12, 0.0], [1.60602036E12, 0.0], [1.60602042E12, 0.0], [1.6060206E12, 0.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.60602066E12, 7.507177033492822], [1.60602048E12, 7.441791044776118], [1.60602054E12, 7.362537764350454], [1.60602036E12, 10.360544217687067], [1.60602042E12, 7.403076923076925], [1.6060206E12, 7.462209302325582]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[1.60602066E12, 0.0], [1.60602048E12, 0.0], [1.60602054E12, 0.0], [1.60602036E12, 0.2568807339449541], [1.60602042E12, 0.0], [1.6060206E12, 0.0]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602066E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 970.0, "minX": 1.60602036E12, "maxY": 9076.0, "series": [{"data": [[1.60602066E12, 9076.0], [1.60602048E12, 6205.0], [1.60602054E12, 5996.0], [1.60602036E12, 8044.0], [1.60602042E12, 6339.0], [1.6060206E12, 5916.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60602066E12, 3062.0], [1.60602048E12, 2777.0], [1.60602054E12, 2870.0], [1.60602036E12, 970.0], [1.60602042E12, 2795.0], [1.6060206E12, 2993.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60602066E12, 5715.1], [1.60602048E12, 5802.7], [1.60602054E12, 5769.0], [1.60602036E12, 7319.1], [1.60602042E12, 5884.6], [1.6060206E12, 5725.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60602066E12, 7874.669999999995], [1.60602048E12, 7467.060000000001], [1.60602054E12, 7358.0], [1.60602036E12, 7891.31], [1.60602042E12, 7563.079999999998], [1.6060206E12, 7257.84]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60602066E12, 5868.549999999999], [1.60602048E12, 5978.7], [1.60602054E12, 5894.4], [1.60602036E12, 7524.199999999999], [1.60602042E12, 6456.299999999995], [1.6060206E12, 5854.1]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602066E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3812.0, "minX": 1000.0, "maxY": 4577.0, "series": [{"data": [[1000.0, 4577.0], [2000.0, 3812.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1861.0, "minX": 1000.0, "maxY": 2023.0, "series": [{"data": [[1000.0, 2023.0], [2000.0, 1861.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.1, "minX": 1.60602036E12, "maxY": 11.35, "series": [{"data": [[1.60602066E12, 6.95], [1.60602048E12, 11.316666666666666], [1.60602054E12, 11.183333333333334], [1.60602036E12, 5.1], [1.60602042E12, 11.0], [1.6060206E12, 11.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602066E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.266666666666667, "minX": 1.60602036E12, "maxY": 11.35, "series": [{"data": [[1.60602066E12, 7.783333333333333], [1.60602048E12, 11.3], [1.60602054E12, 11.183333333333334], [1.60602036E12, 4.266666666666667], [1.60602042E12, 11.016666666666667], [1.6060206E12, 11.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602066E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.60602036E12, "maxY": 5.733333333333333, "series": [{"data": [[1.60602066E12, 3.466666666666667], [1.60602048E12, 5.716666666666667], [1.60602054E12, 5.666666666666667], [1.60602036E12, 1.8166666666666667], [1.60602042E12, 5.6], [1.6060206E12, 5.616666666666666]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard-success", "isController": false}, {"data": [[1.60602066E12, 3.7666666666666666], [1.60602048E12, 5.716666666666667], [1.60602054E12, 5.666666666666667], [1.60602036E12, 1.8166666666666667], [1.60602042E12, 5.6], [1.6060206E12, 5.616666666666666]], "isOverall": false, "label": "SELECT Test-success", "isController": true}, {"data": [[1.60602066E12, 3.4833333333333334], [1.60602048E12, 5.583333333333333], [1.60602054E12, 5.516666666666667], [1.60602036E12, 2.45], [1.60602042E12, 5.416666666666667], [1.6060206E12, 5.733333333333333]], "isOverall": false, "label": "(POST) Admin Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602066E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.083333333333333, "minX": 1.60602036E12, "maxY": 17.016666666666666, "series": [{"data": [[1.60602066E12, 10.716666666666667], [1.60602048E12, 17.016666666666666], [1.60602054E12, 16.85], [1.60602036E12, 6.083333333333333], [1.60602042E12, 16.616666666666667], [1.6060206E12, 16.966666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602066E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

