/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2928.0, "minX": 0.0, "maxY": 16944.0, "series": [{"data": [[0.0, 4273.0], [0.1, 4305.0], [0.2, 4333.0], [0.3, 4371.0], [0.4, 4379.0], [0.5, 4392.0], [0.6, 4466.0], [0.7, 4491.0], [0.8, 4603.0], [0.9, 5001.0], [1.0, 5338.0], [1.1, 5609.0], [1.2, 5616.0], [1.3, 5785.0], [1.4, 5787.0], [1.5, 5795.0], [1.6, 5854.0], [1.7, 6219.0], [1.8, 9485.0], [1.9, 10591.0], [2.0, 10872.0], [2.1, 11772.0], [2.2, 11824.0], [2.3, 11864.0], [2.4, 12003.0], [2.5, 12260.0], [2.6, 12380.0], [2.7, 12437.0], [2.8, 12455.0], [2.9, 12498.0], [3.0, 12540.0], [3.1, 12591.0], [3.2, 12630.0], [3.3, 12649.0], [3.4, 12716.0], [3.5, 12725.0], [3.6, 12725.0], [3.7, 12729.0], [3.8, 12740.0], [3.9, 12744.0], [4.0, 12754.0], [4.1, 12771.0], [4.2, 12784.0], [4.3, 12785.0], [4.4, 12808.0], [4.5, 12815.0], [4.6, 12827.0], [4.7, 12837.0], [4.8, 12844.0], [4.9, 12873.0], [5.0, 12928.0], [5.1, 12937.0], [5.2, 12972.0], [5.3, 12997.0], [5.4, 13034.0], [5.5, 13098.0], [5.6, 13120.0], [5.7, 13178.0], [5.8, 13182.0], [5.9, 13194.0], [6.0, 13211.0], [6.1, 13246.0], [6.2, 13250.0], [6.3, 13262.0], [6.4, 13286.0], [6.5, 13286.0], [6.6, 13290.0], [6.7, 13304.0], [6.8, 13306.0], [6.9, 13306.0], [7.0, 13312.0], [7.1, 13315.0], [7.2, 13316.0], [7.3, 13322.0], [7.4, 13327.0], [7.5, 13332.0], [7.6, 13334.0], [7.7, 13334.0], [7.8, 13339.0], [7.9, 13340.0], [8.0, 13340.0], [8.1, 13345.0], [8.2, 13348.0], [8.3, 13349.0], [8.4, 13349.0], [8.5, 13354.0], [8.6, 13355.0], [8.7, 13355.0], [8.8, 13357.0], [8.9, 13358.0], [9.0, 13359.0], [9.1, 13361.0], [9.2, 13361.0], [9.3, 13364.0], [9.4, 13369.0], [9.5, 13374.0], [9.6, 13381.0], [9.7, 13386.0], [9.8, 13395.0], [9.9, 13395.0], [10.0, 13397.0], [10.1, 13400.0], [10.2, 13408.0], [10.3, 13409.0], [10.4, 13410.0], [10.5, 13415.0], [10.6, 13415.0], [10.7, 13416.0], [10.8, 13416.0], [10.9, 13416.0], [11.0, 13419.0], [11.1, 13420.0], [11.2, 13421.0], [11.3, 13421.0], [11.4, 13425.0], [11.5, 13425.0], [11.6, 13426.0], [11.7, 13427.0], [11.8, 13434.0], [11.9, 13439.0], [12.0, 13441.0], [12.1, 13445.0], [12.2, 13448.0], [12.3, 13450.0], [12.4, 13450.0], [12.5, 13451.0], [12.6, 13451.0], [12.7, 13451.0], [12.8, 13454.0], [12.9, 13454.0], [13.0, 13456.0], [13.1, 13456.0], [13.2, 13458.0], [13.3, 13460.0], [13.4, 13461.0], [13.5, 13461.0], [13.6, 13462.0], [13.7, 13463.0], [13.8, 13464.0], [13.9, 13465.0], [14.0, 13467.0], [14.1, 13467.0], [14.2, 13469.0], [14.3, 13471.0], [14.4, 13471.0], [14.5, 13472.0], [14.6, 13472.0], [14.7, 13472.0], [14.8, 13473.0], [14.9, 13473.0], [15.0, 13474.0], [15.1, 13474.0], [15.2, 13476.0], [15.3, 13476.0], [15.4, 13477.0], [15.5, 13477.0], [15.6, 13477.0], [15.7, 13477.0], [15.8, 13479.0], [15.9, 13481.0], [16.0, 13481.0], [16.1, 13481.0], [16.2, 13483.0], [16.3, 13483.0], [16.4, 13484.0], [16.5, 13484.0], [16.6, 13484.0], [16.7, 13485.0], [16.8, 13487.0], [16.9, 13488.0], [17.0, 13489.0], [17.1, 13489.0], [17.2, 13490.0], [17.3, 13490.0], [17.4, 13491.0], [17.5, 13491.0], [17.6, 13491.0], [17.7, 13491.0], [17.8, 13492.0], [17.9, 13492.0], [18.0, 13493.0], [18.1, 13493.0], [18.2, 13494.0], [18.3, 13497.0], [18.4, 13497.0], [18.5, 13497.0], [18.6, 13498.0], [18.7, 13498.0], [18.8, 13498.0], [18.9, 13500.0], [19.0, 13500.0], [19.1, 13500.0], [19.2, 13502.0], [19.3, 13504.0], [19.4, 13505.0], [19.5, 13505.0], [19.6, 13508.0], [19.7, 13510.0], [19.8, 13511.0], [19.9, 13511.0], [20.0, 13512.0], [20.1, 13512.0], [20.2, 13513.0], [20.3, 13513.0], [20.4, 13513.0], [20.5, 13514.0], [20.6, 13514.0], [20.7, 13515.0], [20.8, 13515.0], [20.9, 13515.0], [21.0, 13517.0], [21.1, 13518.0], [21.2, 13518.0], [21.3, 13519.0], [21.4, 13520.0], [21.5, 13520.0], [21.6, 13523.0], [21.7, 13523.0], [21.8, 13523.0], [21.9, 13524.0], [22.0, 13524.0], [22.1, 13524.0], [22.2, 13525.0], [22.3, 13526.0], [22.4, 13527.0], [22.5, 13527.0], [22.6, 13529.0], [22.7, 13529.0], [22.8, 13531.0], [22.9, 13532.0], [23.0, 13533.0], [23.1, 13533.0], [23.2, 13534.0], [23.3, 13537.0], [23.4, 13537.0], [23.5, 13538.0], [23.6, 13541.0], [23.7, 13542.0], [23.8, 13542.0], [23.9, 13542.0], [24.0, 13545.0], [24.1, 13547.0], [24.2, 13548.0], [24.3, 13549.0], [24.4, 13549.0], [24.5, 13551.0], [24.6, 13552.0], [24.7, 13552.0], [24.8, 13553.0], [24.9, 13553.0], [25.0, 13554.0], [25.1, 13556.0], [25.2, 13556.0], [25.3, 13560.0], [25.4, 13563.0], [25.5, 13563.0], [25.6, 13563.0], [25.7, 13563.0], [25.8, 13563.0], [25.9, 13564.0], [26.0, 13564.0], [26.1, 13565.0], [26.2, 13565.0], [26.3, 13568.0], [26.4, 13568.0], [26.5, 13569.0], [26.6, 13570.0], [26.7, 13571.0], [26.8, 13571.0], [26.9, 13571.0], [27.0, 13572.0], [27.1, 13572.0], [27.2, 13573.0], [27.3, 13577.0], [27.4, 13578.0], [27.5, 13578.0], [27.6, 13579.0], [27.7, 13579.0], [27.8, 13579.0], [27.9, 13580.0], [28.0, 13580.0], [28.1, 13582.0], [28.2, 13582.0], [28.3, 13583.0], [28.4, 13583.0], [28.5, 13584.0], [28.6, 13584.0], [28.7, 13585.0], [28.8, 13585.0], [28.9, 13587.0], [29.0, 13588.0], [29.1, 13588.0], [29.2, 13589.0], [29.3, 13591.0], [29.4, 13593.0], [29.5, 13593.0], [29.6, 13593.0], [29.7, 13594.0], [29.8, 13594.0], [29.9, 13594.0], [30.0, 13594.0], [30.1, 13596.0], [30.2, 13596.0], [30.3, 13598.0], [30.4, 13598.0], [30.5, 13598.0], [30.6, 13598.0], [30.7, 13599.0], [30.8, 13599.0], [30.9, 13599.0], [31.0, 13599.0], [31.1, 13600.0], [31.2, 13601.0], [31.3, 13601.0], [31.4, 13602.0], [31.5, 13603.0], [31.6, 13603.0], [31.7, 13603.0], [31.8, 13603.0], [31.9, 13604.0], [32.0, 13604.0], [32.1, 13605.0], [32.2, 13606.0], [32.3, 13606.0], [32.4, 13607.0], [32.5, 13608.0], [32.6, 13608.0], [32.7, 13609.0], [32.8, 13609.0], [32.9, 13610.0], [33.0, 13610.0], [33.1, 13610.0], [33.2, 13610.0], [33.3, 13610.0], [33.4, 13611.0], [33.5, 13612.0], [33.6, 13613.0], [33.7, 13613.0], [33.8, 13614.0], [33.9, 13614.0], [34.0, 13614.0], [34.1, 13615.0], [34.2, 13616.0], [34.3, 13617.0], [34.4, 13618.0], [34.5, 13619.0], [34.6, 13621.0], [34.7, 13622.0], [34.8, 13622.0], [34.9, 13622.0], [35.0, 13623.0], [35.1, 13623.0], [35.2, 13624.0], [35.3, 13625.0], [35.4, 13627.0], [35.5, 13627.0], [35.6, 13627.0], [35.7, 13628.0], [35.8, 13629.0], [35.9, 13630.0], [36.0, 13630.0], [36.1, 13630.0], [36.2, 13631.0], [36.3, 13631.0], [36.4, 13632.0], [36.5, 13632.0], [36.6, 13633.0], [36.7, 13633.0], [36.8, 13634.0], [36.9, 13634.0], [37.0, 13634.0], [37.1, 13635.0], [37.2, 13635.0], [37.3, 13635.0], [37.4, 13636.0], [37.5, 13636.0], [37.6, 13636.0], [37.7, 13637.0], [37.8, 13637.0], [37.9, 13637.0], [38.0, 13637.0], [38.1, 13637.0], [38.2, 13637.0], [38.3, 13639.0], [38.4, 13640.0], [38.5, 13641.0], [38.6, 13641.0], [38.7, 13641.0], [38.8, 13641.0], [38.9, 13641.0], [39.0, 13642.0], [39.1, 13642.0], [39.2, 13643.0], [39.3, 13644.0], [39.4, 13646.0], [39.5, 13647.0], [39.6, 13650.0], [39.7, 13650.0], [39.8, 13651.0], [39.9, 13651.0], [40.0, 13651.0], [40.1, 13651.0], [40.2, 13652.0], [40.3, 13653.0], [40.4, 13654.0], [40.5, 13656.0], [40.6, 13658.0], [40.7, 13658.0], [40.8, 13658.0], [40.9, 13658.0], [41.0, 13659.0], [41.1, 13660.0], [41.2, 13662.0], [41.3, 13662.0], [41.4, 13663.0], [41.5, 13664.0], [41.6, 13666.0], [41.7, 13667.0], [41.8, 13668.0], [41.9, 13669.0], [42.0, 13669.0], [42.1, 13669.0], [42.2, 13670.0], [42.3, 13671.0], [42.4, 13671.0], [42.5, 13672.0], [42.6, 13672.0], [42.7, 13673.0], [42.8, 13673.0], [42.9, 13674.0], [43.0, 13675.0], [43.1, 13676.0], [43.2, 13676.0], [43.3, 13677.0], [43.4, 13677.0], [43.5, 13678.0], [43.6, 13679.0], [43.7, 13679.0], [43.8, 13680.0], [43.9, 13680.0], [44.0, 13680.0], [44.1, 13681.0], [44.2, 13681.0], [44.3, 13681.0], [44.4, 13681.0], [44.5, 13682.0], [44.6, 13682.0], [44.7, 13684.0], [44.8, 13685.0], [44.9, 13686.0], [45.0, 13686.0], [45.1, 13686.0], [45.2, 13687.0], [45.3, 13687.0], [45.4, 13688.0], [45.5, 13688.0], [45.6, 13688.0], [45.7, 13689.0], [45.8, 13689.0], [45.9, 13689.0], [46.0, 13689.0], [46.1, 13690.0], [46.2, 13690.0], [46.3, 13692.0], [46.4, 13692.0], [46.5, 13697.0], [46.6, 13698.0], [46.7, 13698.0], [46.8, 13699.0], [46.9, 13699.0], [47.0, 13701.0], [47.1, 13701.0], [47.2, 13703.0], [47.3, 13704.0], [47.4, 13704.0], [47.5, 13705.0], [47.6, 13705.0], [47.7, 13707.0], [47.8, 13708.0], [47.9, 13708.0], [48.0, 13708.0], [48.1, 13709.0], [48.2, 13709.0], [48.3, 13711.0], [48.4, 13711.0], [48.5, 13714.0], [48.6, 13715.0], [48.7, 13715.0], [48.8, 13716.0], [48.9, 13716.0], [49.0, 13717.0], [49.1, 13718.0], [49.2, 13718.0], [49.3, 13719.0], [49.4, 13719.0], [49.5, 13720.0], [49.6, 13721.0], [49.7, 13721.0], [49.8, 13721.0], [49.9, 13723.0], [50.0, 13724.0], [50.1, 13725.0], [50.2, 13727.0], [50.3, 13727.0], [50.4, 13727.0], [50.5, 13728.0], [50.6, 13729.0], [50.7, 13729.0], [50.8, 13730.0], [50.9, 13731.0], [51.0, 13731.0], [51.1, 13731.0], [51.2, 13731.0], [51.3, 13732.0], [51.4, 13733.0], [51.5, 13734.0], [51.6, 13734.0], [51.7, 13736.0], [51.8, 13736.0], [51.9, 13736.0], [52.0, 13737.0], [52.1, 13738.0], [52.2, 13739.0], [52.3, 13740.0], [52.4, 13740.0], [52.5, 13742.0], [52.6, 13745.0], [52.7, 13747.0], [52.8, 13747.0], [52.9, 13748.0], [53.0, 13749.0], [53.1, 13753.0], [53.2, 13754.0], [53.3, 13754.0], [53.4, 13755.0], [53.5, 13758.0], [53.6, 13759.0], [53.7, 13760.0], [53.8, 13764.0], [53.9, 13765.0], [54.0, 13765.0], [54.1, 13766.0], [54.2, 13768.0], [54.3, 13768.0], [54.4, 13771.0], [54.5, 13776.0], [54.6, 13777.0], [54.7, 13777.0], [54.8, 13779.0], [54.9, 13781.0], [55.0, 13781.0], [55.1, 13784.0], [55.2, 13785.0], [55.3, 13785.0], [55.4, 13786.0], [55.5, 13787.0], [55.6, 13788.0], [55.7, 13789.0], [55.8, 13791.0], [55.9, 13792.0], [56.0, 13792.0], [56.1, 13794.0], [56.2, 13795.0], [56.3, 13795.0], [56.4, 13797.0], [56.5, 13803.0], [56.6, 13808.0], [56.7, 13808.0], [56.8, 13808.0], [56.9, 13811.0], [57.0, 13813.0], [57.1, 13813.0], [57.2, 13813.0], [57.3, 13814.0], [57.4, 13816.0], [57.5, 13820.0], [57.6, 13824.0], [57.7, 13824.0], [57.8, 13826.0], [57.9, 13826.0], [58.0, 13828.0], [58.1, 13833.0], [58.2, 13835.0], [58.3, 13837.0], [58.4, 13838.0], [58.5, 13841.0], [58.6, 13846.0], [58.7, 13846.0], [58.8, 13848.0], [58.9, 13849.0], [59.0, 13849.0], [59.1, 13849.0], [59.2, 13849.0], [59.3, 13853.0], [59.4, 13855.0], [59.5, 13856.0], [59.6, 13857.0], [59.7, 13857.0], [59.8, 13858.0], [59.9, 13858.0], [60.0, 13858.0], [60.1, 13859.0], [60.2, 13859.0], [60.3, 13860.0], [60.4, 13861.0], [60.5, 13861.0], [60.6, 13861.0], [60.7, 13862.0], [60.8, 13862.0], [60.9, 13863.0], [61.0, 13863.0], [61.1, 13864.0], [61.2, 13865.0], [61.3, 13865.0], [61.4, 13865.0], [61.5, 13869.0], [61.6, 13871.0], [61.7, 13872.0], [61.8, 13874.0], [61.9, 13877.0], [62.0, 13877.0], [62.1, 13878.0], [62.2, 13878.0], [62.3, 13880.0], [62.4, 13880.0], [62.5, 13881.0], [62.6, 13885.0], [62.7, 13888.0], [62.8, 13888.0], [62.9, 13890.0], [63.0, 13891.0], [63.1, 13892.0], [63.2, 13893.0], [63.3, 13894.0], [63.4, 13894.0], [63.5, 13895.0], [63.6, 13895.0], [63.7, 13897.0], [63.8, 13898.0], [63.9, 13899.0], [64.0, 13899.0], [64.1, 13901.0], [64.2, 13901.0], [64.3, 13903.0], [64.4, 13903.0], [64.5, 13903.0], [64.6, 13903.0], [64.7, 13910.0], [64.8, 13911.0], [64.9, 13912.0], [65.0, 13914.0], [65.1, 13915.0], [65.2, 13915.0], [65.3, 13917.0], [65.4, 13918.0], [65.5, 13920.0], [65.6, 13922.0], [65.7, 13923.0], [65.8, 13926.0], [65.9, 13927.0], [66.0, 13927.0], [66.1, 13928.0], [66.2, 13928.0], [66.3, 13929.0], [66.4, 13930.0], [66.5, 13930.0], [66.6, 13931.0], [66.7, 13934.0], [66.8, 13934.0], [66.9, 13935.0], [67.0, 13937.0], [67.1, 13938.0], [67.2, 13939.0], [67.3, 13939.0], [67.4, 13939.0], [67.5, 13941.0], [67.6, 13944.0], [67.7, 13949.0], [67.8, 13950.0], [67.9, 13951.0], [68.0, 13951.0], [68.1, 13956.0], [68.2, 13956.0], [68.3, 13959.0], [68.4, 13961.0], [68.5, 13962.0], [68.6, 13963.0], [68.7, 13967.0], [68.8, 13969.0], [68.9, 13971.0], [69.0, 13973.0], [69.1, 13973.0], [69.2, 13976.0], [69.3, 13976.0], [69.4, 13981.0], [69.5, 13986.0], [69.6, 13987.0], [69.7, 13991.0], [69.8, 13992.0], [69.9, 13992.0], [70.0, 13994.0], [70.1, 13998.0], [70.2, 13998.0], [70.3, 13999.0], [70.4, 14000.0], [70.5, 14003.0], [70.6, 14005.0], [70.7, 14012.0], [70.8, 14018.0], [70.9, 14018.0], [71.0, 14019.0], [71.1, 14022.0], [71.2, 14023.0], [71.3, 14030.0], [71.4, 14031.0], [71.5, 14035.0], [71.6, 14036.0], [71.7, 14037.0], [71.8, 14043.0], [71.9, 14044.0], [72.0, 14047.0], [72.1, 14047.0], [72.2, 14053.0], [72.3, 14054.0], [72.4, 14060.0], [72.5, 14061.0], [72.6, 14061.0], [72.7, 14063.0], [72.8, 14066.0], [72.9, 14067.0], [73.0, 14071.0], [73.1, 14080.0], [73.2, 14098.0], [73.3, 14099.0], [73.4, 14111.0], [73.5, 14113.0], [73.6, 14114.0], [73.7, 14115.0], [73.8, 14120.0], [73.9, 14122.0], [74.0, 14123.0], [74.1, 14124.0], [74.2, 14124.0], [74.3, 14128.0], [74.4, 14128.0], [74.5, 14130.0], [74.6, 14133.0], [74.7, 14136.0], [74.8, 14139.0], [74.9, 14141.0], [75.0, 14141.0], [75.1, 14146.0], [75.2, 14149.0], [75.3, 14151.0], [75.4, 14151.0], [75.5, 14151.0], [75.6, 14154.0], [75.7, 14157.0], [75.8, 14162.0], [75.9, 14163.0], [76.0, 14163.0], [76.1, 14167.0], [76.2, 14169.0], [76.3, 14171.0], [76.4, 14171.0], [76.5, 14172.0], [76.6, 14173.0], [76.7, 14174.0], [76.8, 14178.0], [76.9, 14179.0], [77.0, 14179.0], [77.1, 14181.0], [77.2, 14183.0], [77.3, 14184.0], [77.4, 14186.0], [77.5, 14187.0], [77.6, 14190.0], [77.7, 14190.0], [77.8, 14194.0], [77.9, 14194.0], [78.0, 14196.0], [78.1, 14196.0], [78.2, 14197.0], [78.3, 14197.0], [78.4, 14201.0], [78.5, 14201.0], [78.6, 14202.0], [78.7, 14203.0], [78.8, 14206.0], [78.9, 14208.0], [79.0, 14208.0], [79.1, 14209.0], [79.2, 14210.0], [79.3, 14215.0], [79.4, 14216.0], [79.5, 14217.0], [79.6, 14221.0], [79.7, 14221.0], [79.8, 14228.0], [79.9, 14229.0], [80.0, 14229.0], [80.1, 14231.0], [80.2, 14232.0], [80.3, 14233.0], [80.4, 14236.0], [80.5, 14236.0], [80.6, 14237.0], [80.7, 14237.0], [80.8, 14240.0], [80.9, 14241.0], [81.0, 14243.0], [81.1, 14244.0], [81.2, 14244.0], [81.3, 14245.0], [81.4, 14246.0], [81.5, 14247.0], [81.6, 14248.0], [81.7, 14248.0], [81.8, 14249.0], [81.9, 14255.0], [82.0, 14256.0], [82.1, 14256.0], [82.2, 14259.0], [82.3, 14259.0], [82.4, 14265.0], [82.5, 14266.0], [82.6, 14267.0], [82.7, 14267.0], [82.8, 14268.0], [82.9, 14270.0], [83.0, 14274.0], [83.1, 14274.0], [83.2, 14274.0], [83.3, 14274.0], [83.4, 14275.0], [83.5, 14276.0], [83.6, 14277.0], [83.7, 14277.0], [83.8, 14278.0], [83.9, 14284.0], [84.0, 14285.0], [84.1, 14286.0], [84.2, 14289.0], [84.3, 14289.0], [84.4, 14289.0], [84.5, 14291.0], [84.6, 14296.0], [84.7, 14296.0], [84.8, 14297.0], [84.9, 14302.0], [85.0, 14304.0], [85.1, 14311.0], [85.2, 14313.0], [85.3, 14327.0], [85.4, 14329.0], [85.5, 14338.0], [85.6, 14339.0], [85.7, 14341.0], [85.8, 14342.0], [85.9, 14347.0], [86.0, 14347.0], [86.1, 14354.0], [86.2, 14358.0], [86.3, 14359.0], [86.4, 14360.0], [86.5, 14361.0], [86.6, 14363.0], [86.7, 14365.0], [86.8, 14372.0], [86.9, 14378.0], [87.0, 14380.0], [87.1, 14380.0], [87.2, 14386.0], [87.3, 14387.0], [87.4, 14393.0], [87.5, 14393.0], [87.6, 14403.0], [87.7, 14412.0], [87.8, 14414.0], [87.9, 14425.0], [88.0, 14434.0], [88.1, 14438.0], [88.2, 14443.0], [88.3, 14449.0], [88.4, 14450.0], [88.5, 14450.0], [88.6, 14451.0], [88.7, 14465.0], [88.8, 14476.0], [88.9, 14482.0], [89.0, 14491.0], [89.1, 14494.0], [89.2, 14501.0], [89.3, 14505.0], [89.4, 14513.0], [89.5, 14519.0], [89.6, 14520.0], [89.7, 14520.0], [89.8, 14532.0], [89.9, 14544.0], [90.0, 14551.0], [90.1, 14555.0], [90.2, 14559.0], [90.3, 14564.0], [90.4, 14571.0], [90.5, 14572.0], [90.6, 14578.0], [90.7, 14581.0], [90.8, 14581.0], [90.9, 14592.0], [91.0, 14595.0], [91.1, 14615.0], [91.2, 14615.0], [91.3, 14618.0], [91.4, 14622.0], [91.5, 14639.0], [91.6, 14644.0], [91.7, 14646.0], [91.8, 14657.0], [91.9, 14657.0], [92.0, 14673.0], [92.1, 14704.0], [92.2, 14730.0], [92.3, 14774.0], [92.4, 14784.0], [92.5, 14823.0], [92.6, 14830.0], [92.7, 14843.0], [92.8, 14860.0], [92.9, 14871.0], [93.0, 14892.0], [93.1, 14896.0], [93.2, 14904.0], [93.3, 14907.0], [93.4, 14928.0], [93.5, 14928.0], [93.6, 14957.0], [93.7, 14959.0], [93.8, 14962.0], [93.9, 14962.0], [94.0, 14969.0], [94.1, 14984.0], [94.2, 14984.0], [94.3, 14992.0], [94.4, 15021.0], [94.5, 15026.0], [94.6, 15032.0], [94.7, 15039.0], [94.8, 15091.0], [94.9, 15093.0], [95.0, 15110.0], [95.1, 15115.0], [95.2, 15117.0], [95.3, 15118.0], [95.4, 15135.0], [95.5, 15137.0], [95.6, 15161.0], [95.7, 15169.0], [95.8, 15182.0], [95.9, 15187.0], [96.0, 15195.0], [96.1, 15213.0], [96.2, 15218.0], [96.3, 15245.0], [96.4, 15246.0], [96.5, 15254.0], [96.6, 15281.0], [96.7, 15290.0], [96.8, 15302.0], [96.9, 15322.0], [97.0, 15334.0], [97.1, 15344.0], [97.2, 15345.0], [97.3, 15361.0], [97.4, 15361.0], [97.5, 15389.0], [97.6, 15396.0], [97.7, 15397.0], [97.8, 15425.0], [97.9, 15480.0], [98.0, 15534.0], [98.1, 15541.0], [98.2, 15561.0], [98.3, 15588.0], [98.4, 15591.0], [98.5, 15618.0], [98.6, 15640.0], [98.7, 15706.0], [98.8, 15780.0], [98.9, 15834.0], [99.0, 15975.0], [99.1, 15988.0], [99.2, 15998.0], [99.3, 16001.0], [99.4, 16019.0], [99.5, 16141.0], [99.6, 16141.0], [99.7, 16383.0], [99.8, 16460.0], [99.9, 16601.0], [100.0, 16944.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[0.0, 4262.0], [0.1, 4272.0], [0.2, 4278.0], [0.3, 4305.0], [0.4, 4333.0], [0.5, 4363.0], [0.6, 4370.0], [0.7, 4379.0], [0.8, 4392.0], [0.9, 4397.0], [1.0, 4407.0], [1.1, 4465.0], [1.2, 4479.0], [1.3, 4491.0], [1.4, 4518.0], [1.5, 4603.0], [1.6, 4607.0], [1.7, 4667.0], [1.8, 4669.0], [1.9, 4676.0], [2.0, 4688.0], [2.1, 4805.0], [2.2, 4836.0], [2.3, 4840.0], [2.4, 4840.0], [2.5, 4919.0], [2.6, 4937.0], [2.7, 4959.0], [2.8, 4999.0], [2.9, 5001.0], [3.0, 5036.0], [3.1, 5049.0], [3.2, 5061.0], [3.3, 5063.0], [3.4, 5082.0], [3.5, 5154.0], [3.6, 5187.0], [3.7, 5232.0], [3.8, 5234.0], [3.9, 5242.0], [4.0, 5250.0], [4.1, 5254.0], [4.2, 5262.0], [4.3, 5283.0], [4.4, 5318.0], [4.5, 5329.0], [4.6, 5332.0], [4.7, 5333.0], [4.8, 5334.0], [4.9, 5338.0], [5.0, 5354.0], [5.1, 5358.0], [5.2, 5367.0], [5.3, 5393.0], [5.4, 5397.0], [5.5, 5403.0], [5.6, 5406.0], [5.7, 5416.0], [5.8, 5465.0], [5.9, 5468.0], [6.0, 5476.0], [6.1, 5576.0], [6.2, 5582.0], [6.3, 5609.0], [6.4, 5615.0], [6.5, 5650.0], [6.6, 5680.0], [6.7, 5703.0], [6.8, 5714.0], [6.9, 5716.0], [7.0, 5733.0], [7.1, 5748.0], [7.2, 5750.0], [7.3, 5770.0], [7.4, 5774.0], [7.5, 5778.0], [7.6, 5778.0], [7.7, 5782.0], [7.8, 5783.0], [7.9, 5784.0], [8.0, 5787.0], [8.1, 5795.0], [8.2, 5812.0], [8.3, 5822.0], [8.4, 5827.0], [8.5, 5830.0], [8.6, 5854.0], [8.7, 5891.0], [8.8, 5912.0], [8.9, 5935.0], [9.0, 5945.0], [9.1, 6019.0], [9.2, 6037.0], [9.3, 6046.0], [9.4, 6076.0], [9.5, 6093.0], [9.6, 6187.0], [9.7, 6219.0], [9.8, 6279.0], [9.9, 6309.0], [10.0, 6314.0], [10.1, 6322.0], [10.2, 6422.0], [10.3, 6428.0], [10.4, 6428.0], [10.5, 6437.0], [10.6, 6441.0], [10.7, 6465.0], [10.8, 6472.0], [10.9, 6503.0], [11.0, 6505.0], [11.1, 6553.0], [11.2, 6586.0], [11.3, 6637.0], [11.4, 6692.0], [11.5, 6692.0], [11.6, 6717.0], [11.7, 6733.0], [11.8, 6749.0], [11.9, 6762.0], [12.0, 6818.0], [12.1, 6832.0], [12.2, 6858.0], [12.3, 6880.0], [12.4, 6911.0], [12.5, 6952.0], [12.6, 6976.0], [12.7, 7004.0], [12.8, 7049.0], [12.9, 7056.0], [13.0, 7057.0], [13.1, 7089.0], [13.2, 7123.0], [13.3, 7137.0], [13.4, 7152.0], [13.5, 7169.0], [13.6, 7225.0], [13.7, 7269.0], [13.8, 7273.0], [13.9, 7422.0], [14.0, 7445.0], [14.1, 7457.0], [14.2, 7612.0], [14.3, 7656.0], [14.4, 7665.0], [14.5, 7712.0], [14.6, 7729.0], [14.7, 7740.0], [14.8, 7907.0], [14.9, 7914.0], [15.0, 7930.0], [15.1, 7950.0], [15.2, 7985.0], [15.3, 8031.0], [15.4, 8050.0], [15.5, 8057.0], [15.6, 8065.0], [15.7, 8136.0], [15.8, 8140.0], [15.9, 8153.0], [16.0, 8220.0], [16.1, 8234.0], [16.2, 8294.0], [16.3, 8299.0], [16.4, 8304.0], [16.5, 8306.0], [16.6, 8322.0], [16.7, 8325.0], [16.8, 8342.0], [16.9, 8349.0], [17.0, 8350.0], [17.1, 8352.0], [17.2, 8370.0], [17.3, 8371.0], [17.4, 8374.0], [17.5, 8375.0], [17.6, 8396.0], [17.7, 8396.0], [17.8, 8399.0], [17.9, 8406.0], [18.0, 8412.0], [18.1, 8429.0], [18.2, 8436.0], [18.3, 8452.0], [18.4, 8454.0], [18.5, 8477.0], [18.6, 8487.0], [18.7, 8494.0], [18.8, 8503.0], [18.9, 8504.0], [19.0, 8507.0], [19.1, 8512.0], [19.2, 8525.0], [19.3, 8533.0], [19.4, 8533.0], [19.5, 8538.0], [19.6, 8540.0], [19.7, 8546.0], [19.8, 8549.0], [19.9, 8553.0], [20.0, 8553.0], [20.1, 8555.0], [20.2, 8557.0], [20.3, 8563.0], [20.4, 8564.0], [20.5, 8571.0], [20.6, 8575.0], [20.7, 8580.0], [20.8, 8582.0], [20.9, 8585.0], [21.0, 8585.0], [21.1, 8587.0], [21.2, 8592.0], [21.3, 8596.0], [21.4, 8596.0], [21.5, 8597.0], [21.6, 8602.0], [21.7, 8604.0], [21.8, 8605.0], [21.9, 8605.0], [22.0, 8605.0], [22.1, 8607.0], [22.2, 8617.0], [22.3, 8630.0], [22.4, 8631.0], [22.5, 8631.0], [22.6, 8632.0], [22.7, 8632.0], [22.8, 8634.0], [22.9, 8642.0], [23.0, 8643.0], [23.1, 8644.0], [23.2, 8657.0], [23.3, 8663.0], [23.4, 8667.0], [23.5, 8670.0], [23.6, 8682.0], [23.7, 8693.0], [23.8, 8701.0], [23.9, 8709.0], [24.0, 8714.0], [24.1, 8715.0], [24.2, 8715.0], [24.3, 8725.0], [24.4, 8728.0], [24.5, 8728.0], [24.6, 8731.0], [24.7, 8732.0], [24.8, 8736.0], [24.9, 8737.0], [25.0, 8739.0], [25.1, 8741.0], [25.2, 8742.0], [25.3, 8750.0], [25.4, 8754.0], [25.5, 8756.0], [25.6, 8761.0], [25.7, 8780.0], [25.8, 8782.0], [25.9, 8782.0], [26.0, 8787.0], [26.1, 8792.0], [26.2, 8794.0], [26.3, 8806.0], [26.4, 8808.0], [26.5, 8817.0], [26.6, 8825.0], [26.7, 8835.0], [26.8, 8839.0], [26.9, 8844.0], [27.0, 8846.0], [27.1, 8847.0], [27.2, 8847.0], [27.3, 8850.0], [27.4, 8860.0], [27.5, 8861.0], [27.6, 8864.0], [27.7, 8867.0], [27.8, 8867.0], [27.9, 8868.0], [28.0, 8869.0], [28.1, 8871.0], [28.2, 8874.0], [28.3, 8876.0], [28.4, 8878.0], [28.5, 8881.0], [28.6, 8881.0], [28.7, 8882.0], [28.8, 8885.0], [28.9, 8890.0], [29.0, 8900.0], [29.1, 8902.0], [29.2, 8903.0], [29.3, 8908.0], [29.4, 8916.0], [29.5, 8925.0], [29.6, 8927.0], [29.7, 8931.0], [29.8, 8936.0], [29.9, 8939.0], [30.0, 8941.0], [30.1, 8949.0], [30.2, 8951.0], [30.3, 8953.0], [30.4, 8954.0], [30.5, 8957.0], [30.6, 8958.0], [30.7, 8959.0], [30.8, 8959.0], [30.9, 8962.0], [31.0, 8963.0], [31.1, 8963.0], [31.2, 8969.0], [31.3, 8977.0], [31.4, 8977.0], [31.5, 8981.0], [31.6, 8985.0], [31.7, 8989.0], [31.8, 8990.0], [31.9, 8992.0], [32.0, 8993.0], [32.1, 8993.0], [32.2, 8996.0], [32.3, 8997.0], [32.4, 8999.0], [32.5, 9000.0], [32.6, 9002.0], [32.7, 9009.0], [32.8, 9011.0], [32.9, 9015.0], [33.0, 9016.0], [33.1, 9017.0], [33.2, 9024.0], [33.3, 9026.0], [33.4, 9032.0], [33.5, 9034.0], [33.6, 9035.0], [33.7, 9037.0], [33.8, 9044.0], [33.9, 9045.0], [34.0, 9049.0], [34.1, 9050.0], [34.2, 9050.0], [34.3, 9051.0], [34.4, 9052.0], [34.5, 9057.0], [34.6, 9057.0], [34.7, 9066.0], [34.8, 9067.0], [34.9, 9067.0], [35.0, 9068.0], [35.1, 9073.0], [35.2, 9076.0], [35.3, 9077.0], [35.4, 9086.0], [35.5, 9093.0], [35.6, 9094.0], [35.7, 9096.0], [35.8, 9100.0], [35.9, 9101.0], [36.0, 9107.0], [36.1, 9107.0], [36.2, 9108.0], [36.3, 9109.0], [36.4, 9110.0], [36.5, 9112.0], [36.6, 9114.0], [36.7, 9114.0], [36.8, 9115.0], [36.9, 9116.0], [37.0, 9119.0], [37.1, 9120.0], [37.2, 9120.0], [37.3, 9120.0], [37.4, 9126.0], [37.5, 9126.0], [37.6, 9127.0], [37.7, 9129.0], [37.8, 9130.0], [37.9, 9131.0], [38.0, 9134.0], [38.1, 9135.0], [38.2, 9136.0], [38.3, 9137.0], [38.4, 9140.0], [38.5, 9140.0], [38.6, 9142.0], [38.7, 9146.0], [38.8, 9152.0], [38.9, 9154.0], [39.0, 9155.0], [39.1, 9155.0], [39.2, 9157.0], [39.3, 9158.0], [39.4, 9167.0], [39.5, 9168.0], [39.6, 9169.0], [39.7, 9173.0], [39.8, 9175.0], [39.9, 9176.0], [40.0, 9179.0], [40.1, 9180.0], [40.2, 9181.0], [40.3, 9188.0], [40.4, 9192.0], [40.5, 9193.0], [40.6, 9194.0], [40.7, 9195.0], [40.8, 9199.0], [40.9, 9199.0], [41.0, 9201.0], [41.1, 9203.0], [41.2, 9203.0], [41.3, 9213.0], [41.4, 9215.0], [41.5, 9223.0], [41.6, 9224.0], [41.7, 9225.0], [41.8, 9227.0], [41.9, 9229.0], [42.0, 9230.0], [42.1, 9231.0], [42.2, 9233.0], [42.3, 9233.0], [42.4, 9233.0], [42.5, 9237.0], [42.6, 9237.0], [42.7, 9239.0], [42.8, 9239.0], [42.9, 9240.0], [43.0, 9242.0], [43.1, 9243.0], [43.2, 9244.0], [43.3, 9246.0], [43.4, 9246.0], [43.5, 9249.0], [43.6, 9251.0], [43.7, 9253.0], [43.8, 9254.0], [43.9, 9256.0], [44.0, 9257.0], [44.1, 9258.0], [44.2, 9262.0], [44.3, 9264.0], [44.4, 9267.0], [44.5, 9267.0], [44.6, 9269.0], [44.7, 9269.0], [44.8, 9270.0], [44.9, 9273.0], [45.0, 9273.0], [45.1, 9277.0], [45.2, 9281.0], [45.3, 9284.0], [45.4, 9291.0], [45.5, 9296.0], [45.6, 9297.0], [45.7, 9299.0], [45.8, 9301.0], [45.9, 9302.0], [46.0, 9302.0], [46.1, 9305.0], [46.2, 9305.0], [46.3, 9306.0], [46.4, 9309.0], [46.5, 9310.0], [46.6, 9315.0], [46.7, 9317.0], [46.8, 9320.0], [46.9, 9322.0], [47.0, 9322.0], [47.1, 9327.0], [47.2, 9327.0], [47.3, 9327.0], [47.4, 9327.0], [47.5, 9330.0], [47.6, 9333.0], [47.7, 9335.0], [47.8, 9338.0], [47.9, 9341.0], [48.0, 9343.0], [48.1, 9349.0], [48.2, 9349.0], [48.3, 9353.0], [48.4, 9354.0], [48.5, 9357.0], [48.6, 9360.0], [48.7, 9361.0], [48.8, 9361.0], [48.9, 9362.0], [49.0, 9364.0], [49.1, 9369.0], [49.2, 9371.0], [49.3, 9371.0], [49.4, 9375.0], [49.5, 9378.0], [49.6, 9380.0], [49.7, 9380.0], [49.8, 9382.0], [49.9, 9382.0], [50.0, 9383.0], [50.1, 9384.0], [50.2, 9384.0], [50.3, 9386.0], [50.4, 9387.0], [50.5, 9388.0], [50.6, 9390.0], [50.7, 9392.0], [50.8, 9395.0], [50.9, 9396.0], [51.0, 9399.0], [51.1, 9399.0], [51.2, 9400.0], [51.3, 9400.0], [51.4, 9402.0], [51.5, 9403.0], [51.6, 9403.0], [51.7, 9404.0], [51.8, 9405.0], [51.9, 9405.0], [52.0, 9408.0], [52.1, 9408.0], [52.2, 9409.0], [52.3, 9410.0], [52.4, 9411.0], [52.5, 9412.0], [52.6, 9417.0], [52.7, 9418.0], [52.8, 9421.0], [52.9, 9424.0], [53.0, 9427.0], [53.1, 9427.0], [53.2, 9428.0], [53.3, 9433.0], [53.4, 9434.0], [53.5, 9435.0], [53.6, 9436.0], [53.7, 9437.0], [53.8, 9438.0], [53.9, 9440.0], [54.0, 9440.0], [54.1, 9448.0], [54.2, 9449.0], [54.3, 9451.0], [54.4, 9453.0], [54.5, 9457.0], [54.6, 9460.0], [54.7, 9462.0], [54.8, 9462.0], [54.9, 9463.0], [55.0, 9466.0], [55.1, 9468.0], [55.2, 9469.0], [55.3, 9469.0], [55.4, 9470.0], [55.5, 9471.0], [55.6, 9474.0], [55.7, 9477.0], [55.8, 9477.0], [55.9, 9477.0], [56.0, 9478.0], [56.1, 9479.0], [56.2, 9480.0], [56.3, 9481.0], [56.4, 9481.0], [56.5, 9482.0], [56.6, 9483.0], [56.7, 9483.0], [56.8, 9485.0], [56.9, 9486.0], [57.0, 9492.0], [57.1, 9494.0], [57.2, 9496.0], [57.3, 9496.0], [57.4, 9499.0], [57.5, 9499.0], [57.6, 9500.0], [57.7, 9500.0], [57.8, 9505.0], [57.9, 9505.0], [58.0, 9508.0], [58.1, 9510.0], [58.2, 9515.0], [58.3, 9516.0], [58.4, 9517.0], [58.5, 9517.0], [58.6, 9520.0], [58.7, 9521.0], [58.8, 9522.0], [58.9, 9526.0], [59.0, 9528.0], [59.1, 9528.0], [59.2, 9528.0], [59.3, 9529.0], [59.4, 9529.0], [59.5, 9531.0], [59.6, 9532.0], [59.7, 9533.0], [59.8, 9533.0], [59.9, 9537.0], [60.0, 9538.0], [60.1, 9538.0], [60.2, 9543.0], [60.3, 9543.0], [60.4, 9546.0], [60.5, 9546.0], [60.6, 9547.0], [60.7, 9551.0], [60.8, 9552.0], [60.9, 9553.0], [61.0, 9555.0], [61.1, 9556.0], [61.2, 9565.0], [61.3, 9566.0], [61.4, 9572.0], [61.5, 9574.0], [61.6, 9575.0], [61.7, 9576.0], [61.8, 9576.0], [61.9, 9579.0], [62.0, 9579.0], [62.1, 9580.0], [62.2, 9583.0], [62.3, 9585.0], [62.4, 9586.0], [62.5, 9587.0], [62.6, 9589.0], [62.7, 9593.0], [62.8, 9596.0], [62.9, 9602.0], [63.0, 9610.0], [63.1, 9611.0], [63.2, 9611.0], [63.3, 9615.0], [63.4, 9630.0], [63.5, 9631.0], [63.6, 9632.0], [63.7, 9634.0], [63.8, 9634.0], [63.9, 9635.0], [64.0, 9636.0], [64.1, 9637.0], [64.2, 9639.0], [64.3, 9640.0], [64.4, 9640.0], [64.5, 9642.0], [64.6, 9645.0], [64.7, 9649.0], [64.8, 9658.0], [64.9, 9659.0], [65.0, 9661.0], [65.1, 9661.0], [65.2, 9662.0], [65.3, 9664.0], [65.4, 9665.0], [65.5, 9666.0], [65.6, 9667.0], [65.7, 9674.0], [65.8, 9674.0], [65.9, 9676.0], [66.0, 9676.0], [66.1, 9676.0], [66.2, 9677.0], [66.3, 9679.0], [66.4, 9681.0], [66.5, 9681.0], [66.6, 9688.0], [66.7, 9690.0], [66.8, 9691.0], [66.9, 9691.0], [67.0, 9692.0], [67.1, 9693.0], [67.2, 9694.0], [67.3, 9694.0], [67.4, 9695.0], [67.5, 9696.0], [67.6, 9700.0], [67.7, 9710.0], [67.8, 9710.0], [67.9, 9710.0], [68.0, 9711.0], [68.1, 9712.0], [68.2, 9713.0], [68.3, 9713.0], [68.4, 9718.0], [68.5, 9719.0], [68.6, 9720.0], [68.7, 9728.0], [68.8, 9728.0], [68.9, 9731.0], [69.0, 9731.0], [69.1, 9733.0], [69.2, 9736.0], [69.3, 9743.0], [69.4, 9744.0], [69.5, 9745.0], [69.6, 9745.0], [69.7, 9749.0], [69.8, 9750.0], [69.9, 9751.0], [70.0, 9752.0], [70.1, 9753.0], [70.2, 9760.0], [70.3, 9761.0], [70.4, 9761.0], [70.5, 9761.0], [70.6, 9762.0], [70.7, 9762.0], [70.8, 9763.0], [70.9, 9764.0], [71.0, 9765.0], [71.1, 9767.0], [71.2, 9768.0], [71.3, 9769.0], [71.4, 9770.0], [71.5, 9772.0], [71.6, 9772.0], [71.7, 9772.0], [71.8, 9777.0], [71.9, 9778.0], [72.0, 9778.0], [72.1, 9780.0], [72.2, 9783.0], [72.3, 9784.0], [72.4, 9785.0], [72.5, 9788.0], [72.6, 9790.0], [72.7, 9792.0], [72.8, 9793.0], [72.9, 9793.0], [73.0, 9795.0], [73.1, 9796.0], [73.2, 9798.0], [73.3, 9798.0], [73.4, 9800.0], [73.5, 9801.0], [73.6, 9801.0], [73.7, 9802.0], [73.8, 9806.0], [73.9, 9813.0], [74.0, 9813.0], [74.1, 9815.0], [74.2, 9815.0], [74.3, 9816.0], [74.4, 9817.0], [74.5, 9818.0], [74.6, 9821.0], [74.7, 9822.0], [74.8, 9824.0], [74.9, 9826.0], [75.0, 9830.0], [75.1, 9831.0], [75.2, 9832.0], [75.3, 9833.0], [75.4, 9844.0], [75.5, 9844.0], [75.6, 9844.0], [75.7, 9845.0], [75.8, 9852.0], [75.9, 9855.0], [76.0, 9856.0], [76.1, 9856.0], [76.2, 9856.0], [76.3, 9857.0], [76.4, 9860.0], [76.5, 9860.0], [76.6, 9863.0], [76.7, 9865.0], [76.8, 9865.0], [76.9, 9867.0], [77.0, 9868.0], [77.1, 9870.0], [77.2, 9874.0], [77.3, 9876.0], [77.4, 9878.0], [77.5, 9879.0], [77.6, 9879.0], [77.7, 9881.0], [77.8, 9883.0], [77.9, 9884.0], [78.0, 9886.0], [78.1, 9893.0], [78.2, 9896.0], [78.3, 9896.0], [78.4, 9897.0], [78.5, 9897.0], [78.6, 9898.0], [78.7, 9899.0], [78.8, 9901.0], [78.9, 9901.0], [79.0, 9902.0], [79.1, 9907.0], [79.2, 9908.0], [79.3, 9911.0], [79.4, 9913.0], [79.5, 9915.0], [79.6, 9916.0], [79.7, 9923.0], [79.8, 9923.0], [79.9, 9924.0], [80.0, 9925.0], [80.1, 9931.0], [80.2, 9931.0], [80.3, 9933.0], [80.4, 9933.0], [80.5, 9937.0], [80.6, 9938.0], [80.7, 9939.0], [80.8, 9943.0], [80.9, 9949.0], [81.0, 9951.0], [81.1, 9951.0], [81.2, 9953.0], [81.3, 9955.0], [81.4, 9961.0], [81.5, 9966.0], [81.6, 9966.0], [81.7, 9968.0], [81.8, 9969.0], [81.9, 9974.0], [82.0, 9978.0], [82.1, 9980.0], [82.2, 9987.0], [82.3, 9991.0], [82.4, 9991.0], [82.5, 9992.0], [82.6, 9992.0], [82.7, 9993.0], [82.8, 10000.0], [82.9, 10001.0], [83.0, 10001.0], [83.1, 10003.0], [83.2, 10004.0], [83.3, 10005.0], [83.4, 10009.0], [83.5, 10011.0], [83.6, 10012.0], [83.7, 10013.0], [83.8, 10014.0], [83.9, 10023.0], [84.0, 10027.0], [84.1, 10029.0], [84.2, 10035.0], [84.3, 10036.0], [84.4, 10038.0], [84.5, 10042.0], [84.6, 10046.0], [84.7, 10051.0], [84.8, 10052.0], [84.9, 10071.0], [85.0, 10071.0], [85.1, 10073.0], [85.2, 10074.0], [85.3, 10075.0], [85.4, 10082.0], [85.5, 10083.0], [85.6, 10088.0], [85.7, 10088.0], [85.8, 10090.0], [85.9, 10097.0], [86.0, 10111.0], [86.1, 10114.0], [86.2, 10117.0], [86.3, 10123.0], [86.4, 10124.0], [86.5, 10127.0], [86.6, 10129.0], [86.7, 10155.0], [86.8, 10162.0], [86.9, 10181.0], [87.0, 10190.0], [87.1, 10199.0], [87.2, 10203.0], [87.3, 10207.0], [87.4, 10211.0], [87.5, 10212.0], [87.6, 10216.0], [87.7, 10219.0], [87.8, 10225.0], [87.9, 10232.0], [88.0, 10237.0], [88.1, 10241.0], [88.2, 10241.0], [88.3, 10242.0], [88.4, 10243.0], [88.5, 10244.0], [88.6, 10247.0], [88.7, 10248.0], [88.8, 10248.0], [88.9, 10249.0], [89.0, 10254.0], [89.1, 10256.0], [89.2, 10261.0], [89.3, 10266.0], [89.4, 10269.0], [89.5, 10273.0], [89.6, 10280.0], [89.7, 10282.0], [89.8, 10286.0], [89.9, 10288.0], [90.0, 10289.0], [90.1, 10289.0], [90.2, 10292.0], [90.3, 10296.0], [90.4, 10307.0], [90.5, 10308.0], [90.6, 10309.0], [90.7, 10309.0], [90.8, 10314.0], [90.9, 10315.0], [91.0, 10318.0], [91.1, 10319.0], [91.2, 10321.0], [91.3, 10322.0], [91.4, 10323.0], [91.5, 10324.0], [91.6, 10325.0], [91.7, 10328.0], [91.8, 10329.0], [91.9, 10329.0], [92.0, 10336.0], [92.1, 10343.0], [92.2, 10349.0], [92.3, 10351.0], [92.4, 10367.0], [92.5, 10367.0], [92.6, 10369.0], [92.7, 10373.0], [92.8, 10374.0], [92.9, 10376.0], [93.0, 10388.0], [93.1, 10391.0], [93.2, 10399.0], [93.3, 10400.0], [93.4, 10401.0], [93.5, 10403.0], [93.6, 10403.0], [93.7, 10407.0], [93.8, 10409.0], [93.9, 10412.0], [94.0, 10430.0], [94.1, 10437.0], [94.2, 10443.0], [94.3, 10450.0], [94.4, 10453.0], [94.5, 10453.0], [94.6, 10458.0], [94.7, 10458.0], [94.8, 10471.0], [94.9, 10474.0], [95.0, 10482.0], [95.1, 10483.0], [95.2, 10485.0], [95.3, 10486.0], [95.4, 10490.0], [95.5, 10490.0], [95.6, 10492.0], [95.7, 10501.0], [95.8, 10504.0], [95.9, 10510.0], [96.0, 10513.0], [96.1, 10514.0], [96.2, 10514.0], [96.3, 10533.0], [96.4, 10541.0], [96.5, 10541.0], [96.6, 10559.0], [96.7, 10565.0], [96.8, 10576.0], [96.9, 10578.0], [97.0, 10589.0], [97.1, 10603.0], [97.2, 10610.0], [97.3, 10618.0], [97.4, 10646.0], [97.5, 10672.0], [97.6, 10684.0], [97.7, 10696.0], [97.8, 10704.0], [97.9, 10714.0], [98.0, 10746.0], [98.1, 10771.0], [98.2, 10799.0], [98.3, 10803.0], [98.4, 10822.0], [98.5, 10822.0], [98.6, 10848.0], [98.7, 10860.0], [98.8, 10867.0], [98.9, 10875.0], [99.0, 10880.0], [99.1, 10886.0], [99.2, 10887.0], [99.3, 10895.0], [99.4, 10915.0], [99.5, 10928.0], [99.6, 10936.0], [99.7, 10950.0], [99.8, 10964.0], [99.9, 10970.0]], "isOverall": false, "label": "POST ADMIN LOGIN", "isController": false}, {"data": [[0.0, 2928.0], [0.1, 2982.0], [0.2, 3007.0], [0.3, 3031.0], [0.4, 3034.0], [0.5, 3038.0], [0.6, 3046.0], [0.7, 3051.0], [0.8, 3055.0], [0.9, 3057.0], [1.0, 3065.0], [1.1, 3065.0], [1.2, 3065.0], [1.3, 3070.0], [1.4, 3078.0], [1.5, 3081.0], [1.6, 3085.0], [1.7, 3088.0], [1.8, 3096.0], [1.9, 3100.0], [2.0, 3101.0], [2.1, 3101.0], [2.2, 3113.0], [2.3, 3118.0], [2.4, 3119.0], [2.5, 3121.0], [2.6, 3122.0], [2.7, 3122.0], [2.8, 3122.0], [2.9, 3129.0], [3.0, 3132.0], [3.1, 3132.0], [3.2, 3136.0], [3.3, 3139.0], [3.4, 3140.0], [3.5, 3142.0], [3.6, 3148.0], [3.7, 3149.0], [3.8, 3151.0], [3.9, 3155.0], [4.0, 3157.0], [4.1, 3158.0], [4.2, 3158.0], [4.3, 3160.0], [4.4, 3167.0], [4.5, 3169.0], [4.6, 3170.0], [4.7, 3175.0], [4.8, 3179.0], [4.9, 3182.0], [5.0, 3184.0], [5.1, 3187.0], [5.2, 3188.0], [5.3, 3191.0], [5.4, 3197.0], [5.5, 3197.0], [5.6, 3198.0], [5.7, 3199.0], [5.8, 3200.0], [5.9, 3201.0], [6.0, 3204.0], [6.1, 3205.0], [6.2, 3206.0], [6.3, 3216.0], [6.4, 3219.0], [6.5, 3228.0], [6.6, 3231.0], [6.7, 3232.0], [6.8, 3232.0], [6.9, 3233.0], [7.0, 3240.0], [7.1, 3240.0], [7.2, 3259.0], [7.3, 3264.0], [7.4, 3269.0], [7.5, 3291.0], [7.6, 3295.0], [7.7, 3295.0], [7.8, 3296.0], [7.9, 3298.0], [8.0, 3299.0], [8.1, 3302.0], [8.2, 3304.0], [8.3, 3304.0], [8.4, 3306.0], [8.5, 3308.0], [8.6, 3313.0], [8.7, 3317.0], [8.8, 3322.0], [8.9, 3323.0], [9.0, 3328.0], [9.1, 3333.0], [9.2, 3334.0], [9.3, 3338.0], [9.4, 3339.0], [9.5, 3339.0], [9.6, 3351.0], [9.7, 3355.0], [9.8, 3355.0], [9.9, 3355.0], [10.0, 3357.0], [10.1, 3358.0], [10.2, 3369.0], [10.3, 3380.0], [10.4, 3381.0], [10.5, 3382.0], [10.6, 3384.0], [10.7, 3385.0], [10.8, 3389.0], [10.9, 3390.0], [11.0, 3399.0], [11.1, 3400.0], [11.2, 3409.0], [11.3, 3414.0], [11.4, 3420.0], [11.5, 3425.0], [11.6, 3433.0], [11.7, 3433.0], [11.8, 3434.0], [11.9, 3435.0], [12.0, 3441.0], [12.1, 3448.0], [12.2, 3456.0], [12.3, 3461.0], [12.4, 3462.0], [12.5, 3482.0], [12.6, 3495.0], [12.7, 3496.0], [12.8, 3498.0], [12.9, 3514.0], [13.0, 3518.0], [13.1, 3523.0], [13.2, 3529.0], [13.3, 3531.0], [13.4, 3533.0], [13.5, 3537.0], [13.6, 3540.0], [13.7, 3551.0], [13.8, 3553.0], [13.9, 3557.0], [14.0, 3560.0], [14.1, 3561.0], [14.2, 3563.0], [14.3, 3569.0], [14.4, 3569.0], [14.5, 3573.0], [14.6, 3576.0], [14.7, 3582.0], [14.8, 3582.0], [14.9, 3583.0], [15.0, 3584.0], [15.1, 3591.0], [15.2, 3600.0], [15.3, 3602.0], [15.4, 3604.0], [15.5, 3606.0], [15.6, 3614.0], [15.7, 3619.0], [15.8, 3619.0], [15.9, 3620.0], [16.0, 3624.0], [16.1, 3630.0], [16.2, 3636.0], [16.3, 3645.0], [16.4, 3650.0], [16.5, 3657.0], [16.6, 3660.0], [16.7, 3675.0], [16.8, 3683.0], [16.9, 3685.0], [17.0, 3689.0], [17.1, 3692.0], [17.2, 3694.0], [17.3, 3695.0], [17.4, 3696.0], [17.5, 3704.0], [17.6, 3711.0], [17.7, 3711.0], [17.8, 3713.0], [17.9, 3718.0], [18.0, 3719.0], [18.1, 3722.0], [18.2, 3724.0], [18.3, 3727.0], [18.4, 3728.0], [18.5, 3734.0], [18.6, 3737.0], [18.7, 3738.0], [18.8, 3741.0], [18.9, 3741.0], [19.0, 3743.0], [19.1, 3743.0], [19.2, 3745.0], [19.3, 3747.0], [19.4, 3754.0], [19.5, 3756.0], [19.6, 3758.0], [19.7, 3759.0], [19.8, 3760.0], [19.9, 3762.0], [20.0, 3763.0], [20.1, 3766.0], [20.2, 3771.0], [20.3, 3772.0], [20.4, 3773.0], [20.5, 3779.0], [20.6, 3780.0], [20.7, 3782.0], [20.8, 3783.0], [20.9, 3784.0], [21.0, 3785.0], [21.1, 3789.0], [21.2, 3790.0], [21.3, 3792.0], [21.4, 3795.0], [21.5, 3796.0], [21.6, 3796.0], [21.7, 3797.0], [21.8, 3797.0], [21.9, 3801.0], [22.0, 3803.0], [22.1, 3807.0], [22.2, 3807.0], [22.3, 3808.0], [22.4, 3810.0], [22.5, 3813.0], [22.6, 3815.0], [22.7, 3815.0], [22.8, 3816.0], [22.9, 3817.0], [23.0, 3817.0], [23.1, 3818.0], [23.2, 3819.0], [23.3, 3820.0], [23.4, 3820.0], [23.5, 3822.0], [23.6, 3823.0], [23.7, 3823.0], [23.8, 3829.0], [23.9, 3829.0], [24.0, 3831.0], [24.1, 3831.0], [24.2, 3833.0], [24.3, 3833.0], [24.4, 3834.0], [24.5, 3838.0], [24.6, 3845.0], [24.7, 3847.0], [24.8, 3847.0], [24.9, 3847.0], [25.0, 3849.0], [25.1, 3850.0], [25.2, 3852.0], [25.3, 3853.0], [25.4, 3853.0], [25.5, 3854.0], [25.6, 3854.0], [25.7, 3855.0], [25.8, 3857.0], [25.9, 3857.0], [26.0, 3857.0], [26.1, 3859.0], [26.2, 3862.0], [26.3, 3864.0], [26.4, 3865.0], [26.5, 3865.0], [26.6, 3867.0], [26.7, 3869.0], [26.8, 3869.0], [26.9, 3869.0], [27.0, 3877.0], [27.1, 3878.0], [27.2, 3878.0], [27.3, 3882.0], [27.4, 3889.0], [27.5, 3889.0], [27.6, 3891.0], [27.7, 3892.0], [27.8, 3895.0], [27.9, 3898.0], [28.0, 3898.0], [28.1, 3899.0], [28.2, 3900.0], [28.3, 3902.0], [28.4, 3903.0], [28.5, 3905.0], [28.6, 3905.0], [28.7, 3905.0], [28.8, 3919.0], [28.9, 3922.0], [29.0, 3925.0], [29.1, 3930.0], [29.2, 3934.0], [29.3, 3935.0], [29.4, 3937.0], [29.5, 3938.0], [29.6, 3943.0], [29.7, 3946.0], [29.8, 3948.0], [29.9, 3948.0], [30.0, 3948.0], [30.1, 3951.0], [30.2, 3952.0], [30.3, 3953.0], [30.4, 3955.0], [30.5, 3956.0], [30.6, 3961.0], [30.7, 3963.0], [30.8, 3964.0], [30.9, 3966.0], [31.0, 3967.0], [31.1, 3968.0], [31.2, 3970.0], [31.3, 3972.0], [31.4, 3973.0], [31.5, 3978.0], [31.6, 3980.0], [31.7, 3980.0], [31.8, 3983.0], [31.9, 3986.0], [32.0, 3986.0], [32.1, 3989.0], [32.2, 3990.0], [32.3, 3991.0], [32.4, 3993.0], [32.5, 3995.0], [32.6, 3998.0], [32.7, 3999.0], [32.8, 4001.0], [32.9, 4005.0], [33.0, 4008.0], [33.1, 4022.0], [33.2, 4023.0], [33.3, 4024.0], [33.4, 4026.0], [33.5, 4026.0], [33.6, 4026.0], [33.7, 4026.0], [33.8, 4027.0], [33.9, 4027.0], [34.0, 4029.0], [34.1, 4031.0], [34.2, 4032.0], [34.3, 4034.0], [34.4, 4036.0], [34.5, 4037.0], [34.6, 4042.0], [34.7, 4043.0], [34.8, 4044.0], [34.9, 4045.0], [35.0, 4052.0], [35.1, 4054.0], [35.2, 4055.0], [35.3, 4056.0], [35.4, 4057.0], [35.5, 4063.0], [35.6, 4063.0], [35.7, 4063.0], [35.8, 4064.0], [35.9, 4064.0], [36.0, 4066.0], [36.1, 4067.0], [36.2, 4068.0], [36.3, 4072.0], [36.4, 4075.0], [36.5, 4077.0], [36.6, 4085.0], [36.7, 4086.0], [36.8, 4087.0], [36.9, 4091.0], [37.0, 4100.0], [37.1, 4101.0], [37.2, 4104.0], [37.3, 4105.0], [37.4, 4106.0], [37.5, 4107.0], [37.6, 4109.0], [37.7, 4110.0], [37.8, 4116.0], [37.9, 4118.0], [38.0, 4118.0], [38.1, 4118.0], [38.2, 4119.0], [38.3, 4131.0], [38.4, 4132.0], [38.5, 4134.0], [38.6, 4135.0], [38.7, 4141.0], [38.8, 4145.0], [38.9, 4145.0], [39.0, 4146.0], [39.1, 4146.0], [39.2, 4149.0], [39.3, 4150.0], [39.4, 4151.0], [39.5, 4152.0], [39.6, 4152.0], [39.7, 4152.0], [39.8, 4153.0], [39.9, 4156.0], [40.0, 4167.0], [40.1, 4170.0], [40.2, 4172.0], [40.3, 4176.0], [40.4, 4183.0], [40.5, 4184.0], [40.6, 4184.0], [40.7, 4186.0], [40.8, 4186.0], [40.9, 4188.0], [41.0, 4189.0], [41.1, 4189.0], [41.2, 4190.0], [41.3, 4192.0], [41.4, 4193.0], [41.5, 4194.0], [41.6, 4194.0], [41.7, 4198.0], [41.8, 4199.0], [41.9, 4205.0], [42.0, 4206.0], [42.1, 4206.0], [42.2, 4206.0], [42.3, 4206.0], [42.4, 4207.0], [42.5, 4207.0], [42.6, 4211.0], [42.7, 4211.0], [42.8, 4215.0], [42.9, 4216.0], [43.0, 4220.0], [43.1, 4220.0], [43.2, 4222.0], [43.3, 4222.0], [43.4, 4222.0], [43.5, 4225.0], [43.6, 4231.0], [43.7, 4232.0], [43.8, 4235.0], [43.9, 4236.0], [44.0, 4237.0], [44.1, 4237.0], [44.2, 4240.0], [44.3, 4241.0], [44.4, 4242.0], [44.5, 4246.0], [44.6, 4249.0], [44.7, 4250.0], [44.8, 4252.0], [44.9, 4252.0], [45.0, 4254.0], [45.1, 4261.0], [45.2, 4264.0], [45.3, 4265.0], [45.4, 4266.0], [45.5, 4270.0], [45.6, 4270.0], [45.7, 4271.0], [45.8, 4272.0], [45.9, 4272.0], [46.0, 4272.0], [46.1, 4273.0], [46.2, 4274.0], [46.3, 4279.0], [46.4, 4279.0], [46.5, 4280.0], [46.6, 4280.0], [46.7, 4281.0], [46.8, 4281.0], [46.9, 4281.0], [47.0, 4282.0], [47.1, 4283.0], [47.2, 4283.0], [47.3, 4287.0], [47.4, 4288.0], [47.5, 4293.0], [47.6, 4297.0], [47.7, 4298.0], [47.8, 4300.0], [47.9, 4300.0], [48.0, 4301.0], [48.1, 4301.0], [48.2, 4303.0], [48.3, 4304.0], [48.4, 4304.0], [48.5, 4304.0], [48.6, 4305.0], [48.7, 4310.0], [48.8, 4316.0], [48.9, 4318.0], [49.0, 4320.0], [49.1, 4321.0], [49.2, 4322.0], [49.3, 4323.0], [49.4, 4324.0], [49.5, 4325.0], [49.6, 4325.0], [49.7, 4326.0], [49.8, 4336.0], [49.9, 4337.0], [50.0, 4337.0], [50.1, 4338.0], [50.2, 4340.0], [50.3, 4341.0], [50.4, 4341.0], [50.5, 4345.0], [50.6, 4345.0], [50.7, 4348.0], [50.8, 4348.0], [50.9, 4350.0], [51.0, 4350.0], [51.1, 4350.0], [51.2, 4351.0], [51.3, 4352.0], [51.4, 4360.0], [51.5, 4360.0], [51.6, 4360.0], [51.7, 4363.0], [51.8, 4367.0], [51.9, 4369.0], [52.0, 4371.0], [52.1, 4371.0], [52.2, 4372.0], [52.3, 4372.0], [52.4, 4372.0], [52.5, 4376.0], [52.6, 4379.0], [52.7, 4379.0], [52.8, 4382.0], [52.9, 4385.0], [53.0, 4386.0], [53.1, 4386.0], [53.2, 4387.0], [53.3, 4387.0], [53.4, 4389.0], [53.5, 4394.0], [53.6, 4399.0], [53.7, 4400.0], [53.8, 4402.0], [53.9, 4406.0], [54.0, 4410.0], [54.1, 4413.0], [54.2, 4421.0], [54.3, 4425.0], [54.4, 4427.0], [54.5, 4430.0], [54.6, 4431.0], [54.7, 4434.0], [54.8, 4434.0], [54.9, 4435.0], [55.0, 4436.0], [55.1, 4436.0], [55.2, 4441.0], [55.3, 4443.0], [55.4, 4444.0], [55.5, 4446.0], [55.6, 4447.0], [55.7, 4449.0], [55.8, 4453.0], [55.9, 4457.0], [56.0, 4458.0], [56.1, 4464.0], [56.2, 4465.0], [56.3, 4481.0], [56.4, 4486.0], [56.5, 4492.0], [56.6, 4494.0], [56.7, 4496.0], [56.8, 4501.0], [56.9, 4503.0], [57.0, 4507.0], [57.1, 4516.0], [57.2, 4521.0], [57.3, 4525.0], [57.4, 4525.0], [57.5, 4530.0], [57.6, 4534.0], [57.7, 4534.0], [57.8, 4540.0], [57.9, 4547.0], [58.0, 4552.0], [58.1, 4553.0], [58.2, 4566.0], [58.3, 4574.0], [58.4, 4574.0], [58.5, 4580.0], [58.6, 4585.0], [58.7, 4585.0], [58.8, 4591.0], [58.9, 4591.0], [59.0, 4596.0], [59.1, 4597.0], [59.2, 4599.0], [59.3, 4599.0], [59.4, 4600.0], [59.5, 4600.0], [59.6, 4602.0], [59.7, 4610.0], [59.8, 4615.0], [59.9, 4621.0], [60.0, 4622.0], [60.1, 4628.0], [60.2, 4634.0], [60.3, 4636.0], [60.4, 4636.0], [60.5, 4637.0], [60.6, 4640.0], [60.7, 4653.0], [60.8, 4656.0], [60.9, 4660.0], [61.0, 4663.0], [61.1, 4664.0], [61.2, 4667.0], [61.3, 4674.0], [61.4, 4675.0], [61.5, 4676.0], [61.6, 4681.0], [61.7, 4683.0], [61.8, 4686.0], [61.9, 4691.0], [62.0, 4695.0], [62.1, 4697.0], [62.2, 4700.0], [62.3, 4703.0], [62.4, 4703.0], [62.5, 4705.0], [62.6, 4709.0], [62.7, 4710.0], [62.8, 4710.0], [62.9, 4713.0], [63.0, 4713.0], [63.1, 4715.0], [63.2, 4716.0], [63.3, 4716.0], [63.4, 4719.0], [63.5, 4723.0], [63.6, 4725.0], [63.7, 4728.0], [63.8, 4730.0], [63.9, 4734.0], [64.0, 4735.0], [64.1, 4735.0], [64.2, 4735.0], [64.3, 4738.0], [64.4, 4740.0], [64.5, 4742.0], [64.6, 4743.0], [64.7, 4743.0], [64.8, 4743.0], [64.9, 4746.0], [65.0, 4749.0], [65.1, 4750.0], [65.2, 4755.0], [65.3, 4757.0], [65.4, 4759.0], [65.5, 4760.0], [65.6, 4761.0], [65.7, 4761.0], [65.8, 4763.0], [65.9, 4767.0], [66.0, 4770.0], [66.1, 4772.0], [66.2, 4772.0], [66.3, 4775.0], [66.4, 4778.0], [66.5, 4778.0], [66.6, 4778.0], [66.7, 4779.0], [66.8, 4779.0], [66.9, 4779.0], [67.0, 4779.0], [67.1, 4788.0], [67.2, 4789.0], [67.3, 4789.0], [67.4, 4789.0], [67.5, 4790.0], [67.6, 4791.0], [67.7, 4791.0], [67.8, 4793.0], [67.9, 4794.0], [68.0, 4798.0], [68.1, 4801.0], [68.2, 4801.0], [68.3, 4803.0], [68.4, 4804.0], [68.5, 4805.0], [68.6, 4806.0], [68.7, 4814.0], [68.8, 4814.0], [68.9, 4814.0], [69.0, 4816.0], [69.1, 4824.0], [69.2, 4825.0], [69.3, 4829.0], [69.4, 4834.0], [69.5, 4838.0], [69.6, 4840.0], [69.7, 4845.0], [69.8, 4848.0], [69.9, 4848.0], [70.0, 4848.0], [70.1, 4855.0], [70.2, 4856.0], [70.3, 4859.0], [70.4, 4860.0], [70.5, 4861.0], [70.6, 4862.0], [70.7, 4863.0], [70.8, 4866.0], [70.9, 4867.0], [71.0, 4868.0], [71.1, 4872.0], [71.2, 4873.0], [71.3, 4874.0], [71.4, 4885.0], [71.5, 4886.0], [71.6, 4887.0], [71.7, 4888.0], [71.8, 4891.0], [71.9, 4892.0], [72.0, 4895.0], [72.1, 4895.0], [72.2, 4898.0], [72.3, 4901.0], [72.4, 4903.0], [72.5, 4906.0], [72.6, 4914.0], [72.7, 4922.0], [72.8, 4925.0], [72.9, 4927.0], [73.0, 4929.0], [73.1, 4929.0], [73.2, 4933.0], [73.3, 4935.0], [73.4, 4937.0], [73.5, 4937.0], [73.6, 4942.0], [73.7, 4943.0], [73.8, 4947.0], [73.9, 4957.0], [74.0, 4976.0], [74.1, 4979.0], [74.2, 4982.0], [74.3, 4991.0], [74.4, 4991.0], [74.5, 4994.0], [74.6, 4996.0], [74.7, 4996.0], [74.8, 4998.0], [74.9, 5005.0], [75.0, 5005.0], [75.1, 5007.0], [75.2, 5009.0], [75.3, 5010.0], [75.4, 5014.0], [75.5, 5015.0], [75.6, 5026.0], [75.7, 5027.0], [75.8, 5031.0], [75.9, 5033.0], [76.0, 5034.0], [76.1, 5036.0], [76.2, 5044.0], [76.3, 5048.0], [76.4, 5055.0], [76.5, 5061.0], [76.6, 5064.0], [76.7, 5065.0], [76.8, 5065.0], [76.9, 5067.0], [77.0, 5067.0], [77.1, 5068.0], [77.2, 5077.0], [77.3, 5087.0], [77.4, 5088.0], [77.5, 5088.0], [77.6, 5094.0], [77.7, 5101.0], [77.8, 5113.0], [77.9, 5116.0], [78.0, 5118.0], [78.1, 5120.0], [78.2, 5125.0], [78.3, 5130.0], [78.4, 5133.0], [78.5, 5139.0], [78.6, 5139.0], [78.7, 5149.0], [78.8, 5152.0], [78.9, 5156.0], [79.0, 5165.0], [79.1, 5175.0], [79.2, 5177.0], [79.3, 5196.0], [79.4, 5196.0], [79.5, 5207.0], [79.6, 5209.0], [79.7, 5221.0], [79.8, 5230.0], [79.9, 5235.0], [80.0, 5236.0], [80.1, 5258.0], [80.2, 5262.0], [80.3, 5274.0], [80.4, 5287.0], [80.5, 5290.0], [80.6, 5303.0], [80.7, 5325.0], [80.8, 5326.0], [80.9, 5333.0], [81.0, 5341.0], [81.1, 5344.0], [81.2, 5346.0], [81.3, 5369.0], [81.4, 5408.0], [81.5, 5428.0], [81.6, 5453.0], [81.7, 5468.0], [81.8, 5504.0], [81.9, 5505.0], [82.0, 5539.0], [82.1, 5541.0], [82.2, 5541.0], [82.3, 5551.0], [82.4, 5570.0], [82.5, 5571.0], [82.6, 5620.0], [82.7, 5682.0], [82.8, 5700.0], [82.9, 5717.0], [83.0, 5718.0], [83.1, 5749.0], [83.2, 5795.0], [83.3, 5818.0], [83.4, 5885.0], [83.5, 5912.0], [83.6, 5921.0], [83.7, 5929.0], [83.8, 6001.0], [83.9, 6057.0], [84.0, 6057.0], [84.1, 6093.0], [84.2, 6099.0], [84.3, 6131.0], [84.4, 6141.0], [84.5, 6150.0], [84.6, 6187.0], [84.7, 6219.0], [84.8, 6307.0], [84.9, 6323.0], [85.0, 6338.0], [85.1, 6361.0], [85.2, 6365.0], [85.3, 6367.0], [85.4, 6408.0], [85.5, 6475.0], [85.6, 6509.0], [85.7, 6536.0], [85.8, 6543.0], [85.9, 6556.0], [86.0, 6570.0], [86.1, 6737.0], [86.2, 6774.0], [86.3, 6890.0], [86.4, 6921.0], [86.5, 6924.0], [86.6, 6971.0], [86.7, 6976.0], [86.8, 7023.0], [86.9, 7054.0], [87.0, 7072.0], [87.1, 7083.0], [87.2, 7111.0], [87.3, 7138.0], [87.4, 7153.0], [87.5, 7155.0], [87.6, 7211.0], [87.7, 7260.0], [87.8, 7275.0], [87.9, 7294.0], [88.0, 7378.0], [88.1, 7422.0], [88.2, 7436.0], [88.3, 7467.0], [88.4, 7470.0], [88.5, 7498.0], [88.6, 7502.0], [88.7, 7502.0], [88.8, 7557.0], [88.9, 7636.0], [89.0, 7636.0], [89.1, 7655.0], [89.2, 7694.0], [89.3, 7814.0], [89.4, 7842.0], [89.5, 7856.0], [89.6, 7892.0], [89.7, 7898.0], [89.8, 7954.0], [89.9, 7955.0], [90.0, 7967.0], [90.1, 8071.0], [90.2, 8080.0], [90.3, 8082.0], [90.4, 8132.0], [90.5, 8135.0], [90.6, 8140.0], [90.7, 8170.0], [90.8, 8193.0], [90.9, 8201.0], [91.0, 8223.0], [91.1, 8227.0], [91.2, 8231.0], [91.3, 8240.0], [91.4, 8243.0], [91.5, 8249.0], [91.6, 8283.0], [91.7, 8287.0], [91.8, 8293.0], [91.9, 8316.0], [92.0, 8331.0], [92.1, 8346.0], [92.2, 8378.0], [92.3, 8381.0], [92.4, 8382.0], [92.5, 8400.0], [92.6, 8406.0], [92.7, 8415.0], [92.8, 8416.0], [92.9, 8434.0], [93.0, 8462.0], [93.1, 8479.0], [93.2, 8520.0], [93.3, 8535.0], [93.4, 8536.0], [93.5, 8557.0], [93.6, 8564.0], [93.7, 8593.0], [93.8, 8616.0], [93.9, 8620.0], [94.0, 8648.0], [94.1, 8660.0], [94.2, 8663.0], [94.3, 8704.0], [94.4, 8724.0], [94.5, 8741.0], [94.6, 8777.0], [94.7, 8781.0], [94.8, 8809.0], [94.9, 8821.0], [95.0, 8847.0], [95.1, 8912.0], [95.2, 8931.0], [95.3, 8948.0], [95.4, 8954.0], [95.5, 8965.0], [95.6, 9016.0], [95.7, 9027.0], [95.8, 9047.0], [95.9, 9054.0], [96.0, 9076.0], [96.1, 9104.0], [96.2, 9107.0], [96.3, 9122.0], [96.4, 9135.0], [96.5, 9158.0], [96.6, 9180.0], [96.7, 9181.0], [96.8, 9193.0], [96.9, 9193.0], [97.0, 9201.0], [97.1, 9201.0], [97.2, 9212.0], [97.3, 9246.0], [97.4, 9248.0], [97.5, 9256.0], [97.6, 9280.0], [97.7, 9293.0], [97.8, 9296.0], [97.9, 9309.0], [98.0, 9322.0], [98.1, 9323.0], [98.2, 9324.0], [98.3, 9361.0], [98.4, 9378.0], [98.5, 9412.0], [98.6, 9420.0], [98.7, 9427.0], [98.8, 9446.0], [98.9, 9453.0], [99.0, 9469.0], [99.1, 9519.0], [99.2, 9530.0], [99.3, 9551.0], [99.4, 9583.0], [99.5, 9623.0], [99.6, 9650.0], [99.7, 9679.0], [99.8, 9697.0], [99.9, 9713.0], [100.0, 9736.0]], "isOverall": false, "label": "GET ADMIN DASHBOARD", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2900.0, "maxY": 175.0, "series": [{"data": [[4300.0, 5.0], [4200.0, 1.0], [4600.0, 1.0], [4400.0, 2.0], [5000.0, 1.0], [5300.0, 1.0], [5600.0, 2.0], [5500.0, 1.0], [5800.0, 1.0], [5700.0, 3.0], [6200.0, 1.0], [9400.0, 1.0], [10500.0, 1.0], [11100.0, 1.0], [10800.0, 1.0], [11700.0, 1.0], [11800.0, 2.0], [12000.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12400.0, 3.0], [12500.0, 3.0], [12600.0, 2.0], [12700.0, 11.0], [12800.0, 6.0], [12900.0, 5.0], [13000.0, 2.0], [13100.0, 4.0], [13300.0, 37.0], [13200.0, 8.0], [13400.0, 97.0], [13500.0, 134.0], [13600.0, 175.0], [13700.0, 104.0], [13800.0, 84.0], [13900.0, 69.0], [14300.0, 29.0], [14200.0, 72.0], [14100.0, 55.0], [14000.0, 33.0], [14500.0, 21.0], [14800.0, 8.0], [14600.0, 11.0], [14400.0, 18.0], [14700.0, 4.0], [15100.0, 13.0], [15300.0, 11.0], [14900.0, 13.0], [15000.0, 6.0], [15200.0, 7.0], [15700.0, 2.0], [15400.0, 2.0], [15500.0, 6.0], [15800.0, 1.0], [15600.0, 2.0], [15900.0, 4.0], [16000.0, 2.0], [16300.0, 1.0], [16100.0, 2.0], [16900.0, 1.0], [16400.0, 1.0], [16600.0, 1.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[4200.0, 3.0], [4300.0, 7.0], [4400.0, 5.0], [4600.0, 6.0], [4500.0, 1.0], [4800.0, 4.0], [4700.0, 1.0], [4900.0, 4.0], [5000.0, 7.0], [5100.0, 2.0], [5300.0, 12.0], [5200.0, 8.0], [5600.0, 4.0], [5400.0, 6.0], [5500.0, 3.0], [5700.0, 17.0], [5800.0, 6.0], [6000.0, 5.0], [5900.0, 4.0], [6100.0, 1.0], [6300.0, 4.0], [6200.0, 2.0], [6500.0, 5.0], [6400.0, 7.0], [6600.0, 3.0], [6900.0, 3.0], [6800.0, 5.0], [6700.0, 4.0], [7000.0, 5.0], [7100.0, 5.0], [7400.0, 4.0], [7200.0, 3.0], [7600.0, 3.0], [7700.0, 3.0], [7900.0, 6.0], [8000.0, 4.0], [8100.0, 3.0], [8300.0, 16.0], [8700.0, 27.0], [8200.0, 5.0], [8400.0, 10.0], [8500.0, 31.0], [8600.0, 24.0], [8800.0, 30.0], [9000.0, 36.0], [9200.0, 53.0], [9100.0, 57.0], [8900.0, 39.0], [9300.0, 59.0], [9400.0, 70.0], [9500.0, 59.0], [9600.0, 51.0], [9700.0, 64.0], [9800.0, 59.0], [9900.0, 44.0], [10000.0, 36.0], [10100.0, 13.0], [10200.0, 35.0], [10300.0, 32.0], [10400.0, 26.0], [10500.0, 16.0], [10600.0, 7.0], [10700.0, 6.0], [10800.0, 12.0], [10900.0, 7.0]], "isOverall": false, "label": "POST ADMIN LOGIN", "isController": false}, {"data": [[2900.0, 2.0], [3000.0, 18.0], [3100.0, 42.0], [3300.0, 32.0], [3200.0, 25.0], [3400.0, 20.0], [3500.0, 25.0], [3600.0, 24.0], [3700.0, 48.0], [3800.0, 68.0], [3900.0, 50.0], [4000.0, 45.0], [4200.0, 64.0], [4300.0, 63.0], [4100.0, 53.0], [4600.0, 30.0], [4400.0, 34.0], [4500.0, 28.0], [4800.0, 45.0], [4700.0, 64.0], [5100.0, 19.0], [4900.0, 28.0], [5000.0, 31.0], [5300.0, 9.0], [5200.0, 12.0], [5500.0, 9.0], [5400.0, 4.0], [5600.0, 2.0], [5700.0, 5.0], [5800.0, 2.0], [6100.0, 4.0], [6000.0, 5.0], [5900.0, 4.0], [6300.0, 7.0], [6200.0, 1.0], [6400.0, 2.0], [6500.0, 5.0], [6800.0, 2.0], [6900.0, 4.0], [6700.0, 2.0], [7000.0, 4.0], [7100.0, 5.0], [7400.0, 5.0], [7200.0, 4.0], [7300.0, 1.0], [7600.0, 4.0], [7500.0, 4.0], [7800.0, 5.0], [7900.0, 4.0], [8000.0, 3.0], [8100.0, 5.0], [8400.0, 8.0], [8700.0, 5.0], [8600.0, 6.0], [8300.0, 6.0], [8500.0, 6.0], [8200.0, 11.0], [9000.0, 5.0], [9100.0, 10.0], [9200.0, 10.0], [8900.0, 5.0], [8800.0, 4.0], [9600.0, 4.0], [9500.0, 4.0], [9700.0, 2.0], [9300.0, 6.0], [9400.0, 7.0]], "isOverall": false, "label": "GET ADMIN DASHBOARD", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2229.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2229.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2229.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 41.999999999999986, "minX": 1.60360632E12, "maxY": 50.0, "series": [{"data": [[1.60360656E12, 50.0], [1.60360644E12, 50.0], [1.60360662E12, 41.999999999999986], [1.60360632E12, 50.0], [1.6036065E12, 50.0], [1.60360638E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360662E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4153.0, "minX": 1.0, "maxY": 14265.0, "series": [{"data": [[2.0, 4273.0], [3.0, 4371.0], [4.0, 4392.0], [5.0, 9485.0], [6.0, 4305.0], [7.0, 4491.0], [8.0, 4466.0], [9.0, 4379.0], [10.0, 4603.0], [11.0, 11772.0], [12.0, 5001.0], [13.0, 10591.0], [14.0, 10872.0], [15.0, 11131.0], [16.0, 5542.0], [17.0, 14265.0], [18.0, 5616.0], [19.0, 5787.0], [20.0, 6219.0], [21.0, 13899.0], [22.0, 13680.0], [23.0, 13571.0], [24.0, 5785.0], [25.0, 13515.0], [26.0, 13598.0], [27.0, 13421.0], [28.0, 5795.0], [29.0, 13524.0], [30.0, 5854.0], [31.0, 13517.0], [33.0, 13606.0], [32.0, 13460.0], [34.0, 13618.0], [37.0, 13704.0], [36.0, 13730.0], [39.0, 13864.0], [38.0, 13754.0], [41.0, 13672.0], [40.0, 13588.0], [43.0, 13606.0], [42.0, 13748.0], [45.0, 5338.0], [44.0, 5609.0], [47.0, 13477.0], [46.0, 13451.0], [49.0, 13538.0], [48.0, 13211.0], [50.0, 13895.047619047607], [1.0, 4333.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[48.88626023657869, 13722.071883530465]], "isOverall": false, "label": "SELECT Test-Aggregated", "isController": true}, {"data": [[8.0, 4465.0], [2.0, 4272.0], [9.0, 4379.0], [10.0, 4603.0], [45.0, 5338.0], [44.0, 5609.0], [12.0, 5001.0], [3.0, 4370.0], [50.0, 9032.515740740751], [16.0, 5541.0], [4.0, 4392.0], [1.0, 4333.0], [18.0, 5615.0], [19.0, 5787.0], [20.0, 6219.0], [24.0, 5784.0], [6.0, 4305.0], [28.0, 5795.0], [7.0, 4491.0], [30.0, 5854.0]], "isOverall": false, "label": "POST ADMIN LOGIN", "isController": false}, {"data": [[49.41401273885351, 8963.848953594188]], "isOverall": false, "label": "POST ADMIN LOGIN-Aggregated", "isController": false}, {"data": [[33.0, 5067.0], [32.0, 4816.0], [34.0, 5064.0], [37.0, 5196.0], [36.0, 5125.0], [39.0, 5258.0], [38.0, 5196.0], [41.0, 5139.0], [40.0, 5152.0], [43.0, 5118.0], [42.0, 5165.0], [47.0, 4906.0], [46.0, 4947.0], [49.0, 4845.0], [48.0, 4814.0], [50.0, 4840.334285714284], [5.0, 4153.0], [11.0, 4716.0], [13.0, 4402.0], [14.0, 4430.0], [15.0, 4703.0], [17.0, 5156.0], [21.0, 4996.0], [22.0, 4803.0], [23.0, 4790.0], [25.0, 4770.0], [26.0, 4779.0], [27.0, 4791.0], [29.0, 4730.0], [31.0, 4761.0]], "isOverall": false, "label": "GET ADMIN DASHBOARD", "isController": false}, {"data": [[49.46296296296296, 4841.911111111111]], "isOverall": false, "label": "GET ADMIN DASHBOARD-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 129918.63333333333, "minX": 1.60360632E12, "maxY": 2690008.966666667, "series": [{"data": [[1.60360656E12, 1096625.8], [1.60360644E12, 1181593.4333333333], [1.60360662E12, 722235.9166666666], [1.60360632E12, 2690008.966666667], [1.6036065E12, 1155040.2666666666], [1.60360638E12, 1070070.8833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60360656E12, 197255.78333333333], [1.60360644E12, 212532.25], [1.60360662E12, 129918.63333333333], [1.60360632E12, 146819.5], [1.6036065E12, 207690.31666666668], [1.60360638E12, 192403.21666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360662E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3442.81690140845, "minX": 1.60360632E12, "maxY": 14071.321782178216, "series": [{"data": [[1.60360656E12, 14071.321782178216], [1.60360644E12, 13788.097560975608], [1.60360662E12, 12227.147826086955], [1.60360632E12, 13576.499999999996], [1.6036065E12, 14037.948275862065], [1.60360638E12, 13895.57142857143]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.60360656E12, 8341.516587677721], [1.60360644E12, 8950.079166666663], [1.60360662E12, 7542.115789473685], [1.60360632E12, 10141.093333333338], [1.6036065E12, 8733.822660098518], [1.60360638E12, 9662.800000000003]], "isOverall": false, "label": "POST ADMIN LOGIN", "isController": false}, {"data": [[1.60360656E12, 5787.495049504952], [1.60360644E12, 4989.643902439023], [1.60360662E12, 5514.552083333333], [1.60360632E12, 3442.81690140845], [1.6036065E12, 5125.750000000001], [1.60360638E12, 4087.990147783247]], "isOverall": false, "label": "GET ADMIN DASHBOARD", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360662E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60360632E12, "maxY": 5239.3600000000015, "series": [{"data": [[1.60360656E12, 0.0], [1.60360644E12, 0.0], [1.60360662E12, 0.0], [1.60360632E12, 0.0], [1.6036065E12, 0.0], [1.60360638E12, 0.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.60360656E12, 4469.734597156399], [1.60360644E12, 4836.295833333333], [1.60360662E12, 4419.926315789474], [1.60360632E12, 5239.3600000000015], [1.6036065E12, 4755.088669950741], [1.60360638E12, 5218.31]], "isOverall": false, "label": "POST ADMIN LOGIN", "isController": false}, {"data": [[1.60360656E12, 2828.6287128712866], [1.60360644E12, 2458.4780487804887], [1.60360662E12, 2858.510416666666], [1.60360632E12, 1747.7605633802818], [1.6036065E12, 2521.543103448274], [1.60360638E12, 2000.004926108375]], "isOverall": false, "label": "GET ADMIN DASHBOARD", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360662E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60360632E12, "maxY": 3.593333333333331, "series": [{"data": [[1.60360656E12, 0.0], [1.60360644E12, 0.0], [1.60360662E12, 0.0], [1.60360632E12, 0.0], [1.6036065E12, 0.0], [1.60360638E12, 0.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.60360656E12, 1.3317535545023702], [1.60360644E12, 1.2666666666666666], [1.60360662E12, 1.168421052631579], [1.60360632E12, 3.593333333333331], [1.6036065E12, 1.3448275862068961], [1.60360638E12, 1.3899999999999995]], "isOverall": false, "label": "POST ADMIN LOGIN", "isController": false}, {"data": [[1.60360656E12, 0.0], [1.60360644E12, 0.0], [1.60360662E12, 0.0], [1.60360632E12, 0.0], [1.6036065E12, 0.0], [1.60360638E12, 0.0]], "isOverall": false, "label": "GET ADMIN DASHBOARD", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360662E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2928.0, "minX": 1.60360632E12, "maxY": 14265.0, "series": [{"data": [[1.60360656E12, 10325.0], [1.60360644E12, 10074.0], [1.60360662E12, 14265.0], [1.60360632E12, 10991.0], [1.6036065E12, 10097.0], [1.60360638E12, 10803.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60360656E12, 4277.0], [1.60360644E12, 3807.0], [1.60360662E12, 4153.0], [1.60360632E12, 2928.0], [1.6036065E12, 3899.0], [1.60360638E12, 3057.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60360656E12, 9978.2], [1.60360644E12, 10261.0], [1.60360662E12, 9999.300000000001], [1.60360632E12, 10587.5], [1.6036065E12, 10088.0], [1.60360638E12, 10400.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60360656E12, 10711.1], [1.60360644E12, 10840.2], [1.60360662E12, 13468.329999999996], [1.60360632E12, 10964.42], [1.6036065E12, 10791.720000000001], [1.60360638E12, 10881.65]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60360656E12, 10314.55], [1.60360644E12, 10453.0], [1.60360662E12, 10367.9], [1.60360632E12, 10862.449999999999], [1.6036065E12, 10371.8], [1.60360638E12, 10541.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360662E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5155.0, "minX": 1000.0, "maxY": 9436.5, "series": [{"data": [[1000.0, 7636.0], [2000.0, 5155.0], [4000.0, 9436.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1295.5, "minX": 1000.0, "maxY": 2920.0, "series": [{"data": [[1000.0, 2920.0], [2000.0, 2267.0], [4000.0, 1295.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.183333333333333, "minX": 1.60360632E12, "maxY": 7.416666666666667, "series": [{"data": [[1.60360656E12, 6.883333333333334], [1.60360644E12, 7.416666666666667], [1.60360662E12, 3.183333333333333], [1.60360632E12, 5.7], [1.6036065E12, 7.25], [1.60360638E12, 6.716666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360662E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.016666666666667, "minX": 1.60360632E12, "maxY": 7.416666666666667, "series": [{"data": [[1.60360656E12, 6.883333333333334], [1.60360644E12, 7.416666666666667], [1.60360662E12, 4.016666666666667], [1.60360632E12, 4.866666666666666], [1.6036065E12, 7.25], [1.60360638E12, 6.716666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360662E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.60360632E12, "maxY": 4.0, "series": [{"data": [[1.60360656E12, 3.3666666666666667], [1.60360644E12, 3.4166666666666665], [1.60360662E12, 1.6], [1.60360632E12, 2.3666666666666667], [1.6036065E12, 3.8666666666666667], [1.60360638E12, 3.3833333333333333]], "isOverall": false, "label": "GET ADMIN DASHBOARD-success", "isController": false}, {"data": [[1.60360656E12, 3.3666666666666667], [1.60360644E12, 3.4166666666666665], [1.60360662E12, 1.9166666666666667], [1.60360632E12, 2.3666666666666667], [1.6036065E12, 3.8666666666666667], [1.60360638E12, 3.3833333333333333]], "isOverall": false, "label": "SELECT Test-success", "isController": true}, {"data": [[1.60360656E12, 3.5166666666666666], [1.60360644E12, 4.0], [1.60360662E12, 1.5833333333333333], [1.60360632E12, 2.5], [1.6036065E12, 3.3833333333333333], [1.60360638E12, 3.3333333333333335]], "isOverall": false, "label": "POST ADMIN LOGIN-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360662E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.1, "minX": 1.60360632E12, "maxY": 11.116666666666667, "series": [{"data": [[1.60360656E12, 10.25], [1.60360644E12, 10.833333333333334], [1.60360662E12, 5.1], [1.60360632E12, 7.233333333333333], [1.6036065E12, 11.116666666666667], [1.60360638E12, 10.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360662E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

