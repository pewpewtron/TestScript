/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 264.0, "minX": 0.0, "maxY": 31793.0, "series": [{"data": [[0.0, 4535.0], [0.1, 4535.0], [0.2, 9944.0], [0.3, 9967.0], [0.4, 10091.0], [0.5, 10091.0], [0.6, 10115.0], [0.7, 10146.0], [0.8, 10255.0], [0.9, 10424.0], [1.0, 10424.0], [1.1, 10620.0], [1.2, 11093.0], [1.3, 11384.0], [1.4, 11459.0], [1.5, 11459.0], [1.6, 11476.0], [1.7, 11551.0], [1.8, 11634.0], [1.9, 11634.0], [2.0, 11670.0], [2.1, 11737.0], [2.2, 11925.0], [2.3, 11975.0], [2.4, 11975.0], [2.5, 12055.0], [2.6, 12074.0], [2.7, 12088.0], [2.8, 12092.0], [2.9, 12092.0], [3.0, 12110.0], [3.1, 12126.0], [3.2, 12152.0], [3.3, 12152.0], [3.4, 12169.0], [3.5, 12179.0], [3.6, 12239.0], [3.7, 12246.0], [3.8, 12246.0], [3.9, 12286.0], [4.0, 12291.0], [4.1, 12307.0], [4.2, 12312.0], [4.3, 12312.0], [4.4, 12320.0], [4.5, 12365.0], [4.6, 12452.0], [4.7, 12452.0], [4.8, 14109.0], [4.9, 14737.0], [5.0, 14962.0], [5.1, 17070.0], [5.2, 17070.0], [5.3, 17110.0], [5.4, 17458.0], [5.5, 17464.0], [5.6, 17545.0], [5.7, 17545.0], [5.8, 17566.0], [5.9, 17696.0], [6.0, 17716.0], [6.1, 17739.0], [6.2, 17739.0], [6.3, 17789.0], [6.4, 17815.0], [6.5, 17832.0], [6.6, 17832.0], [6.7, 17874.0], [6.8, 18041.0], [6.9, 18072.0], [7.0, 18140.0], [7.1, 18140.0], [7.2, 18191.0], [7.3, 18201.0], [7.4, 18519.0], [7.5, 18574.0], [7.6, 18574.0], [7.7, 18701.0], [7.8, 18715.0], [7.9, 18730.0], [8.0, 18730.0], [8.1, 18815.0], [8.2, 18923.0], [8.3, 18965.0], [8.4, 18994.0], [8.5, 18994.0], [8.6, 19065.0], [8.7, 19088.0], [8.8, 19135.0], [8.9, 19169.0], [9.0, 19169.0], [9.1, 19177.0], [9.2, 19193.0], [9.3, 19200.0], [9.4, 19200.0], [9.5, 19200.0], [9.6, 19201.0], [9.7, 19205.0], [9.8, 19208.0], [9.9, 19208.0], [10.0, 19214.0], [10.1, 19223.0], [10.2, 19224.0], [10.3, 19237.0], [10.4, 19237.0], [10.5, 19244.0], [10.6, 19248.0], [10.7, 19265.0], [10.8, 19265.0], [10.9, 19271.0], [11.0, 19272.0], [11.1, 19272.0], [11.2, 19273.0], [11.3, 19273.0], [11.4, 19274.0], [11.5, 19277.0], [11.6, 19278.0], [11.7, 19283.0], [11.8, 19283.0], [11.9, 19284.0], [12.0, 19284.0], [12.1, 19288.0], [12.2, 19292.0], [12.3, 19292.0], [12.4, 19296.0], [12.5, 19300.0], [12.6, 19302.0], [12.7, 19302.0], [12.8, 19303.0], [12.9, 19303.0], [13.0, 19307.0], [13.1, 19312.0], [13.2, 19312.0], [13.3, 19315.0], [13.4, 19315.0], [13.5, 19316.0], [13.6, 19322.0], [13.7, 19322.0], [13.8, 19323.0], [13.9, 19325.0], [14.0, 19330.0], [14.1, 19330.0], [14.2, 19331.0], [14.3, 19337.0], [14.4, 19340.0], [14.5, 19347.0], [14.6, 19347.0], [14.7, 19348.0], [14.8, 19351.0], [14.9, 19351.0], [15.0, 19352.0], [15.1, 19352.0], [15.2, 19358.0], [15.3, 19362.0], [15.4, 19362.0], [15.5, 19362.0], [15.6, 19365.0], [15.7, 19365.0], [15.8, 19366.0], [15.9, 19367.0], [16.0, 19367.0], [16.1, 19367.0], [16.2, 19370.0], [16.3, 19373.0], [16.4, 19376.0], [16.5, 19376.0], [16.6, 19378.0], [16.7, 19378.0], [16.8, 19384.0], [16.9, 19389.0], [17.0, 19389.0], [17.1, 19395.0], [17.2, 19395.0], [17.3, 19396.0], [17.4, 19396.0], [17.5, 19396.0], [17.6, 19397.0], [17.7, 19401.0], [17.8, 19406.0], [17.9, 19406.0], [18.0, 19407.0], [18.1, 19417.0], [18.2, 19422.0], [18.3, 19422.0], [18.4, 19422.0], [18.5, 19425.0], [18.6, 19425.0], [18.7, 19427.0], [18.8, 19427.0], [18.9, 19427.0], [19.0, 19427.0], [19.1, 19431.0], [19.2, 19431.0], [19.3, 19431.0], [19.4, 19436.0], [19.5, 19440.0], [19.6, 19442.0], [19.7, 19442.0], [19.8, 19442.0], [19.9, 19444.0], [20.0, 19446.0], [20.1, 19446.0], [20.2, 19446.0], [20.3, 19450.0], [20.4, 19450.0], [20.5, 19451.0], [20.6, 19451.0], [20.7, 19451.0], [20.8, 19453.0], [20.9, 19454.0], [21.0, 19457.0], [21.1, 19458.0], [21.2, 19458.0], [21.3, 19459.0], [21.4, 19460.0], [21.5, 19461.0], [21.6, 19461.0], [21.7, 19463.0], [21.8, 19464.0], [21.9, 19465.0], [22.0, 19466.0], [22.1, 19466.0], [22.2, 19467.0], [22.3, 19469.0], [22.4, 19470.0], [22.5, 19472.0], [22.6, 19472.0], [22.7, 19473.0], [22.8, 19473.0], [22.9, 19474.0], [23.0, 19474.0], [23.1, 19474.0], [23.2, 19476.0], [23.3, 19477.0], [23.4, 19477.0], [23.5, 19477.0], [23.6, 19478.0], [23.7, 19483.0], [23.8, 19488.0], [23.9, 19490.0], [24.0, 19490.0], [24.1, 19491.0], [24.2, 19492.0], [24.3, 19503.0], [24.4, 19504.0], [24.5, 19504.0], [24.6, 19504.0], [24.7, 19505.0], [24.8, 19507.0], [24.9, 19507.0], [25.0, 19514.0], [25.1, 19514.0], [25.2, 19516.0], [25.3, 19517.0], [25.4, 19517.0], [25.5, 19517.0], [25.6, 19519.0], [25.7, 19520.0], [25.8, 19523.0], [25.9, 19523.0], [26.0, 19523.0], [26.1, 19525.0], [26.2, 19526.0], [26.3, 19526.0], [26.4, 19529.0], [26.5, 19530.0], [26.6, 19530.0], [26.7, 19533.0], [26.8, 19533.0], [26.9, 19534.0], [27.0, 19535.0], [27.1, 19535.0], [27.2, 19538.0], [27.3, 19538.0], [27.4, 19540.0], [27.5, 19542.0], [27.6, 19542.0], [27.7, 19542.0], [27.8, 19543.0], [27.9, 19546.0], [28.0, 19546.0], [28.1, 19548.0], [28.2, 19548.0], [28.3, 19548.0], [28.4, 19549.0], [28.5, 19550.0], [28.6, 19552.0], [28.7, 19552.0], [28.8, 19552.0], [28.9, 19555.0], [29.0, 19555.0], [29.1, 19556.0], [29.2, 19556.0], [29.3, 19556.0], [29.4, 19558.0], [29.5, 19558.0], [29.6, 19558.0], [29.7, 19559.0], [29.8, 19560.0], [29.9, 19561.0], [30.0, 19562.0], [30.1, 19562.0], [30.2, 19562.0], [30.3, 19565.0], [30.4, 19566.0], [30.5, 19568.0], [30.6, 19568.0], [30.7, 19569.0], [30.8, 19570.0], [30.9, 19571.0], [31.0, 19571.0], [31.1, 19574.0], [31.2, 19577.0], [31.3, 19579.0], [31.4, 19581.0], [31.5, 19581.0], [31.6, 19581.0], [31.7, 19582.0], [31.8, 19586.0], [31.9, 19587.0], [32.0, 19587.0], [32.1, 19591.0], [32.2, 19594.0], [32.3, 19597.0], [32.4, 19597.0], [32.5, 19597.0], [32.6, 19598.0], [32.7, 19599.0], [32.8, 19600.0], [32.9, 19600.0], [33.0, 19603.0], [33.1, 19604.0], [33.2, 19604.0], [33.3, 19605.0], [33.4, 19605.0], [33.5, 19606.0], [33.6, 19607.0], [33.7, 19608.0], [33.8, 19610.0], [33.9, 19610.0], [34.0, 19610.0], [34.1, 19611.0], [34.2, 19611.0], [34.3, 19611.0], [34.4, 19614.0], [34.5, 19619.0], [34.6, 19622.0], [34.7, 19625.0], [34.8, 19625.0], [34.9, 19626.0], [35.0, 19627.0], [35.1, 19627.0], [35.2, 19628.0], [35.3, 19628.0], [35.4, 19628.0], [35.5, 19629.0], [35.6, 19630.0], [35.7, 19630.0], [35.8, 19632.0], [35.9, 19633.0], [36.0, 19635.0], [36.1, 19636.0], [36.2, 19636.0], [36.3, 19636.0], [36.4, 19638.0], [36.5, 19638.0], [36.6, 19640.0], [36.7, 19640.0], [36.8, 19642.0], [36.9, 19644.0], [37.0, 19646.0], [37.1, 19646.0], [37.2, 19649.0], [37.3, 19649.0], [37.4, 19653.0], [37.5, 19654.0], [37.6, 19654.0], [37.7, 19654.0], [37.8, 19656.0], [37.9, 19657.0], [38.0, 19661.0], [38.1, 19661.0], [38.2, 19665.0], [38.3, 19669.0], [38.4, 19673.0], [38.5, 19673.0], [38.6, 19675.0], [38.7, 19676.0], [38.8, 19678.0], [38.9, 19678.0], [39.0, 19678.0], [39.1, 19679.0], [39.2, 19682.0], [39.3, 19682.0], [39.4, 19682.0], [39.5, 19682.0], [39.6, 19686.0], [39.7, 19686.0], [39.8, 19690.0], [39.9, 19695.0], [40.0, 19695.0], [40.1, 19699.0], [40.2, 19703.0], [40.3, 19704.0], [40.4, 19704.0], [40.5, 19706.0], [40.6, 19709.0], [40.7, 19713.0], [40.8, 19714.0], [40.9, 19714.0], [41.0, 19715.0], [41.1, 19715.0], [41.2, 19715.0], [41.3, 19716.0], [41.4, 19716.0], [41.5, 19716.0], [41.6, 19720.0], [41.7, 19724.0], [41.8, 19724.0], [41.9, 19725.0], [42.0, 19726.0], [42.1, 19727.0], [42.2, 19728.0], [42.3, 19728.0], [42.4, 19729.0], [42.5, 19732.0], [42.6, 19734.0], [42.7, 19735.0], [42.8, 19735.0], [42.9, 19735.0], [43.0, 19736.0], [43.1, 19739.0], [43.2, 19739.0], [43.3, 19741.0], [43.4, 19745.0], [43.5, 19746.0], [43.6, 19752.0], [43.7, 19752.0], [43.8, 19753.0], [43.9, 19753.0], [44.0, 19754.0], [44.1, 19757.0], [44.2, 19757.0], [44.3, 19759.0], [44.4, 19760.0], [44.5, 19765.0], [44.6, 19765.0], [44.7, 19765.0], [44.8, 19767.0], [44.9, 19768.0], [45.0, 19768.0], [45.1, 19768.0], [45.2, 19770.0], [45.3, 19771.0], [45.4, 19773.0], [45.5, 19778.0], [45.6, 19778.0], [45.7, 19783.0], [45.8, 19783.0], [45.9, 19784.0], [46.0, 19784.0], [46.1, 19784.0], [46.2, 19785.0], [46.3, 19785.0], [46.4, 19788.0], [46.5, 19788.0], [46.6, 19789.0], [46.7, 19790.0], [46.8, 19794.0], [46.9, 19796.0], [47.0, 19796.0], [47.1, 19798.0], [47.2, 19798.0], [47.3, 19804.0], [47.4, 19805.0], [47.5, 19805.0], [47.6, 19807.0], [47.7, 19808.0], [47.8, 19811.0], [47.9, 19811.0], [48.0, 19814.0], [48.1, 19815.0], [48.2, 19820.0], [48.3, 19821.0], [48.4, 19821.0], [48.5, 19821.0], [48.6, 19826.0], [48.7, 19827.0], [48.8, 19828.0], [48.9, 19828.0], [49.0, 19828.0], [49.1, 19833.0], [49.2, 19834.0], [49.3, 19834.0], [49.4, 19838.0], [49.5, 19838.0], [49.6, 19839.0], [49.7, 19839.0], [49.8, 19839.0], [49.9, 19839.0], [50.0, 19839.0], [50.1, 19841.0], [50.2, 19841.0], [50.3, 19841.0], [50.4, 19842.0], [50.5, 19843.0], [50.6, 19843.0], [50.7, 19843.0], [50.8, 19843.0], [50.9, 19845.0], [51.0, 19846.0], [51.1, 19847.0], [51.2, 19847.0], [51.3, 19847.0], [51.4, 19848.0], [51.5, 19849.0], [51.6, 19850.0], [51.7, 19850.0], [51.8, 19851.0], [51.9, 19851.0], [52.0, 19851.0], [52.1, 19852.0], [52.2, 19852.0], [52.3, 19859.0], [52.4, 19860.0], [52.5, 19861.0], [52.6, 19861.0], [52.7, 19863.0], [52.8, 19863.0], [52.9, 19865.0], [53.0, 19865.0], [53.1, 19865.0], [53.2, 19866.0], [53.3, 19867.0], [53.4, 19867.0], [53.5, 19868.0], [53.6, 19868.0], [53.7, 19868.0], [53.8, 19869.0], [53.9, 19869.0], [54.0, 19869.0], [54.1, 19874.0], [54.2, 19874.0], [54.3, 19874.0], [54.4, 19874.0], [54.5, 19874.0], [54.6, 19874.0], [54.7, 19875.0], [54.8, 19876.0], [54.9, 19878.0], [55.0, 19878.0], [55.1, 19878.0], [55.2, 19878.0], [55.3, 19879.0], [55.4, 19879.0], [55.5, 19880.0], [55.6, 19880.0], [55.7, 19881.0], [55.8, 19885.0], [55.9, 19885.0], [56.0, 19885.0], [56.1, 19885.0], [56.2, 19888.0], [56.3, 19893.0], [56.4, 19893.0], [56.5, 19893.0], [56.6, 19893.0], [56.7, 19894.0], [56.8, 19896.0], [56.9, 19896.0], [57.0, 19897.0], [57.1, 19898.0], [57.2, 19899.0], [57.3, 19899.0], [57.4, 19901.0], [57.5, 19903.0], [57.6, 19904.0], [57.7, 19905.0], [57.8, 19905.0], [57.9, 19906.0], [58.0, 19906.0], [58.1, 19906.0], [58.2, 19908.0], [58.3, 19908.0], [58.4, 19910.0], [58.5, 19912.0], [58.6, 19913.0], [58.7, 19913.0], [58.8, 19914.0], [58.9, 19915.0], [59.0, 19915.0], [59.1, 19917.0], [59.2, 19917.0], [59.3, 19919.0], [59.4, 19927.0], [59.5, 19928.0], [59.6, 19928.0], [59.7, 19928.0], [59.8, 19928.0], [59.9, 19929.0], [60.0, 19929.0], [60.1, 19929.0], [60.2, 19929.0], [60.3, 19931.0], [60.4, 19932.0], [60.5, 19932.0], [60.6, 19932.0], [60.7, 19932.0], [60.8, 19932.0], [60.9, 19934.0], [61.0, 19936.0], [61.1, 19936.0], [61.2, 19939.0], [61.3, 19940.0], [61.4, 19941.0], [61.5, 19943.0], [61.6, 19943.0], [61.7, 19944.0], [61.8, 19947.0], [61.9, 19951.0], [62.0, 19951.0], [62.1, 19951.0], [62.2, 19953.0], [62.3, 19956.0], [62.4, 19958.0], [62.5, 19958.0], [62.6, 19960.0], [62.7, 19966.0], [62.8, 19967.0], [62.9, 19968.0], [63.0, 19968.0], [63.1, 19969.0], [63.2, 19970.0], [63.3, 19975.0], [63.4, 19975.0], [63.5, 19975.0], [63.6, 19980.0], [63.7, 19983.0], [63.8, 19988.0], [63.9, 19988.0], [64.0, 19989.0], [64.1, 19989.0], [64.2, 19990.0], [64.3, 19994.0], [64.4, 19994.0], [64.5, 19997.0], [64.6, 19997.0], [64.7, 19998.0], [64.8, 19998.0], [64.9, 20000.0], [65.0, 20002.0], [65.1, 20003.0], [65.2, 20004.0], [65.3, 20004.0], [65.4, 20005.0], [65.5, 20006.0], [65.6, 20008.0], [65.7, 20009.0], [65.8, 20009.0], [65.9, 20010.0], [66.0, 20010.0], [66.1, 20010.0], [66.2, 20010.0], [66.3, 20011.0], [66.4, 20018.0], [66.5, 20019.0], [66.6, 20020.0], [66.7, 20020.0], [66.8, 20020.0], [66.9, 20021.0], [67.0, 20022.0], [67.1, 20023.0], [67.2, 20023.0], [67.3, 20023.0], [67.4, 20025.0], [67.5, 20027.0], [67.6, 20028.0], [67.7, 20028.0], [67.8, 20029.0], [67.9, 20031.0], [68.0, 20031.0], [68.1, 20031.0], [68.2, 20032.0], [68.3, 20034.0], [68.4, 20036.0], [68.5, 20040.0], [68.6, 20040.0], [68.7, 20043.0], [68.8, 20044.0], [68.9, 20046.0], [69.0, 20050.0], [69.1, 20050.0], [69.2, 20055.0], [69.3, 20056.0], [69.4, 20058.0], [69.5, 20058.0], [69.6, 20059.0], [69.7, 20060.0], [69.8, 20061.0], [69.9, 20064.0], [70.0, 20064.0], [70.1, 20064.0], [70.2, 20065.0], [70.3, 20066.0], [70.4, 20070.0], [70.5, 20070.0], [70.6, 20071.0], [70.7, 20071.0], [70.8, 20071.0], [70.9, 20071.0], [71.0, 20074.0], [71.1, 20075.0], [71.2, 20076.0], [71.3, 20079.0], [71.4, 20079.0], [71.5, 20080.0], [71.6, 20081.0], [71.7, 20081.0], [71.8, 20082.0], [71.9, 20082.0], [72.0, 20082.0], [72.1, 20083.0], [72.2, 20090.0], [72.3, 20092.0], [72.4, 20092.0], [72.5, 20092.0], [72.6, 20093.0], [72.7, 20095.0], [72.8, 20095.0], [72.9, 20098.0], [73.0, 20099.0], [73.1, 20101.0], [73.2, 20103.0], [73.3, 20103.0], [73.4, 20103.0], [73.5, 20104.0], [73.6, 20112.0], [73.7, 20114.0], [73.8, 20114.0], [73.9, 20120.0], [74.0, 20122.0], [74.1, 20124.0], [74.2, 20124.0], [74.3, 20128.0], [74.4, 20128.0], [74.5, 20128.0], [74.6, 20136.0], [74.7, 20136.0], [74.8, 20144.0], [74.9, 20144.0], [75.0, 20145.0], [75.1, 20145.0], [75.2, 20145.0], [75.3, 20148.0], [75.4, 20148.0], [75.5, 20149.0], [75.6, 20149.0], [75.7, 20149.0], [75.8, 20149.0], [75.9, 20154.0], [76.0, 20156.0], [76.1, 20156.0], [76.2, 20160.0], [76.3, 20165.0], [76.4, 20173.0], [76.5, 20174.0], [76.6, 20174.0], [76.7, 20175.0], [76.8, 20186.0], [76.9, 20186.0], [77.0, 20186.0], [77.1, 20187.0], [77.2, 20190.0], [77.3, 20195.0], [77.4, 20196.0], [77.5, 20196.0], [77.6, 20202.0], [77.7, 20205.0], [77.8, 20207.0], [77.9, 20211.0], [78.0, 20211.0], [78.1, 20218.0], [78.2, 20219.0], [78.3, 20226.0], [78.4, 20234.0], [78.5, 20234.0], [78.6, 20236.0], [78.7, 20239.0], [78.8, 20240.0], [78.9, 20240.0], [79.0, 20246.0], [79.1, 20246.0], [79.2, 20247.0], [79.3, 20258.0], [79.4, 20258.0], [79.5, 20258.0], [79.6, 20260.0], [79.7, 20260.0], [79.8, 20262.0], [79.9, 20262.0], [80.0, 20263.0], [80.1, 20268.0], [80.2, 20271.0], [80.3, 20271.0], [80.4, 20271.0], [80.5, 20274.0], [80.6, 20277.0], [80.7, 20281.0], [80.8, 20281.0], [80.9, 20285.0], [81.0, 20291.0], [81.1, 20291.0], [81.2, 20295.0], [81.3, 20295.0], [81.4, 20297.0], [81.5, 20298.0], [81.6, 20317.0], [81.7, 20317.0], [81.8, 20323.0], [81.9, 20326.0], [82.0, 20330.0], [82.1, 20331.0], [82.2, 20331.0], [82.3, 20333.0], [82.4, 20334.0], [82.5, 20341.0], [82.6, 20345.0], [82.7, 20345.0], [82.8, 20351.0], [82.9, 20352.0], [83.0, 20355.0], [83.1, 20355.0], [83.2, 20357.0], [83.3, 20359.0], [83.4, 20362.0], [83.5, 20364.0], [83.6, 20364.0], [83.7, 20365.0], [83.8, 20366.0], [83.9, 20367.0], [84.0, 20369.0], [84.1, 20369.0], [84.2, 20373.0], [84.3, 20381.0], [84.4, 20386.0], [84.5, 20395.0], [84.6, 20395.0], [84.7, 20401.0], [84.8, 20402.0], [84.9, 20406.0], [85.0, 20406.0], [85.1, 20407.0], [85.2, 20409.0], [85.3, 20410.0], [85.4, 20412.0], [85.5, 20412.0], [85.6, 20414.0], [85.7, 20415.0], [85.8, 20415.0], [85.9, 20415.0], [86.0, 20415.0], [86.1, 20416.0], [86.2, 20420.0], [86.3, 20421.0], [86.4, 20421.0], [86.5, 20423.0], [86.6, 20424.0], [86.7, 20425.0], [86.8, 20426.0], [86.9, 20426.0], [87.0, 20426.0], [87.1, 20427.0], [87.2, 20431.0], [87.3, 20435.0], [87.4, 20435.0], [87.5, 20437.0], [87.6, 20441.0], [87.7, 20444.0], [87.8, 20444.0], [87.9, 20445.0], [88.0, 20448.0], [88.1, 20450.0], [88.2, 20453.0], [88.3, 20453.0], [88.4, 20457.0], [88.5, 20464.0], [88.6, 20468.0], [88.7, 20468.0], [88.8, 20468.0], [88.9, 20471.0], [89.0, 20471.0], [89.1, 20478.0], [89.2, 20479.0], [89.3, 20479.0], [89.4, 20484.0], [89.5, 20485.0], [89.6, 20486.0], [89.7, 20486.0], [89.8, 20487.0], [89.9, 20487.0], [90.0, 20487.0], [90.1, 20488.0], [90.2, 20488.0], [90.3, 20488.0], [90.4, 20488.0], [90.5, 20489.0], [90.6, 20490.0], [90.7, 20490.0], [90.8, 20491.0], [90.9, 20497.0], [91.0, 20501.0], [91.1, 20501.0], [91.2, 20501.0], [91.3, 20505.0], [91.4, 20510.0], [91.5, 20510.0], [91.6, 20510.0], [91.7, 20511.0], [91.8, 20518.0], [91.9, 20519.0], [92.0, 20523.0], [92.1, 20523.0], [92.2, 20525.0], [92.3, 20528.0], [92.4, 20534.0], [92.5, 20534.0], [92.6, 20541.0], [92.7, 20543.0], [92.8, 20547.0], [92.9, 20548.0], [93.0, 20548.0], [93.1, 20550.0], [93.2, 20551.0], [93.3, 20557.0], [93.4, 20559.0], [93.5, 20559.0], [93.6, 20561.0], [93.7, 20566.0], [93.8, 20584.0], [93.9, 20584.0], [94.0, 20588.0], [94.1, 20592.0], [94.2, 20593.0], [94.3, 20599.0], [94.4, 20599.0], [94.5, 20601.0], [94.6, 20603.0], [94.7, 20604.0], [94.8, 20608.0], [94.9, 20608.0], [95.0, 20612.0], [95.1, 20614.0], [95.2, 20614.0], [95.3, 20621.0], [95.4, 20621.0], [95.5, 20622.0], [95.6, 20639.0], [95.7, 20650.0], [95.8, 20650.0], [95.9, 20650.0], [96.0, 20651.0], [96.1, 20651.0], [96.2, 20652.0], [96.3, 20652.0], [96.4, 20653.0], [96.5, 20658.0], [96.6, 20664.0], [96.7, 20665.0], [96.8, 20665.0], [96.9, 20673.0], [97.0, 20684.0], [97.1, 20688.0], [97.2, 20688.0], [97.3, 20690.0], [97.4, 20703.0], [97.5, 20712.0], [97.6, 20718.0], [97.7, 20718.0], [97.8, 20725.0], [97.9, 20727.0], [98.0, 20741.0], [98.1, 20742.0], [98.2, 20742.0], [98.3, 20752.0], [98.4, 20819.0], [98.5, 20853.0], [98.6, 20853.0], [98.7, 20937.0], [98.8, 20995.0], [98.9, 21055.0], [99.0, 21238.0], [99.1, 21238.0], [99.2, 21291.0], [99.3, 21379.0], [99.4, 21510.0], [99.5, 27017.0], [99.6, 27017.0], [99.7, 29580.0], [99.8, 30862.0], [99.9, 31793.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 4066.0], [0.1, 4066.0], [0.2, 4071.0], [0.3, 4075.0], [0.4, 4075.0], [0.5, 4096.0], [0.6, 4106.0], [0.7, 4117.0], [0.8, 4117.0], [0.9, 4154.0], [1.0, 4163.0], [1.1, 4187.0], [1.2, 4187.0], [1.3, 4215.0], [1.4, 4236.0], [1.5, 4257.0], [1.6, 4257.0], [1.7, 4262.0], [1.8, 4271.0], [1.9, 4271.0], [2.0, 4271.0], [2.1, 4276.0], [2.2, 4304.0], [2.3, 4304.0], [2.4, 4304.0], [2.5, 4308.0], [2.6, 4311.0], [2.7, 4338.0], [2.8, 4338.0], [2.9, 4349.0], [3.0, 4359.0], [3.1, 4382.0], [3.2, 4382.0], [3.3, 4403.0], [3.4, 4427.0], [3.5, 4439.0], [3.6, 4439.0], [3.7, 4449.0], [3.8, 4458.0], [3.9, 4480.0], [4.0, 4480.0], [4.1, 4526.0], [4.2, 4536.0], [4.3, 4548.0], [4.4, 4548.0], [4.5, 4549.0], [4.6, 4553.0], [4.7, 4556.0], [4.8, 4556.0], [4.9, 4568.0], [5.0, 4579.0], [5.1, 4602.0], [5.2, 4602.0], [5.3, 4612.0], [5.4, 4628.0], [5.5, 4633.0], [5.6, 4633.0], [5.7, 4643.0], [5.8, 4644.0], [5.9, 4650.0], [6.0, 4650.0], [6.1, 4653.0], [6.2, 4657.0], [6.3, 4658.0], [6.4, 4658.0], [6.5, 4672.0], [6.6, 4682.0], [6.7, 4684.0], [6.8, 4684.0], [6.9, 4693.0], [7.0, 4699.0], [7.1, 4700.0], [7.2, 4700.0], [7.3, 4701.0], [7.4, 4701.0], [7.5, 4703.0], [7.6, 4703.0], [7.7, 4704.0], [7.8, 4723.0], [7.9, 4728.0], [8.0, 4728.0], [8.1, 4730.0], [8.2, 4732.0], [8.3, 4735.0], [8.4, 4735.0], [8.5, 4739.0], [8.6, 4746.0], [8.7, 4751.0], [8.8, 4751.0], [8.9, 4756.0], [9.0, 4759.0], [9.1, 4762.0], [9.2, 4762.0], [9.3, 4763.0], [9.4, 4770.0], [9.5, 4780.0], [9.6, 4780.0], [9.7, 4790.0], [9.8, 4791.0], [9.9, 4791.0], [10.0, 4791.0], [10.1, 4794.0], [10.2, 4796.0], [10.3, 4797.0], [10.4, 4797.0], [10.5, 4798.0], [10.6, 4798.0], [10.7, 4804.0], [10.8, 4804.0], [10.9, 4807.0], [11.0, 4809.0], [11.1, 4812.0], [11.2, 4812.0], [11.3, 4814.0], [11.4, 4818.0], [11.5, 4821.0], [11.6, 4821.0], [11.7, 4823.0], [11.8, 4824.0], [11.9, 4824.0], [12.0, 4824.0], [12.1, 4828.0], [12.2, 4838.0], [12.3, 4841.0], [12.4, 4841.0], [12.5, 4842.0], [12.6, 4848.0], [12.7, 4848.0], [12.8, 4852.0], [12.9, 4856.0], [13.0, 4859.0], [13.1, 4859.0], [13.2, 4859.0], [13.3, 4862.0], [13.4, 4864.0], [13.5, 4864.0], [13.6, 4864.0], [13.7, 4865.0], [13.8, 4879.0], [13.9, 4879.0], [14.0, 4881.0], [14.1, 4882.0], [14.2, 4889.0], [14.3, 4889.0], [14.4, 4891.0], [14.5, 4892.0], [14.6, 4893.0], [14.7, 4893.0], [14.8, 4893.0], [14.9, 4894.0], [15.0, 4895.0], [15.1, 4895.0], [15.2, 4897.0], [15.3, 4898.0], [15.4, 4901.0], [15.5, 4901.0], [15.6, 4901.0], [15.7, 4904.0], [15.8, 4904.0], [15.9, 4904.0], [16.0, 4906.0], [16.1, 4911.0], [16.2, 4911.0], [16.3, 4911.0], [16.4, 4911.0], [16.5, 4915.0], [16.6, 4929.0], [16.7, 4929.0], [16.8, 4931.0], [16.9, 4934.0], [17.0, 4935.0], [17.1, 4935.0], [17.2, 4936.0], [17.3, 4940.0], [17.4, 4949.0], [17.5, 4949.0], [17.6, 4953.0], [17.7, 4953.0], [17.8, 4957.0], [17.9, 4957.0], [18.0, 4960.0], [18.1, 4960.0], [18.2, 4968.0], [18.3, 4968.0], [18.4, 4970.0], [18.5, 4975.0], [18.6, 4980.0], [18.7, 4980.0], [18.8, 4982.0], [18.9, 4987.0], [19.0, 4988.0], [19.1, 4988.0], [19.2, 4990.0], [19.3, 4991.0], [19.4, 4991.0], [19.5, 4991.0], [19.6, 4993.0], [19.7, 4994.0], [19.8, 5003.0], [19.9, 5003.0], [20.0, 5004.0], [20.1, 5007.0], [20.2, 5014.0], [20.3, 5014.0], [20.4, 5019.0], [20.5, 5042.0], [20.6, 5044.0], [20.7, 5044.0], [20.8, 5051.0], [20.9, 5053.0], [21.0, 5055.0], [21.1, 5055.0], [21.2, 5069.0], [21.3, 5078.0], [21.4, 5080.0], [21.5, 5080.0], [21.6, 5086.0], [21.7, 5091.0], [21.8, 5092.0], [21.9, 5092.0], [22.0, 5100.0], [22.1, 5113.0], [22.2, 5113.0], [22.3, 5113.0], [22.4, 5140.0], [22.5, 5142.0], [22.6, 5147.0], [22.7, 5147.0], [22.8, 5149.0], [22.9, 5151.0], [23.0, 5151.0], [23.1, 5151.0], [23.2, 5157.0], [23.3, 5158.0], [23.4, 5161.0], [23.5, 5161.0], [23.6, 5163.0], [23.7, 5165.0], [23.8, 5173.0], [23.9, 5173.0], [24.0, 5175.0], [24.1, 5178.0], [24.2, 5185.0], [24.3, 5185.0], [24.4, 5193.0], [24.5, 5195.0], [24.6, 5203.0], [24.7, 5203.0], [24.8, 5209.0], [24.9, 5212.0], [25.0, 5214.0], [25.1, 5214.0], [25.2, 5215.0], [25.3, 5217.0], [25.4, 5217.0], [25.5, 5219.0], [25.6, 5220.0], [25.7, 5225.0], [25.8, 5225.0], [25.9, 5226.0], [26.0, 5233.0], [26.1, 5239.0], [26.2, 5239.0], [26.3, 5242.0], [26.4, 5243.0], [26.5, 5248.0], [26.6, 5248.0], [26.7, 5249.0], [26.8, 5249.0], [26.9, 5250.0], [27.0, 5250.0], [27.1, 5251.0], [27.2, 5256.0], [27.3, 5259.0], [27.4, 5259.0], [27.5, 5261.0], [27.6, 5262.0], [27.7, 5263.0], [27.8, 5263.0], [27.9, 5263.0], [28.0, 5264.0], [28.1, 5264.0], [28.2, 5264.0], [28.3, 5264.0], [28.4, 5264.0], [28.5, 5265.0], [28.6, 5265.0], [28.7, 5273.0], [28.8, 5274.0], [28.9, 5277.0], [29.0, 5277.0], [29.1, 5281.0], [29.2, 5281.0], [29.3, 5283.0], [29.4, 5283.0], [29.5, 5289.0], [29.6, 5290.0], [29.7, 5292.0], [29.8, 5292.0], [29.9, 5292.0], [30.0, 5293.0], [30.1, 5293.0], [30.2, 5293.0], [30.3, 5293.0], [30.4, 5299.0], [30.5, 5300.0], [30.6, 5300.0], [30.7, 5305.0], [30.8, 5306.0], [30.9, 5307.0], [31.0, 5307.0], [31.1, 5313.0], [31.2, 5316.0], [31.3, 5318.0], [31.4, 5318.0], [31.5, 5319.0], [31.6, 5321.0], [31.7, 5322.0], [31.8, 5322.0], [31.9, 5325.0], [32.0, 5326.0], [32.1, 5330.0], [32.2, 5330.0], [32.3, 5339.0], [32.4, 5341.0], [32.5, 5341.0], [32.6, 5341.0], [32.7, 5343.0], [32.8, 5344.0], [32.9, 5345.0], [33.0, 5345.0], [33.1, 5349.0], [33.2, 5350.0], [33.3, 5353.0], [33.4, 5353.0], [33.5, 5354.0], [33.6, 5357.0], [33.7, 5359.0], [33.8, 5359.0], [33.9, 5364.0], [34.0, 5366.0], [34.1, 5368.0], [34.2, 5368.0], [34.3, 5371.0], [34.4, 5372.0], [34.5, 5372.0], [34.6, 5372.0], [34.7, 5372.0], [34.8, 5376.0], [34.9, 5381.0], [35.0, 5381.0], [35.1, 5381.0], [35.2, 5382.0], [35.3, 5382.0], [35.4, 5382.0], [35.5, 5383.0], [35.6, 5384.0], [35.7, 5389.0], [35.8, 5389.0], [35.9, 5391.0], [36.0, 5392.0], [36.1, 5393.0], [36.2, 5393.0], [36.3, 5393.0], [36.4, 5395.0], [36.5, 5401.0], [36.6, 5401.0], [36.7, 5402.0], [36.8, 5403.0], [36.9, 5405.0], [37.0, 5405.0], [37.1, 5413.0], [37.2, 5415.0], [37.3, 5418.0], [37.4, 5418.0], [37.5, 5421.0], [37.6, 5423.0], [37.7, 5423.0], [37.8, 5423.0], [37.9, 5428.0], [38.0, 5432.0], [38.1, 5432.0], [38.2, 5433.0], [38.3, 5433.0], [38.4, 5433.0], [38.5, 5433.0], [38.6, 5433.0], [38.7, 5434.0], [38.8, 5435.0], [38.9, 5435.0], [39.0, 5436.0], [39.1, 5438.0], [39.2, 5438.0], [39.3, 5438.0], [39.4, 5445.0], [39.5, 5446.0], [39.6, 5446.0], [39.7, 5446.0], [39.8, 5448.0], [39.9, 5452.0], [40.0, 5455.0], [40.1, 5455.0], [40.2, 5457.0], [40.3, 5460.0], [40.4, 5462.0], [40.5, 5462.0], [40.6, 5464.0], [40.7, 5466.0], [40.8, 5471.0], [40.9, 5471.0], [41.0, 5474.0], [41.1, 5474.0], [41.2, 5476.0], [41.3, 5476.0], [41.4, 5477.0], [41.5, 5477.0], [41.6, 5480.0], [41.7, 5480.0], [41.8, 5481.0], [41.9, 5481.0], [42.0, 5481.0], [42.1, 5481.0], [42.2, 5486.0], [42.3, 5487.0], [42.4, 5490.0], [42.5, 5490.0], [42.6, 5491.0], [42.7, 5491.0], [42.8, 5494.0], [42.9, 5494.0], [43.0, 5496.0], [43.1, 5499.0], [43.2, 5502.0], [43.3, 5502.0], [43.4, 5503.0], [43.5, 5503.0], [43.6, 5505.0], [43.7, 5505.0], [43.8, 5506.0], [43.9, 5506.0], [44.0, 5507.0], [44.1, 5507.0], [44.2, 5509.0], [44.3, 5509.0], [44.4, 5510.0], [44.5, 5510.0], [44.6, 5511.0], [44.7, 5511.0], [44.8, 5512.0], [44.9, 5512.0], [45.0, 5512.0], [45.1, 5512.0], [45.2, 5515.0], [45.3, 5515.0], [45.4, 5515.0], [45.5, 5516.0], [45.6, 5518.0], [45.7, 5518.0], [45.8, 5519.0], [45.9, 5521.0], [46.0, 5522.0], [46.1, 5522.0], [46.2, 5523.0], [46.3, 5529.0], [46.4, 5529.0], [46.5, 5529.0], [46.6, 5530.0], [46.7, 5531.0], [46.8, 5531.0], [46.9, 5531.0], [47.0, 5533.0], [47.1, 5533.0], [47.2, 5536.0], [47.3, 5536.0], [47.4, 5538.0], [47.5, 5540.0], [47.6, 5540.0], [47.7, 5540.0], [47.8, 5543.0], [47.9, 5547.0], [48.0, 5548.0], [48.1, 5548.0], [48.2, 5548.0], [48.3, 5549.0], [48.4, 5550.0], [48.5, 5550.0], [48.6, 5552.0], [48.7, 5553.0], [48.8, 5554.0], [48.9, 5554.0], [49.0, 5555.0], [49.1, 5556.0], [49.2, 5556.0], [49.3, 5556.0], [49.4, 5558.0], [49.5, 5558.0], [49.6, 5559.0], [49.7, 5559.0], [49.8, 5561.0], [49.9, 5561.0], [50.0, 5562.0], [50.1, 5562.0], [50.2, 5564.0], [50.3, 5565.0], [50.4, 5565.0], [50.5, 5565.0], [50.6, 5566.0], [50.7, 5567.0], [50.8, 5567.0], [50.9, 5567.0], [51.0, 5568.0], [51.1, 5569.0], [51.2, 5569.0], [51.3, 5571.0], [51.4, 5572.0], [51.5, 5578.0], [51.6, 5578.0], [51.7, 5579.0], [51.8, 5579.0], [51.9, 5586.0], [52.0, 5586.0], [52.1, 5592.0], [52.2, 5594.0], [52.3, 5594.0], [52.4, 5594.0], [52.5, 5594.0], [52.6, 5594.0], [52.7, 5594.0], [52.8, 5594.0], [52.9, 5595.0], [53.0, 5597.0], [53.1, 5598.0], [53.2, 5598.0], [53.3, 5599.0], [53.4, 5599.0], [53.5, 5600.0], [53.6, 5600.0], [53.7, 5600.0], [53.8, 5604.0], [53.9, 5606.0], [54.0, 5606.0], [54.1, 5607.0], [54.2, 5607.0], [54.3, 5608.0], [54.4, 5608.0], [54.5, 5609.0], [54.6, 5609.0], [54.7, 5609.0], [54.8, 5609.0], [54.9, 5609.0], [55.0, 5611.0], [55.1, 5612.0], [55.2, 5612.0], [55.3, 5612.0], [55.4, 5614.0], [55.5, 5614.0], [55.6, 5614.0], [55.7, 5615.0], [55.8, 5615.0], [55.9, 5615.0], [56.0, 5615.0], [56.1, 5615.0], [56.2, 5619.0], [56.3, 5619.0], [56.4, 5619.0], [56.5, 5620.0], [56.6, 5620.0], [56.7, 5622.0], [56.8, 5622.0], [56.9, 5625.0], [57.0, 5626.0], [57.1, 5627.0], [57.2, 5627.0], [57.3, 5628.0], [57.4, 5632.0], [57.5, 5633.0], [57.6, 5633.0], [57.7, 5633.0], [57.8, 5635.0], [57.9, 5638.0], [58.0, 5638.0], [58.1, 5639.0], [58.2, 5639.0], [58.3, 5641.0], [58.4, 5641.0], [58.5, 5642.0], [58.6, 5642.0], [58.7, 5644.0], [58.8, 5644.0], [58.9, 5645.0], [59.0, 5645.0], [59.1, 5646.0], [59.2, 5646.0], [59.3, 5646.0], [59.4, 5648.0], [59.5, 5649.0], [59.6, 5649.0], [59.7, 5649.0], [59.8, 5651.0], [59.9, 5653.0], [60.0, 5653.0], [60.1, 5656.0], [60.2, 5657.0], [60.3, 5661.0], [60.4, 5661.0], [60.5, 5662.0], [60.6, 5663.0], [60.7, 5663.0], [60.8, 5663.0], [60.9, 5663.0], [61.0, 5668.0], [61.1, 5668.0], [61.2, 5668.0], [61.3, 5669.0], [61.4, 5675.0], [61.5, 5678.0], [61.6, 5678.0], [61.7, 5679.0], [61.8, 5679.0], [61.9, 5682.0], [62.0, 5682.0], [62.1, 5686.0], [62.2, 5688.0], [62.3, 5689.0], [62.4, 5689.0], [62.5, 5689.0], [62.6, 5692.0], [62.7, 5692.0], [62.8, 5692.0], [62.9, 5694.0], [63.0, 5695.0], [63.1, 5695.0], [63.2, 5698.0], [63.3, 5698.0], [63.4, 5698.0], [63.5, 5698.0], [63.6, 5705.0], [63.7, 5705.0], [63.8, 5709.0], [63.9, 5709.0], [64.0, 5709.0], [64.1, 5709.0], [64.2, 5710.0], [64.3, 5710.0], [64.4, 5713.0], [64.5, 5714.0], [64.6, 5718.0], [64.7, 5718.0], [64.8, 5727.0], [64.9, 5733.0], [65.0, 5733.0], [65.1, 5733.0], [65.2, 5733.0], [65.3, 5736.0], [65.4, 5737.0], [65.5, 5737.0], [65.6, 5737.0], [65.7, 5742.0], [65.8, 5743.0], [65.9, 5743.0], [66.0, 5745.0], [66.1, 5749.0], [66.2, 5750.0], [66.3, 5750.0], [66.4, 5765.0], [66.5, 5766.0], [66.6, 5768.0], [66.7, 5768.0], [66.8, 5770.0], [66.9, 5774.0], [67.0, 5774.0], [67.1, 5774.0], [67.2, 5775.0], [67.3, 5779.0], [67.4, 5781.0], [67.5, 5781.0], [67.6, 5782.0], [67.7, 5787.0], [67.8, 5788.0], [67.9, 5788.0], [68.0, 5789.0], [68.1, 5790.0], [68.2, 5792.0], [68.3, 5792.0], [68.4, 5794.0], [68.5, 5796.0], [68.6, 5798.0], [68.7, 5798.0], [68.8, 5800.0], [68.9, 5802.0], [69.0, 5804.0], [69.1, 5804.0], [69.2, 5805.0], [69.3, 5807.0], [69.4, 5808.0], [69.5, 5808.0], [69.6, 5808.0], [69.7, 5810.0], [69.8, 5811.0], [69.9, 5811.0], [70.0, 5814.0], [70.1, 5815.0], [70.2, 5820.0], [70.3, 5820.0], [70.4, 5821.0], [70.5, 5822.0], [70.6, 5829.0], [70.7, 5829.0], [70.8, 5829.0], [70.9, 5832.0], [71.0, 5833.0], [71.1, 5833.0], [71.2, 5833.0], [71.3, 5840.0], [71.4, 5842.0], [71.5, 5842.0], [71.6, 5849.0], [71.7, 5850.0], [71.8, 5851.0], [71.9, 5851.0], [72.0, 5853.0], [72.1, 5854.0], [72.2, 5855.0], [72.3, 5855.0], [72.4, 5856.0], [72.5, 5857.0], [72.6, 5858.0], [72.7, 5858.0], [72.8, 5861.0], [72.9, 5861.0], [73.0, 5862.0], [73.1, 5862.0], [73.2, 5863.0], [73.3, 5865.0], [73.4, 5869.0], [73.5, 5869.0], [73.6, 5873.0], [73.7, 5873.0], [73.8, 5876.0], [73.9, 5876.0], [74.0, 5878.0], [74.1, 5880.0], [74.2, 5880.0], [74.3, 5880.0], [74.4, 5884.0], [74.5, 5886.0], [74.6, 5886.0], [74.7, 5886.0], [74.8, 5889.0], [74.9, 5890.0], [75.0, 5890.0], [75.1, 5892.0], [75.2, 5896.0], [75.3, 5896.0], [75.4, 5896.0], [75.5, 5897.0], [75.6, 5898.0], [75.7, 5901.0], [75.8, 5901.0], [75.9, 5904.0], [76.0, 5905.0], [76.1, 5906.0], [76.2, 5906.0], [76.3, 5909.0], [76.4, 5910.0], [76.5, 5910.0], [76.6, 5910.0], [76.7, 5910.0], [76.8, 5915.0], [76.9, 5916.0], [77.0, 5916.0], [77.1, 5917.0], [77.2, 5919.0], [77.3, 5923.0], [77.4, 5923.0], [77.5, 5928.0], [77.6, 5928.0], [77.7, 5928.0], [77.8, 5928.0], [77.9, 5930.0], [78.0, 5931.0], [78.1, 5932.0], [78.2, 5932.0], [78.3, 5933.0], [78.4, 5937.0], [78.5, 5938.0], [78.6, 5938.0], [78.7, 5939.0], [78.8, 5939.0], [78.9, 5939.0], [79.0, 5939.0], [79.1, 5942.0], [79.2, 5943.0], [79.3, 5948.0], [79.4, 5948.0], [79.5, 5950.0], [79.6, 5953.0], [79.7, 5954.0], [79.8, 5954.0], [79.9, 5955.0], [80.0, 5959.0], [80.1, 5962.0], [80.2, 5962.0], [80.3, 5962.0], [80.4, 5963.0], [80.5, 5963.0], [80.6, 5963.0], [80.7, 5964.0], [80.8, 5967.0], [80.9, 5969.0], [81.0, 5969.0], [81.1, 5972.0], [81.2, 5973.0], [81.3, 5973.0], [81.4, 5973.0], [81.5, 5976.0], [81.6, 5977.0], [81.7, 5982.0], [81.8, 5982.0], [81.9, 5982.0], [82.0, 5983.0], [82.1, 5984.0], [82.2, 5984.0], [82.3, 5986.0], [82.4, 5986.0], [82.5, 5988.0], [82.6, 5988.0], [82.7, 5995.0], [82.8, 5997.0], [82.9, 5999.0], [83.0, 5999.0], [83.1, 6002.0], [83.2, 6003.0], [83.3, 6003.0], [83.4, 6003.0], [83.5, 6005.0], [83.6, 6006.0], [83.7, 6009.0], [83.8, 6009.0], [83.9, 6010.0], [84.0, 6013.0], [84.1, 6013.0], [84.2, 6013.0], [84.3, 6014.0], [84.4, 6015.0], [84.5, 6018.0], [84.6, 6018.0], [84.7, 6028.0], [84.8, 6029.0], [84.9, 6035.0], [85.0, 6035.0], [85.1, 6036.0], [85.2, 6039.0], [85.3, 6040.0], [85.4, 6040.0], [85.5, 6042.0], [85.6, 6043.0], [85.7, 6045.0], [85.8, 6045.0], [85.9, 6051.0], [86.0, 6053.0], [86.1, 6054.0], [86.2, 6054.0], [86.3, 6057.0], [86.4, 6057.0], [86.5, 6060.0], [86.6, 6060.0], [86.7, 6060.0], [86.8, 6062.0], [86.9, 6064.0], [87.0, 6064.0], [87.1, 6066.0], [87.2, 6066.0], [87.3, 6069.0], [87.4, 6069.0], [87.5, 6073.0], [87.6, 6073.0], [87.7, 6073.0], [87.8, 6076.0], [87.9, 6076.0], [88.0, 6079.0], [88.1, 6079.0], [88.2, 6081.0], [88.3, 6081.0], [88.4, 6085.0], [88.5, 6085.0], [88.6, 6092.0], [88.7, 6093.0], [88.8, 6097.0], [88.9, 6097.0], [89.0, 6097.0], [89.1, 6099.0], [89.2, 6100.0], [89.3, 6100.0], [89.4, 6100.0], [89.5, 6101.0], [89.6, 6102.0], [89.7, 6102.0], [89.8, 6103.0], [89.9, 6103.0], [90.0, 6109.0], [90.1, 6109.0], [90.2, 6109.0], [90.3, 6113.0], [90.4, 6113.0], [90.5, 6113.0], [90.6, 6115.0], [90.7, 6120.0], [90.8, 6120.0], [90.9, 6120.0], [91.0, 6121.0], [91.1, 6143.0], [91.2, 6144.0], [91.3, 6144.0], [91.4, 6145.0], [91.5, 6150.0], [91.6, 6151.0], [91.7, 6151.0], [91.8, 6152.0], [91.9, 6153.0], [92.0, 6154.0], [92.1, 6154.0], [92.2, 6164.0], [92.3, 6168.0], [92.4, 6169.0], [92.5, 6169.0], [92.6, 6170.0], [92.7, 6174.0], [92.8, 6175.0], [92.9, 6175.0], [93.0, 6176.0], [93.1, 6178.0], [93.2, 6180.0], [93.3, 6180.0], [93.4, 6187.0], [93.5, 6198.0], [93.6, 6201.0], [93.7, 6201.0], [93.8, 6205.0], [93.9, 6208.0], [94.0, 6218.0], [94.1, 6218.0], [94.2, 6224.0], [94.3, 6230.0], [94.4, 6238.0], [94.5, 6238.0], [94.6, 6241.0], [94.7, 6244.0], [94.8, 6259.0], [94.9, 6259.0], [95.0, 6266.0], [95.1, 6277.0], [95.2, 6279.0], [95.3, 6279.0], [95.4, 6300.0], [95.5, 6337.0], [95.6, 6337.0], [95.7, 6337.0], [95.8, 6343.0], [95.9, 6369.0], [96.0, 6394.0], [96.1, 6394.0], [96.2, 6410.0], [96.3, 6415.0], [96.4, 6419.0], [96.5, 6419.0], [96.6, 6425.0], [96.7, 6433.0], [96.8, 6444.0], [96.9, 6444.0], [97.0, 6471.0], [97.1, 6474.0], [97.2, 6478.0], [97.3, 6478.0], [97.4, 6494.0], [97.5, 6500.0], [97.6, 6506.0], [97.7, 6506.0], [97.8, 6511.0], [97.9, 6512.0], [98.0, 6516.0], [98.1, 6516.0], [98.2, 6568.0], [98.3, 6583.0], [98.4, 6591.0], [98.5, 6591.0], [98.6, 6593.0], [98.7, 6607.0], [98.8, 6609.0], [98.9, 6609.0], [99.0, 6649.0], [99.1, 6664.0], [99.2, 6682.0], [99.3, 6682.0], [99.4, 6690.0], [99.5, 11954.0], [99.6, 15837.0], [99.7, 15837.0], [99.8, 16676.0], [99.9, 17403.0], [100.0, 17403.0]], "isOverall": false, "label": "POST User register", "isController": false}, {"data": [[0.0, 264.0], [0.1, 264.0], [0.2, 9944.0], [0.3, 9967.0], [0.4, 10091.0], [0.5, 10091.0], [0.6, 10115.0], [0.7, 10146.0], [0.8, 10255.0], [0.9, 10423.0], [1.0, 10423.0], [1.1, 10620.0], [1.2, 11093.0], [1.3, 11383.0], [1.4, 11458.0], [1.5, 11458.0], [1.6, 11470.0], [1.7, 11475.0], [1.8, 11548.0], [1.9, 11548.0], [2.0, 11551.0], [2.1, 11634.0], [2.2, 11669.0], [2.3, 11737.0], [2.4, 11737.0], [2.5, 11823.0], [2.6, 11843.0], [2.7, 11898.0], [2.8, 11925.0], [2.9, 11925.0], [3.0, 11925.0], [3.1, 11931.0], [3.2, 11974.0], [3.3, 11974.0], [3.4, 11979.0], [3.5, 12004.0], [3.6, 12054.0], [3.7, 12074.0], [3.8, 12074.0], [3.9, 12088.0], [4.0, 12092.0], [4.1, 12109.0], [4.2, 12123.0], [4.3, 12123.0], [4.4, 12126.0], [4.5, 12136.0], [4.6, 12152.0], [4.7, 12152.0], [4.8, 12169.0], [4.9, 12179.0], [5.0, 12200.0], [5.1, 12224.0], [5.2, 12224.0], [5.3, 12239.0], [5.4, 12246.0], [5.5, 12280.0], [5.6, 12285.0], [5.7, 12285.0], [5.8, 12291.0], [5.9, 12306.0], [6.0, 12312.0], [6.1, 12319.0], [6.2, 12319.0], [6.3, 12332.0], [6.4, 12365.0], [6.5, 12451.0], [6.6, 12451.0], [6.7, 12463.0], [6.8, 12496.0], [6.9, 12543.0], [7.0, 12546.0], [7.1, 12546.0], [7.2, 12741.0], [7.3, 12751.0], [7.4, 12782.0], [7.5, 12850.0], [7.6, 12850.0], [7.7, 12852.0], [7.8, 12907.0], [7.9, 12930.0], [8.0, 12930.0], [8.1, 13002.0], [8.2, 13049.0], [8.3, 13056.0], [8.4, 13066.0], [8.5, 13066.0], [8.6, 13085.0], [8.7, 13260.0], [8.8, 13270.0], [8.9, 13312.0], [9.0, 13312.0], [9.1, 13324.0], [9.2, 13342.0], [9.3, 13379.0], [9.4, 13379.0], [9.5, 13381.0], [9.6, 13407.0], [9.7, 13420.0], [9.8, 13432.0], [9.9, 13432.0], [10.0, 13453.0], [10.1, 13454.0], [10.2, 13459.0], [10.3, 13468.0], [10.4, 13468.0], [10.5, 13473.0], [10.6, 13478.0], [10.7, 13480.0], [10.8, 13480.0], [10.9, 13488.0], [11.0, 13495.0], [11.1, 13508.0], [11.2, 13512.0], [11.3, 13512.0], [11.4, 13527.0], [11.5, 13528.0], [11.6, 13532.0], [11.7, 13537.0], [11.8, 13537.0], [11.9, 13544.0], [12.0, 13550.0], [12.1, 13557.0], [12.2, 13560.0], [12.3, 13560.0], [12.4, 13562.0], [12.5, 13566.0], [12.6, 13568.0], [12.7, 13568.0], [12.8, 13571.0], [12.9, 13579.0], [13.0, 13582.0], [13.1, 13582.0], [13.2, 13582.0], [13.3, 13593.0], [13.4, 13597.0], [13.5, 13618.0], [13.6, 13631.0], [13.7, 13631.0], [13.8, 13632.0], [13.9, 13633.0], [14.0, 13637.0], [14.1, 13637.0], [14.2, 13642.0], [14.3, 13658.0], [14.4, 13664.0], [14.5, 13665.0], [14.6, 13665.0], [14.7, 13670.0], [14.8, 13671.0], [14.9, 13676.0], [15.0, 13679.0], [15.1, 13679.0], [15.2, 13695.0], [15.3, 13696.0], [15.4, 13698.0], [15.5, 13698.0], [15.6, 13714.0], [15.7, 13714.0], [15.8, 13717.0], [15.9, 13720.0], [16.0, 13720.0], [16.1, 13726.0], [16.2, 13729.0], [16.3, 13729.0], [16.4, 13731.0], [16.5, 13731.0], [16.6, 13741.0], [16.7, 13752.0], [16.8, 13754.0], [16.9, 13755.0], [17.0, 13755.0], [17.1, 13756.0], [17.2, 13758.0], [17.3, 13761.0], [17.4, 13761.0], [17.5, 13765.0], [17.6, 13765.0], [17.7, 13766.0], [17.8, 13771.0], [17.9, 13771.0], [18.0, 13776.0], [18.1, 13777.0], [18.2, 13780.0], [18.3, 13781.0], [18.4, 13781.0], [18.5, 13785.0], [18.6, 13786.0], [18.7, 13786.0], [18.8, 13786.0], [18.9, 13793.0], [19.0, 13796.0], [19.1, 13796.0], [19.2, 13797.0], [19.3, 13797.0], [19.4, 13798.0], [19.5, 13807.0], [19.6, 13809.0], [19.7, 13812.0], [19.8, 13812.0], [19.9, 13814.0], [20.0, 13821.0], [20.1, 13821.0], [20.2, 13821.0], [20.3, 13824.0], [20.4, 13826.0], [20.5, 13827.0], [20.6, 13830.0], [20.7, 13830.0], [20.8, 13836.0], [20.9, 13837.0], [21.0, 13840.0], [21.1, 13851.0], [21.2, 13851.0], [21.3, 13852.0], [21.4, 13860.0], [21.5, 13860.0], [21.6, 13860.0], [21.7, 13861.0], [21.8, 13862.0], [21.9, 13862.0], [22.0, 13866.0], [22.1, 13866.0], [22.2, 13870.0], [22.3, 13871.0], [22.4, 13871.0], [22.5, 13872.0], [22.6, 13872.0], [22.7, 13875.0], [22.8, 13875.0], [22.9, 13877.0], [23.0, 13877.0], [23.1, 13877.0], [23.2, 13879.0], [23.3, 13880.0], [23.4, 13883.0], [23.5, 13883.0], [23.6, 13898.0], [23.7, 13900.0], [23.8, 13900.0], [23.9, 13901.0], [24.0, 13901.0], [24.1, 13903.0], [24.2, 13908.0], [24.3, 13908.0], [24.4, 13910.0], [24.5, 13910.0], [24.6, 13911.0], [24.7, 13913.0], [24.8, 13917.0], [24.9, 13917.0], [25.0, 13921.0], [25.1, 13921.0], [25.2, 13928.0], [25.3, 13929.0], [25.4, 13929.0], [25.5, 13929.0], [25.6, 13933.0], [25.7, 13933.0], [25.8, 13938.0], [25.9, 13938.0], [26.0, 13940.0], [26.1, 13940.0], [26.2, 13941.0], [26.3, 13941.0], [26.4, 13942.0], [26.5, 13942.0], [26.6, 13947.0], [26.7, 13948.0], [26.8, 13948.0], [26.9, 13948.0], [27.0, 13949.0], [27.1, 13951.0], [27.2, 13953.0], [27.3, 13953.0], [27.4, 13954.0], [27.5, 13954.0], [27.6, 13955.0], [27.7, 13955.0], [27.8, 13956.0], [27.9, 13957.0], [28.0, 13958.0], [28.1, 13959.0], [28.2, 13959.0], [28.3, 13959.0], [28.4, 13965.0], [28.5, 13965.0], [28.6, 13966.0], [28.7, 13966.0], [28.8, 13969.0], [28.9, 13970.0], [29.0, 13974.0], [29.1, 13974.0], [29.2, 13974.0], [29.3, 13976.0], [29.4, 13979.0], [29.5, 13983.0], [29.6, 13983.0], [29.7, 13985.0], [29.8, 13986.0], [29.9, 13986.0], [30.0, 13987.0], [30.1, 13987.0], [30.2, 13988.0], [30.3, 13988.0], [30.4, 13990.0], [30.5, 13992.0], [30.6, 13992.0], [30.7, 13992.0], [30.8, 13993.0], [30.9, 13994.0], [31.0, 13994.0], [31.1, 13994.0], [31.2, 13996.0], [31.3, 13998.0], [31.4, 13998.0], [31.5, 13998.0], [31.6, 14001.0], [31.7, 14005.0], [31.8, 14008.0], [31.9, 14013.0], [32.0, 14013.0], [32.1, 14017.0], [32.2, 14017.0], [32.3, 14020.0], [32.4, 14020.0], [32.5, 14021.0], [32.6, 14021.0], [32.7, 14023.0], [32.8, 14023.0], [32.9, 14023.0], [33.0, 14025.0], [33.1, 14027.0], [33.2, 14029.0], [33.3, 14031.0], [33.4, 14031.0], [33.5, 14031.0], [33.6, 14031.0], [33.7, 14033.0], [33.8, 14034.0], [33.9, 14034.0], [34.0, 14036.0], [34.1, 14037.0], [34.2, 14039.0], [34.3, 14039.0], [34.4, 14040.0], [34.5, 14040.0], [34.6, 14042.0], [34.7, 14043.0], [34.8, 14043.0], [34.9, 14044.0], [35.0, 14045.0], [35.1, 14048.0], [35.2, 14054.0], [35.3, 14054.0], [35.4, 14055.0], [35.5, 14056.0], [35.6, 14056.0], [35.7, 14056.0], [35.8, 14057.0], [35.9, 14058.0], [36.0, 14058.0], [36.1, 14064.0], [36.2, 14064.0], [36.3, 14066.0], [36.4, 14070.0], [36.5, 14074.0], [36.6, 14078.0], [36.7, 14078.0], [36.8, 14078.0], [36.9, 14080.0], [37.0, 14082.0], [37.1, 14082.0], [37.2, 14087.0], [37.3, 14088.0], [37.4, 14089.0], [37.5, 14089.0], [37.6, 14089.0], [37.7, 14092.0], [37.8, 14093.0], [37.9, 14094.0], [38.0, 14094.0], [38.1, 14094.0], [38.2, 14095.0], [38.3, 14097.0], [38.4, 14098.0], [38.5, 14098.0], [38.6, 14100.0], [38.7, 14101.0], [38.8, 14103.0], [38.9, 14107.0], [39.0, 14107.0], [39.1, 14108.0], [39.2, 14110.0], [39.3, 14112.0], [39.4, 14113.0], [39.5, 14113.0], [39.6, 14116.0], [39.7, 14117.0], [39.8, 14122.0], [39.9, 14123.0], [40.0, 14123.0], [40.1, 14126.0], [40.2, 14127.0], [40.3, 14127.0], [40.4, 14127.0], [40.5, 14128.0], [40.6, 14129.0], [40.7, 14129.0], [40.8, 14130.0], [40.9, 14130.0], [41.0, 14131.0], [41.1, 14131.0], [41.2, 14132.0], [41.3, 14133.0], [41.4, 14133.0], [41.5, 14134.0], [41.6, 14143.0], [41.7, 14143.0], [41.8, 14143.0], [41.9, 14143.0], [42.0, 14143.0], [42.1, 14145.0], [42.2, 14146.0], [42.3, 14146.0], [42.4, 14147.0], [42.5, 14147.0], [42.6, 14148.0], [42.7, 14150.0], [42.8, 14150.0], [42.9, 14150.0], [43.0, 14152.0], [43.1, 14155.0], [43.2, 14155.0], [43.3, 14157.0], [43.4, 14159.0], [43.5, 14160.0], [43.6, 14166.0], [43.7, 14166.0], [43.8, 14168.0], [43.9, 14168.0], [44.0, 14169.0], [44.1, 14169.0], [44.2, 14169.0], [44.3, 14170.0], [44.4, 14170.0], [44.5, 14171.0], [44.6, 14173.0], [44.7, 14173.0], [44.8, 14174.0], [44.9, 14175.0], [45.0, 14177.0], [45.1, 14177.0], [45.2, 14177.0], [45.3, 14178.0], [45.4, 14178.0], [45.5, 14178.0], [45.6, 14178.0], [45.7, 14180.0], [45.8, 14183.0], [45.9, 14185.0], [46.0, 14187.0], [46.1, 14187.0], [46.2, 14191.0], [46.3, 14193.0], [46.4, 14197.0], [46.5, 14197.0], [46.6, 14198.0], [46.7, 14201.0], [46.8, 14203.0], [46.9, 14203.0], [47.0, 14203.0], [47.1, 14203.0], [47.2, 14203.0], [47.3, 14216.0], [47.4, 14216.0], [47.5, 14216.0], [47.6, 14216.0], [47.7, 14218.0], [47.8, 14219.0], [47.9, 14219.0], [48.0, 14220.0], [48.1, 14221.0], [48.2, 14223.0], [48.3, 14223.0], [48.4, 14223.0], [48.5, 14225.0], [48.6, 14226.0], [48.7, 14233.0], [48.8, 14235.0], [48.9, 14235.0], [49.0, 14235.0], [49.1, 14237.0], [49.2, 14239.0], [49.3, 14239.0], [49.4, 14242.0], [49.5, 14246.0], [49.6, 14246.0], [49.7, 14247.0], [49.8, 14247.0], [49.9, 14247.0], [50.0, 14247.0], [50.1, 14248.0], [50.2, 14249.0], [50.3, 14249.0], [50.4, 14249.0], [50.5, 14253.0], [50.6, 14254.0], [50.7, 14254.0], [50.8, 14254.0], [50.9, 14255.0], [51.0, 14256.0], [51.1, 14259.0], [51.2, 14259.0], [51.3, 14262.0], [51.4, 14265.0], [51.5, 14267.0], [51.6, 14268.0], [51.7, 14268.0], [51.8, 14269.0], [51.9, 14270.0], [52.0, 14271.0], [52.1, 14271.0], [52.2, 14271.0], [52.3, 14271.0], [52.4, 14279.0], [52.5, 14281.0], [52.6, 14281.0], [52.7, 14286.0], [52.8, 14291.0], [52.9, 14293.0], [53.0, 14293.0], [53.1, 14293.0], [53.2, 14295.0], [53.3, 14297.0], [53.4, 14303.0], [53.5, 14306.0], [53.6, 14306.0], [53.7, 14309.0], [53.8, 14318.0], [53.9, 14321.0], [54.0, 14321.0], [54.1, 14322.0], [54.2, 14324.0], [54.3, 14324.0], [54.4, 14327.0], [54.5, 14327.0], [54.6, 14328.0], [54.7, 14329.0], [54.8, 14329.0], [54.9, 14330.0], [55.0, 14330.0], [55.1, 14333.0], [55.2, 14333.0], [55.3, 14334.0], [55.4, 14334.0], [55.5, 14336.0], [55.6, 14341.0], [55.7, 14342.0], [55.8, 14344.0], [55.9, 14344.0], [56.0, 14344.0], [56.1, 14345.0], [56.2, 14347.0], [56.3, 14347.0], [56.4, 14347.0], [56.5, 14348.0], [56.6, 14350.0], [56.7, 14351.0], [56.8, 14351.0], [56.9, 14351.0], [57.0, 14352.0], [57.1, 14357.0], [57.2, 14358.0], [57.3, 14358.0], [57.4, 14365.0], [57.5, 14366.0], [57.6, 14371.0], [57.7, 14374.0], [57.8, 14374.0], [57.9, 14376.0], [58.0, 14376.0], [58.1, 14378.0], [58.2, 14381.0], [58.3, 14381.0], [58.4, 14384.0], [58.5, 14386.0], [58.6, 14390.0], [58.7, 14390.0], [58.8, 14391.0], [58.9, 14396.0], [59.0, 14396.0], [59.1, 14397.0], [59.2, 14397.0], [59.3, 14403.0], [59.4, 14407.0], [59.5, 14411.0], [59.6, 14414.0], [59.7, 14414.0], [59.8, 14416.0], [59.9, 14418.0], [60.0, 14427.0], [60.1, 14427.0], [60.2, 14427.0], [60.3, 14428.0], [60.4, 14428.0], [60.5, 14429.0], [60.6, 14429.0], [60.7, 14429.0], [60.8, 14430.0], [60.9, 14431.0], [61.0, 14433.0], [61.1, 14433.0], [61.2, 14435.0], [61.3, 14438.0], [61.4, 14440.0], [61.5, 14443.0], [61.6, 14443.0], [61.7, 14444.0], [61.8, 14445.0], [61.9, 14445.0], [62.0, 14445.0], [62.1, 14446.0], [62.2, 14449.0], [62.3, 14451.0], [62.4, 14451.0], [62.5, 14451.0], [62.6, 14456.0], [62.7, 14457.0], [62.8, 14462.0], [62.9, 14463.0], [63.0, 14463.0], [63.1, 14471.0], [63.2, 14472.0], [63.3, 14473.0], [63.4, 14473.0], [63.5, 14475.0], [63.6, 14477.0], [63.7, 14479.0], [63.8, 14479.0], [63.9, 14479.0], [64.0, 14479.0], [64.1, 14480.0], [64.2, 14481.0], [64.3, 14481.0], [64.4, 14481.0], [64.5, 14484.0], [64.6, 14490.0], [64.7, 14490.0], [64.8, 14490.0], [64.9, 14493.0], [65.0, 14493.0], [65.1, 14495.0], [65.2, 14495.0], [65.3, 14495.0], [65.4, 14495.0], [65.5, 14496.0], [65.6, 14496.0], [65.7, 14497.0], [65.8, 14497.0], [65.9, 14501.0], [66.0, 14505.0], [66.1, 14505.0], [66.2, 14505.0], [66.3, 14507.0], [66.4, 14511.0], [66.5, 14514.0], [66.6, 14515.0], [66.7, 14515.0], [66.8, 14515.0], [66.9, 14516.0], [67.0, 14517.0], [67.1, 14519.0], [67.2, 14519.0], [67.3, 14519.0], [67.4, 14521.0], [67.5, 14525.0], [67.6, 14532.0], [67.7, 14532.0], [67.8, 14537.0], [67.9, 14538.0], [68.0, 14540.0], [68.1, 14540.0], [68.2, 14545.0], [68.3, 14547.0], [68.4, 14548.0], [68.5, 14549.0], [68.6, 14549.0], [68.7, 14549.0], [68.8, 14549.0], [68.9, 14550.0], [69.0, 14552.0], [69.1, 14552.0], [69.2, 14555.0], [69.3, 14555.0], [69.4, 14560.0], [69.5, 14560.0], [69.6, 14566.0], [69.7, 14574.0], [69.8, 14577.0], [69.9, 14578.0], [70.0, 14578.0], [70.1, 14590.0], [70.2, 14590.0], [70.3, 14592.0], [70.4, 14592.0], [70.5, 14592.0], [70.6, 14593.0], [70.7, 14597.0], [70.8, 14597.0], [70.9, 14597.0], [71.0, 14602.0], [71.1, 14604.0], [71.2, 14605.0], [71.3, 14608.0], [71.4, 14608.0], [71.5, 14609.0], [71.6, 14609.0], [71.7, 14610.0], [71.8, 14611.0], [71.9, 14611.0], [72.0, 14614.0], [72.1, 14615.0], [72.2, 14618.0], [72.3, 14619.0], [72.4, 14619.0], [72.5, 14627.0], [72.6, 14632.0], [72.7, 14633.0], [72.8, 14633.0], [72.9, 14636.0], [73.0, 14637.0], [73.1, 14639.0], [73.2, 14640.0], [73.3, 14640.0], [73.4, 14640.0], [73.5, 14643.0], [73.6, 14647.0], [73.7, 14652.0], [73.8, 14652.0], [73.9, 14653.0], [74.0, 14654.0], [74.1, 14656.0], [74.2, 14656.0], [74.3, 14659.0], [74.4, 14664.0], [74.5, 14668.0], [74.6, 14668.0], [74.7, 14668.0], [74.8, 14673.0], [74.9, 14678.0], [75.0, 14679.0], [75.1, 14680.0], [75.2, 14680.0], [75.3, 14680.0], [75.4, 14684.0], [75.5, 14687.0], [75.6, 14687.0], [75.7, 14687.0], [75.8, 14689.0], [75.9, 14693.0], [76.0, 14694.0], [76.1, 14694.0], [76.2, 14700.0], [76.3, 14707.0], [76.4, 14719.0], [76.5, 14719.0], [76.6, 14719.0], [76.7, 14720.0], [76.8, 14723.0], [76.9, 14731.0], [77.0, 14731.0], [77.1, 14737.0], [77.2, 14739.0], [77.3, 14744.0], [77.4, 14752.0], [77.5, 14752.0], [77.6, 14753.0], [77.7, 14753.0], [77.8, 14755.0], [77.9, 14771.0], [78.0, 14771.0], [78.1, 14771.0], [78.2, 14773.0], [78.3, 14773.0], [78.4, 14777.0], [78.5, 14777.0], [78.6, 14779.0], [78.7, 14780.0], [78.8, 14781.0], [78.9, 14781.0], [79.0, 14783.0], [79.1, 14786.0], [79.2, 14790.0], [79.3, 14793.0], [79.4, 14793.0], [79.5, 14793.0], [79.6, 14796.0], [79.7, 14798.0], [79.8, 14800.0], [79.9, 14800.0], [80.0, 14818.0], [80.1, 14824.0], [80.2, 14828.0], [80.3, 14828.0], [80.4, 14829.0], [80.5, 14831.0], [80.6, 14841.0], [80.7, 14843.0], [80.8, 14843.0], [80.9, 14844.0], [81.0, 14850.0], [81.1, 14857.0], [81.2, 14858.0], [81.3, 14858.0], [81.4, 14860.0], [81.5, 14861.0], [81.6, 14861.0], [81.7, 14861.0], [81.8, 14868.0], [81.9, 14875.0], [82.0, 14890.0], [82.1, 14891.0], [82.2, 14891.0], [82.3, 14898.0], [82.4, 14903.0], [82.5, 14907.0], [82.6, 14908.0], [82.7, 14908.0], [82.8, 14912.0], [82.9, 14912.0], [83.0, 14915.0], [83.1, 14915.0], [83.2, 14919.0], [83.3, 14925.0], [83.4, 14925.0], [83.5, 14933.0], [83.6, 14933.0], [83.7, 14933.0], [83.8, 14941.0], [83.9, 14952.0], [84.0, 14953.0], [84.1, 14953.0], [84.2, 14958.0], [84.3, 14961.0], [84.4, 14963.0], [84.5, 14964.0], [84.6, 14964.0], [84.7, 14980.0], [84.8, 14988.0], [84.9, 15000.0], [85.0, 15000.0], [85.1, 15009.0], [85.2, 15012.0], [85.3, 15019.0], [85.4, 15034.0], [85.5, 15034.0], [85.6, 15036.0], [85.7, 15046.0], [85.8, 15054.0], [85.9, 15057.0], [86.0, 15057.0], [86.1, 15060.0], [86.2, 15066.0], [86.3, 15070.0], [86.4, 15070.0], [86.5, 15077.0], [86.6, 15083.0], [86.7, 15083.0], [86.8, 15094.0], [86.9, 15094.0], [87.0, 15101.0], [87.1, 15103.0], [87.2, 15112.0], [87.3, 15112.0], [87.4, 15112.0], [87.5, 15116.0], [87.6, 15117.0], [87.7, 15122.0], [87.8, 15122.0], [87.9, 15122.0], [88.0, 15127.0], [88.1, 15128.0], [88.2, 15131.0], [88.3, 15131.0], [88.4, 15135.0], [88.5, 15137.0], [88.6, 15145.0], [88.7, 15147.0], [88.8, 15147.0], [88.9, 15153.0], [89.0, 15166.0], [89.1, 15191.0], [89.2, 15193.0], [89.3, 15193.0], [89.4, 15198.0], [89.5, 15199.0], [89.6, 15200.0], [89.7, 15200.0], [89.8, 15205.0], [89.9, 15207.0], [90.0, 15227.0], [90.1, 15229.0], [90.2, 15229.0], [90.3, 15248.0], [90.4, 15257.0], [90.5, 15267.0], [90.6, 15287.0], [90.7, 15287.0], [90.8, 15293.0], [90.9, 15293.0], [91.0, 15303.0], [91.1, 15303.0], [91.2, 15307.0], [91.3, 15312.0], [91.4, 15315.0], [91.5, 15319.0], [91.6, 15319.0], [91.7, 15319.0], [91.8, 15325.0], [91.9, 15326.0], [92.0, 15330.0], [92.1, 15330.0], [92.2, 15334.0], [92.3, 15336.0], [92.4, 15344.0], [92.5, 15344.0], [92.6, 15349.0], [92.7, 15374.0], [92.8, 15381.0], [92.9, 15396.0], [93.0, 15396.0], [93.1, 15405.0], [93.2, 15415.0], [93.3, 15425.0], [93.4, 15433.0], [93.5, 15433.0], [93.6, 15462.0], [93.7, 15466.0], [93.8, 15473.0], [93.9, 15473.0], [94.0, 15479.0], [94.1, 15484.0], [94.2, 15496.0], [94.3, 15511.0], [94.4, 15511.0], [94.5, 15511.0], [94.6, 15516.0], [94.7, 15520.0], [94.8, 15526.0], [94.9, 15526.0], [95.0, 15532.0], [95.1, 15546.0], [95.2, 15551.0], [95.3, 15560.0], [95.4, 15560.0], [95.5, 15563.0], [95.6, 15574.0], [95.7, 15582.0], [95.8, 15582.0], [95.9, 15598.0], [96.0, 15600.0], [96.1, 15605.0], [96.2, 15620.0], [96.3, 15620.0], [96.4, 15621.0], [96.5, 15625.0], [96.6, 15633.0], [96.7, 15646.0], [96.8, 15646.0], [96.9, 15674.0], [97.0, 15716.0], [97.1, 15717.0], [97.2, 15717.0], [97.3, 15737.0], [97.4, 15739.0], [97.5, 15766.0], [97.6, 15767.0], [97.7, 15767.0], [97.8, 15787.0], [97.9, 15800.0], [98.0, 15810.0], [98.1, 15819.0], [98.2, 15819.0], [98.3, 15828.0], [98.4, 15892.0], [98.5, 15902.0], [98.6, 15902.0], [98.7, 15911.0], [98.8, 16029.0], [98.9, 16089.0], [99.0, 16089.0], [99.1, 16089.0], [99.2, 16151.0], [99.3, 16213.0], [99.4, 16262.0], [99.5, 16387.0], [99.6, 16387.0], [99.7, 16422.0], [99.8, 16578.0], [99.9, 16809.0]], "isOverall": false, "label": "GET Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 79.0, "series": [{"data": [[4500.0, 1.0], [10100.0, 2.0], [10200.0, 1.0], [9900.0, 2.0], [10000.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [11000.0, 1.0], [11600.0, 2.0], [11400.0, 2.0], [11700.0, 1.0], [11500.0, 1.0], [11300.0, 1.0], [12100.0, 5.0], [12200.0, 4.0], [12000.0, 4.0], [11900.0, 2.0], [12300.0, 4.0], [12400.0, 1.0], [14100.0, 1.0], [14700.0, 1.0], [14900.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [17400.0, 2.0], [17800.0, 3.0], [17500.0, 2.0], [17600.0, 1.0], [17700.0, 3.0], [18000.0, 2.0], [18100.0, 2.0], [18200.0, 1.0], [18500.0, 2.0], [18700.0, 3.0], [18800.0, 1.0], [19000.0, 2.0], [18900.0, 3.0], [19100.0, 4.0], [19200.0, 25.0], [19300.0, 41.0], [19400.0, 52.0], [20300.0, 24.0], [19600.0, 58.0], [19700.0, 56.0], [19800.0, 79.0], [20200.0, 32.0], [19900.0, 59.0], [19500.0, 67.0], [20100.0, 35.0], [20000.0, 65.0], [20400.0, 50.0], [21300.0, 1.0], [21200.0, 2.0], [20900.0, 2.0], [20700.0, 8.0], [20800.0, 2.0], [21000.0, 1.0], [21500.0, 1.0], [20600.0, 23.0], [20500.0, 27.0], [27000.0, 1.0], [29500.0, 1.0], [31700.0, 1.0], [30800.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[11900.0, 1.0], [15800.0, 1.0], [16600.0, 1.0], [17400.0, 1.0], [4000.0, 4.0], [4200.0, 7.0], [4100.0, 5.0], [4300.0, 8.0], [4500.0, 8.0], [4400.0, 6.0], [4600.0, 15.0], [4800.0, 35.0], [4700.0, 27.0], [5100.0, 20.0], [5000.0, 16.0], [4900.0, 33.0], [5200.0, 44.0], [5300.0, 45.0], [5600.0, 75.0], [5500.0, 77.0], [5400.0, 50.0], [5700.0, 39.0], [5800.0, 52.0], [5900.0, 55.0], [6000.0, 46.0], [6100.0, 33.0], [6200.0, 13.0], [6300.0, 6.0], [6400.0, 10.0], [6600.0, 6.0], [6500.0, 9.0]], "isOverall": false, "label": "POST User register", "isController": false}, {"data": [[10100.0, 2.0], [10200.0, 1.0], [9900.0, 2.0], [10000.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [11000.0, 1.0], [11400.0, 3.0], [11500.0, 2.0], [11600.0, 2.0], [11700.0, 1.0], [11300.0, 1.0], [11800.0, 3.0], [12100.0, 7.0], [12200.0, 7.0], [11900.0, 5.0], [12000.0, 5.0], [12400.0, 3.0], [12500.0, 2.0], [12300.0, 5.0], [12700.0, 3.0], [12900.0, 2.0], [12800.0, 2.0], [13000.0, 5.0], [13200.0, 2.0], [13300.0, 5.0], [13400.0, 12.0], [13500.0, 19.0], [13700.0, 31.0], [13600.0, 16.0], [13800.0, 33.0], [14300.0, 46.0], [14100.0, 64.0], [14200.0, 53.0], [13900.0, 62.0], [14000.0, 55.0], [14400.0, 52.0], [14700.0, 29.0], [14500.0, 40.0], [14600.0, 41.0], [14800.0, 20.0], [15000.0, 16.0], [14900.0, 20.0], [15300.0, 16.0], [15100.0, 21.0], [15200.0, 11.0], [15700.0, 7.0], [15600.0, 8.0], [15500.0, 13.0], [15400.0, 10.0], [15800.0, 5.0], [16000.0, 3.0], [16200.0, 2.0], [16100.0, 1.0], [16300.0, 1.0], [15900.0, 2.0], [16400.0, 1.0], [16800.0, 1.0], [16500.0, 1.0], [200.0, 1.0]], "isOverall": false, "label": "GET Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1584.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1584.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 36.97340425531917, "minX": 1.60360434E12, "maxY": 50.0, "series": [{"data": [[1.60360434E12, 49.91150442477874], [1.60360464E12, 36.97340425531917], [1.60360452E12, 50.0], [1.60360458E12, 50.0], [1.6036044E12, 50.0], [1.60360446E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360464E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4071.0, "minX": 1.0, "maxY": 29580.0, "series": [{"data": [[2.0, 10091.0], [3.0, 9944.0], [4.0, 27017.0], [5.0, 10115.0], [6.0, 10424.0], [7.0, 10255.0], [8.0, 10146.0], [9.0, 10620.0], [10.0, 11384.0], [11.0, 11551.0], [12.0, 11476.0], [13.0, 11634.0], [14.0, 11093.0], [15.0, 11737.0], [16.0, 11459.0], [17.0, 11975.0], [18.0, 11670.0], [19.0, 12110.0], [20.0, 11925.0], [21.0, 12088.0], [22.0, 12074.0], [23.0, 12092.0], [24.0, 12152.0], [25.0, 12055.0], [26.0, 12307.0], [27.0, 12169.0], [28.0, 12452.0], [29.0, 12239.0], [30.0, 12365.0], [31.0, 12312.0], [33.0, 12126.0], [32.0, 12246.0], [35.0, 12286.0], [34.0, 12320.0], [37.0, 12179.0], [36.0, 12291.0], [39.0, 14109.0], [38.0, 29580.0], [41.0, 14962.0], [40.0, 14737.0], [43.0, 19516.0], [42.0, 19322.0], [45.0, 19425.0], [44.0, 19773.0], [47.0, 19351.0], [46.0, 19505.0], [49.0, 19440.0], [48.0, 19378.0], [50.0, 19856.086720867203], [1.0, 9967.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[48.44345616264294, 19475.522236340526]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[4.0, 11954.0], [38.0, 15837.0], [43.0, 4653.0], [42.0, 4071.0], [45.0, 4756.0], [44.0, 4915.0], [47.0, 4556.0], [46.0, 4643.0], [49.0, 4759.0], [48.0, 4657.0], [50.0, 5543.537940379392]], "isOverall": false, "label": "POST User register", "isController": false}, {"data": [[49.87433155080213, 5556.058823529402]], "isOverall": false, "label": "POST User register-Aggregated", "isController": false}, {"data": [[33.0, 12126.0], [32.0, 12246.0], [2.0, 10091.0], [35.0, 12285.0], [34.0, 12319.0], [37.0, 12179.0], [36.0, 12291.0], [39.0, 14108.0], [41.0, 14961.0], [40.0, 14737.0], [3.0, 9944.0], [50.0, 14337.19277108434], [5.0, 10115.0], [6.0, 10423.0], [7.0, 10255.0], [8.0, 10146.0], [9.0, 10620.0], [10.0, 11383.0], [11.0, 11551.0], [12.0, 11475.0], [13.0, 11634.0], [14.0, 11093.0], [15.0, 11737.0], [16.0, 11458.0], [1.0, 9967.0], [17.0, 11974.0], [18.0, 11669.0], [19.0, 12109.0], [20.0, 6094.5], [21.0, 12088.0], [22.0, 12074.0], [23.0, 12092.0], [24.0, 12152.0], [25.0, 12054.0], [26.0, 12306.0], [27.0, 12169.0], [29.0, 12345.0], [30.0, 12365.0], [31.0, 12312.0]], "isOverall": false, "label": "GET Registration Page", "isController": false}, {"data": [[48.52604828462514, 14194.75222363406]], "isOverall": false, "label": "GET Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 510090.5, "minX": 1.60360434E12, "maxY": 4481026.8, "series": [{"data": [[1.60360434E12, 4481026.8], [1.60360464E12, 2267964.5166666666], [1.60360452E12, 3322856.3666666667], [1.60360458E12, 3320219.033333333], [1.6036044E12, 2952674.433333333], [1.60360446E12, 3631966.8333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60360434E12, 732118.6333333333], [1.60360464E12, 510090.5], [1.60360452E12, 937243.75], [1.60360458E12, 936717.6], [1.6036044E12, 881472.45], [1.60360446E12, 983589.8333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360464E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5372.673333333331, "minX": 1.60360434E12, "maxY": 20449.966666666664, "series": [{"data": [[1.60360434E12, 19179.811881188125], [1.60360464E12, 16177.302325581393], [1.60360452E12, 19723.133333333342], [1.60360458E12, 19908.81333333335], [1.6036044E12, 20449.966666666664], [1.60360446E12, 19910.26666666667]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.60360434E12, 5610.059405940592], [1.60360464E12, 5534.787234042552], [1.60360452E12, 5396.4800000000005], [1.60360458E12, 5372.673333333331], [1.6036044E12, 5867.546666666665], [1.60360446E12, 5557.839999999997]], "isOverall": false, "label": "POST User register", "isController": false}, {"data": [[1.60360434E12, 13712.591240875909], [1.60360464E12, 12668.418181818182], [1.60360452E12, 14420.560000000007], [1.60360458E12, 14462.382550335571], [1.6036044E12, 14712.343511450383], [1.60360446E12, 14245.97575757576]], "isOverall": false, "label": "GET Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360464E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60360434E12, "maxY": 3133.326666666666, "series": [{"data": [[1.60360434E12, 0.0], [1.60360464E12, 0.0], [1.60360452E12, 0.0], [1.60360458E12, 0.0], [1.6036044E12, 0.0], [1.60360446E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.60360434E12, 2956.1386138613857], [1.60360464E12, 2749.191489361702], [1.60360452E12, 2858.82], [1.60360458E12, 2817.546666666666], [1.6036044E12, 3133.326666666666], [1.60360446E12, 2902.673333333334]], "isOverall": false, "label": "POST User register", "isController": false}, {"data": [[1.60360434E12, 1628.029197080293], [1.60360464E12, 2164.581818181819], [1.60360452E12, 2187.0066666666653], [1.60360458E12, 2194.281879194631], [1.6036044E12, 2230.7099236641216], [1.60360446E12, 2175.036363636365]], "isOverall": false, "label": "GET Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360464E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60360434E12, "maxY": 3.287128712871289, "series": [{"data": [[1.60360434E12, 0.0], [1.60360464E12, 0.0], [1.60360452E12, 0.0], [1.60360458E12, 0.0], [1.6036044E12, 0.0], [1.60360446E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.60360434E12, 3.287128712871289], [1.60360464E12, 3.148936170212767], [1.60360452E12, 2.3933333333333344], [1.60360458E12, 2.4000000000000017], [1.6036044E12, 2.4399999999999995], [1.60360446E12, 2.073333333333334]], "isOverall": false, "label": "POST User register", "isController": false}, {"data": [[1.60360434E12, 2.8248175182481754], [1.60360464E12, 1.3454545454545457], [1.60360452E12, 1.3199999999999996], [1.60360458E12, 1.4295302013422815], [1.6036044E12, 1.4580152671755715], [1.60360446E12, 1.2121212121212122]], "isOverall": false, "label": "GET Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360464E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 264.0, "minX": 1.60360434E12, "maxY": 29580.0, "series": [{"data": [[1.60360434E12, 16809.0], [1.60360464E12, 29580.0], [1.60360452E12, 15911.0], [1.60360458E12, 17403.0], [1.6036044E12, 16578.0], [1.60360446E12, 16676.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60360434E12, 264.0], [1.60360464E12, 4071.0], [1.60360452E12, 4075.0], [1.60360458E12, 4096.0], [1.6036044E12, 4338.0], [1.60360446E12, 4066.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60360434E12, 14431.9], [1.60360464E12, 14933.0], [1.60360452E12, 14859.4], [1.60360458E12, 14918.6], [1.6036044E12, 14910.0], [1.60360446E12, 14837.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60360434E12, 16340.489999999996], [1.60360464E12, 16633.859999999993], [1.60360452E12, 16057.2], [1.60360458E12, 15909.11], [1.6036044E12, 16280.749999999996], [1.60360446E12, 16160.919999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60360434E12, 15096.049999999996], [1.60360464E12, 15370.249999999998], [1.60360452E12, 15316.4], [1.60360458E12, 15325.95], [1.6036044E12, 15422.5], [1.60360446E12, 15334.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360464E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11870.5, "minX": 1000.0, "maxY": 12090.0, "series": [{"data": [[3000.0, 11979.0], [1000.0, 11870.5], [2000.0, 12090.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 3000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 864.0, "minX": 1000.0, "maxY": 2411.5, "series": [{"data": [[3000.0, 864.0], [1000.0, 2411.5], [2000.0, 2061.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 3000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.60360434E12, "maxY": 5.25, "series": [{"data": [[1.60360434E12, 4.8], [1.60360464E12, 1.4666666666666666], [1.60360452E12, 5.0], [1.60360458E12, 5.216666666666667], [1.6036044E12, 4.683333333333334], [1.60360446E12, 5.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360464E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.60360434E12, "maxY": 5.25, "series": [{"data": [[1.60360434E12, 3.966666666666667], [1.60360464E12, 2.533333333333333], [1.60360452E12, 5.0], [1.60360458E12, 4.983333333333333], [1.6036044E12, 4.683333333333334], [1.60360446E12, 5.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60360464E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7833333333333333, "minX": 1.60360434E12, "maxY": 2.75, "series": [{"data": [[1.60360434E12, 1.6833333333333333], [1.60360464E12, 1.4333333333333333], [1.60360452E12, 2.5], [1.60360458E12, 2.5], [1.6036044E12, 2.5], [1.60360446E12, 2.5]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.60360434E12, 2.283333333333333], [1.60360464E12, 0.9166666666666666], [1.60360452E12, 2.5], [1.60360458E12, 2.4833333333333334], [1.6036044E12, 2.183333333333333], [1.60360446E12, 2.75]], "isOverall": false, "label": "GET Registration Page-success", "isController": false}, {"data": [[1.60360434E12, 1.6833333333333333], [1.60360464E12, 0.7833333333333333], [1.60360452E12, 2.5], [1.60360458E12, 2.5], [1.6036044E12, 2.5], [1.60360446E12, 2.5]], "isOverall": false, "label": "POST User register-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360464E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.1333333333333333, "minX": 1.60360434E12, "maxY": 7.75, "series": [{"data": [[1.60360434E12, 5.65], [1.60360464E12, 3.1333333333333333], [1.60360452E12, 7.5], [1.60360458E12, 7.483333333333333], [1.6036044E12, 7.183333333333334], [1.60360446E12, 7.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60360464E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

