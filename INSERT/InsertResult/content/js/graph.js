/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1577.0, "minX": 0.0, "maxY": 30247.0, "series": [{"data": [[0.0, 4016.0], [0.1, 4081.0], [0.2, 4114.0], [0.3, 4497.0], [0.4, 4636.0], [0.5, 4720.0], [0.6, 4771.0], [0.7, 4815.0], [0.8, 4847.0], [0.9, 5808.0], [1.0, 5841.0], [1.1, 7124.0], [1.2, 7207.0], [1.3, 8521.0], [1.4, 10390.0], [1.5, 10660.0], [1.6, 10951.0], [1.7, 10958.0], [1.8, 10967.0], [1.9, 11051.0], [2.0, 11077.0], [2.1, 13199.0], [2.2, 13371.0], [2.3, 13393.0], [2.4, 13661.0], [2.5, 13748.0], [2.6, 13750.0], [2.7, 13765.0], [2.8, 13776.0], [2.9, 13857.0], [3.0, 13887.0], [3.1, 13899.0], [3.2, 13904.0], [3.3, 13904.0], [3.4, 13910.0], [3.5, 13914.0], [3.6, 13915.0], [3.7, 13925.0], [3.8, 13929.0], [3.9, 13929.0], [4.0, 13933.0], [4.1, 13933.0], [4.2, 13934.0], [4.3, 13941.0], [4.4, 13942.0], [4.5, 13944.0], [4.6, 13945.0], [4.7, 13953.0], [4.8, 13959.0], [4.9, 13959.0], [5.0, 13965.0], [5.1, 13969.0], [5.2, 13970.0], [5.3, 13974.0], [5.4, 13974.0], [5.5, 13976.0], [5.6, 13979.0], [5.7, 13991.0], [5.8, 13991.0], [5.9, 13996.0], [6.0, 13996.0], [6.1, 13999.0], [6.2, 14001.0], [6.3, 14001.0], [6.4, 14002.0], [6.5, 14004.0], [6.6, 14007.0], [6.7, 14008.0], [6.8, 14011.0], [6.9, 14013.0], [7.0, 14027.0], [7.1, 14029.0], [7.2, 14031.0], [7.3, 14032.0], [7.4, 14032.0], [7.5, 14033.0], [7.6, 14034.0], [7.7, 14035.0], [7.8, 14035.0], [7.9, 14039.0], [8.0, 14043.0], [8.1, 14043.0], [8.2, 14045.0], [8.3, 14045.0], [8.4, 14046.0], [8.5, 14049.0], [8.6, 14051.0], [8.7, 14051.0], [8.8, 14051.0], [8.9, 14051.0], [9.0, 14052.0], [9.1, 14053.0], [9.2, 14054.0], [9.3, 14054.0], [9.4, 14054.0], [9.5, 14056.0], [9.6, 14056.0], [9.7, 14057.0], [9.8, 14057.0], [9.9, 14059.0], [10.0, 14059.0], [10.1, 14062.0], [10.2, 14063.0], [10.3, 14064.0], [10.4, 14065.0], [10.5, 14066.0], [10.6, 14067.0], [10.7, 14068.0], [10.8, 14069.0], [10.9, 14071.0], [11.0, 14072.0], [11.1, 14078.0], [11.2, 14079.0], [11.3, 14079.0], [11.4, 14079.0], [11.5, 14080.0], [11.6, 14080.0], [11.7, 14081.0], [11.8, 14081.0], [11.9, 14082.0], [12.0, 14083.0], [12.1, 14085.0], [12.2, 14086.0], [12.3, 14087.0], [12.4, 14087.0], [12.5, 14090.0], [12.6, 14091.0], [12.7, 14091.0], [12.8, 14091.0], [12.9, 14091.0], [13.0, 14091.0], [13.1, 14094.0], [13.2, 14097.0], [13.3, 14097.0], [13.4, 14098.0], [13.5, 14100.0], [13.6, 14100.0], [13.7, 14100.0], [13.8, 14100.0], [13.9, 14102.0], [14.0, 14102.0], [14.1, 14103.0], [14.2, 14105.0], [14.3, 14105.0], [14.4, 14105.0], [14.5, 14105.0], [14.6, 14106.0], [14.7, 14107.0], [14.8, 14107.0], [14.9, 14108.0], [15.0, 14109.0], [15.1, 14109.0], [15.2, 14109.0], [15.3, 14110.0], [15.4, 14111.0], [15.5, 14111.0], [15.6, 14112.0], [15.7, 14112.0], [15.8, 14112.0], [15.9, 14113.0], [16.0, 14114.0], [16.1, 14116.0], [16.2, 14117.0], [16.3, 14117.0], [16.4, 14119.0], [16.5, 14120.0], [16.6, 14121.0], [16.7, 14121.0], [16.8, 14123.0], [16.9, 14125.0], [17.0, 14125.0], [17.1, 14125.0], [17.2, 14126.0], [17.3, 14126.0], [17.4, 14126.0], [17.5, 14127.0], [17.6, 14127.0], [17.7, 14128.0], [17.8, 14128.0], [17.9, 14128.0], [18.0, 14129.0], [18.1, 14129.0], [18.2, 14130.0], [18.3, 14130.0], [18.4, 14131.0], [18.5, 14131.0], [18.6, 14131.0], [18.7, 14132.0], [18.8, 14132.0], [18.9, 14133.0], [19.0, 14133.0], [19.1, 14135.0], [19.2, 14135.0], [19.3, 14136.0], [19.4, 14136.0], [19.5, 14137.0], [19.6, 14138.0], [19.7, 14139.0], [19.8, 14139.0], [19.9, 14140.0], [20.0, 14141.0], [20.1, 14141.0], [20.2, 14142.0], [20.3, 14142.0], [20.4, 14143.0], [20.5, 14143.0], [20.6, 14143.0], [20.7, 14144.0], [20.8, 14144.0], [20.9, 14145.0], [21.0, 14145.0], [21.1, 14145.0], [21.2, 14146.0], [21.3, 14146.0], [21.4, 14147.0], [21.5, 14148.0], [21.6, 14148.0], [21.7, 14150.0], [21.8, 14150.0], [21.9, 14150.0], [22.0, 14150.0], [22.1, 14151.0], [22.2, 14152.0], [22.3, 14152.0], [22.4, 14152.0], [22.5, 14152.0], [22.6, 14153.0], [22.7, 14153.0], [22.8, 14154.0], [22.9, 14154.0], [23.0, 14154.0], [23.1, 14155.0], [23.2, 14156.0], [23.3, 14156.0], [23.4, 14158.0], [23.5, 14158.0], [23.6, 14159.0], [23.7, 14159.0], [23.8, 14160.0], [23.9, 14161.0], [24.0, 14163.0], [24.1, 14163.0], [24.2, 14163.0], [24.3, 14165.0], [24.4, 14166.0], [24.5, 14166.0], [24.6, 14167.0], [24.7, 14168.0], [24.8, 14169.0], [24.9, 14169.0], [25.0, 14170.0], [25.1, 14170.0], [25.2, 14171.0], [25.3, 14171.0], [25.4, 14172.0], [25.5, 14172.0], [25.6, 14173.0], [25.7, 14173.0], [25.8, 14174.0], [25.9, 14174.0], [26.0, 14175.0], [26.1, 14175.0], [26.2, 14176.0], [26.3, 14176.0], [26.4, 14177.0], [26.5, 14177.0], [26.6, 14177.0], [26.7, 14177.0], [26.8, 14179.0], [26.9, 14179.0], [27.0, 14180.0], [27.1, 14180.0], [27.2, 14180.0], [27.3, 14181.0], [27.4, 14181.0], [27.5, 14182.0], [27.6, 14182.0], [27.7, 14183.0], [27.8, 14183.0], [27.9, 14183.0], [28.0, 14183.0], [28.1, 14184.0], [28.2, 14184.0], [28.3, 14185.0], [28.4, 14185.0], [28.5, 14185.0], [28.6, 14187.0], [28.7, 14188.0], [28.8, 14188.0], [28.9, 14188.0], [29.0, 14189.0], [29.1, 14191.0], [29.2, 14193.0], [29.3, 14194.0], [29.4, 14194.0], [29.5, 14195.0], [29.6, 14195.0], [29.7, 14196.0], [29.8, 14197.0], [29.9, 14197.0], [30.0, 14198.0], [30.1, 14199.0], [30.2, 14199.0], [30.3, 14201.0], [30.4, 14201.0], [30.5, 14202.0], [30.6, 14202.0], [30.7, 14203.0], [30.8, 14204.0], [30.9, 14206.0], [31.0, 14206.0], [31.1, 14207.0], [31.2, 14208.0], [31.3, 14208.0], [31.4, 14209.0], [31.5, 14210.0], [31.6, 14210.0], [31.7, 14210.0], [31.8, 14211.0], [31.9, 14212.0], [32.0, 14212.0], [32.1, 14213.0], [32.2, 14214.0], [32.3, 14214.0], [32.4, 14216.0], [32.5, 14217.0], [32.6, 14217.0], [32.7, 14217.0], [32.8, 14217.0], [32.9, 14218.0], [33.0, 14219.0], [33.1, 14220.0], [33.2, 14221.0], [33.3, 14222.0], [33.4, 14225.0], [33.5, 14226.0], [33.6, 14226.0], [33.7, 14226.0], [33.8, 14226.0], [33.9, 14227.0], [34.0, 14228.0], [34.1, 14228.0], [34.2, 14228.0], [34.3, 14229.0], [34.4, 14229.0], [34.5, 14230.0], [34.6, 14231.0], [34.7, 14231.0], [34.8, 14233.0], [34.9, 14234.0], [35.0, 14234.0], [35.1, 14235.0], [35.2, 14236.0], [35.3, 14236.0], [35.4, 14237.0], [35.5, 14237.0], [35.6, 14237.0], [35.7, 14238.0], [35.8, 14238.0], [35.9, 14239.0], [36.0, 14239.0], [36.1, 14239.0], [36.2, 14240.0], [36.3, 14240.0], [36.4, 14241.0], [36.5, 14241.0], [36.6, 14241.0], [36.7, 14242.0], [36.8, 14242.0], [36.9, 14244.0], [37.0, 14244.0], [37.1, 14244.0], [37.2, 14244.0], [37.3, 14245.0], [37.4, 14245.0], [37.5, 14245.0], [37.6, 14247.0], [37.7, 14247.0], [37.8, 14247.0], [37.9, 14247.0], [38.0, 14248.0], [38.1, 14249.0], [38.2, 14249.0], [38.3, 14251.0], [38.4, 14251.0], [38.5, 14252.0], [38.6, 14252.0], [38.7, 14253.0], [38.8, 14253.0], [38.9, 14254.0], [39.0, 14255.0], [39.1, 14256.0], [39.2, 14257.0], [39.3, 14257.0], [39.4, 14258.0], [39.5, 14258.0], [39.6, 14259.0], [39.7, 14260.0], [39.8, 14260.0], [39.9, 14260.0], [40.0, 14262.0], [40.1, 14263.0], [40.2, 14264.0], [40.3, 14265.0], [40.4, 14265.0], [40.5, 14266.0], [40.6, 14266.0], [40.7, 14266.0], [40.8, 14267.0], [40.9, 14267.0], [41.0, 14267.0], [41.1, 14268.0], [41.2, 14269.0], [41.3, 14269.0], [41.4, 14270.0], [41.5, 14271.0], [41.6, 14271.0], [41.7, 14271.0], [41.8, 14271.0], [41.9, 14272.0], [42.0, 14272.0], [42.1, 14273.0], [42.2, 14274.0], [42.3, 14274.0], [42.4, 14275.0], [42.5, 14275.0], [42.6, 14276.0], [42.7, 14276.0], [42.8, 14276.0], [42.9, 14277.0], [43.0, 14277.0], [43.1, 14278.0], [43.2, 14278.0], [43.3, 14278.0], [43.4, 14279.0], [43.5, 14279.0], [43.6, 14279.0], [43.7, 14280.0], [43.8, 14280.0], [43.9, 14281.0], [44.0, 14281.0], [44.1, 14281.0], [44.2, 14281.0], [44.3, 14283.0], [44.4, 14283.0], [44.5, 14284.0], [44.6, 14284.0], [44.7, 14284.0], [44.8, 14284.0], [44.9, 14284.0], [45.0, 14285.0], [45.1, 14285.0], [45.2, 14285.0], [45.3, 14286.0], [45.4, 14288.0], [45.5, 14289.0], [45.6, 14289.0], [45.7, 14289.0], [45.8, 14290.0], [45.9, 14291.0], [46.0, 14291.0], [46.1, 14293.0], [46.2, 14294.0], [46.3, 14294.0], [46.4, 14294.0], [46.5, 14295.0], [46.6, 14295.0], [46.7, 14297.0], [46.8, 14297.0], [46.9, 14297.0], [47.0, 14297.0], [47.1, 14297.0], [47.2, 14299.0], [47.3, 14299.0], [47.4, 14299.0], [47.5, 14301.0], [47.6, 14302.0], [47.7, 14303.0], [47.8, 14303.0], [47.9, 14303.0], [48.0, 14303.0], [48.1, 14303.0], [48.2, 14303.0], [48.3, 14303.0], [48.4, 14304.0], [48.5, 14306.0], [48.6, 14306.0], [48.7, 14307.0], [48.8, 14308.0], [48.9, 14308.0], [49.0, 14309.0], [49.1, 14309.0], [49.2, 14309.0], [49.3, 14309.0], [49.4, 14309.0], [49.5, 14310.0], [49.6, 14310.0], [49.7, 14311.0], [49.8, 14311.0], [49.9, 14311.0], [50.0, 14311.0], [50.1, 14311.0], [50.2, 14311.0], [50.3, 14312.0], [50.4, 14312.0], [50.5, 14313.0], [50.6, 14313.0], [50.7, 14314.0], [50.8, 14314.0], [50.9, 14315.0], [51.0, 14316.0], [51.1, 14316.0], [51.2, 14316.0], [51.3, 14317.0], [51.4, 14318.0], [51.5, 14319.0], [51.6, 14319.0], [51.7, 14319.0], [51.8, 14320.0], [51.9, 14320.0], [52.0, 14321.0], [52.1, 14321.0], [52.2, 14321.0], [52.3, 14321.0], [52.4, 14323.0], [52.5, 14323.0], [52.6, 14324.0], [52.7, 14325.0], [52.8, 14326.0], [52.9, 14327.0], [53.0, 14327.0], [53.1, 14327.0], [53.2, 14328.0], [53.3, 14330.0], [53.4, 14330.0], [53.5, 14330.0], [53.6, 14330.0], [53.7, 14331.0], [53.8, 14331.0], [53.9, 14332.0], [54.0, 14332.0], [54.1, 14334.0], [54.2, 14334.0], [54.3, 14335.0], [54.4, 14335.0], [54.5, 14335.0], [54.6, 14338.0], [54.7, 14339.0], [54.8, 14340.0], [54.9, 14340.0], [55.0, 14340.0], [55.1, 14341.0], [55.2, 14343.0], [55.3, 14343.0], [55.4, 14343.0], [55.5, 14344.0], [55.6, 14345.0], [55.7, 14345.0], [55.8, 14345.0], [55.9, 14345.0], [56.0, 14346.0], [56.1, 14347.0], [56.2, 14347.0], [56.3, 14348.0], [56.4, 14348.0], [56.5, 14348.0], [56.6, 14349.0], [56.7, 14349.0], [56.8, 14350.0], [56.9, 14352.0], [57.0, 14352.0], [57.1, 14352.0], [57.2, 14353.0], [57.3, 14353.0], [57.4, 14354.0], [57.5, 14354.0], [57.6, 14354.0], [57.7, 14357.0], [57.8, 14357.0], [57.9, 14357.0], [58.0, 14357.0], [58.1, 14357.0], [58.2, 14358.0], [58.3, 14358.0], [58.4, 14358.0], [58.5, 14359.0], [58.6, 14360.0], [58.7, 14361.0], [58.8, 14361.0], [58.9, 14361.0], [59.0, 14361.0], [59.1, 14362.0], [59.2, 14362.0], [59.3, 14362.0], [59.4, 14363.0], [59.5, 14363.0], [59.6, 14363.0], [59.7, 14364.0], [59.8, 14364.0], [59.9, 14364.0], [60.0, 14365.0], [60.1, 14365.0], [60.2, 14365.0], [60.3, 14366.0], [60.4, 14367.0], [60.5, 14368.0], [60.6, 14368.0], [60.7, 14370.0], [60.8, 14372.0], [60.9, 14373.0], [61.0, 14373.0], [61.1, 14375.0], [61.2, 14375.0], [61.3, 14375.0], [61.4, 14376.0], [61.5, 14376.0], [61.6, 14376.0], [61.7, 14378.0], [61.8, 14378.0], [61.9, 14378.0], [62.0, 14381.0], [62.1, 14383.0], [62.2, 14384.0], [62.3, 14384.0], [62.4, 14384.0], [62.5, 14384.0], [62.6, 14385.0], [62.7, 14387.0], [62.8, 14387.0], [62.9, 14389.0], [63.0, 14390.0], [63.1, 14390.0], [63.2, 14392.0], [63.3, 14392.0], [63.4, 14393.0], [63.5, 14394.0], [63.6, 14394.0], [63.7, 14394.0], [63.8, 14394.0], [63.9, 14395.0], [64.0, 14395.0], [64.1, 14396.0], [64.2, 14397.0], [64.3, 14397.0], [64.4, 14397.0], [64.5, 14399.0], [64.6, 14399.0], [64.7, 14400.0], [64.8, 14401.0], [64.9, 14401.0], [65.0, 14401.0], [65.1, 14402.0], [65.2, 14402.0], [65.3, 14403.0], [65.4, 14403.0], [65.5, 14403.0], [65.6, 14403.0], [65.7, 14403.0], [65.8, 14403.0], [65.9, 14404.0], [66.0, 14405.0], [66.1, 14405.0], [66.2, 14406.0], [66.3, 14406.0], [66.4, 14406.0], [66.5, 14406.0], [66.6, 14406.0], [66.7, 14406.0], [66.8, 14407.0], [66.9, 14407.0], [67.0, 14407.0], [67.1, 14408.0], [67.2, 14408.0], [67.3, 14408.0], [67.4, 14409.0], [67.5, 14410.0], [67.6, 14410.0], [67.7, 14410.0], [67.8, 14411.0], [67.9, 14412.0], [68.0, 14413.0], [68.1, 14413.0], [68.2, 14414.0], [68.3, 14414.0], [68.4, 14414.0], [68.5, 14414.0], [68.6, 14415.0], [68.7, 14416.0], [68.8, 14416.0], [68.9, 14417.0], [69.0, 14418.0], [69.1, 14418.0], [69.2, 14419.0], [69.3, 14419.0], [69.4, 14419.0], [69.5, 14420.0], [69.6, 14420.0], [69.7, 14420.0], [69.8, 14421.0], [69.9, 14421.0], [70.0, 14422.0], [70.1, 14423.0], [70.2, 14424.0], [70.3, 14424.0], [70.4, 14424.0], [70.5, 14424.0], [70.6, 14426.0], [70.7, 14427.0], [70.8, 14429.0], [70.9, 14430.0], [71.0, 14434.0], [71.1, 14434.0], [71.2, 14435.0], [71.3, 14437.0], [71.4, 14439.0], [71.5, 14439.0], [71.6, 14440.0], [71.7, 14440.0], [71.8, 14441.0], [71.9, 14442.0], [72.0, 14442.0], [72.1, 14443.0], [72.2, 14444.0], [72.3, 14445.0], [72.4, 14445.0], [72.5, 14445.0], [72.6, 14445.0], [72.7, 14445.0], [72.8, 14448.0], [72.9, 14450.0], [73.0, 14451.0], [73.1, 14452.0], [73.2, 14453.0], [73.3, 14454.0], [73.4, 14454.0], [73.5, 14454.0], [73.6, 14455.0], [73.7, 14455.0], [73.8, 14455.0], [73.9, 14457.0], [74.0, 14459.0], [74.1, 14460.0], [74.2, 14460.0], [74.3, 14461.0], [74.4, 14463.0], [74.5, 14463.0], [74.6, 14464.0], [74.7, 14464.0], [74.8, 14465.0], [74.9, 14465.0], [75.0, 14466.0], [75.1, 14467.0], [75.2, 14468.0], [75.3, 14468.0], [75.4, 14469.0], [75.5, 14471.0], [75.6, 14475.0], [75.7, 14476.0], [75.8, 14477.0], [75.9, 14477.0], [76.0, 14479.0], [76.1, 14481.0], [76.2, 14481.0], [76.3, 14482.0], [76.4, 14483.0], [76.5, 14484.0], [76.6, 14484.0], [76.7, 14485.0], [76.8, 14486.0], [76.9, 14487.0], [77.0, 14488.0], [77.1, 14488.0], [77.2, 14489.0], [77.3, 14490.0], [77.4, 14491.0], [77.5, 14492.0], [77.6, 14493.0], [77.7, 14494.0], [77.8, 14495.0], [77.9, 14497.0], [78.0, 14497.0], [78.1, 14497.0], [78.2, 14499.0], [78.3, 14500.0], [78.4, 14502.0], [78.5, 14504.0], [78.6, 14504.0], [78.7, 14504.0], [78.8, 14505.0], [78.9, 14505.0], [79.0, 14508.0], [79.1, 14508.0], [79.2, 14509.0], [79.3, 14509.0], [79.4, 14510.0], [79.5, 14513.0], [79.6, 14514.0], [79.7, 14514.0], [79.8, 14519.0], [79.9, 14521.0], [80.0, 14522.0], [80.1, 14522.0], [80.2, 14524.0], [80.3, 14525.0], [80.4, 14526.0], [80.5, 14526.0], [80.6, 14528.0], [80.7, 14529.0], [80.8, 14530.0], [80.9, 14534.0], [81.0, 14534.0], [81.1, 14537.0], [81.2, 14540.0], [81.3, 14540.0], [81.4, 14540.0], [81.5, 14545.0], [81.6, 14546.0], [81.7, 14547.0], [81.8, 14547.0], [81.9, 14550.0], [82.0, 14551.0], [82.1, 14553.0], [82.2, 14557.0], [82.3, 14559.0], [82.4, 14559.0], [82.5, 14560.0], [82.6, 14562.0], [82.7, 14562.0], [82.8, 14565.0], [82.9, 14569.0], [83.0, 14574.0], [83.1, 14575.0], [83.2, 14577.0], [83.3, 14580.0], [83.4, 14581.0], [83.5, 14589.0], [83.6, 14596.0], [83.7, 14596.0], [83.8, 14602.0], [83.9, 14602.0], [84.0, 14603.0], [84.1, 14604.0], [84.2, 14605.0], [84.3, 14606.0], [84.4, 14614.0], [84.5, 14614.0], [84.6, 14615.0], [84.7, 14617.0], [84.8, 14619.0], [84.9, 14619.0], [85.0, 14627.0], [85.1, 14630.0], [85.2, 14630.0], [85.3, 14638.0], [85.4, 14644.0], [85.5, 14644.0], [85.6, 14646.0], [85.7, 14647.0], [85.8, 14648.0], [85.9, 14648.0], [86.0, 14653.0], [86.1, 14653.0], [86.2, 14655.0], [86.3, 14657.0], [86.4, 14661.0], [86.5, 14661.0], [86.6, 14662.0], [86.7, 14663.0], [86.8, 14666.0], [86.9, 14670.0], [87.0, 14678.0], [87.1, 14680.0], [87.2, 14688.0], [87.3, 14690.0], [87.4, 14696.0], [87.5, 14697.0], [87.6, 14702.0], [87.7, 14706.0], [87.8, 14714.0], [87.9, 14722.0], [88.0, 14723.0], [88.1, 14729.0], [88.2, 14739.0], [88.3, 14743.0], [88.4, 14744.0], [88.5, 14745.0], [88.6, 14751.0], [88.7, 14752.0], [88.8, 14758.0], [88.9, 14759.0], [89.0, 14760.0], [89.1, 14771.0], [89.2, 14775.0], [89.3, 14785.0], [89.4, 14786.0], [89.5, 14788.0], [89.6, 14794.0], [89.7, 14794.0], [89.8, 14808.0], [89.9, 14824.0], [90.0, 14866.0], [90.1, 14868.0], [90.2, 14876.0], [90.3, 14881.0], [90.4, 14884.0], [90.5, 14891.0], [90.6, 14918.0], [90.7, 14932.0], [90.8, 14932.0], [90.9, 14941.0], [91.0, 14945.0], [91.1, 14954.0], [91.2, 14956.0], [91.3, 14960.0], [91.4, 14961.0], [91.5, 14964.0], [91.6, 14970.0], [91.7, 14991.0], [91.8, 15018.0], [91.9, 15026.0], [92.0, 15030.0], [92.1, 15032.0], [92.2, 15034.0], [92.3, 15035.0], [92.4, 15044.0], [92.5, 15049.0], [92.6, 15060.0], [92.7, 15064.0], [92.8, 15069.0], [92.9, 15069.0], [93.0, 15070.0], [93.1, 15077.0], [93.2, 15085.0], [93.3, 15092.0], [93.4, 15102.0], [93.5, 15103.0], [93.6, 15108.0], [93.7, 15123.0], [93.8, 15153.0], [93.9, 15166.0], [94.0, 15182.0], [94.1, 15195.0], [94.2, 15249.0], [94.3, 15329.0], [94.4, 15372.0], [94.5, 15440.0], [94.6, 15468.0], [94.7, 15472.0], [94.8, 22607.0], [94.9, 22671.0], [95.0, 23127.0], [95.1, 24153.0], [95.2, 24804.0], [95.3, 25291.0], [95.4, 26108.0], [95.5, 26361.0], [95.6, 26517.0], [95.7, 26649.0], [95.8, 26687.0], [95.9, 26817.0], [96.0, 27033.0], [96.1, 27087.0], [96.2, 27296.0], [96.3, 27392.0], [96.4, 27425.0], [96.5, 27474.0], [96.6, 27495.0], [96.7, 27541.0], [96.8, 27564.0], [96.9, 27591.0], [97.0, 27602.0], [97.1, 27603.0], [97.2, 27792.0], [97.3, 27914.0], [97.4, 27956.0], [97.5, 28014.0], [97.6, 28042.0], [97.7, 28064.0], [97.8, 28089.0], [97.9, 28093.0], [98.0, 28189.0], [98.1, 28189.0], [98.2, 28195.0], [98.3, 28213.0], [98.4, 28230.0], [98.5, 28406.0], [98.6, 28427.0], [98.7, 28447.0], [98.8, 28544.0], [98.9, 28559.0], [99.0, 28585.0], [99.1, 28671.0], [99.2, 28687.0], [99.3, 28743.0], [99.4, 28878.0], [99.5, 28977.0], [99.6, 28997.0], [99.7, 29059.0], [99.8, 29196.0], [99.9, 29551.0], [100.0, 30247.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 1577.0], [0.1, 1577.0], [0.2, 1984.0], [0.3, 2454.0], [0.4, 2673.0], [0.5, 2707.0], [0.6, 2946.0], [0.7, 2982.0], [0.8, 2994.0], [0.9, 3009.0], [1.0, 3032.0], [1.1, 3038.0], [1.2, 3087.0], [1.3, 3090.0], [1.4, 3101.0], [1.5, 3114.0], [1.6, 3117.0], [1.7, 3124.0], [1.8, 3130.0], [1.9, 3130.0], [2.0, 3134.0], [2.1, 3138.0], [2.2, 3149.0], [2.3, 3149.0], [2.4, 3154.0], [2.5, 3155.0], [2.6, 3155.0], [2.7, 3161.0], [2.8, 3166.0], [2.9, 3167.0], [3.0, 3169.0], [3.1, 3171.0], [3.2, 3175.0], [3.3, 3180.0], [3.4, 3182.0], [3.5, 3183.0], [3.6, 3184.0], [3.7, 3186.0], [3.8, 3186.0], [3.9, 3195.0], [4.0, 3197.0], [4.1, 3206.0], [4.2, 3230.0], [4.3, 3235.0], [4.4, 3235.0], [4.5, 3238.0], [4.6, 3240.0], [4.7, 3251.0], [4.8, 3264.0], [4.9, 3265.0], [5.0, 3266.0], [5.1, 3268.0], [5.2, 3269.0], [5.3, 3276.0], [5.4, 3277.0], [5.5, 3277.0], [5.6, 3281.0], [5.7, 3286.0], [5.8, 3289.0], [5.9, 3292.0], [6.0, 3295.0], [6.1, 3297.0], [6.2, 3298.0], [6.3, 3299.0], [6.4, 3300.0], [6.5, 3301.0], [6.6, 3302.0], [6.7, 3304.0], [6.8, 3312.0], [6.9, 3313.0], [7.0, 3316.0], [7.1, 3317.0], [7.2, 3319.0], [7.3, 3320.0], [7.4, 3322.0], [7.5, 3323.0], [7.6, 3326.0], [7.7, 3327.0], [7.8, 3331.0], [7.9, 3335.0], [8.0, 3335.0], [8.1, 3336.0], [8.2, 3337.0], [8.3, 3340.0], [8.4, 3341.0], [8.5, 3343.0], [8.6, 3348.0], [8.7, 3353.0], [8.8, 3360.0], [8.9, 3363.0], [9.0, 3363.0], [9.1, 3364.0], [9.2, 3370.0], [9.3, 3373.0], [9.4, 3377.0], [9.5, 3377.0], [9.6, 3383.0], [9.7, 3386.0], [9.8, 3386.0], [9.9, 3388.0], [10.0, 3388.0], [10.1, 3395.0], [10.2, 3399.0], [10.3, 3399.0], [10.4, 3399.0], [10.5, 3399.0], [10.6, 3400.0], [10.7, 3404.0], [10.8, 3407.0], [10.9, 3408.0], [11.0, 3408.0], [11.1, 3408.0], [11.2, 3409.0], [11.3, 3409.0], [11.4, 3410.0], [11.5, 3414.0], [11.6, 3416.0], [11.7, 3419.0], [11.8, 3420.0], [11.9, 3421.0], [12.0, 3422.0], [12.1, 3429.0], [12.2, 3432.0], [12.3, 3436.0], [12.4, 3437.0], [12.5, 3448.0], [12.6, 3448.0], [12.7, 3453.0], [12.8, 3455.0], [12.9, 3456.0], [13.0, 3456.0], [13.1, 3465.0], [13.2, 3467.0], [13.3, 3469.0], [13.4, 3470.0], [13.5, 3471.0], [13.6, 3476.0], [13.7, 3478.0], [13.8, 3480.0], [13.9, 3485.0], [14.0, 3491.0], [14.1, 3493.0], [14.2, 3496.0], [14.3, 3504.0], [14.4, 3505.0], [14.5, 3517.0], [14.6, 3519.0], [14.7, 3520.0], [14.8, 3521.0], [14.9, 3522.0], [15.0, 3524.0], [15.1, 3534.0], [15.2, 3536.0], [15.3, 3539.0], [15.4, 3539.0], [15.5, 3540.0], [15.6, 3540.0], [15.7, 3545.0], [15.8, 3548.0], [15.9, 3548.0], [16.0, 3548.0], [16.1, 3551.0], [16.2, 3551.0], [16.3, 3554.0], [16.4, 3560.0], [16.5, 3563.0], [16.6, 3570.0], [16.7, 3570.0], [16.8, 3577.0], [16.9, 3584.0], [17.0, 3585.0], [17.1, 3593.0], [17.2, 3594.0], [17.3, 3598.0], [17.4, 3600.0], [17.5, 3602.0], [17.6, 3602.0], [17.7, 3605.0], [17.8, 3605.0], [17.9, 3613.0], [18.0, 3613.0], [18.1, 3620.0], [18.2, 3621.0], [18.3, 3627.0], [18.4, 3630.0], [18.5, 3633.0], [18.6, 3637.0], [18.7, 3641.0], [18.8, 3642.0], [18.9, 3643.0], [19.0, 3648.0], [19.1, 3650.0], [19.2, 3650.0], [19.3, 3652.0], [19.4, 3654.0], [19.5, 3655.0], [19.6, 3657.0], [19.7, 3658.0], [19.8, 3659.0], [19.9, 3662.0], [20.0, 3663.0], [20.1, 3663.0], [20.2, 3664.0], [20.3, 3665.0], [20.4, 3666.0], [20.5, 3667.0], [20.6, 3667.0], [20.7, 3667.0], [20.8, 3671.0], [20.9, 3671.0], [21.0, 3671.0], [21.1, 3676.0], [21.2, 3676.0], [21.3, 3679.0], [21.4, 3682.0], [21.5, 3682.0], [21.6, 3686.0], [21.7, 3686.0], [21.8, 3692.0], [21.9, 3696.0], [22.0, 3697.0], [22.1, 3699.0], [22.2, 3701.0], [22.3, 3704.0], [22.4, 3705.0], [22.5, 3707.0], [22.6, 3709.0], [22.7, 3710.0], [22.8, 3710.0], [22.9, 3710.0], [23.0, 3711.0], [23.1, 3713.0], [23.2, 3715.0], [23.3, 3718.0], [23.4, 3720.0], [23.5, 3722.0], [23.6, 3727.0], [23.7, 3727.0], [23.8, 3728.0], [23.9, 3730.0], [24.0, 3733.0], [24.1, 3733.0], [24.2, 3734.0], [24.3, 3734.0], [24.4, 3739.0], [24.5, 3742.0], [24.6, 3746.0], [24.7, 3754.0], [24.8, 3757.0], [24.9, 3758.0], [25.0, 3760.0], [25.1, 3761.0], [25.2, 3761.0], [25.3, 3763.0], [25.4, 3763.0], [25.5, 3766.0], [25.6, 3766.0], [25.7, 3769.0], [25.8, 3769.0], [25.9, 3769.0], [26.0, 3769.0], [26.1, 3770.0], [26.2, 3772.0], [26.3, 3773.0], [26.4, 3775.0], [26.5, 3775.0], [26.6, 3778.0], [26.7, 3778.0], [26.8, 3784.0], [26.9, 3784.0], [27.0, 3788.0], [27.1, 3791.0], [27.2, 3791.0], [27.3, 3791.0], [27.4, 3792.0], [27.5, 3793.0], [27.6, 3793.0], [27.7, 3795.0], [27.8, 3797.0], [27.9, 3798.0], [28.0, 3798.0], [28.1, 3799.0], [28.2, 3799.0], [28.3, 3799.0], [28.4, 3800.0], [28.5, 3800.0], [28.6, 3801.0], [28.7, 3803.0], [28.8, 3806.0], [28.9, 3806.0], [29.0, 3809.0], [29.1, 3810.0], [29.2, 3810.0], [29.3, 3812.0], [29.4, 3813.0], [29.5, 3814.0], [29.6, 3814.0], [29.7, 3814.0], [29.8, 3816.0], [29.9, 3817.0], [30.0, 3820.0], [30.1, 3820.0], [30.2, 3821.0], [30.3, 3821.0], [30.4, 3823.0], [30.5, 3824.0], [30.6, 3828.0], [30.7, 3828.0], [30.8, 3830.0], [30.9, 3833.0], [31.0, 3834.0], [31.1, 3835.0], [31.2, 3838.0], [31.3, 3839.0], [31.4, 3839.0], [31.5, 3839.0], [31.6, 3839.0], [31.7, 3843.0], [31.8, 3846.0], [31.9, 3847.0], [32.0, 3847.0], [32.1, 3851.0], [32.2, 3851.0], [32.3, 3851.0], [32.4, 3851.0], [32.5, 3853.0], [32.6, 3855.0], [32.7, 3855.0], [32.8, 3855.0], [32.9, 3857.0], [33.0, 3857.0], [33.1, 3857.0], [33.2, 3858.0], [33.3, 3858.0], [33.4, 3860.0], [33.5, 3860.0], [33.6, 3863.0], [33.7, 3865.0], [33.8, 3867.0], [33.9, 3868.0], [34.0, 3868.0], [34.1, 3870.0], [34.2, 3870.0], [34.3, 3870.0], [34.4, 3871.0], [34.5, 3872.0], [34.6, 3872.0], [34.7, 3874.0], [34.8, 3874.0], [34.9, 3874.0], [35.0, 3874.0], [35.1, 3875.0], [35.2, 3876.0], [35.3, 3876.0], [35.4, 3876.0], [35.5, 3877.0], [35.6, 3878.0], [35.7, 3878.0], [35.8, 3879.0], [35.9, 3882.0], [36.0, 3882.0], [36.1, 3883.0], [36.2, 3884.0], [36.3, 3885.0], [36.4, 3886.0], [36.5, 3887.0], [36.6, 3887.0], [36.7, 3889.0], [36.8, 3890.0], [36.9, 3891.0], [37.0, 3893.0], [37.1, 3896.0], [37.2, 3898.0], [37.3, 3898.0], [37.4, 3898.0], [37.5, 3899.0], [37.6, 3900.0], [37.7, 3900.0], [37.8, 3900.0], [37.9, 3900.0], [38.0, 3901.0], [38.1, 3902.0], [38.2, 3905.0], [38.3, 3906.0], [38.4, 3907.0], [38.5, 3907.0], [38.6, 3907.0], [38.7, 3908.0], [38.8, 3908.0], [38.9, 3908.0], [39.0, 3908.0], [39.1, 3909.0], [39.2, 3910.0], [39.3, 3910.0], [39.4, 3911.0], [39.5, 3912.0], [39.6, 3912.0], [39.7, 3912.0], [39.8, 3913.0], [39.9, 3914.0], [40.0, 3917.0], [40.1, 3917.0], [40.2, 3918.0], [40.3, 3920.0], [40.4, 3920.0], [40.5, 3921.0], [40.6, 3924.0], [40.7, 3924.0], [40.8, 3926.0], [40.9, 3928.0], [41.0, 3928.0], [41.1, 3930.0], [41.2, 3930.0], [41.3, 3931.0], [41.4, 3933.0], [41.5, 3933.0], [41.6, 3934.0], [41.7, 3936.0], [41.8, 3938.0], [41.9, 3939.0], [42.0, 3939.0], [42.1, 3940.0], [42.2, 3940.0], [42.3, 3940.0], [42.4, 3941.0], [42.5, 3943.0], [42.6, 3944.0], [42.7, 3944.0], [42.8, 3946.0], [42.9, 3947.0], [43.0, 3947.0], [43.1, 3947.0], [43.2, 3948.0], [43.3, 3950.0], [43.4, 3950.0], [43.5, 3951.0], [43.6, 3951.0], [43.7, 3952.0], [43.8, 3953.0], [43.9, 3953.0], [44.0, 3953.0], [44.1, 3954.0], [44.2, 3956.0], [44.3, 3956.0], [44.4, 3956.0], [44.5, 3959.0], [44.6, 3961.0], [44.7, 3961.0], [44.8, 3962.0], [44.9, 3963.0], [45.0, 3964.0], [45.1, 3964.0], [45.2, 3964.0], [45.3, 3965.0], [45.4, 3965.0], [45.5, 3965.0], [45.6, 3965.0], [45.7, 3966.0], [45.8, 3966.0], [45.9, 3966.0], [46.0, 3967.0], [46.1, 3967.0], [46.2, 3969.0], [46.3, 3970.0], [46.4, 3970.0], [46.5, 3970.0], [46.6, 3971.0], [46.7, 3971.0], [46.8, 3971.0], [46.9, 3973.0], [47.0, 3974.0], [47.1, 3975.0], [47.2, 3978.0], [47.3, 3979.0], [47.4, 3979.0], [47.5, 3980.0], [47.6, 3980.0], [47.7, 3981.0], [47.8, 3981.0], [47.9, 3981.0], [48.0, 3982.0], [48.1, 3983.0], [48.2, 3983.0], [48.3, 3984.0], [48.4, 3984.0], [48.5, 3985.0], [48.6, 3985.0], [48.7, 3986.0], [48.8, 3986.0], [48.9, 3986.0], [49.0, 3987.0], [49.1, 3987.0], [49.2, 3988.0], [49.3, 3988.0], [49.4, 3988.0], [49.5, 3989.0], [49.6, 3989.0], [49.7, 3992.0], [49.8, 3993.0], [49.9, 3993.0], [50.0, 3993.0], [50.1, 3994.0], [50.2, 3994.0], [50.3, 3994.0], [50.4, 3994.0], [50.5, 3995.0], [50.6, 3995.0], [50.7, 3997.0], [50.8, 3997.0], [50.9, 3998.0], [51.0, 3999.0], [51.1, 3999.0], [51.2, 4000.0], [51.3, 4000.0], [51.4, 4001.0], [51.5, 4002.0], [51.6, 4002.0], [51.7, 4003.0], [51.8, 4004.0], [51.9, 4005.0], [52.0, 4006.0], [52.1, 4006.0], [52.2, 4007.0], [52.3, 4007.0], [52.4, 4008.0], [52.5, 4008.0], [52.6, 4010.0], [52.7, 4011.0], [52.8, 4013.0], [52.9, 4015.0], [53.0, 4015.0], [53.1, 4016.0], [53.2, 4016.0], [53.3, 4017.0], [53.4, 4018.0], [53.5, 4018.0], [53.6, 4019.0], [53.7, 4020.0], [53.8, 4021.0], [53.9, 4023.0], [54.0, 4023.0], [54.1, 4023.0], [54.2, 4025.0], [54.3, 4026.0], [54.4, 4029.0], [54.5, 4030.0], [54.6, 4030.0], [54.7, 4032.0], [54.8, 4033.0], [54.9, 4033.0], [55.0, 4034.0], [55.1, 4034.0], [55.2, 4035.0], [55.3, 4035.0], [55.4, 4036.0], [55.5, 4036.0], [55.6, 4037.0], [55.7, 4038.0], [55.8, 4039.0], [55.9, 4039.0], [56.0, 4040.0], [56.1, 4041.0], [56.2, 4042.0], [56.3, 4042.0], [56.4, 4043.0], [56.5, 4044.0], [56.6, 4044.0], [56.7, 4044.0], [56.8, 4044.0], [56.9, 4045.0], [57.0, 4046.0], [57.1, 4046.0], [57.2, 4047.0], [57.3, 4049.0], [57.4, 4050.0], [57.5, 4050.0], [57.6, 4050.0], [57.7, 4051.0], [57.8, 4052.0], [57.9, 4052.0], [58.0, 4053.0], [58.1, 4054.0], [58.2, 4055.0], [58.3, 4055.0], [58.4, 4056.0], [58.5, 4056.0], [58.6, 4056.0], [58.7, 4059.0], [58.8, 4059.0], [58.9, 4063.0], [59.0, 4065.0], [59.1, 4066.0], [59.2, 4069.0], [59.3, 4070.0], [59.4, 4070.0], [59.5, 4070.0], [59.6, 4072.0], [59.7, 4075.0], [59.8, 4075.0], [59.9, 4076.0], [60.0, 4076.0], [60.1, 4079.0], [60.2, 4079.0], [60.3, 4080.0], [60.4, 4081.0], [60.5, 4082.0], [60.6, 4082.0], [60.7, 4082.0], [60.8, 4082.0], [60.9, 4082.0], [61.0, 4083.0], [61.1, 4084.0], [61.2, 4084.0], [61.3, 4085.0], [61.4, 4087.0], [61.5, 4088.0], [61.6, 4088.0], [61.7, 4088.0], [61.8, 4090.0], [61.9, 4091.0], [62.0, 4091.0], [62.1, 4091.0], [62.2, 4092.0], [62.3, 4092.0], [62.4, 4092.0], [62.5, 4092.0], [62.6, 4092.0], [62.7, 4094.0], [62.8, 4094.0], [62.9, 4097.0], [63.0, 4097.0], [63.1, 4099.0], [63.2, 4099.0], [63.3, 4099.0], [63.4, 4100.0], [63.5, 4102.0], [63.6, 4102.0], [63.7, 4102.0], [63.8, 4102.0], [63.9, 4103.0], [64.0, 4104.0], [64.1, 4104.0], [64.2, 4104.0], [64.3, 4104.0], [64.4, 4108.0], [64.5, 4108.0], [64.6, 4108.0], [64.7, 4109.0], [64.8, 4110.0], [64.9, 4113.0], [65.0, 4113.0], [65.1, 4113.0], [65.2, 4113.0], [65.3, 4118.0], [65.4, 4118.0], [65.5, 4122.0], [65.6, 4125.0], [65.7, 4125.0], [65.8, 4125.0], [65.9, 4125.0], [66.0, 4126.0], [66.1, 4126.0], [66.2, 4128.0], [66.3, 4128.0], [66.4, 4129.0], [66.5, 4130.0], [66.6, 4131.0], [66.7, 4131.0], [66.8, 4131.0], [66.9, 4132.0], [67.0, 4132.0], [67.1, 4133.0], [67.2, 4134.0], [67.3, 4134.0], [67.4, 4134.0], [67.5, 4135.0], [67.6, 4136.0], [67.7, 4136.0], [67.8, 4138.0], [67.9, 4139.0], [68.0, 4139.0], [68.1, 4139.0], [68.2, 4140.0], [68.3, 4142.0], [68.4, 4142.0], [68.5, 4142.0], [68.6, 4144.0], [68.7, 4146.0], [68.8, 4146.0], [68.9, 4147.0], [69.0, 4147.0], [69.1, 4147.0], [69.2, 4148.0], [69.3, 4149.0], [69.4, 4149.0], [69.5, 4150.0], [69.6, 4150.0], [69.7, 4150.0], [69.8, 4151.0], [69.9, 4151.0], [70.0, 4151.0], [70.1, 4154.0], [70.2, 4156.0], [70.3, 4156.0], [70.4, 4161.0], [70.5, 4162.0], [70.6, 4163.0], [70.7, 4164.0], [70.8, 4165.0], [70.9, 4166.0], [71.0, 4166.0], [71.1, 4167.0], [71.2, 4168.0], [71.3, 4169.0], [71.4, 4169.0], [71.5, 4170.0], [71.6, 4170.0], [71.7, 4171.0], [71.8, 4175.0], [71.9, 4175.0], [72.0, 4176.0], [72.1, 4177.0], [72.2, 4177.0], [72.3, 4180.0], [72.4, 4182.0], [72.5, 4183.0], [72.6, 4184.0], [72.7, 4185.0], [72.8, 4186.0], [72.9, 4191.0], [73.0, 4191.0], [73.1, 4191.0], [73.2, 4192.0], [73.3, 4192.0], [73.4, 4192.0], [73.5, 4193.0], [73.6, 4193.0], [73.7, 4195.0], [73.8, 4196.0], [73.9, 4197.0], [74.0, 4198.0], [74.1, 4199.0], [74.2, 4200.0], [74.3, 4200.0], [74.4, 4204.0], [74.5, 4205.0], [74.6, 4205.0], [74.7, 4205.0], [74.8, 4205.0], [74.9, 4205.0], [75.0, 4206.0], [75.1, 4209.0], [75.2, 4209.0], [75.3, 4210.0], [75.4, 4210.0], [75.5, 4210.0], [75.6, 4210.0], [75.7, 4211.0], [75.8, 4212.0], [75.9, 4213.0], [76.0, 4213.0], [76.1, 4214.0], [76.2, 4215.0], [76.3, 4215.0], [76.4, 4216.0], [76.5, 4216.0], [76.6, 4217.0], [76.7, 4218.0], [76.8, 4218.0], [76.9, 4220.0], [77.0, 4220.0], [77.1, 4221.0], [77.2, 4221.0], [77.3, 4222.0], [77.4, 4223.0], [77.5, 4223.0], [77.6, 4224.0], [77.7, 4224.0], [77.8, 4224.0], [77.9, 4224.0], [78.0, 4226.0], [78.1, 4227.0], [78.2, 4227.0], [78.3, 4227.0], [78.4, 4227.0], [78.5, 4230.0], [78.6, 4230.0], [78.7, 4233.0], [78.8, 4233.0], [78.9, 4234.0], [79.0, 4234.0], [79.1, 4235.0], [79.2, 4238.0], [79.3, 4241.0], [79.4, 4243.0], [79.5, 4243.0], [79.6, 4245.0], [79.7, 4246.0], [79.8, 4246.0], [79.9, 4246.0], [80.0, 4246.0], [80.1, 4247.0], [80.2, 4247.0], [80.3, 4248.0], [80.4, 4249.0], [80.5, 4249.0], [80.6, 4250.0], [80.7, 4251.0], [80.8, 4251.0], [80.9, 4252.0], [81.0, 4253.0], [81.1, 4254.0], [81.2, 4254.0], [81.3, 4255.0], [81.4, 4255.0], [81.5, 4256.0], [81.6, 4257.0], [81.7, 4258.0], [81.8, 4258.0], [81.9, 4259.0], [82.0, 4260.0], [82.1, 4261.0], [82.2, 4262.0], [82.3, 4264.0], [82.4, 4266.0], [82.5, 4267.0], [82.6, 4268.0], [82.7, 4268.0], [82.8, 4268.0], [82.9, 4269.0], [83.0, 4270.0], [83.1, 4271.0], [83.2, 4271.0], [83.3, 4272.0], [83.4, 4273.0], [83.5, 4273.0], [83.6, 4274.0], [83.7, 4275.0], [83.8, 4279.0], [83.9, 4279.0], [84.0, 4280.0], [84.1, 4280.0], [84.2, 4283.0], [84.3, 4283.0], [84.4, 4283.0], [84.5, 4283.0], [84.6, 4284.0], [84.7, 4284.0], [84.8, 4285.0], [84.9, 4286.0], [85.0, 4286.0], [85.1, 4287.0], [85.2, 4287.0], [85.3, 4289.0], [85.4, 4293.0], [85.5, 4293.0], [85.6, 4296.0], [85.7, 4296.0], [85.8, 4298.0], [85.9, 4298.0], [86.0, 4298.0], [86.1, 4300.0], [86.2, 4300.0], [86.3, 4305.0], [86.4, 4307.0], [86.5, 4307.0], [86.6, 4309.0], [86.7, 4310.0], [86.8, 4312.0], [86.9, 4314.0], [87.0, 4314.0], [87.1, 4314.0], [87.2, 4315.0], [87.3, 4315.0], [87.4, 4316.0], [87.5, 4317.0], [87.6, 4318.0], [87.7, 4319.0], [87.8, 4319.0], [87.9, 4320.0], [88.0, 4321.0], [88.1, 4321.0], [88.2, 4321.0], [88.3, 4321.0], [88.4, 4323.0], [88.5, 4324.0], [88.6, 4327.0], [88.7, 4329.0], [88.8, 4330.0], [88.9, 4331.0], [89.0, 4332.0], [89.1, 4333.0], [89.2, 4334.0], [89.3, 4336.0], [89.4, 4338.0], [89.5, 4340.0], [89.6, 4340.0], [89.7, 4342.0], [89.8, 4343.0], [89.9, 4346.0], [90.0, 4346.0], [90.1, 4347.0], [90.2, 4347.0], [90.3, 4351.0], [90.4, 4355.0], [90.5, 4355.0], [90.6, 4359.0], [90.7, 4362.0], [90.8, 4362.0], [90.9, 4363.0], [91.0, 4364.0], [91.1, 4369.0], [91.2, 4370.0], [91.3, 4373.0], [91.4, 4373.0], [91.5, 4374.0], [91.6, 4376.0], [91.7, 4378.0], [91.8, 4379.0], [91.9, 4381.0], [92.0, 4383.0], [92.1, 4388.0], [92.2, 4389.0], [92.3, 4389.0], [92.4, 4389.0], [92.5, 4390.0], [92.6, 4390.0], [92.7, 4391.0], [92.8, 4392.0], [92.9, 4392.0], [93.0, 4393.0], [93.1, 4396.0], [93.2, 4397.0], [93.3, 4397.0], [93.4, 4400.0], [93.5, 4401.0], [93.6, 4403.0], [93.7, 4406.0], [93.8, 4407.0], [93.9, 4409.0], [94.0, 4410.0], [94.1, 4414.0], [94.2, 4415.0], [94.3, 4420.0], [94.4, 4424.0], [94.5, 4425.0], [94.6, 4425.0], [94.7, 4428.0], [94.8, 4428.0], [94.9, 4428.0], [95.0, 4435.0], [95.1, 4438.0], [95.2, 4438.0], [95.3, 4439.0], [95.4, 4448.0], [95.5, 4450.0], [95.6, 4451.0], [95.7, 4452.0], [95.8, 4452.0], [95.9, 4455.0], [96.0, 4457.0], [96.1, 4459.0], [96.2, 4460.0], [96.3, 4461.0], [96.4, 4462.0], [96.5, 4463.0], [96.6, 4465.0], [96.7, 4467.0], [96.8, 4470.0], [96.9, 4476.0], [97.0, 4477.0], [97.1, 4480.0], [97.2, 4480.0], [97.3, 4481.0], [97.4, 4484.0], [97.5, 4489.0], [97.6, 4502.0], [97.7, 4506.0], [97.8, 4509.0], [97.9, 4511.0], [98.0, 4512.0], [98.1, 4515.0], [98.2, 4517.0], [98.3, 4519.0], [98.4, 4522.0], [98.5, 4525.0], [98.6, 4534.0], [98.7, 4539.0], [98.8, 4543.0], [98.9, 4553.0], [99.0, 4575.0], [99.1, 4582.0], [99.2, 4604.0], [99.3, 4644.0], [99.4, 4923.0], [99.5, 4950.0], [99.6, 5306.0], [99.7, 12390.0], [99.8, 12694.0], [99.9, 12701.0], [100.0, 12701.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 4015.0], [0.1, 4081.0], [0.2, 4113.0], [0.3, 4496.0], [0.4, 4635.0], [0.5, 4719.0], [0.6, 4770.0], [0.7, 4815.0], [0.8, 4847.0], [0.9, 5808.0], [1.0, 5841.0], [1.1, 7124.0], [1.2, 7207.0], [1.3, 8522.0], [1.4, 9630.0], [1.5, 9638.0], [1.6, 9664.0], [1.7, 9678.0], [1.8, 9690.0], [1.9, 9696.0], [2.0, 9723.0], [2.1, 9726.0], [2.2, 9734.0], [2.3, 9736.0], [2.4, 9745.0], [2.5, 9750.0], [2.6, 9758.0], [2.7, 9772.0], [2.8, 9782.0], [2.9, 9783.0], [3.0, 9785.0], [3.1, 9792.0], [3.2, 9793.0], [3.3, 9794.0], [3.4, 9802.0], [3.5, 9805.0], [3.6, 9808.0], [3.7, 9810.0], [3.8, 9814.0], [3.9, 9818.0], [4.0, 9821.0], [4.1, 9826.0], [4.2, 9829.0], [4.3, 9831.0], [4.4, 9839.0], [4.5, 9841.0], [4.6, 9844.0], [4.7, 9849.0], [4.8, 9850.0], [4.9, 9854.0], [5.0, 9854.0], [5.1, 9855.0], [5.2, 9856.0], [5.3, 9859.0], [5.4, 9860.0], [5.5, 9862.0], [5.6, 9864.0], [5.7, 9866.0], [5.8, 9867.0], [5.9, 9867.0], [6.0, 9871.0], [6.1, 9873.0], [6.2, 9874.0], [6.3, 9874.0], [6.4, 9880.0], [6.5, 9882.0], [6.6, 9889.0], [6.7, 9892.0], [6.8, 9892.0], [6.9, 9892.0], [7.0, 9893.0], [7.1, 9893.0], [7.2, 9895.0], [7.3, 9895.0], [7.4, 9898.0], [7.5, 9900.0], [7.6, 9901.0], [7.7, 9905.0], [7.8, 9906.0], [7.9, 9907.0], [8.0, 9908.0], [8.1, 9911.0], [8.2, 9911.0], [8.3, 9914.0], [8.4, 9915.0], [8.5, 9917.0], [8.6, 9922.0], [8.7, 9922.0], [8.8, 9924.0], [8.9, 9924.0], [9.0, 9925.0], [9.1, 9926.0], [9.2, 9927.0], [9.3, 9928.0], [9.4, 9928.0], [9.5, 9930.0], [9.6, 9930.0], [9.7, 9933.0], [9.8, 9939.0], [9.9, 9945.0], [10.0, 9945.0], [10.1, 9945.0], [10.2, 9948.0], [10.3, 9950.0], [10.4, 9951.0], [10.5, 9951.0], [10.6, 9954.0], [10.7, 9955.0], [10.8, 9955.0], [10.9, 9963.0], [11.0, 9964.0], [11.1, 9964.0], [11.2, 9965.0], [11.3, 9966.0], [11.4, 9970.0], [11.5, 9971.0], [11.6, 9971.0], [11.7, 9973.0], [11.8, 9974.0], [11.9, 9975.0], [12.0, 9975.0], [12.1, 9976.0], [12.2, 9976.0], [12.3, 9977.0], [12.4, 9977.0], [12.5, 9978.0], [12.6, 9980.0], [12.7, 9981.0], [12.8, 9981.0], [12.9, 9982.0], [13.0, 9987.0], [13.1, 9988.0], [13.2, 9991.0], [13.3, 9994.0], [13.4, 9995.0], [13.5, 9996.0], [13.6, 9996.0], [13.7, 9997.0], [13.8, 9997.0], [13.9, 9998.0], [14.0, 10000.0], [14.1, 10001.0], [14.2, 10005.0], [14.3, 10005.0], [14.4, 10006.0], [14.5, 10007.0], [14.6, 10010.0], [14.7, 10010.0], [14.8, 10012.0], [14.9, 10013.0], [15.0, 10014.0], [15.1, 10015.0], [15.2, 10018.0], [15.3, 10019.0], [15.4, 10020.0], [15.5, 10021.0], [15.6, 10021.0], [15.7, 10021.0], [15.8, 10022.0], [15.9, 10023.0], [16.0, 10024.0], [16.1, 10024.0], [16.2, 10027.0], [16.3, 10028.0], [16.4, 10028.0], [16.5, 10028.0], [16.6, 10029.0], [16.7, 10029.0], [16.8, 10031.0], [16.9, 10032.0], [17.0, 10032.0], [17.1, 10035.0], [17.2, 10037.0], [17.3, 10038.0], [17.4, 10040.0], [17.5, 10040.0], [17.6, 10042.0], [17.7, 10043.0], [17.8, 10044.0], [17.9, 10044.0], [18.0, 10047.0], [18.1, 10047.0], [18.2, 10049.0], [18.3, 10050.0], [18.4, 10050.0], [18.5, 10054.0], [18.6, 10054.0], [18.7, 10054.0], [18.8, 10059.0], [18.9, 10059.0], [19.0, 10059.0], [19.1, 10059.0], [19.2, 10059.0], [19.3, 10060.0], [19.4, 10062.0], [19.5, 10062.0], [19.6, 10062.0], [19.7, 10064.0], [19.8, 10064.0], [19.9, 10065.0], [20.0, 10066.0], [20.1, 10067.0], [20.2, 10067.0], [20.3, 10067.0], [20.4, 10068.0], [20.5, 10071.0], [20.6, 10072.0], [20.7, 10076.0], [20.8, 10076.0], [20.9, 10078.0], [21.0, 10080.0], [21.1, 10080.0], [21.2, 10081.0], [21.3, 10082.0], [21.4, 10083.0], [21.5, 10083.0], [21.6, 10084.0], [21.7, 10085.0], [21.8, 10085.0], [21.9, 10086.0], [22.0, 10086.0], [22.1, 10087.0], [22.2, 10087.0], [22.3, 10089.0], [22.4, 10090.0], [22.5, 10090.0], [22.6, 10092.0], [22.7, 10092.0], [22.8, 10092.0], [22.9, 10093.0], [23.0, 10093.0], [23.1, 10093.0], [23.2, 10094.0], [23.3, 10095.0], [23.4, 10097.0], [23.5, 10099.0], [23.6, 10100.0], [23.7, 10100.0], [23.8, 10100.0], [23.9, 10102.0], [24.0, 10103.0], [24.1, 10104.0], [24.2, 10104.0], [24.3, 10104.0], [24.4, 10105.0], [24.5, 10106.0], [24.6, 10106.0], [24.7, 10106.0], [24.8, 10107.0], [24.9, 10107.0], [25.0, 10108.0], [25.1, 10108.0], [25.2, 10108.0], [25.3, 10109.0], [25.4, 10111.0], [25.5, 10112.0], [25.6, 10112.0], [25.7, 10113.0], [25.8, 10114.0], [25.9, 10114.0], [26.0, 10116.0], [26.1, 10117.0], [26.2, 10117.0], [26.3, 10118.0], [26.4, 10119.0], [26.5, 10119.0], [26.6, 10120.0], [26.7, 10120.0], [26.8, 10121.0], [26.9, 10121.0], [27.0, 10122.0], [27.1, 10122.0], [27.2, 10122.0], [27.3, 10123.0], [27.4, 10123.0], [27.5, 10125.0], [27.6, 10126.0], [27.7, 10127.0], [27.8, 10127.0], [27.9, 10127.0], [28.0, 10128.0], [28.1, 10129.0], [28.2, 10130.0], [28.3, 10130.0], [28.4, 10130.0], [28.5, 10130.0], [28.6, 10131.0], [28.7, 10131.0], [28.8, 10132.0], [28.9, 10133.0], [29.0, 10135.0], [29.1, 10137.0], [29.2, 10137.0], [29.3, 10137.0], [29.4, 10138.0], [29.5, 10138.0], [29.6, 10138.0], [29.7, 10138.0], [29.8, 10141.0], [29.9, 10141.0], [30.0, 10141.0], [30.1, 10144.0], [30.2, 10145.0], [30.3, 10146.0], [30.4, 10147.0], [30.5, 10147.0], [30.6, 10149.0], [30.7, 10151.0], [30.8, 10152.0], [30.9, 10153.0], [31.0, 10153.0], [31.1, 10154.0], [31.2, 10155.0], [31.3, 10155.0], [31.4, 10156.0], [31.5, 10156.0], [31.6, 10156.0], [31.7, 10156.0], [31.8, 10157.0], [31.9, 10157.0], [32.0, 10159.0], [32.1, 10160.0], [32.2, 10161.0], [32.3, 10162.0], [32.4, 10164.0], [32.5, 10164.0], [32.6, 10164.0], [32.7, 10164.0], [32.8, 10165.0], [32.9, 10165.0], [33.0, 10165.0], [33.1, 10166.0], [33.2, 10166.0], [33.3, 10166.0], [33.4, 10166.0], [33.5, 10169.0], [33.6, 10171.0], [33.7, 10171.0], [33.8, 10172.0], [33.9, 10173.0], [34.0, 10173.0], [34.1, 10174.0], [34.2, 10176.0], [34.3, 10176.0], [34.4, 10178.0], [34.5, 10180.0], [34.6, 10181.0], [34.7, 10182.0], [34.8, 10182.0], [34.9, 10183.0], [35.0, 10183.0], [35.1, 10183.0], [35.2, 10183.0], [35.3, 10184.0], [35.4, 10184.0], [35.5, 10185.0], [35.6, 10186.0], [35.7, 10187.0], [35.8, 10188.0], [35.9, 10191.0], [36.0, 10192.0], [36.1, 10193.0], [36.2, 10193.0], [36.3, 10193.0], [36.4, 10196.0], [36.5, 10198.0], [36.6, 10199.0], [36.7, 10199.0], [36.8, 10200.0], [36.9, 10202.0], [37.0, 10203.0], [37.1, 10205.0], [37.2, 10206.0], [37.3, 10206.0], [37.4, 10206.0], [37.5, 10207.0], [37.6, 10208.0], [37.7, 10208.0], [37.8, 10209.0], [37.9, 10209.0], [38.0, 10210.0], [38.1, 10210.0], [38.2, 10210.0], [38.3, 10211.0], [38.4, 10211.0], [38.5, 10213.0], [38.6, 10213.0], [38.7, 10213.0], [38.8, 10215.0], [38.9, 10216.0], [39.0, 10216.0], [39.1, 10216.0], [39.2, 10217.0], [39.3, 10217.0], [39.4, 10220.0], [39.5, 10222.0], [39.6, 10223.0], [39.7, 10223.0], [39.8, 10224.0], [39.9, 10226.0], [40.0, 10226.0], [40.1, 10227.0], [40.2, 10228.0], [40.3, 10228.0], [40.4, 10228.0], [40.5, 10228.0], [40.6, 10229.0], [40.7, 10230.0], [40.8, 10232.0], [40.9, 10233.0], [41.0, 10233.0], [41.1, 10234.0], [41.2, 10236.0], [41.3, 10236.0], [41.4, 10237.0], [41.5, 10238.0], [41.6, 10239.0], [41.7, 10240.0], [41.8, 10240.0], [41.9, 10241.0], [42.0, 10242.0], [42.1, 10244.0], [42.2, 10244.0], [42.3, 10245.0], [42.4, 10245.0], [42.5, 10248.0], [42.6, 10248.0], [42.7, 10249.0], [42.8, 10250.0], [42.9, 10252.0], [43.0, 10253.0], [43.1, 10253.0], [43.2, 10253.0], [43.3, 10254.0], [43.4, 10254.0], [43.5, 10254.0], [43.6, 10255.0], [43.7, 10255.0], [43.8, 10256.0], [43.9, 10258.0], [44.0, 10258.0], [44.1, 10258.0], [44.2, 10263.0], [44.3, 10266.0], [44.4, 10267.0], [44.5, 10268.0], [44.6, 10271.0], [44.7, 10271.0], [44.8, 10272.0], [44.9, 10272.0], [45.0, 10272.0], [45.1, 10273.0], [45.2, 10273.0], [45.3, 10275.0], [45.4, 10276.0], [45.5, 10278.0], [45.6, 10278.0], [45.7, 10278.0], [45.8, 10280.0], [45.9, 10282.0], [46.0, 10283.0], [46.1, 10286.0], [46.2, 10286.0], [46.3, 10286.0], [46.4, 10288.0], [46.5, 10288.0], [46.6, 10288.0], [46.7, 10289.0], [46.8, 10289.0], [46.9, 10289.0], [47.0, 10291.0], [47.1, 10292.0], [47.2, 10293.0], [47.3, 10295.0], [47.4, 10296.0], [47.5, 10297.0], [47.6, 10298.0], [47.7, 10299.0], [47.8, 10300.0], [47.9, 10302.0], [48.0, 10302.0], [48.1, 10303.0], [48.2, 10304.0], [48.3, 10304.0], [48.4, 10306.0], [48.5, 10306.0], [48.6, 10306.0], [48.7, 10307.0], [48.8, 10307.0], [48.9, 10308.0], [49.0, 10308.0], [49.1, 10309.0], [49.2, 10309.0], [49.3, 10310.0], [49.4, 10313.0], [49.5, 10314.0], [49.6, 10315.0], [49.7, 10316.0], [49.8, 10316.0], [49.9, 10317.0], [50.0, 10318.0], [50.1, 10319.0], [50.2, 10325.0], [50.3, 10325.0], [50.4, 10327.0], [50.5, 10327.0], [50.6, 10327.0], [50.7, 10328.0], [50.8, 10328.0], [50.9, 10331.0], [51.0, 10333.0], [51.1, 10334.0], [51.2, 10336.0], [51.3, 10338.0], [51.4, 10339.0], [51.5, 10339.0], [51.6, 10341.0], [51.7, 10343.0], [51.8, 10346.0], [51.9, 10349.0], [52.0, 10351.0], [52.1, 10351.0], [52.2, 10351.0], [52.3, 10351.0], [52.4, 10352.0], [52.5, 10353.0], [52.6, 10356.0], [52.7, 10358.0], [52.8, 10360.0], [52.9, 10362.0], [53.0, 10363.0], [53.1, 10363.0], [53.2, 10363.0], [53.3, 10367.0], [53.4, 10367.0], [53.5, 10370.0], [53.6, 10372.0], [53.7, 10373.0], [53.8, 10373.0], [53.9, 10378.0], [54.0, 10381.0], [54.1, 10384.0], [54.2, 10385.0], [54.3, 10388.0], [54.4, 10390.0], [54.5, 10394.0], [54.6, 10395.0], [54.7, 10396.0], [54.8, 10398.0], [54.9, 10398.0], [55.0, 10400.0], [55.1, 10401.0], [55.2, 10403.0], [55.3, 10403.0], [55.4, 10406.0], [55.5, 10409.0], [55.6, 10410.0], [55.7, 10410.0], [55.8, 10412.0], [55.9, 10412.0], [56.0, 10412.0], [56.1, 10414.0], [56.2, 10414.0], [56.3, 10416.0], [56.4, 10419.0], [56.5, 10420.0], [56.6, 10421.0], [56.7, 10423.0], [56.8, 10423.0], [56.9, 10423.0], [57.0, 10424.0], [57.1, 10424.0], [57.2, 10425.0], [57.3, 10425.0], [57.4, 10425.0], [57.5, 10426.0], [57.6, 10427.0], [57.7, 10427.0], [57.8, 10429.0], [57.9, 10430.0], [58.0, 10430.0], [58.1, 10433.0], [58.2, 10434.0], [58.3, 10434.0], [58.4, 10434.0], [58.5, 10435.0], [58.6, 10436.0], [58.7, 10437.0], [58.8, 10438.0], [58.9, 10439.0], [59.0, 10439.0], [59.1, 10440.0], [59.2, 10445.0], [59.3, 10447.0], [59.4, 10451.0], [59.5, 10452.0], [59.6, 10453.0], [59.7, 10455.0], [59.8, 10455.0], [59.9, 10456.0], [60.0, 10456.0], [60.1, 10457.0], [60.2, 10459.0], [60.3, 10461.0], [60.4, 10462.0], [60.5, 10464.0], [60.6, 10465.0], [60.7, 10467.0], [60.8, 10467.0], [60.9, 10469.0], [61.0, 10469.0], [61.1, 10470.0], [61.2, 10472.0], [61.3, 10474.0], [61.4, 10474.0], [61.5, 10475.0], [61.6, 10475.0], [61.7, 10475.0], [61.8, 10477.0], [61.9, 10477.0], [62.0, 10477.0], [62.1, 10479.0], [62.2, 10479.0], [62.3, 10479.0], [62.4, 10480.0], [62.5, 10481.0], [62.6, 10484.0], [62.7, 10486.0], [62.8, 10488.0], [62.9, 10490.0], [63.0, 10492.0], [63.1, 10492.0], [63.2, 10495.0], [63.3, 10495.0], [63.4, 10495.0], [63.5, 10498.0], [63.6, 10498.0], [63.7, 10503.0], [63.8, 10504.0], [63.9, 10504.0], [64.0, 10505.0], [64.1, 10509.0], [64.2, 10511.0], [64.3, 10512.0], [64.4, 10514.0], [64.5, 10520.0], [64.6, 10520.0], [64.7, 10521.0], [64.8, 10521.0], [64.9, 10522.0], [65.0, 10528.0], [65.1, 10528.0], [65.2, 10531.0], [65.3, 10532.0], [65.4, 10534.0], [65.5, 10534.0], [65.6, 10537.0], [65.7, 10539.0], [65.8, 10539.0], [65.9, 10541.0], [66.0, 10546.0], [66.1, 10546.0], [66.2, 10547.0], [66.3, 10550.0], [66.4, 10552.0], [66.5, 10553.0], [66.6, 10554.0], [66.7, 10556.0], [66.8, 10557.0], [66.9, 10559.0], [67.0, 10560.0], [67.1, 10563.0], [67.2, 10567.0], [67.3, 10572.0], [67.4, 10572.0], [67.5, 10574.0], [67.6, 10575.0], [67.7, 10575.0], [67.8, 10579.0], [67.9, 10579.0], [68.0, 10581.0], [68.1, 10583.0], [68.2, 10584.0], [68.3, 10594.0], [68.4, 10600.0], [68.5, 10607.0], [68.6, 10608.0], [68.7, 10609.0], [68.8, 10619.0], [68.9, 10620.0], [69.0, 10622.0], [69.1, 10623.0], [69.2, 10624.0], [69.3, 10625.0], [69.4, 10626.0], [69.5, 10629.0], [69.6, 10629.0], [69.7, 10632.0], [69.8, 10633.0], [69.9, 10636.0], [70.0, 10638.0], [70.1, 10638.0], [70.2, 10641.0], [70.3, 10642.0], [70.4, 10642.0], [70.5, 10647.0], [70.6, 10648.0], [70.7, 10652.0], [70.8, 10653.0], [70.9, 10657.0], [71.0, 10659.0], [71.1, 10662.0], [71.2, 10662.0], [71.3, 10663.0], [71.4, 10663.0], [71.5, 10666.0], [71.6, 10667.0], [71.7, 10667.0], [71.8, 10672.0], [71.9, 10673.0], [72.0, 10674.0], [72.1, 10675.0], [72.2, 10675.0], [72.3, 10677.0], [72.4, 10680.0], [72.5, 10682.0], [72.6, 10684.0], [72.7, 10691.0], [72.8, 10691.0], [72.9, 10694.0], [73.0, 10697.0], [73.1, 10697.0], [73.2, 10709.0], [73.3, 10710.0], [73.4, 10711.0], [73.5, 10711.0], [73.6, 10716.0], [73.7, 10716.0], [73.8, 10717.0], [73.9, 10718.0], [74.0, 10722.0], [74.1, 10722.0], [74.2, 10727.0], [74.3, 10734.0], [74.4, 10739.0], [74.5, 10740.0], [74.6, 10743.0], [74.7, 10745.0], [74.8, 10747.0], [74.9, 10750.0], [75.0, 10751.0], [75.1, 10756.0], [75.2, 10756.0], [75.3, 10757.0], [75.4, 10760.0], [75.5, 10763.0], [75.6, 10763.0], [75.7, 10766.0], [75.8, 10767.0], [75.9, 10768.0], [76.0, 10770.0], [76.1, 10771.0], [76.2, 10775.0], [76.3, 10778.0], [76.4, 10780.0], [76.5, 10781.0], [76.6, 10783.0], [76.7, 10783.0], [76.8, 10784.0], [76.9, 10785.0], [77.0, 10787.0], [77.1, 10788.0], [77.2, 10790.0], [77.3, 10797.0], [77.4, 10799.0], [77.5, 10799.0], [77.6, 10811.0], [77.7, 10814.0], [77.8, 10814.0], [77.9, 10818.0], [78.0, 10821.0], [78.1, 10824.0], [78.2, 10824.0], [78.3, 10834.0], [78.4, 10837.0], [78.5, 10840.0], [78.6, 10841.0], [78.7, 10841.0], [78.8, 10842.0], [78.9, 10844.0], [79.0, 10852.0], [79.1, 10854.0], [79.2, 10857.0], [79.3, 10859.0], [79.4, 10864.0], [79.5, 10865.0], [79.6, 10872.0], [79.7, 10876.0], [79.8, 10878.0], [79.9, 10883.0], [80.0, 10883.0], [80.1, 10885.0], [80.2, 10889.0], [80.3, 10891.0], [80.4, 10893.0], [80.5, 10896.0], [80.6, 10903.0], [80.7, 10905.0], [80.8, 10909.0], [80.9, 10909.0], [81.0, 10909.0], [81.1, 10910.0], [81.2, 10917.0], [81.3, 10921.0], [81.4, 10922.0], [81.5, 10925.0], [81.6, 10925.0], [81.7, 10927.0], [81.8, 10927.0], [81.9, 10928.0], [82.0, 10930.0], [82.1, 10933.0], [82.2, 10937.0], [82.3, 10941.0], [82.4, 10942.0], [82.5, 10943.0], [82.6, 10947.0], [82.7, 10948.0], [82.8, 10951.0], [82.9, 10951.0], [83.0, 10951.0], [83.1, 10957.0], [83.2, 10958.0], [83.3, 10960.0], [83.4, 10961.0], [83.5, 10962.0], [83.6, 10965.0], [83.7, 10966.0], [83.8, 10969.0], [83.9, 10970.0], [84.0, 10976.0], [84.1, 10979.0], [84.2, 10980.0], [84.3, 10980.0], [84.4, 10985.0], [84.5, 10989.0], [84.6, 10993.0], [84.7, 10999.0], [84.8, 11003.0], [84.9, 11004.0], [85.0, 11004.0], [85.1, 11009.0], [85.2, 11009.0], [85.3, 11010.0], [85.4, 11011.0], [85.5, 11011.0], [85.6, 11017.0], [85.7, 11017.0], [85.8, 11020.0], [85.9, 11021.0], [86.0, 11024.0], [86.1, 11025.0], [86.2, 11026.0], [86.3, 11027.0], [86.4, 11028.0], [86.5, 11029.0], [86.6, 11031.0], [86.7, 11032.0], [86.8, 11036.0], [86.9, 11038.0], [87.0, 11039.0], [87.1, 11041.0], [87.2, 11043.0], [87.3, 11048.0], [87.4, 11050.0], [87.5, 11051.0], [87.6, 11053.0], [87.7, 11057.0], [87.8, 11058.0], [87.9, 11060.0], [88.0, 11066.0], [88.1, 11067.0], [88.2, 11073.0], [88.3, 11075.0], [88.4, 11077.0], [88.5, 11077.0], [88.6, 11078.0], [88.7, 11078.0], [88.8, 11079.0], [88.9, 11079.0], [89.0, 11083.0], [89.1, 11093.0], [89.2, 11093.0], [89.3, 11094.0], [89.4, 11096.0], [89.5, 11100.0], [89.6, 11103.0], [89.7, 11106.0], [89.8, 11109.0], [89.9, 11112.0], [90.0, 11119.0], [90.1, 11132.0], [90.2, 11135.0], [90.3, 11141.0], [90.4, 11153.0], [90.5, 11157.0], [90.6, 11161.0], [90.7, 11164.0], [90.8, 11165.0], [90.9, 11169.0], [91.0, 11181.0], [91.1, 11185.0], [91.2, 11189.0], [91.3, 11192.0], [91.4, 11201.0], [91.5, 11203.0], [91.6, 11205.0], [91.7, 11221.0], [91.8, 11224.0], [91.9, 11233.0], [92.0, 11233.0], [92.1, 11236.0], [92.2, 11236.0], [92.3, 11239.0], [92.4, 11244.0], [92.5, 11245.0], [92.6, 11247.0], [92.7, 11261.0], [92.8, 11264.0], [92.9, 11267.0], [93.0, 11276.0], [93.1, 11291.0], [93.2, 11313.0], [93.3, 11317.0], [93.4, 11317.0], [93.5, 11330.0], [93.6, 11333.0], [93.7, 11335.0], [93.8, 11365.0], [93.9, 11376.0], [94.0, 11384.0], [94.1, 11384.0], [94.2, 11388.0], [94.3, 11426.0], [94.4, 11441.0], [94.5, 11448.0], [94.6, 11529.0], [94.7, 11539.0], [94.8, 11908.0], [94.9, 12052.0], [95.0, 12083.0], [95.1, 22092.0], [95.2, 22115.0], [95.3, 22169.0], [95.4, 22345.0], [95.5, 22429.0], [95.6, 22945.0], [95.7, 22988.0], [95.8, 23048.0], [95.9, 23095.0], [96.0, 23102.0], [96.1, 23227.0], [96.2, 23248.0], [96.3, 23386.0], [96.4, 23398.0], [96.5, 23419.0], [96.6, 23454.0], [96.7, 23457.0], [96.8, 23463.0], [96.9, 23482.0], [97.0, 23544.0], [97.1, 23559.0], [97.2, 23651.0], [97.3, 23658.0], [97.4, 23697.0], [97.5, 23725.0], [97.6, 23731.0], [97.7, 23774.0], [97.8, 23849.0], [97.9, 23946.0], [98.0, 23950.0], [98.1, 23955.0], [98.2, 23997.0], [98.3, 24014.0], [98.4, 24018.0], [98.5, 24080.0], [98.6, 24101.0], [98.7, 24169.0], [98.8, 24169.0], [98.9, 24188.0], [99.0, 24235.0], [99.1, 24262.0], [99.2, 24278.0], [99.3, 24416.0], [99.4, 24484.0], [99.5, 24558.0], [99.6, 24895.0], [99.7, 24927.0], [99.8, 25207.0], [99.9, 26253.0], [100.0, 27080.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1500.0, "maxY": 174.0, "series": [{"data": [[4000.0, 2.0], [4100.0, 1.0], [4600.0, 1.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 2.0], [5800.0, 2.0], [7100.0, 1.0], [7200.0, 1.0], [8500.0, 1.0], [10600.0, 1.0], [10300.0, 1.0], [11000.0, 2.0], [10900.0, 3.0], [13300.0, 2.0], [13100.0, 1.0], [13800.0, 3.0], [13700.0, 4.0], [13600.0, 1.0], [14200.0, 174.0], [14300.0, 174.0], [14100.0, 170.0], [14000.0, 74.0], [13900.0, 30.0], [14700.0, 22.0], [14800.0, 8.0], [14400.0, 137.0], [14500.0, 56.0], [14600.0, 38.0], [14900.0, 13.0], [15000.0, 16.0], [15100.0, 8.0], [15300.0, 2.0], [15200.0, 1.0], [15400.0, 3.0], [22600.0, 2.0], [23100.0, 1.0], [24100.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [26300.0, 1.0], [26100.0, 1.0], [26500.0, 1.0], [26600.0, 2.0], [27000.0, 2.0], [26800.0, 1.0], [27400.0, 3.0], [27300.0, 1.0], [27200.0, 1.0], [27500.0, 3.0], [27600.0, 2.0], [27900.0, 2.0], [28000.0, 5.0], [28200.0, 2.0], [28400.0, 3.0], [27700.0, 1.0], [28100.0, 3.0], [28500.0, 3.0], [28600.0, 2.0], [28800.0, 1.0], [29000.0, 1.0], [28700.0, 1.0], [28900.0, 2.0], [29100.0, 1.0], [29500.0, 1.0], [30200.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[12300.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [1500.0, 1.0], [1900.0, 1.0], [2400.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 3.0], [3000.0, 5.0], [3100.0, 27.0], [3300.0, 41.0], [3200.0, 23.0], [3400.0, 37.0], [3500.0, 31.0], [3600.0, 47.0], [3700.0, 62.0], [3800.0, 91.0], [3900.0, 134.0], [4000.0, 121.0], [4300.0, 72.0], [4100.0, 107.0], [4200.0, 118.0], [4400.0, 42.0], [4500.0, 16.0], [4600.0, 2.0], [4900.0, 2.0], [5300.0, 1.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[4000.0, 2.0], [4100.0, 1.0], [4600.0, 1.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 2.0], [5800.0, 2.0], [7100.0, 1.0], [7200.0, 1.0], [8500.0, 1.0], [9700.0, 14.0], [9600.0, 6.0], [10000.0, 97.0], [10100.0, 134.0], [9800.0, 41.0], [9900.0, 66.0], [10200.0, 111.0], [10500.0, 48.0], [10600.0, 49.0], [10300.0, 73.0], [10400.0, 87.0], [10700.0, 44.0], [10900.0, 43.0], [11200.0, 18.0], [11000.0, 47.0], [10800.0, 30.0], [11100.0, 20.0], [11300.0, 11.0], [11400.0, 3.0], [11500.0, 2.0], [12000.0, 2.0], [11900.0, 1.0], [22100.0, 2.0], [22300.0, 1.0], [22000.0, 1.0], [22400.0, 1.0], [23200.0, 2.0], [23000.0, 2.0], [23400.0, 5.0], [22900.0, 2.0], [23100.0, 1.0], [23500.0, 2.0], [23300.0, 2.0], [23700.0, 3.0], [23600.0, 3.0], [23900.0, 4.0], [24000.0, 3.0], [24200.0, 3.0], [24100.0, 4.0], [23800.0, 1.0], [24400.0, 2.0], [24500.0, 1.0], [24900.0, 1.0], [25200.0, 1.0], [24800.0, 1.0], [26200.0, 1.0], [27000.0, 1.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2001.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2001.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 50.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 44.76495726495728, "minX": 1.60601862E12, "maxY": 50.0, "series": [{"data": [[1.60601892E12, 44.76495726495728], [1.60601862E12, 50.0], [1.60601874E12, 50.0], [1.60601868E12, 50.0], [1.60601886E12, 50.0], [1.6060188E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60601892E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2454.0, "minX": 1.0, "maxY": 15066.028066528086, "series": [{"data": [[2.0, 4081.0], [3.0, 4114.0], [4.0, 4847.0], [5.0, 4497.0], [6.0, 4636.0], [7.0, 5841.0], [8.0, 4771.0], [9.0, 4815.0], [10.0, 4720.0], [11.0, 5808.0], [12.0, 7124.0], [13.0, 7207.0], [14.0, 8521.0], [15.0, 13199.0], [16.0, 13393.0], [17.0, 13371.0], [18.0, 13661.0], [19.0, 13942.0], [20.0, 13750.0], [21.0, 10390.0], [22.0, 14154.0], [23.0, 13887.0], [24.0, 14117.0], [25.0, 13904.0], [26.0, 14117.0], [27.0, 14198.0], [28.0, 14291.0], [29.0, 14365.0], [30.0, 14265.0], [31.0, 14537.0], [33.0, 13959.0], [32.0, 14126.0], [35.0, 11051.0], [34.0, 14476.0], [37.0, 14150.0], [36.0, 14167.0], [39.0, 10951.0], [38.0, 10967.0], [41.0, 10958.0], [40.0, 14257.0], [43.0, 10660.0], [42.0, 13929.0], [45.0, 14158.0], [44.0, 14103.0], [47.0, 14321.0], [46.0, 14354.0], [49.0, 14001.0], [48.0, 14289.0], [50.0, 15066.028066528086], [1.0, 4016.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[48.7883283877349, 14877.284866468855]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[33.0, 3851.0], [32.0, 3882.0], [34.0, 3980.0], [37.0, 3966.0], [36.0, 4002.0], [40.0, 3799.0], [42.0, 3839.0], [45.0, 4018.0], [44.0, 3853.0], [47.0, 3851.0], [46.0, 3902.0], [49.0, 3791.0], [48.0, 3878.0], [50.0, 3974.6982310093686], [15.0, 2454.0], [16.0, 2673.0], [17.0, 2707.0], [18.0, 3087.0], [19.0, 3322.0], [20.0, 3038.0], [22.0, 3545.0], [23.0, 3409.0], [24.0, 3399.0], [25.0, 3404.0], [26.0, 3784.0], [27.0, 3770.0], [28.0, 4042.0], [29.0, 3933.0], [30.0, 3893.0], [31.0, 3907.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[49.447474747474736, 3964.307070707074]], "isOverall": false, "label": "(POST) INSERT New User-Aggregated", "isController": false}, {"data": [[8.0, 4770.0], [2.0, 4081.0], [35.0, 11050.0], [9.0, 4815.0], [39.0, 10951.0], [38.0, 10966.0], [41.0, 10957.0], [10.0, 4719.0], [43.0, 10659.0], [11.0, 5808.0], [12.0, 7124.0], [3.0, 4113.0], [50.0, 11075.93037336025], [13.0, 7207.0], [14.0, 8522.0], [4.0, 4847.0], [1.0, 4015.0], [5.0, 4496.0], [21.0, 10390.0], [6.0, 4635.0], [7.0, 5841.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}, {"data": [[49.32937685459941, 10995.26508407518]], "isOverall": false, "label": "(GET) Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 131546.38333333333, "minX": 1.60601862E12, "maxY": 4689110.633333334, "series": [{"data": [[1.60601892E12, 4513986.066666666], [1.60601862E12, 1984047.5333333334], [1.60601874E12, 4463842.016666667], [1.60601868E12, 4689110.633333334], [1.60601886E12, 4428550.083333333], [1.6060188E12, 4376078.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60601892E12, 1188996.8166666667], [1.60601862E12, 131546.38333333333], [1.60601874E12, 1341752.9833333334], [1.60601868E12, 1323576.9], [1.60601886E12, 1254590.4666666666], [1.6060188E12, 1252401.1666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60601892E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1780.5, "minX": 1.60601862E12, "maxY": 24478.5, "series": [{"data": [[1.60601892E12, 13290.225609756095], [1.60601862E12, 24478.5], [1.60601874E12, 14306.951541850216], [1.60601868E12, 17335.770642201835], [1.60601886E12, 14315.356783919598], [1.6060188E12, 14610.691542288552]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.60601892E12, 3695.3916083916088], [1.60601862E12, 1780.5], [1.60601874E12, 4052.0176211453754], [1.60601868E12, 4140.862385321102], [1.60601886E12, 3845.120603015076], [1.6060188E12, 4004.810945273632]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.60601892E12, 10048.62111801242], [1.60601862E12, 23552.545454545456], [1.60601874E12, 10279.78], [1.60601868E12, 10629.765853658535], [1.60601886E12, 10479.440594059408], [1.6060188E12, 10603.859296482417]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60601892E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60601862E12, "maxY": 2055.7753303964746, "series": [{"data": [[1.60601892E12, 0.0], [1.60601862E12, 0.0], [1.60601874E12, 0.0], [1.60601868E12, 0.0], [1.60601886E12, 0.0], [1.6060188E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.60601892E12, 1875.9650349650342], [1.60601862E12, 663.0], [1.60601874E12, 2055.7753303964746], [1.60601868E12, 2014.903669724771], [1.60601886E12, 1918.2110552763827], [1.6060188E12, 1987.2139303482588]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.60601892E12, 1499.8881987577647], [1.60601862E12, 650.7045454545456], [1.60601874E12, 1453.3249999999994], [1.60601868E12, 1392.9317073170735], [1.60601886E12, 1497.0990099009903], [1.6060188E12, 1527.5075376884413]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60601892E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60601862E12, "maxY": 225.0, "series": [{"data": [[1.60601892E12, 0.0], [1.60601862E12, 0.0], [1.60601874E12, 0.0], [1.60601868E12, 0.0], [1.60601886E12, 0.0], [1.6060188E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.60601892E12, 14.6993006993007], [1.60601862E12, 225.0], [1.60601874E12, 7.7488986784141005], [1.60601868E12, 22.59633027522937], [1.60601886E12, 12.814070351758794], [1.6060188E12, 12.547263681592044]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.60601892E12, 6.875776397515528], [1.60601862E12, 32.25000000000001], [1.60601874E12, 7.2749999999999995], [1.60601868E12, 7.6292682926829265], [1.60601886E12, 7.217821782178218], [1.6060188E12, 7.42211055276382]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60601892E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1577.0, "minX": 1.60601862E12, "maxY": 14537.0, "series": [{"data": [[1.60601892E12, 14537.0], [1.60601862E12, 1984.0], [1.60601874E12, 12390.0], [1.60601868E12, 11384.0], [1.60601886E12, 12701.0], [1.6060188E12, 12694.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60601892E12, 2454.0], [1.60601862E12, 1577.0], [1.60601874E12, 2994.0], [1.60601868E12, 2946.0], [1.60601886E12, 3101.0], [1.6060188E12, 3009.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60601892E12, 10851.2], [1.60601862E12, 1984.0], [1.60601874E12, 10471.0], [1.60601868E12, 10423.0], [1.60601886E12, 10783.0], [1.6060188E12, 10783.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60601892E12, 13971.179999999998], [1.60601862E12, 1984.0], [1.60601874E12, 11235.43], [1.60601868E12, 11267.4], [1.60601886E12, 11359.3], [1.6060188E12, 11384.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60601892E12, 11077.0], [1.60601862E12, 1984.0], [1.60601874E12, 10835.249999999998], [1.60601868E12, 10763.0], [1.60601886E12, 11032.2], [1.6060188E12, 11051.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60601892E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4543.0, "minX": 1000.0, "maxY": 23728.0, "series": [{"data": [[1000.0, 4543.0], [2000.0, 5841.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 23728.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 694.5, "minX": 1000.0, "maxY": 1649.0, "series": [{"data": [[1000.0, 1649.0], [2000.0, 1495.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 694.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6, "minX": 1.60601862E12, "maxY": 7.116666666666666, "series": [{"data": [[1.60601892E12, 5.066666666666666], [1.60601862E12, 1.6], [1.60601874E12, 7.116666666666666], [1.60601868E12, 7.05], [1.60601886E12, 6.683333333333334], [1.6060188E12, 6.666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60601892E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.60601862E12, "maxY": 7.116666666666666, "series": [{"data": [[1.60601892E12, 5.9], [1.60601862E12, 0.7666666666666667], [1.60601874E12, 7.116666666666666], [1.60601868E12, 7.05], [1.60601886E12, 6.683333333333334], [1.6060188E12, 6.666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60601892E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60601862E12, "maxY": 3.783333333333333, "series": [{"data": [[1.60601892E12, 2.7333333333333334], [1.60601874E12, 3.783333333333333], [1.60601868E12, 2.8333333333333335], [1.60601886E12, 3.316666666666667], [1.6060188E12, 3.35]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.60601862E12, 0.03333333333333333], [1.60601868E12, 0.8]], "isOverall": false, "label": "INSERT Test-failure", "isController": true}, {"data": [[1.60601892E12, 2.3833333333333333], [1.60601862E12, 0.03333333333333333], [1.60601874E12, 3.783333333333333], [1.60601868E12, 3.6333333333333333], [1.60601886E12, 3.316666666666667], [1.6060188E12, 3.35]], "isOverall": false, "label": "(POST) INSERT New User-success", "isController": false}, {"data": [[1.60601892E12, 2.683333333333333], [1.60601874E12, 3.3333333333333335], [1.60601868E12, 3.316666666666667], [1.60601886E12, 3.3666666666666667], [1.6060188E12, 3.316666666666667]], "isOverall": false, "label": "(GET) Registration Page-success", "isController": false}, {"data": [[1.60601862E12, 0.7333333333333333], [1.60601868E12, 0.1]], "isOverall": false, "label": "(GET) Registration Page-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60601892E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60601862E12, "maxY": 10.9, "series": [{"data": [[1.60601892E12, 7.8], [1.60601862E12, 0.03333333333333333], [1.60601874E12, 10.9], [1.60601868E12, 9.783333333333333], [1.60601886E12, 10.0], [1.6060188E12, 10.016666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60601862E12, 0.7666666666666667], [1.60601868E12, 0.9]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60601892E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

