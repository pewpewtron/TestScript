/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 83292.0, "series": [{"data": [[0.0, 14.0], [0.1, 14.0], [0.2, 14.0], [0.3, 15.0], [0.4, 15.0], [0.5, 15.0], [0.6, 15.0], [0.7, 15.0], [0.8, 15.0], [0.9, 15.0], [1.0, 15.0], [1.1, 15.0], [1.2, 16.0], [1.3, 16.0], [1.4, 16.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 24.0], [2.2, 24.0], [2.3, 24.0], [2.4, 30.0], [2.5, 30.0], [2.6, 30.0], [2.7, 40.0], [2.8, 40.0], [2.9, 40.0], [3.0, 87.0], [3.1, 87.0], [3.2, 87.0], [3.3, 98.0], [3.4, 98.0], [3.5, 98.0], [3.6, 123.0], [3.7, 123.0], [3.8, 123.0], [3.9, 169.0], [4.0, 169.0], [4.1, 169.0], [4.2, 300.0], [4.3, 300.0], [4.4, 300.0], [4.5, 312.0], [4.6, 312.0], [4.7, 312.0], [4.8, 342.0], [4.9, 342.0], [5.0, 342.0], [5.1, 342.0], [5.2, 342.0], [5.3, 342.0], [5.4, 369.0], [5.5, 369.0], [5.6, 369.0], [5.7, 395.0], [5.8, 395.0], [5.9, 403.0], [6.0, 403.0], [6.1, 403.0], [6.2, 407.0], [6.3, 407.0], [6.4, 407.0], [6.5, 443.0], [6.6, 443.0], [6.7, 443.0], [6.8, 453.0], [6.9, 453.0], [7.0, 453.0], [7.1, 454.0], [7.2, 454.0], [7.3, 454.0], [7.4, 461.0], [7.5, 461.0], [7.6, 461.0], [7.7, 485.0], [7.8, 485.0], [7.9, 485.0], [8.0, 486.0], [8.1, 486.0], [8.2, 486.0], [8.3, 494.0], [8.4, 494.0], [8.5, 494.0], [8.6, 563.0], [8.7, 563.0], [8.8, 563.0], [8.9, 575.0], [9.0, 575.0], [9.1, 575.0], [9.2, 600.0], [9.3, 600.0], [9.4, 600.0], [9.5, 620.0], [9.6, 620.0], [9.7, 620.0], [9.8, 632.0], [9.9, 632.0], [10.0, 632.0], [10.1, 639.0], [10.2, 639.0], [10.3, 639.0], [10.4, 654.0], [10.5, 654.0], [10.6, 654.0], [10.7, 659.0], [10.8, 659.0], [10.9, 659.0], [11.0, 687.0], [11.1, 687.0], [11.2, 687.0], [11.3, 698.0], [11.4, 698.0], [11.5, 698.0], [11.6, 724.0], [11.7, 724.0], [11.8, 725.0], [11.9, 725.0], [12.0, 725.0], [12.1, 729.0], [12.2, 729.0], [12.3, 729.0], [12.4, 731.0], [12.5, 731.0], [12.6, 731.0], [12.7, 750.0], [12.8, 750.0], [12.9, 750.0], [13.0, 753.0], [13.1, 753.0], [13.2, 753.0], [13.3, 831.0], [13.4, 831.0], [13.5, 831.0], [13.6, 832.0], [13.7, 832.0], [13.8, 832.0], [13.9, 832.0], [14.0, 832.0], [14.1, 832.0], [14.2, 848.0], [14.3, 848.0], [14.4, 848.0], [14.5, 857.0], [14.6, 857.0], [14.7, 857.0], [14.8, 888.0], [14.9, 888.0], [15.0, 888.0], [15.1, 987.0], [15.2, 987.0], [15.3, 987.0], [15.4, 1062.0], [15.5, 1062.0], [15.6, 1062.0], [15.7, 1085.0], [15.8, 1085.0], [15.9, 1085.0], [16.0, 1106.0], [16.1, 1106.0], [16.2, 1106.0], [16.3, 1145.0], [16.4, 1145.0], [16.5, 1145.0], [16.6, 1351.0], [16.7, 1351.0], [16.8, 1351.0], [16.9, 1422.0], [17.0, 1422.0], [17.1, 1422.0], [17.2, 1432.0], [17.3, 1432.0], [17.4, 1432.0], [17.5, 1451.0], [17.6, 1451.0], [17.7, 14476.0], [17.8, 14476.0], [17.9, 14476.0], [18.0, 15462.0], [18.1, 15462.0], [18.2, 15462.0], [18.3, 15476.0], [18.4, 15476.0], [18.5, 15476.0], [18.6, 15502.0], [18.7, 15502.0], [18.8, 15502.0], [18.9, 15594.0], [19.0, 15594.0], [19.1, 15594.0], [19.2, 15631.0], [19.3, 15631.0], [19.4, 15631.0], [19.5, 17805.0], [19.6, 17805.0], [19.7, 17805.0], [19.8, 18137.0], [19.9, 18137.0], [20.0, 18137.0], [20.1, 19268.0], [20.2, 19268.0], [20.3, 19268.0], [20.4, 19337.0], [20.5, 19337.0], [20.6, 19337.0], [20.7, 19355.0], [20.8, 19355.0], [20.9, 19355.0], [21.0, 19579.0], [21.1, 19579.0], [21.2, 19579.0], [21.3, 20643.0], [21.4, 20643.0], [21.5, 20643.0], [21.6, 20727.0], [21.7, 20727.0], [21.8, 20727.0], [21.9, 20779.0], [22.0, 20779.0], [22.1, 20779.0], [22.2, 20954.0], [22.3, 20954.0], [22.4, 20954.0], [22.5, 21106.0], [22.6, 21106.0], [22.7, 21106.0], [22.8, 21237.0], [22.9, 21237.0], [23.0, 21237.0], [23.1, 22114.0], [23.2, 22114.0], [23.3, 22114.0], [23.4, 23166.0], [23.5, 23166.0], [23.6, 24053.0], [23.7, 24053.0], [23.8, 24053.0], [23.9, 25001.0], [24.0, 25001.0], [24.1, 25001.0], [24.2, 25090.0], [24.3, 25090.0], [24.4, 25090.0], [24.5, 25419.0], [24.6, 25419.0], [24.7, 25419.0], [24.8, 25853.0], [24.9, 25853.0], [25.0, 25853.0], [25.1, 25962.0], [25.2, 25962.0], [25.3, 25962.0], [25.4, 26181.0], [25.5, 26181.0], [25.6, 26181.0], [25.7, 26439.0], [25.8, 26439.0], [25.9, 26439.0], [26.0, 26543.0], [26.1, 26543.0], [26.2, 26543.0], [26.3, 26619.0], [26.4, 26619.0], [26.5, 26619.0], [26.6, 26794.0], [26.7, 26794.0], [26.8, 26794.0], [26.9, 26803.0], [27.0, 26803.0], [27.1, 26803.0], [27.2, 26828.0], [27.3, 26828.0], [27.4, 26828.0], [27.5, 27026.0], [27.6, 27026.0], [27.7, 27026.0], [27.8, 27090.0], [27.9, 27090.0], [28.0, 27090.0], [28.1, 27423.0], [28.2, 27423.0], [28.3, 27423.0], [28.4, 27859.0], [28.5, 27859.0], [28.6, 27859.0], [28.7, 28127.0], [28.8, 28127.0], [28.9, 28127.0], [29.0, 28213.0], [29.1, 28213.0], [29.2, 28213.0], [29.3, 28391.0], [29.4, 28391.0], [29.5, 28671.0], [29.6, 28671.0], [29.7, 28671.0], [29.8, 28685.0], [29.9, 28685.0], [30.0, 28685.0], [30.1, 28718.0], [30.2, 28718.0], [30.3, 28718.0], [30.4, 28767.0], [30.5, 28767.0], [30.6, 28767.0], [30.7, 29284.0], [30.8, 29284.0], [30.9, 29284.0], [31.0, 29340.0], [31.1, 29340.0], [31.2, 29340.0], [31.3, 29483.0], [31.4, 29483.0], [31.5, 29483.0], [31.6, 29501.0], [31.7, 29501.0], [31.8, 29501.0], [31.9, 29567.0], [32.0, 29567.0], [32.1, 29567.0], [32.2, 29609.0], [32.3, 29609.0], [32.4, 29609.0], [32.5, 29620.0], [32.6, 29620.0], [32.7, 29620.0], [32.8, 29786.0], [32.9, 29786.0], [33.0, 29786.0], [33.1, 29904.0], [33.2, 29904.0], [33.3, 29904.0], [33.4, 29951.0], [33.5, 29951.0], [33.6, 29951.0], [33.7, 29962.0], [33.8, 29962.0], [33.9, 29962.0], [34.0, 30078.0], [34.1, 30078.0], [34.2, 30078.0], [34.3, 30116.0], [34.4, 30116.0], [34.5, 30116.0], [34.6, 30157.0], [34.7, 30157.0], [34.8, 30157.0], [34.9, 30264.0], [35.0, 30264.0], [35.1, 30264.0], [35.2, 30384.0], [35.3, 30384.0], [35.4, 30409.0], [35.5, 30409.0], [35.6, 30409.0], [35.7, 30448.0], [35.8, 30448.0], [35.9, 30448.0], [36.0, 30461.0], [36.1, 30461.0], [36.2, 30461.0], [36.3, 30593.0], [36.4, 30593.0], [36.5, 30593.0], [36.6, 30683.0], [36.7, 30683.0], [36.8, 30683.0], [36.9, 30717.0], [37.0, 30717.0], [37.1, 30717.0], [37.2, 30809.0], [37.3, 30809.0], [37.4, 30809.0], [37.5, 30872.0], [37.6, 30872.0], [37.7, 30872.0], [37.8, 31059.0], [37.9, 31059.0], [38.0, 31059.0], [38.1, 31200.0], [38.2, 31200.0], [38.3, 31200.0], [38.4, 31271.0], [38.5, 31271.0], [38.6, 31271.0], [38.7, 31305.0], [38.8, 31305.0], [38.9, 31305.0], [39.0, 31324.0], [39.1, 31324.0], [39.2, 31324.0], [39.3, 31367.0], [39.4, 31367.0], [39.5, 31367.0], [39.6, 31496.0], [39.7, 31496.0], [39.8, 31496.0], [39.9, 31514.0], [40.0, 31514.0], [40.1, 31514.0], [40.2, 31651.0], [40.3, 31651.0], [40.4, 31651.0], [40.5, 31662.0], [40.6, 31662.0], [40.7, 31662.0], [40.8, 31774.0], [40.9, 31774.0], [41.0, 31774.0], [41.1, 31955.0], [41.2, 31955.0], [41.3, 32412.0], [41.4, 32412.0], [41.5, 32412.0], [41.6, 32498.0], [41.7, 32498.0], [41.8, 32498.0], [41.9, 32585.0], [42.0, 32585.0], [42.1, 32585.0], [42.2, 32790.0], [42.3, 32790.0], [42.4, 32790.0], [42.5, 32919.0], [42.6, 32919.0], [42.7, 32919.0], [42.8, 33041.0], [42.9, 33041.0], [43.0, 33041.0], [43.1, 33048.0], [43.2, 33048.0], [43.3, 33048.0], [43.4, 33074.0], [43.5, 33074.0], [43.6, 33074.0], [43.7, 33158.0], [43.8, 33158.0], [43.9, 33158.0], [44.0, 33530.0], [44.1, 33530.0], [44.2, 33530.0], [44.3, 33599.0], [44.4, 33599.0], [44.5, 33599.0], [44.6, 33604.0], [44.7, 33604.0], [44.8, 33604.0], [44.9, 33710.0], [45.0, 33710.0], [45.1, 33710.0], [45.2, 33721.0], [45.3, 33721.0], [45.4, 33721.0], [45.5, 33890.0], [45.6, 33890.0], [45.7, 33890.0], [45.8, 33899.0], [45.9, 33899.0], [46.0, 33899.0], [46.1, 33904.0], [46.2, 33904.0], [46.3, 33904.0], [46.4, 34151.0], [46.5, 34151.0], [46.6, 34151.0], [46.7, 34293.0], [46.8, 34293.0], [46.9, 34293.0], [47.0, 34798.0], [47.1, 34798.0], [47.2, 35198.0], [47.3, 35198.0], [47.4, 35198.0], [47.5, 35400.0], [47.6, 35400.0], [47.7, 35400.0], [47.8, 35465.0], [47.9, 35465.0], [48.0, 35465.0], [48.1, 35678.0], [48.2, 35678.0], [48.3, 35678.0], [48.4, 36202.0], [48.5, 36202.0], [48.6, 36202.0], [48.7, 36490.0], [48.8, 36490.0], [48.9, 36490.0], [49.0, 36634.0], [49.1, 36634.0], [49.2, 36634.0], [49.3, 37472.0], [49.4, 37472.0], [49.5, 37472.0], [49.6, 38145.0], [49.7, 38145.0], [49.8, 38145.0], [49.9, 38885.0], [50.0, 38885.0], [50.1, 38885.0], [50.2, 39452.0], [50.3, 39452.0], [50.4, 39452.0], [50.5, 40537.0], [50.6, 40537.0], [50.7, 40537.0], [50.8, 46567.0], [50.9, 46567.0], [51.0, 46567.0], [51.1, 48411.0], [51.2, 48411.0], [51.3, 48411.0], [51.4, 50525.0], [51.5, 50525.0], [51.6, 50525.0], [51.7, 51598.0], [51.8, 51598.0], [51.9, 51598.0], [52.0, 51908.0], [52.1, 51908.0], [52.2, 51908.0], [52.3, 51937.0], [52.4, 51937.0], [52.5, 51937.0], [52.6, 52213.0], [52.7, 52213.0], [52.8, 52213.0], [52.9, 53384.0], [53.0, 53384.0], [53.1, 53646.0], [53.2, 53646.0], [53.3, 53646.0], [53.4, 54069.0], [53.5, 54069.0], [53.6, 54069.0], [53.7, 54332.0], [53.8, 54332.0], [53.9, 54332.0], [54.0, 54378.0], [54.1, 54378.0], [54.2, 54378.0], [54.3, 54894.0], [54.4, 54894.0], [54.5, 54894.0], [54.6, 54923.0], [54.7, 54923.0], [54.8, 54923.0], [54.9, 55681.0], [55.0, 55681.0], [55.1, 55681.0], [55.2, 55733.0], [55.3, 55733.0], [55.4, 55733.0], [55.5, 55766.0], [55.6, 55766.0], [55.7, 55766.0], [55.8, 56208.0], [55.9, 56208.0], [56.0, 56208.0], [56.1, 56214.0], [56.2, 56214.0], [56.3, 56214.0], [56.4, 56332.0], [56.5, 56332.0], [56.6, 56332.0], [56.7, 56370.0], [56.8, 56370.0], [56.9, 56370.0], [57.0, 56588.0], [57.1, 56588.0], [57.2, 56588.0], [57.3, 56752.0], [57.4, 56752.0], [57.5, 56752.0], [57.6, 56794.0], [57.7, 56794.0], [57.8, 56794.0], [57.9, 56797.0], [58.0, 56797.0], [58.1, 56797.0], [58.2, 57066.0], [58.3, 57066.0], [58.4, 57066.0], [58.5, 57146.0], [58.6, 57146.0], [58.7, 57146.0], [58.8, 57231.0], [58.9, 57231.0], [59.0, 57339.0], [59.1, 57339.0], [59.2, 57339.0], [59.3, 57374.0], [59.4, 57374.0], [59.5, 57374.0], [59.6, 57539.0], [59.7, 57539.0], [59.8, 57539.0], [59.9, 57633.0], [60.0, 57633.0], [60.1, 57633.0], [60.2, 57671.0], [60.3, 57671.0], [60.4, 57671.0], [60.5, 58292.0], [60.6, 58292.0], [60.7, 58292.0], [60.8, 58355.0], [60.9, 58355.0], [61.0, 58355.0], [61.1, 58706.0], [61.2, 58706.0], [61.3, 58706.0], [61.4, 58806.0], [61.5, 58806.0], [61.6, 58806.0], [61.7, 58875.0], [61.8, 58875.0], [61.9, 58875.0], [62.0, 59013.0], [62.1, 59013.0], [62.2, 59013.0], [62.3, 59125.0], [62.4, 59125.0], [62.5, 59125.0], [62.6, 59201.0], [62.7, 59201.0], [62.8, 59201.0], [62.9, 59231.0], [63.0, 59231.0], [63.1, 59231.0], [63.2, 59361.0], [63.3, 59361.0], [63.4, 59361.0], [63.5, 59497.0], [63.6, 59497.0], [63.7, 59497.0], [63.8, 59550.0], [63.9, 59550.0], [64.0, 59550.0], [64.1, 59711.0], [64.2, 59711.0], [64.3, 59711.0], [64.4, 59844.0], [64.5, 59844.0], [64.6, 59844.0], [64.7, 59845.0], [64.8, 59845.0], [64.9, 60095.0], [65.0, 60095.0], [65.1, 60095.0], [65.2, 60366.0], [65.3, 60366.0], [65.4, 60366.0], [65.5, 60368.0], [65.6, 60368.0], [65.7, 60368.0], [65.8, 60495.0], [65.9, 60495.0], [66.0, 60495.0], [66.1, 60603.0], [66.2, 60603.0], [66.3, 60603.0], [66.4, 60740.0], [66.5, 60740.0], [66.6, 60740.0], [66.7, 60832.0], [66.8, 60832.0], [66.9, 60832.0], [67.0, 60913.0], [67.1, 60913.0], [67.2, 60913.0], [67.3, 60996.0], [67.4, 60996.0], [67.5, 60996.0], [67.6, 61003.0], [67.7, 61003.0], [67.8, 61003.0], [67.9, 61344.0], [68.0, 61344.0], [68.1, 61344.0], [68.2, 61559.0], [68.3, 61559.0], [68.4, 61559.0], [68.5, 61629.0], [68.6, 61629.0], [68.7, 61629.0], [68.8, 61889.0], [68.9, 61889.0], [69.0, 61889.0], [69.1, 62003.0], [69.2, 62003.0], [69.3, 62003.0], [69.4, 62016.0], [69.5, 62016.0], [69.6, 62016.0], [69.7, 62230.0], [69.8, 62230.0], [69.9, 62230.0], [70.0, 62464.0], [70.1, 62464.0], [70.2, 62464.0], [70.3, 62538.0], [70.4, 62538.0], [70.5, 62538.0], [70.6, 62682.0], [70.7, 62682.0], [70.8, 62685.0], [70.9, 62685.0], [71.0, 62685.0], [71.1, 62872.0], [71.2, 62872.0], [71.3, 62872.0], [71.4, 62966.0], [71.5, 62966.0], [71.6, 62966.0], [71.7, 63015.0], [71.8, 63015.0], [71.9, 63015.0], [72.0, 63024.0], [72.1, 63024.0], [72.2, 63024.0], [72.3, 63048.0], [72.4, 63048.0], [72.5, 63048.0], [72.6, 63133.0], [72.7, 63133.0], [72.8, 63133.0], [72.9, 63648.0], [73.0, 63648.0], [73.1, 63648.0], [73.2, 64021.0], [73.3, 64021.0], [73.4, 64021.0], [73.5, 64378.0], [73.6, 64378.0], [73.7, 64378.0], [73.8, 64442.0], [73.9, 64442.0], [74.0, 64442.0], [74.1, 64475.0], [74.2, 64475.0], [74.3, 64475.0], [74.4, 64522.0], [74.5, 64522.0], [74.6, 64522.0], [74.7, 64669.0], [74.8, 64669.0], [74.9, 64669.0], [75.0, 64777.0], [75.1, 64777.0], [75.2, 64777.0], [75.3, 64868.0], [75.4, 64868.0], [75.5, 64868.0], [75.6, 64933.0], [75.7, 64933.0], [75.8, 64933.0], [75.9, 64937.0], [76.0, 64937.0], [76.1, 64937.0], [76.2, 65168.0], [76.3, 65168.0], [76.4, 65168.0], [76.5, 65492.0], [76.6, 65492.0], [76.7, 65961.0], [76.8, 65961.0], [76.9, 65961.0], [77.0, 66475.0], [77.1, 66475.0], [77.2, 66475.0], [77.3, 66639.0], [77.4, 66639.0], [77.5, 66639.0], [77.6, 66964.0], [77.7, 66964.0], [77.8, 66964.0], [77.9, 66966.0], [78.0, 66966.0], [78.1, 66966.0], [78.2, 67051.0], [78.3, 67051.0], [78.4, 67051.0], [78.5, 67825.0], [78.6, 67825.0], [78.7, 67825.0], [78.8, 67829.0], [78.9, 67829.0], [79.0, 67829.0], [79.1, 68285.0], [79.2, 68285.0], [79.3, 68285.0], [79.4, 69237.0], [79.5, 69237.0], [79.6, 69237.0], [79.7, 69558.0], [79.8, 69558.0], [79.9, 69558.0], [80.0, 69703.0], [80.1, 69703.0], [80.2, 69703.0], [80.3, 69924.0], [80.4, 69924.0], [80.5, 69924.0], [80.6, 70177.0], [80.7, 70177.0], [80.8, 70177.0], [80.9, 70444.0], [81.0, 70444.0], [81.1, 70444.0], [81.2, 70476.0], [81.3, 70476.0], [81.4, 70476.0], [81.5, 70557.0], [81.6, 70557.0], [81.7, 70557.0], [81.8, 70973.0], [81.9, 70973.0], [82.0, 70973.0], [82.1, 71036.0], [82.2, 71036.0], [82.3, 71036.0], [82.4, 71270.0], [82.5, 71270.0], [82.6, 72218.0], [82.7, 72218.0], [82.8, 72218.0], [82.9, 72498.0], [83.0, 72498.0], [83.1, 72498.0], [83.2, 73235.0], [83.3, 73235.0], [83.4, 73235.0], [83.5, 73312.0], [83.6, 73312.0], [83.7, 73312.0], [83.8, 73338.0], [83.9, 73338.0], [84.0, 73338.0], [84.1, 73361.0], [84.2, 73361.0], [84.3, 73361.0], [84.4, 73403.0], [84.5, 73403.0], [84.6, 73403.0], [84.7, 73487.0], [84.8, 73487.0], [84.9, 73487.0], [85.0, 73568.0], [85.1, 73568.0], [85.2, 73568.0], [85.3, 73614.0], [85.4, 73614.0], [85.5, 73614.0], [85.6, 73790.0], [85.7, 73790.0], [85.8, 73790.0], [85.9, 73916.0], [86.0, 73916.0], [86.1, 73916.0], [86.2, 73934.0], [86.3, 73934.0], [86.4, 73934.0], [86.5, 74258.0], [86.6, 74258.0], [86.7, 74258.0], [86.8, 74298.0], [86.9, 74298.0], [87.0, 74298.0], [87.1, 74525.0], [87.2, 74525.0], [87.3, 74525.0], [87.4, 74847.0], [87.5, 74847.0], [87.6, 74847.0], [87.7, 75118.0], [87.8, 75118.0], [87.9, 75118.0], [88.0, 75269.0], [88.1, 75269.0], [88.2, 75269.0], [88.3, 75331.0], [88.4, 75331.0], [88.5, 75393.0], [88.6, 75393.0], [88.7, 75393.0], [88.8, 75441.0], [88.9, 75441.0], [89.0, 75441.0], [89.1, 75481.0], [89.2, 75481.0], [89.3, 75481.0], [89.4, 75631.0], [89.5, 75631.0], [89.6, 75631.0], [89.7, 75655.0], [89.8, 75655.0], [89.9, 75655.0], [90.0, 76002.0], [90.1, 76002.0], [90.2, 76002.0], [90.3, 76231.0], [90.4, 76231.0], [90.5, 76231.0], [90.6, 76254.0], [90.7, 76254.0], [90.8, 76254.0], [90.9, 76308.0], [91.0, 76308.0], [91.1, 76308.0], [91.2, 76428.0], [91.3, 76428.0], [91.4, 76428.0], [91.5, 76875.0], [91.6, 76875.0], [91.7, 76875.0], [91.8, 77232.0], [91.9, 77232.0], [92.0, 77232.0], [92.1, 77249.0], [92.2, 77249.0], [92.3, 77249.0], [92.4, 77440.0], [92.5, 77440.0], [92.6, 77440.0], [92.7, 77608.0], [92.8, 77608.0], [92.9, 77608.0], [93.0, 77619.0], [93.1, 77619.0], [93.2, 77619.0], [93.3, 77712.0], [93.4, 77712.0], [93.5, 77712.0], [93.6, 77729.0], [93.7, 77729.0], [93.8, 77729.0], [93.9, 78230.0], [94.0, 78230.0], [94.1, 78230.0], [94.2, 78416.0], [94.3, 78416.0], [94.4, 78436.0], [94.5, 78436.0], [94.6, 78436.0], [94.7, 79041.0], [94.8, 79041.0], [94.9, 79041.0], [95.0, 79098.0], [95.1, 79098.0], [95.2, 79098.0], [95.3, 79460.0], [95.4, 79460.0], [95.5, 79460.0], [95.6, 79706.0], [95.7, 79706.0], [95.8, 79706.0], [95.9, 80065.0], [96.0, 80065.0], [96.1, 80065.0], [96.2, 80918.0], [96.3, 80918.0], [96.4, 80918.0], [96.5, 81027.0], [96.6, 81027.0], [96.7, 81027.0], [96.8, 81043.0], [96.9, 81043.0], [97.0, 81043.0], [97.1, 81057.0], [97.2, 81057.0], [97.3, 81057.0], [97.4, 81068.0], [97.5, 81068.0], [97.6, 81068.0], [97.7, 81083.0], [97.8, 81083.0], [97.9, 81083.0], [98.0, 81310.0], [98.1, 81310.0], [98.2, 81310.0], [98.3, 81695.0], [98.4, 81695.0], [98.5, 81695.0], [98.6, 82304.0], [98.7, 82304.0], [98.8, 82304.0], [98.9, 82500.0], [99.0, 82500.0], [99.1, 82500.0], [99.2, 83251.0], [99.3, 83251.0], [99.4, 83251.0], [99.5, 83266.0], [99.6, 83266.0], [99.7, 83266.0], [99.8, 83292.0], [99.9, 83292.0], [100.0, 83292.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[0.0, 6.0], [0.1, 6.0], [0.2, 6.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 7.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 7.0], [1.6, 7.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 11.0], [3.4, 11.0], [3.5, 11.0], [3.6, 12.0], [3.7, 12.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 12.0], [4.3, 13.0], [4.4, 13.0], [4.5, 13.0], [4.6, 14.0], [4.7, 14.0], [4.8, 14.0], [4.9, 15.0], [5.0, 15.0], [5.1, 15.0], [5.2, 16.0], [5.3, 16.0], [5.4, 16.0], [5.5, 16.0], [5.6, 19.0], [5.7, 19.0], [5.8, 19.0], [5.9, 21.0], [6.0, 21.0], [6.1, 21.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 25.0], [6.6, 25.0], [6.7, 25.0], [6.8, 29.0], [6.9, 29.0], [7.0, 29.0], [7.1, 29.0], [7.2, 32.0], [7.3, 32.0], [7.4, 32.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 57.0], [8.2, 57.0], [8.3, 57.0], [8.4, 57.0], [8.5, 67.0], [8.6, 67.0], [8.7, 67.0], [8.8, 72.0], [8.9, 72.0], [9.0, 72.0], [9.1, 80.0], [9.2, 80.0], [9.3, 80.0], [9.4, 84.0], [9.5, 84.0], [9.6, 84.0], [9.7, 84.0], [9.8, 85.0], [9.9, 85.0], [10.0, 85.0], [10.1, 89.0], [10.2, 89.0], [10.3, 89.0], [10.4, 91.0], [10.5, 91.0], [10.6, 91.0], [10.7, 92.0], [10.8, 92.0], [10.9, 92.0], [11.0, 92.0], [11.1, 107.0], [11.2, 107.0], [11.3, 107.0], [11.4, 111.0], [11.5, 111.0], [11.6, 111.0], [11.7, 122.0], [11.8, 122.0], [11.9, 122.0], [12.0, 126.0], [12.1, 126.0], [12.2, 126.0], [12.3, 173.0], [12.4, 173.0], [12.5, 173.0], [12.6, 173.0], [12.7, 210.0], [12.8, 210.0], [12.9, 210.0], [13.0, 219.0], [13.1, 219.0], [13.2, 219.0], [13.3, 226.0], [13.4, 226.0], [13.5, 226.0], [13.6, 228.0], [13.7, 228.0], [13.8, 228.0], [13.9, 228.0], [14.0, 231.0], [14.1, 231.0], [14.2, 231.0], [14.3, 291.0], [14.4, 291.0], [14.5, 291.0], [14.6, 311.0], [14.7, 311.0], [14.8, 311.0], [14.9, 312.0], [15.0, 312.0], [15.1, 312.0], [15.2, 312.0], [15.3, 341.0], [15.4, 341.0], [15.5, 341.0], [15.6, 346.0], [15.7, 346.0], [15.8, 346.0], [15.9, 372.0], [16.0, 372.0], [16.1, 372.0], [16.2, 381.0], [16.3, 381.0], [16.4, 381.0], [16.5, 381.0], [16.6, 386.0], [16.7, 386.0], [16.8, 386.0], [16.9, 395.0], [17.0, 395.0], [17.1, 395.0], [17.2, 397.0], [17.3, 397.0], [17.4, 397.0], [17.5, 408.0], [17.6, 408.0], [17.7, 408.0], [17.8, 422.0], [17.9, 422.0], [18.0, 422.0], [18.1, 422.0], [18.2, 435.0], [18.3, 435.0], [18.4, 435.0], [18.5, 439.0], [18.6, 439.0], [18.7, 439.0], [18.8, 441.0], [18.9, 441.0], [19.0, 441.0], [19.1, 450.0], [19.2, 450.0], [19.3, 450.0], [19.4, 450.0], [19.5, 454.0], [19.6, 454.0], [19.7, 454.0], [19.8, 455.0], [19.9, 455.0], [20.0, 455.0], [20.1, 464.0], [20.2, 464.0], [20.3, 464.0], [20.4, 464.0], [20.5, 464.0], [20.6, 464.0], [20.7, 464.0], [20.8, 472.0], [20.9, 472.0], [21.0, 472.0], [21.1, 473.0], [21.2, 473.0], [21.3, 473.0], [21.4, 498.0], [21.5, 498.0], [21.6, 498.0], [21.7, 503.0], [21.8, 503.0], [21.9, 503.0], [22.0, 503.0], [22.1, 510.0], [22.2, 510.0], [22.3, 510.0], [22.4, 510.0], [22.5, 510.0], [22.6, 510.0], [22.7, 530.0], [22.8, 530.0], [22.9, 530.0], [23.0, 539.0], [23.1, 539.0], [23.2, 539.0], [23.3, 539.0], [23.4, 550.0], [23.5, 550.0], [23.6, 550.0], [23.7, 572.0], [23.8, 572.0], [23.9, 572.0], [24.0, 577.0], [24.1, 577.0], [24.2, 577.0], [24.3, 584.0], [24.4, 584.0], [24.5, 584.0], [24.6, 623.0], [24.7, 623.0], [24.8, 623.0], [24.9, 623.0], [25.0, 641.0], [25.1, 641.0], [25.2, 641.0], [25.3, 642.0], [25.4, 642.0], [25.5, 642.0], [25.6, 663.0], [25.7, 663.0], [25.8, 663.0], [25.9, 673.0], [26.0, 673.0], [26.1, 673.0], [26.2, 673.0], [26.3, 674.0], [26.4, 674.0], [26.5, 674.0], [26.6, 683.0], [26.7, 683.0], [26.8, 683.0], [26.9, 702.0], [27.0, 702.0], [27.1, 702.0], [27.2, 706.0], [27.3, 706.0], [27.4, 706.0], [27.5, 706.0], [27.6, 711.0], [27.7, 711.0], [27.8, 711.0], [27.9, 712.0], [28.0, 712.0], [28.1, 712.0], [28.2, 726.0], [28.3, 726.0], [28.4, 726.0], [28.5, 738.0], [28.6, 738.0], [28.7, 738.0], [28.8, 738.0], [28.9, 764.0], [29.0, 764.0], [29.1, 764.0], [29.2, 778.0], [29.3, 778.0], [29.4, 778.0], [29.5, 783.0], [29.6, 783.0], [29.7, 783.0], [29.8, 789.0], [29.9, 789.0], [30.0, 789.0], [30.1, 820.0], [30.2, 820.0], [30.3, 820.0], [30.4, 820.0], [30.5, 835.0], [30.6, 835.0], [30.7, 835.0], [30.8, 842.0], [30.9, 842.0], [31.0, 842.0], [31.1, 848.0], [31.2, 848.0], [31.3, 848.0], [31.4, 851.0], [31.5, 851.0], [31.6, 851.0], [31.7, 851.0], [31.8, 892.0], [31.9, 892.0], [32.0, 892.0], [32.1, 1002.0], [32.2, 1002.0], [32.3, 1002.0], [32.4, 1051.0], [32.5, 1051.0], [32.6, 1051.0], [32.7, 1112.0], [32.8, 1112.0], [32.9, 1112.0], [33.0, 1112.0], [33.1, 1259.0], [33.2, 1259.0], [33.3, 1259.0], [33.4, 14477.0], [33.5, 14477.0], [33.6, 14477.0], [33.7, 15035.0], [33.8, 15035.0], [33.9, 15035.0], [34.0, 15414.0], [34.1, 15414.0], [34.2, 15414.0], [34.3, 15414.0], [34.4, 15566.0], [34.5, 15566.0], [34.6, 15566.0], [34.7, 16318.0], [34.8, 16318.0], [34.9, 16318.0], [35.0, 16375.0], [35.1, 16375.0], [35.2, 16375.0], [35.3, 16627.0], [35.4, 16627.0], [35.5, 16627.0], [35.6, 17454.0], [35.7, 17454.0], [35.8, 17454.0], [35.9, 17454.0], [36.0, 18303.0], [36.1, 18303.0], [36.2, 18303.0], [36.3, 18421.0], [36.4, 18421.0], [36.5, 18421.0], [36.6, 18550.0], [36.7, 18550.0], [36.8, 18550.0], [36.9, 18567.0], [37.0, 18567.0], [37.1, 18567.0], [37.2, 18567.0], [37.3, 18589.0], [37.4, 18589.0], [37.5, 18589.0], [37.6, 18646.0], [37.7, 18646.0], [37.8, 18646.0], [37.9, 18676.0], [38.0, 18676.0], [38.1, 18676.0], [38.2, 18767.0], [38.3, 18767.0], [38.4, 18767.0], [38.5, 18767.0], [38.6, 18840.0], [38.7, 18840.0], [38.8, 18840.0], [38.9, 18847.0], [39.0, 18847.0], [39.1, 18847.0], [39.2, 19596.0], [39.3, 19596.0], [39.4, 19596.0], [39.5, 19849.0], [39.6, 19849.0], [39.7, 19849.0], [39.8, 19849.0], [39.9, 20238.0], [40.0, 20238.0], [40.1, 20238.0], [40.2, 20397.0], [40.3, 20397.0], [40.4, 20397.0], [40.5, 20489.0], [40.6, 20489.0], [40.7, 20489.0], [40.8, 20738.0], [40.9, 20738.0], [41.0, 20738.0], [41.1, 20738.0], [41.2, 20987.0], [41.3, 20987.0], [41.4, 20987.0], [41.5, 21011.0], [41.6, 21011.0], [41.7, 21011.0], [41.8, 21326.0], [41.9, 21326.0], [42.0, 21326.0], [42.1, 22829.0], [42.2, 22829.0], [42.3, 22829.0], [42.4, 22911.0], [42.5, 22911.0], [42.6, 22911.0], [42.7, 22911.0], [42.8, 23621.0], [42.9, 23621.0], [43.0, 23621.0], [43.1, 24167.0], [43.2, 24167.0], [43.3, 24167.0], [43.4, 24262.0], [43.5, 24262.0], [43.6, 24262.0], [43.7, 24287.0], [43.8, 24287.0], [43.9, 24287.0], [44.0, 24287.0], [44.1, 24869.0], [44.2, 24869.0], [44.3, 24869.0], [44.4, 25022.0], [44.5, 25022.0], [44.6, 25022.0], [44.7, 25050.0], [44.8, 25050.0], [44.9, 25050.0], [45.0, 25627.0], [45.1, 25627.0], [45.2, 25627.0], [45.3, 25627.0], [45.4, 25744.0], [45.5, 25744.0], [45.6, 25744.0], [45.7, 25813.0], [45.8, 25813.0], [45.9, 25813.0], [46.0, 25975.0], [46.1, 25975.0], [46.2, 25975.0], [46.3, 26081.0], [46.4, 26081.0], [46.5, 26081.0], [46.6, 26081.0], [46.7, 26144.0], [46.8, 26144.0], [46.9, 26144.0], [47.0, 26629.0], [47.1, 26629.0], [47.2, 26629.0], [47.3, 26642.0], [47.4, 26642.0], [47.5, 26642.0], [47.6, 26851.0], [47.7, 26851.0], [47.8, 26851.0], [47.9, 26896.0], [48.0, 26896.0], [48.1, 26896.0], [48.2, 26896.0], [48.3, 27068.0], [48.4, 27068.0], [48.5, 27068.0], [48.6, 27249.0], [48.7, 27249.0], [48.8, 27249.0], [48.9, 27307.0], [49.0, 27307.0], [49.1, 27307.0], [49.2, 27528.0], [49.3, 27528.0], [49.4, 27528.0], [49.5, 27528.0], [49.6, 27700.0], [49.7, 27700.0], [49.8, 27700.0], [49.9, 27890.0], [50.0, 27890.0], [50.1, 27890.0], [50.2, 27998.0], [50.3, 27998.0], [50.4, 27998.0], [50.5, 28218.0], [50.6, 28218.0], [50.7, 28218.0], [50.8, 28218.0], [50.9, 28237.0], [51.0, 28237.0], [51.1, 28237.0], [51.2, 28335.0], [51.3, 28335.0], [51.4, 28335.0], [51.5, 28336.0], [51.6, 28336.0], [51.7, 28336.0], [51.8, 28346.0], [51.9, 28346.0], [52.0, 28346.0], [52.1, 28346.0], [52.2, 28482.0], [52.3, 28482.0], [52.4, 28482.0], [52.5, 28549.0], [52.6, 28549.0], [52.7, 28549.0], [52.8, 28673.0], [52.9, 28673.0], [53.0, 28673.0], [53.1, 28708.0], [53.2, 28708.0], [53.3, 28708.0], [53.4, 28760.0], [53.5, 28760.0], [53.6, 28760.0], [53.7, 28760.0], [53.8, 28761.0], [53.9, 28761.0], [54.0, 28761.0], [54.1, 28853.0], [54.2, 28853.0], [54.3, 28853.0], [54.4, 28959.0], [54.5, 28959.0], [54.6, 28959.0], [54.7, 29245.0], [54.8, 29245.0], [54.9, 29245.0], [55.0, 29245.0], [55.1, 29428.0], [55.2, 29428.0], [55.3, 29428.0], [55.4, 29431.0], [55.5, 29431.0], [55.6, 29431.0], [55.7, 29463.0], [55.8, 29463.0], [55.9, 29463.0], [56.0, 29529.0], [56.1, 29529.0], [56.2, 29529.0], [56.3, 29529.0], [56.4, 29537.0], [56.5, 29537.0], [56.6, 29537.0], [56.7, 29780.0], [56.8, 29780.0], [56.9, 29780.0], [57.0, 29796.0], [57.1, 29796.0], [57.2, 29796.0], [57.3, 29871.0], [57.4, 29871.0], [57.5, 29871.0], [57.6, 29871.0], [57.7, 29901.0], [57.8, 29901.0], [57.9, 29901.0], [58.0, 29942.0], [58.1, 29942.0], [58.2, 29942.0], [58.3, 30099.0], [58.4, 30099.0], [58.5, 30099.0], [58.6, 30317.0], [58.7, 30317.0], [58.8, 30317.0], [58.9, 30346.0], [59.0, 30346.0], [59.1, 30346.0], [59.2, 30346.0], [59.3, 30347.0], [59.4, 30347.0], [59.5, 30347.0], [59.6, 30482.0], [59.7, 30482.0], [59.8, 30482.0], [59.9, 30496.0], [60.0, 30496.0], [60.1, 30496.0], [60.2, 30522.0], [60.3, 30522.0], [60.4, 30522.0], [60.5, 30522.0], [60.6, 30688.0], [60.7, 30688.0], [60.8, 30688.0], [60.9, 30699.0], [61.0, 30699.0], [61.1, 30699.0], [61.2, 30753.0], [61.3, 30753.0], [61.4, 30753.0], [61.5, 30991.0], [61.6, 30991.0], [61.7, 30991.0], [61.8, 30991.0], [61.9, 31192.0], [62.0, 31192.0], [62.1, 31192.0], [62.2, 31202.0], [62.3, 31202.0], [62.4, 31202.0], [62.5, 31271.0], [62.6, 31271.0], [62.7, 31271.0], [62.8, 31355.0], [62.9, 31355.0], [63.0, 31355.0], [63.1, 31355.0], [63.2, 31544.0], [63.3, 31544.0], [63.4, 31544.0], [63.5, 31734.0], [63.6, 31734.0], [63.7, 31734.0], [63.8, 31744.0], [63.9, 31744.0], [64.0, 31744.0], [64.1, 31811.0], [64.2, 31811.0], [64.3, 31811.0], [64.4, 31811.0], [64.5, 32019.0], [64.6, 32019.0], [64.7, 32019.0], [64.8, 32071.0], [64.9, 32071.0], [65.0, 32071.0], [65.1, 32125.0], [65.2, 32125.0], [65.3, 32125.0], [65.4, 32370.0], [65.5, 32370.0], [65.6, 32370.0], [65.7, 32427.0], [65.8, 32427.0], [65.9, 32427.0], [66.0, 32427.0], [66.1, 32550.0], [66.2, 32550.0], [66.3, 32550.0], [66.4, 32617.0], [66.5, 32617.0], [66.6, 32617.0], [66.7, 32764.0], [66.8, 32764.0], [66.9, 32764.0], [67.0, 32887.0], [67.1, 32887.0], [67.2, 32887.0], [67.3, 32887.0], [67.4, 32905.0], [67.5, 32905.0], [67.6, 32905.0], [67.7, 32992.0], [67.8, 32992.0], [67.9, 32992.0], [68.0, 33030.0], [68.1, 33030.0], [68.2, 33030.0], [68.3, 33109.0], [68.4, 33109.0], [68.5, 33109.0], [68.6, 33109.0], [68.7, 33114.0], [68.8, 33114.0], [68.9, 33114.0], [69.0, 33151.0], [69.1, 33151.0], [69.2, 33151.0], [69.3, 33267.0], [69.4, 33267.0], [69.5, 33267.0], [69.6, 33279.0], [69.7, 33279.0], [69.8, 33279.0], [69.9, 33279.0], [70.0, 33375.0], [70.1, 33375.0], [70.2, 33375.0], [70.3, 33416.0], [70.4, 33416.0], [70.5, 33416.0], [70.6, 33458.0], [70.7, 33458.0], [70.8, 33458.0], [70.9, 33477.0], [71.0, 33477.0], [71.1, 33477.0], [71.2, 33486.0], [71.3, 33486.0], [71.4, 33486.0], [71.5, 33486.0], [71.6, 33487.0], [71.7, 33487.0], [71.8, 33487.0], [71.9, 33501.0], [72.0, 33501.0], [72.1, 33501.0], [72.2, 33522.0], [72.3, 33522.0], [72.4, 33522.0], [72.5, 33540.0], [72.6, 33540.0], [72.7, 33540.0], [72.8, 33540.0], [72.9, 33577.0], [73.0, 33577.0], [73.1, 33577.0], [73.2, 33661.0], [73.3, 33661.0], [73.4, 33661.0], [73.5, 33689.0], [73.6, 33689.0], [73.7, 33689.0], [73.8, 33780.0], [73.9, 33780.0], [74.0, 33780.0], [74.1, 33780.0], [74.2, 33807.0], [74.3, 33807.0], [74.4, 33807.0], [74.5, 34135.0], [74.6, 34135.0], [74.7, 34135.0], [74.8, 34140.0], [74.9, 34140.0], [75.0, 34140.0], [75.1, 34227.0], [75.2, 34227.0], [75.3, 34227.0], [75.4, 34227.0], [75.5, 34694.0], [75.6, 34694.0], [75.7, 34694.0], [75.8, 34728.0], [75.9, 34728.0], [76.0, 34728.0], [76.1, 34741.0], [76.2, 34741.0], [76.3, 34741.0], [76.4, 34774.0], [76.5, 34774.0], [76.6, 34774.0], [76.7, 35034.0], [76.8, 35034.0], [76.9, 35034.0], [77.0, 35034.0], [77.1, 35080.0], [77.2, 35080.0], [77.3, 35080.0], [77.4, 35199.0], [77.5, 35199.0], [77.6, 35199.0], [77.7, 35359.0], [77.8, 35359.0], [77.9, 35359.0], [78.0, 35363.0], [78.1, 35363.0], [78.2, 35363.0], [78.3, 35363.0], [78.4, 35391.0], [78.5, 35391.0], [78.6, 35391.0], [78.7, 35530.0], [78.8, 35530.0], [78.9, 35530.0], [79.0, 35662.0], [79.1, 35662.0], [79.2, 35662.0], [79.3, 35777.0], [79.4, 35777.0], [79.5, 35777.0], [79.6, 35777.0], [79.7, 36015.0], [79.8, 36015.0], [79.9, 36015.0], [80.0, 36299.0], [80.1, 36299.0], [80.2, 36299.0], [80.3, 36369.0], [80.4, 36369.0], [80.5, 36369.0], [80.6, 36405.0], [80.7, 36405.0], [80.8, 36405.0], [80.9, 36405.0], [81.0, 36470.0], [81.1, 36470.0], [81.2, 36470.0], [81.3, 36475.0], [81.4, 36475.0], [81.5, 36475.0], [81.6, 36712.0], [81.7, 36712.0], [81.8, 36712.0], [81.9, 36750.0], [82.0, 36750.0], [82.1, 36750.0], [82.2, 36750.0], [82.3, 36954.0], [82.4, 36954.0], [82.5, 36954.0], [82.6, 36962.0], [82.7, 36962.0], [82.8, 36962.0], [82.9, 36993.0], [83.0, 36993.0], [83.1, 36993.0], [83.2, 37228.0], [83.3, 37228.0], [83.4, 37228.0], [83.5, 37229.0], [83.6, 37229.0], [83.7, 37229.0], [83.8, 37229.0], [83.9, 37327.0], [84.0, 37327.0], [84.1, 37327.0], [84.2, 37375.0], [84.3, 37375.0], [84.4, 37375.0], [84.5, 37455.0], [84.6, 37455.0], [84.7, 37455.0], [84.8, 37477.0], [84.9, 37477.0], [85.0, 37477.0], [85.1, 37477.0], [85.2, 37504.0], [85.3, 37504.0], [85.4, 37504.0], [85.5, 37510.0], [85.6, 37510.0], [85.7, 37510.0], [85.8, 37663.0], [85.9, 37663.0], [86.0, 37663.0], [86.1, 37723.0], [86.2, 37723.0], [86.3, 37723.0], [86.4, 37723.0], [86.5, 37728.0], [86.6, 37728.0], [86.7, 37728.0], [86.8, 37805.0], [86.9, 37805.0], [87.0, 37805.0], [87.1, 37812.0], [87.2, 37812.0], [87.3, 37812.0], [87.4, 37883.0], [87.5, 37883.0], [87.6, 37883.0], [87.7, 37883.0], [87.8, 37901.0], [87.9, 37901.0], [88.0, 37901.0], [88.1, 37914.0], [88.2, 37914.0], [88.3, 37914.0], [88.4, 37936.0], [88.5, 37936.0], [88.6, 37936.0], [88.7, 37983.0], [88.8, 37983.0], [88.9, 37983.0], [89.0, 38293.0], [89.1, 38293.0], [89.2, 38293.0], [89.3, 38293.0], [89.4, 38428.0], [89.5, 38428.0], [89.6, 38428.0], [89.7, 38805.0], [89.8, 38805.0], [89.9, 38805.0], [90.0, 39127.0], [90.1, 39127.0], [90.2, 39127.0], [90.3, 39294.0], [90.4, 39294.0], [90.5, 39294.0], [90.6, 39294.0], [90.7, 39411.0], [90.8, 39411.0], [90.9, 39411.0], [91.0, 39535.0], [91.1, 39535.0], [91.2, 39535.0], [91.3, 39648.0], [91.4, 39648.0], [91.5, 39648.0], [91.6, 39660.0], [91.7, 39660.0], [91.8, 39660.0], [91.9, 39660.0], [92.0, 39709.0], [92.1, 39709.0], [92.2, 39709.0], [92.3, 39720.0], [92.4, 39720.0], [92.5, 39720.0], [92.6, 40286.0], [92.7, 40286.0], [92.8, 40286.0], [92.9, 40580.0], [93.0, 40580.0], [93.1, 40580.0], [93.2, 40580.0], [93.3, 40765.0], [93.4, 40765.0], [93.5, 40765.0], [93.6, 40819.0], [93.7, 40819.0], [93.8, 40819.0], [93.9, 40820.0], [94.0, 40820.0], [94.1, 40820.0], [94.2, 40953.0], [94.3, 40953.0], [94.4, 40953.0], [94.5, 40967.0], [94.6, 40967.0], [94.7, 40967.0], [94.8, 40967.0], [94.9, 41000.0], [95.0, 41000.0], [95.1, 41000.0], [95.2, 41121.0], [95.3, 41121.0], [95.4, 41121.0], [95.5, 41184.0], [95.6, 41184.0], [95.7, 41184.0], [95.8, 41195.0], [95.9, 41195.0], [96.0, 41195.0], [96.1, 41195.0], [96.2, 41253.0], [96.3, 41253.0], [96.4, 41253.0], [96.5, 41317.0], [96.6, 41317.0], [96.7, 41317.0], [96.8, 41334.0], [96.9, 41334.0], [97.0, 41334.0], [97.1, 41953.0], [97.2, 41953.0], [97.3, 41953.0], [97.4, 41953.0], [97.5, 41998.0], [97.6, 41998.0], [97.7, 41998.0], [97.8, 42067.0], [97.9, 42067.0], [98.0, 42067.0], [98.1, 42344.0], [98.2, 42344.0], [98.3, 42344.0], [98.4, 42960.0], [98.5, 42960.0], [98.6, 42960.0], [98.7, 42960.0], [98.8, 43006.0], [98.9, 43006.0], [99.0, 43006.0], [99.1, 43078.0], [99.2, 43078.0], [99.3, 43078.0], [99.4, 43644.0], [99.5, 43644.0], [99.6, 43644.0], [99.7, 44089.0], [99.8, 44089.0], [99.9, 44089.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[0.0, 6.0], [0.1, 6.0], [0.2, 6.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 12.0], [3.4, 12.0], [3.5, 12.0], [3.6, 12.0], [3.7, 12.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 13.0], [4.3, 13.0], [4.4, 13.0], [4.5, 14.0], [4.6, 14.0], [4.7, 14.0], [4.8, 14.0], [4.9, 14.0], [5.0, 14.0], [5.1, 17.0], [5.2, 17.0], [5.3, 17.0], [5.4, 17.0], [5.5, 17.0], [5.6, 17.0], [5.7, 18.0], [5.8, 18.0], [5.9, 19.0], [6.0, 19.0], [6.1, 19.0], [6.2, 24.0], [6.3, 24.0], [6.4, 24.0], [6.5, 27.0], [6.6, 27.0], [6.7, 27.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 40.0], [7.5, 40.0], [7.6, 40.0], [7.7, 41.0], [7.8, 41.0], [7.9, 41.0], [8.0, 42.0], [8.1, 42.0], [8.2, 42.0], [8.3, 47.0], [8.4, 47.0], [8.5, 47.0], [8.6, 67.0], [8.7, 67.0], [8.8, 67.0], [8.9, 80.0], [9.0, 80.0], [9.1, 80.0], [9.2, 82.0], [9.3, 82.0], [9.4, 82.0], [9.5, 90.0], [9.6, 90.0], [9.7, 90.0], [9.8, 92.0], [9.9, 92.0], [10.0, 92.0], [10.1, 118.0], [10.2, 118.0], [10.3, 118.0], [10.4, 118.0], [10.5, 118.0], [10.6, 118.0], [10.7, 126.0], [10.8, 126.0], [10.9, 126.0], [11.0, 148.0], [11.1, 148.0], [11.2, 148.0], [11.3, 155.0], [11.4, 155.0], [11.5, 155.0], [11.6, 174.0], [11.7, 174.0], [11.8, 175.0], [11.9, 175.0], [12.0, 175.0], [12.1, 177.0], [12.2, 177.0], [12.3, 177.0], [12.4, 182.0], [12.5, 182.0], [12.6, 182.0], [12.7, 184.0], [12.8, 184.0], [12.9, 184.0], [13.0, 187.0], [13.1, 187.0], [13.2, 187.0], [13.3, 206.0], [13.4, 206.0], [13.5, 206.0], [13.6, 219.0], [13.7, 219.0], [13.8, 219.0], [13.9, 222.0], [14.0, 222.0], [14.1, 222.0], [14.2, 223.0], [14.3, 223.0], [14.4, 223.0], [14.5, 227.0], [14.6, 227.0], [14.7, 227.0], [14.8, 235.0], [14.9, 235.0], [15.0, 235.0], [15.1, 243.0], [15.2, 243.0], [15.3, 243.0], [15.4, 269.0], [15.5, 269.0], [15.6, 269.0], [15.7, 297.0], [15.8, 297.0], [15.9, 297.0], [16.0, 309.0], [16.1, 309.0], [16.2, 309.0], [16.3, 320.0], [16.4, 320.0], [16.5, 320.0], [16.6, 320.0], [16.7, 320.0], [16.8, 320.0], [16.9, 331.0], [17.0, 331.0], [17.1, 331.0], [17.2, 332.0], [17.3, 332.0], [17.4, 332.0], [17.5, 336.0], [17.6, 336.0], [17.7, 337.0], [17.8, 337.0], [17.9, 337.0], [18.0, 348.0], [18.1, 348.0], [18.2, 348.0], [18.3, 351.0], [18.4, 351.0], [18.5, 351.0], [18.6, 367.0], [18.7, 367.0], [18.8, 367.0], [18.9, 382.0], [19.0, 382.0], [19.1, 382.0], [19.2, 390.0], [19.3, 390.0], [19.4, 390.0], [19.5, 393.0], [19.6, 393.0], [19.7, 393.0], [19.8, 393.0], [19.9, 393.0], [20.0, 393.0], [20.1, 424.0], [20.2, 424.0], [20.3, 424.0], [20.4, 425.0], [20.5, 425.0], [20.6, 425.0], [20.7, 428.0], [20.8, 428.0], [20.9, 428.0], [21.0, 448.0], [21.1, 448.0], [21.2, 448.0], [21.3, 461.0], [21.4, 461.0], [21.5, 461.0], [21.6, 466.0], [21.7, 466.0], [21.8, 466.0], [21.9, 476.0], [22.0, 476.0], [22.1, 476.0], [22.2, 488.0], [22.3, 488.0], [22.4, 488.0], [22.5, 552.0], [22.6, 552.0], [22.7, 552.0], [22.8, 557.0], [22.9, 557.0], [23.0, 557.0], [23.1, 562.0], [23.2, 562.0], [23.3, 562.0], [23.4, 584.0], [23.5, 584.0], [23.6, 631.0], [23.7, 631.0], [23.8, 631.0], [23.9, 664.0], [24.0, 664.0], [24.1, 664.0], [24.2, 664.0], [24.3, 664.0], [24.4, 664.0], [24.5, 674.0], [24.6, 674.0], [24.7, 674.0], [24.8, 713.0], [24.9, 713.0], [25.0, 713.0], [25.1, 722.0], [25.2, 722.0], [25.3, 722.0], [25.4, 722.0], [25.5, 722.0], [25.6, 722.0], [25.7, 738.0], [25.8, 738.0], [25.9, 738.0], [26.0, 739.0], [26.1, 739.0], [26.2, 739.0], [26.3, 802.0], [26.4, 802.0], [26.5, 802.0], [26.6, 831.0], [26.7, 831.0], [26.8, 831.0], [26.9, 833.0], [27.0, 833.0], [27.1, 833.0], [27.2, 838.0], [27.3, 838.0], [27.4, 838.0], [27.5, 933.0], [27.6, 933.0], [27.7, 933.0], [27.8, 952.0], [27.9, 952.0], [28.0, 952.0], [28.1, 958.0], [28.2, 958.0], [28.3, 958.0], [28.4, 1099.0], [28.5, 1099.0], [28.6, 1099.0], [28.7, 1145.0], [28.8, 1145.0], [28.9, 1145.0], [29.0, 1686.0], [29.1, 1686.0], [29.2, 1686.0], [29.3, 13416.0], [29.4, 13416.0], [29.5, 14475.0], [29.6, 14475.0], [29.7, 14475.0], [29.8, 15476.0], [29.9, 15476.0], [30.0, 15476.0], [30.1, 15502.0], [30.2, 15502.0], [30.3, 15502.0], [30.4, 15631.0], [30.5, 15631.0], [30.6, 15631.0], [30.7, 15861.0], [30.8, 15861.0], [30.9, 15861.0], [31.0, 17411.0], [31.1, 17411.0], [31.2, 17411.0], [31.3, 18407.0], [31.4, 18407.0], [31.5, 18407.0], [31.6, 18879.0], [31.7, 18879.0], [31.8, 18879.0], [31.9, 19074.0], [32.0, 19074.0], [32.1, 19074.0], [32.2, 19312.0], [32.3, 19312.0], [32.4, 19312.0], [32.5, 19319.0], [32.6, 19319.0], [32.7, 19319.0], [32.8, 19330.0], [32.9, 19330.0], [33.0, 19330.0], [33.1, 19496.0], [33.2, 19496.0], [33.3, 19496.0], [33.4, 20320.0], [33.5, 20320.0], [33.6, 20320.0], [33.7, 20370.0], [33.8, 20370.0], [33.9, 20370.0], [34.0, 20377.0], [34.1, 20377.0], [34.2, 20377.0], [34.3, 20845.0], [34.4, 20845.0], [34.5, 20845.0], [34.6, 20913.0], [34.7, 20913.0], [34.8, 20913.0], [34.9, 21075.0], [35.0, 21075.0], [35.1, 21075.0], [35.2, 21386.0], [35.3, 21386.0], [35.4, 22616.0], [35.5, 22616.0], [35.6, 22616.0], [35.7, 22710.0], [35.8, 22710.0], [35.9, 22710.0], [36.0, 22912.0], [36.1, 22912.0], [36.2, 22912.0], [36.3, 23229.0], [36.4, 23229.0], [36.5, 23229.0], [36.6, 23411.0], [36.7, 23411.0], [36.8, 23411.0], [36.9, 23703.0], [37.0, 23703.0], [37.1, 23703.0], [37.2, 24055.0], [37.3, 24055.0], [37.4, 24055.0], [37.5, 24101.0], [37.6, 24101.0], [37.7, 24101.0], [37.8, 24201.0], [37.9, 24201.0], [38.0, 24201.0], [38.1, 24313.0], [38.2, 24313.0], [38.3, 24313.0], [38.4, 24565.0], [38.5, 24565.0], [38.6, 24565.0], [38.7, 24568.0], [38.8, 24568.0], [38.9, 24568.0], [39.0, 24631.0], [39.1, 24631.0], [39.2, 24631.0], [39.3, 24666.0], [39.4, 24666.0], [39.5, 24666.0], [39.6, 24854.0], [39.7, 24854.0], [39.8, 24854.0], [39.9, 24963.0], [40.0, 24963.0], [40.1, 24963.0], [40.2, 25251.0], [40.3, 25251.0], [40.4, 25251.0], [40.5, 25381.0], [40.6, 25381.0], [40.7, 25381.0], [40.8, 25456.0], [40.9, 25456.0], [41.0, 25456.0], [41.1, 25598.0], [41.2, 25598.0], [41.3, 26044.0], [41.4, 26044.0], [41.5, 26044.0], [41.6, 26106.0], [41.7, 26106.0], [41.8, 26106.0], [41.9, 26359.0], [42.0, 26359.0], [42.1, 26359.0], [42.2, 26391.0], [42.3, 26391.0], [42.4, 26391.0], [42.5, 26407.0], [42.6, 26407.0], [42.7, 26407.0], [42.8, 26417.0], [42.9, 26417.0], [43.0, 26417.0], [43.1, 26486.0], [43.2, 26486.0], [43.3, 26486.0], [43.4, 26521.0], [43.5, 26521.0], [43.6, 26521.0], [43.7, 26653.0], [43.8, 26653.0], [43.9, 26653.0], [44.0, 26808.0], [44.1, 26808.0], [44.2, 26808.0], [44.3, 26826.0], [44.4, 26826.0], [44.5, 26826.0], [44.6, 27220.0], [44.7, 27220.0], [44.8, 27220.0], [44.9, 27324.0], [45.0, 27324.0], [45.1, 27324.0], [45.2, 27610.0], [45.3, 27610.0], [45.4, 27610.0], [45.5, 27815.0], [45.6, 27815.0], [45.7, 27815.0], [45.8, 27888.0], [45.9, 27888.0], [46.0, 27888.0], [46.1, 27940.0], [46.2, 27940.0], [46.3, 27940.0], [46.4, 28057.0], [46.5, 28057.0], [46.6, 28057.0], [46.7, 28095.0], [46.8, 28095.0], [46.9, 28095.0], [47.0, 28134.0], [47.1, 28134.0], [47.2, 28209.0], [47.3, 28209.0], [47.4, 28209.0], [47.5, 28381.0], [47.6, 28381.0], [47.7, 28381.0], [47.8, 28499.0], [47.9, 28499.0], [48.0, 28499.0], [48.1, 28601.0], [48.2, 28601.0], [48.3, 28601.0], [48.4, 28645.0], [48.5, 28645.0], [48.6, 28645.0], [48.7, 28669.0], [48.8, 28669.0], [48.9, 28669.0], [49.0, 28677.0], [49.1, 28677.0], [49.2, 28677.0], [49.3, 28839.0], [49.4, 28839.0], [49.5, 28839.0], [49.6, 28947.0], [49.7, 28947.0], [49.8, 28947.0], [49.9, 28987.0], [50.0, 28987.0], [50.1, 28987.0], [50.2, 29035.0], [50.3, 29035.0], [50.4, 29035.0], [50.5, 29376.0], [50.6, 29376.0], [50.7, 29376.0], [50.8, 29652.0], [50.9, 29652.0], [51.0, 29652.0], [51.1, 29846.0], [51.2, 29846.0], [51.3, 29846.0], [51.4, 29871.0], [51.5, 29871.0], [51.6, 29871.0], [51.7, 30089.0], [51.8, 30089.0], [51.9, 30089.0], [52.0, 30145.0], [52.1, 30145.0], [52.2, 30145.0], [52.3, 30157.0], [52.4, 30157.0], [52.5, 30157.0], [52.6, 30298.0], [52.7, 30298.0], [52.8, 30298.0], [52.9, 30461.0], [53.0, 30461.0], [53.1, 30472.0], [53.2, 30472.0], [53.3, 30472.0], [53.4, 30678.0], [53.5, 30678.0], [53.6, 30678.0], [53.7, 30724.0], [53.8, 30724.0], [53.9, 30724.0], [54.0, 30761.0], [54.1, 30761.0], [54.2, 30761.0], [54.3, 30809.0], [54.4, 30809.0], [54.5, 30809.0], [54.6, 30872.0], [54.7, 30872.0], [54.8, 30872.0], [54.9, 30951.0], [55.0, 30951.0], [55.1, 30951.0], [55.2, 30991.0], [55.3, 30991.0], [55.4, 30991.0], [55.5, 31063.0], [55.6, 31063.0], [55.7, 31063.0], [55.8, 31068.0], [55.9, 31068.0], [56.0, 31068.0], [56.1, 31213.0], [56.2, 31213.0], [56.3, 31213.0], [56.4, 31217.0], [56.5, 31217.0], [56.6, 31217.0], [56.7, 31257.0], [56.8, 31257.0], [56.9, 31257.0], [57.0, 31271.0], [57.1, 31271.0], [57.2, 31271.0], [57.3, 31305.0], [57.4, 31305.0], [57.5, 31305.0], [57.6, 31367.0], [57.7, 31367.0], [57.8, 31367.0], [57.9, 31487.0], [58.0, 31487.0], [58.1, 31487.0], [58.2, 31495.0], [58.3, 31495.0], [58.4, 31495.0], [58.5, 31528.0], [58.6, 31528.0], [58.7, 31528.0], [58.8, 31968.0], [58.9, 31968.0], [59.0, 31995.0], [59.1, 31995.0], [59.2, 31995.0], [59.3, 32048.0], [59.4, 32048.0], [59.5, 32048.0], [59.6, 32054.0], [59.7, 32054.0], [59.8, 32054.0], [59.9, 32088.0], [60.0, 32088.0], [60.1, 32088.0], [60.2, 32153.0], [60.3, 32153.0], [60.4, 32153.0], [60.5, 32183.0], [60.6, 32183.0], [60.7, 32183.0], [60.8, 32190.0], [60.9, 32190.0], [61.0, 32190.0], [61.1, 32219.0], [61.2, 32219.0], [61.3, 32219.0], [61.4, 32326.0], [61.5, 32326.0], [61.6, 32326.0], [61.7, 32461.0], [61.8, 32461.0], [61.9, 32461.0], [62.0, 32470.0], [62.1, 32470.0], [62.2, 32470.0], [62.3, 32489.0], [62.4, 32489.0], [62.5, 32489.0], [62.6, 32577.0], [62.7, 32577.0], [62.8, 32577.0], [62.9, 32585.0], [63.0, 32585.0], [63.1, 32585.0], [63.2, 32595.0], [63.3, 32595.0], [63.4, 32595.0], [63.5, 32607.0], [63.6, 32607.0], [63.7, 32607.0], [63.8, 32708.0], [63.9, 32708.0], [64.0, 32708.0], [64.1, 32729.0], [64.2, 32729.0], [64.3, 32729.0], [64.4, 32950.0], [64.5, 32950.0], [64.6, 32950.0], [64.7, 32979.0], [64.8, 32979.0], [64.9, 33059.0], [65.0, 33059.0], [65.1, 33059.0], [65.2, 33147.0], [65.3, 33147.0], [65.4, 33147.0], [65.5, 33219.0], [65.6, 33219.0], [65.7, 33219.0], [65.8, 33248.0], [65.9, 33248.0], [66.0, 33248.0], [66.1, 33258.0], [66.2, 33258.0], [66.3, 33258.0], [66.4, 33271.0], [66.5, 33271.0], [66.6, 33271.0], [66.7, 33280.0], [66.8, 33280.0], [66.9, 33280.0], [67.0, 33340.0], [67.1, 33340.0], [67.2, 33340.0], [67.3, 33387.0], [67.4, 33387.0], [67.5, 33387.0], [67.6, 33404.0], [67.7, 33404.0], [67.8, 33404.0], [67.9, 33467.0], [68.0, 33467.0], [68.1, 33467.0], [68.2, 33478.0], [68.3, 33478.0], [68.4, 33478.0], [68.5, 33504.0], [68.6, 33504.0], [68.7, 33504.0], [68.8, 33605.0], [68.9, 33605.0], [69.0, 33605.0], [69.1, 33640.0], [69.2, 33640.0], [69.3, 33640.0], [69.4, 33652.0], [69.5, 33652.0], [69.6, 33652.0], [69.7, 33704.0], [69.8, 33704.0], [69.9, 33704.0], [70.0, 33726.0], [70.1, 33726.0], [70.2, 33726.0], [70.3, 33829.0], [70.4, 33829.0], [70.5, 33829.0], [70.6, 33859.0], [70.7, 33859.0], [70.8, 33865.0], [70.9, 33865.0], [71.0, 33865.0], [71.1, 33898.0], [71.2, 33898.0], [71.3, 33898.0], [71.4, 33921.0], [71.5, 33921.0], [71.6, 33921.0], [71.7, 34042.0], [71.8, 34042.0], [71.9, 34042.0], [72.0, 34136.0], [72.1, 34136.0], [72.2, 34136.0], [72.3, 34144.0], [72.4, 34144.0], [72.5, 34144.0], [72.6, 34199.0], [72.7, 34199.0], [72.8, 34199.0], [72.9, 34232.0], [73.0, 34232.0], [73.1, 34232.0], [73.2, 34528.0], [73.3, 34528.0], [73.4, 34528.0], [73.5, 34636.0], [73.6, 34636.0], [73.7, 34636.0], [73.8, 34706.0], [73.9, 34706.0], [74.0, 34706.0], [74.1, 34718.0], [74.2, 34718.0], [74.3, 34718.0], [74.4, 34842.0], [74.5, 34842.0], [74.6, 34842.0], [74.7, 34866.0], [74.8, 34866.0], [74.9, 34866.0], [75.0, 34879.0], [75.1, 34879.0], [75.2, 34879.0], [75.3, 35006.0], [75.4, 35006.0], [75.5, 35006.0], [75.6, 35096.0], [75.7, 35096.0], [75.8, 35096.0], [75.9, 35264.0], [76.0, 35264.0], [76.1, 35264.0], [76.2, 35279.0], [76.3, 35279.0], [76.4, 35279.0], [76.5, 35354.0], [76.6, 35354.0], [76.7, 35456.0], [76.8, 35456.0], [76.9, 35456.0], [77.0, 35587.0], [77.1, 35587.0], [77.2, 35587.0], [77.3, 35590.0], [77.4, 35590.0], [77.5, 35590.0], [77.6, 35698.0], [77.7, 35698.0], [77.8, 35698.0], [77.9, 35814.0], [78.0, 35814.0], [78.1, 35814.0], [78.2, 36048.0], [78.3, 36048.0], [78.4, 36048.0], [78.5, 36322.0], [78.6, 36322.0], [78.7, 36322.0], [78.8, 36504.0], [78.9, 36504.0], [79.0, 36504.0], [79.1, 36538.0], [79.2, 36538.0], [79.3, 36538.0], [79.4, 36552.0], [79.5, 36552.0], [79.6, 36552.0], [79.7, 36589.0], [79.8, 36589.0], [79.9, 36589.0], [80.0, 36650.0], [80.1, 36650.0], [80.2, 36650.0], [80.3, 36709.0], [80.4, 36709.0], [80.5, 36709.0], [80.6, 36799.0], [80.7, 36799.0], [80.8, 36799.0], [80.9, 37006.0], [81.0, 37006.0], [81.1, 37006.0], [81.2, 37310.0], [81.3, 37310.0], [81.4, 37310.0], [81.5, 37368.0], [81.6, 37368.0], [81.7, 37368.0], [81.8, 37497.0], [81.9, 37497.0], [82.0, 37497.0], [82.1, 37579.0], [82.2, 37579.0], [82.3, 37579.0], [82.4, 37743.0], [82.5, 37743.0], [82.6, 37814.0], [82.7, 37814.0], [82.8, 37814.0], [82.9, 37861.0], [83.0, 37861.0], [83.1, 37861.0], [83.2, 38129.0], [83.3, 38129.0], [83.4, 38129.0], [83.5, 38267.0], [83.6, 38267.0], [83.7, 38267.0], [83.8, 38343.0], [83.9, 38343.0], [84.0, 38343.0], [84.1, 38362.0], [84.2, 38362.0], [84.3, 38362.0], [84.4, 38443.0], [84.5, 38443.0], [84.6, 38443.0], [84.7, 38477.0], [84.8, 38477.0], [84.9, 38477.0], [85.0, 38488.0], [85.1, 38488.0], [85.2, 38488.0], [85.3, 38548.0], [85.4, 38548.0], [85.5, 38548.0], [85.6, 38742.0], [85.7, 38742.0], [85.8, 38742.0], [85.9, 38786.0], [86.0, 38786.0], [86.1, 38786.0], [86.2, 38812.0], [86.3, 38812.0], [86.4, 38812.0], [86.5, 38824.0], [86.6, 38824.0], [86.7, 38824.0], [86.8, 38917.0], [86.9, 38917.0], [87.0, 38917.0], [87.1, 39484.0], [87.2, 39484.0], [87.3, 39484.0], [87.4, 39648.0], [87.5, 39648.0], [87.6, 39648.0], [87.7, 39708.0], [87.8, 39708.0], [87.9, 39708.0], [88.0, 39725.0], [88.1, 39725.0], [88.2, 39725.0], [88.3, 39865.0], [88.4, 39865.0], [88.5, 40046.0], [88.6, 40046.0], [88.7, 40046.0], [88.8, 40126.0], [88.9, 40126.0], [89.0, 40126.0], [89.1, 40196.0], [89.2, 40196.0], [89.3, 40196.0], [89.4, 40211.0], [89.5, 40211.0], [89.6, 40211.0], [89.7, 40448.0], [89.8, 40448.0], [89.9, 40448.0], [90.0, 40620.0], [90.1, 40620.0], [90.2, 40620.0], [90.3, 40642.0], [90.4, 40642.0], [90.5, 40642.0], [90.6, 40747.0], [90.7, 40747.0], [90.8, 40747.0], [90.9, 40803.0], [91.0, 40803.0], [91.1, 40803.0], [91.2, 40947.0], [91.3, 40947.0], [91.4, 40947.0], [91.5, 41480.0], [91.6, 41480.0], [91.7, 41480.0], [91.8, 41489.0], [91.9, 41489.0], [92.0, 41489.0], [92.1, 41546.0], [92.2, 41546.0], [92.3, 41546.0], [92.4, 41580.0], [92.5, 41580.0], [92.6, 41580.0], [92.7, 41841.0], [92.8, 41841.0], [92.9, 41841.0], [93.0, 42016.0], [93.1, 42016.0], [93.2, 42016.0], [93.3, 42256.0], [93.4, 42256.0], [93.5, 42256.0], [93.6, 42293.0], [93.7, 42293.0], [93.8, 42293.0], [93.9, 42363.0], [94.0, 42363.0], [94.1, 42363.0], [94.2, 42474.0], [94.3, 42474.0], [94.4, 42571.0], [94.5, 42571.0], [94.6, 42571.0], [94.7, 42623.0], [94.8, 42623.0], [94.9, 42623.0], [95.0, 43111.0], [95.1, 43111.0], [95.2, 43111.0], [95.3, 43132.0], [95.4, 43132.0], [95.5, 43132.0], [95.6, 43161.0], [95.7, 43161.0], [95.8, 43161.0], [95.9, 43215.0], [96.0, 43215.0], [96.1, 43215.0], [96.2, 43278.0], [96.3, 43278.0], [96.4, 43278.0], [96.5, 43329.0], [96.6, 43329.0], [96.7, 43329.0], [96.8, 43336.0], [96.9, 43336.0], [97.0, 43336.0], [97.1, 43373.0], [97.2, 43373.0], [97.3, 43373.0], [97.4, 43409.0], [97.5, 43409.0], [97.6, 43409.0], [97.7, 43441.0], [97.8, 43441.0], [97.9, 43441.0], [98.0, 43499.0], [98.1, 43499.0], [98.2, 43499.0], [98.3, 43603.0], [98.4, 43603.0], [98.5, 43603.0], [98.6, 43668.0], [98.7, 43668.0], [98.8, 43668.0], [98.9, 43695.0], [99.0, 43695.0], [99.1, 43695.0], [99.2, 43712.0], [99.3, 43712.0], [99.4, 43712.0], [99.5, 43731.0], [99.6, 43731.0], [99.7, 43731.0], [99.8, 43998.0], [99.9, 43998.0], [100.0, 43998.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 34.0, "series": [{"data": [[0.0, 12.0], [65900.0, 1.0], [69900.0, 1.0], [73900.0, 2.0], [76300.0, 1.0], [100.0, 2.0], [33700.0, 2.0], [34100.0, 1.0], [32900.0, 1.0], [38100.0, 1.0], [40500.0, 1.0], [46500.0, 1.0], [50500.0, 1.0], [54900.0, 1.0], [53300.0, 1.0], [57300.0, 2.0], [55700.0, 2.0], [56500.0, 1.0], [59300.0, 1.0], [60900.0, 2.0], [61300.0, 1.0], [59700.0, 1.0], [62500.0, 1.0], [62900.0, 1.0], [64900.0, 2.0], [64500.0, 1.0], [68200.0, 1.0], [66600.0, 1.0], [72200.0, 1.0], [75400.0, 2.0], [300.0, 6.0], [76200.0, 2.0], [79400.0, 1.0], [81000.0, 5.0], [400.0, 9.0], [500.0, 2.0], [600.0, 8.0], [700.0, 6.0], [800.0, 6.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 2.0], [1300.0, 1.0], [1400.0, 3.0], [73700.0, 1.0], [70500.0, 1.0], [69700.0, 1.0], [75300.0, 2.0], [77700.0, 2.0], [74500.0, 1.0], [80900.0, 1.0], [82500.0, 1.0], [14400.0, 1.0], [15400.0, 2.0], [15500.0, 2.0], [15600.0, 1.0], [17800.0, 1.0], [19200.0, 1.0], [20600.0, 1.0], [21200.0, 1.0], [24000.0, 1.0], [25000.0, 2.0], [25400.0, 1.0], [25800.0, 1.0], [26400.0, 1.0], [26600.0, 1.0], [27000.0, 2.0], [27400.0, 1.0], [26800.0, 2.0], [28600.0, 2.0], [27800.0, 1.0], [28200.0, 1.0], [29400.0, 1.0], [29600.0, 2.0], [29200.0, 1.0], [30400.0, 3.0], [30000.0, 1.0], [30600.0, 1.0], [30200.0, 1.0], [31600.0, 2.0], [31200.0, 2.0], [31000.0, 1.0], [30800.0, 2.0], [31400.0, 1.0], [32400.0, 2.0], [33600.0, 1.0], [35600.0, 1.0], [36400.0, 1.0], [38800.0, 1.0], [48400.0, 1.0], [53600.0, 1.0], [54800.0, 1.0], [54000.0, 1.0], [55600.0, 1.0], [57200.0, 1.0], [57600.0, 2.0], [59200.0, 2.0], [58800.0, 2.0], [60400.0, 1.0], [60000.0, 1.0], [60800.0, 1.0], [62800.0, 1.0], [61600.0, 1.0], [62000.0, 2.0], [62400.0, 1.0], [64400.0, 2.0], [64800.0, 1.0], [64000.0, 1.0], [63600.0, 1.0], [66400.0, 1.0], [73600.0, 1.0], [70400.0, 2.0], [71200.0, 1.0], [76800.0, 1.0], [75200.0, 1.0], [76000.0, 1.0], [77600.0, 2.0], [78400.0, 2.0], [80000.0, 1.0], [81600.0, 1.0], [83200.0, 3.0], [69500.0, 1.0], [73500.0, 1.0], [75100.0, 1.0], [82300.0, 1.0], [34700.0, 1.0], [33500.0, 2.0], [33900.0, 1.0], [33100.0, 1.0], [35100.0, 1.0], [51900.0, 2.0], [51500.0, 1.0], [54300.0, 2.0], [56700.0, 3.0], [57100.0, 1.0], [56300.0, 2.0], [59100.0, 1.0], [57500.0, 1.0], [58300.0, 1.0], [58700.0, 1.0], [59500.0, 1.0], [60300.0, 2.0], [60700.0, 1.0], [63100.0, 1.0], [61500.0, 1.0], [65100.0, 1.0], [64700.0, 1.0], [64300.0, 1.0], [67800.0, 2.0], [67000.0, 1.0], [73400.0, 2.0], [71000.0, 1.0], [74200.0, 2.0], [77400.0, 1.0], [78200.0, 1.0], [79000.0, 2.0], [66900.0, 2.0], [70100.0, 1.0], [70900.0, 1.0], [73300.0, 3.0], [79700.0, 1.0], [81300.0, 1.0], [18100.0, 1.0], [19300.0, 2.0], [19500.0, 1.0], [20900.0, 1.0], [21100.0, 1.0], [20700.0, 2.0], [22100.0, 1.0], [23100.0, 1.0], [25900.0, 1.0], [26100.0, 1.0], [26500.0, 1.0], [26700.0, 1.0], [28100.0, 1.0], [28300.0, 1.0], [29500.0, 2.0], [28700.0, 2.0], [29300.0, 1.0], [30300.0, 1.0], [30100.0, 2.0], [29900.0, 3.0], [29700.0, 1.0], [30500.0, 1.0], [30700.0, 1.0], [31700.0, 1.0], [31300.0, 3.0], [31500.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [32500.0, 1.0], [33800.0, 2.0], [33000.0, 3.0], [34200.0, 1.0], [35400.0, 2.0], [36200.0, 1.0], [36600.0, 1.0], [37400.0, 1.0], [39400.0, 1.0], [52200.0, 1.0], [56200.0, 2.0], [57000.0, 1.0], [59000.0, 1.0], [58200.0, 1.0], [59400.0, 1.0], [59800.0, 2.0], [61000.0, 1.0], [60600.0, 1.0], [62600.0, 2.0], [63000.0, 3.0], [61800.0, 1.0], [62200.0, 1.0], [65400.0, 1.0], [64600.0, 1.0], [69200.0, 1.0], [73200.0, 1.0], [72400.0, 1.0], [74800.0, 1.0], [75600.0, 2.0], [77200.0, 2.0], [76400.0, 1.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[0.0, 34.0], [100.0, 5.0], [33100.0, 3.0], [33300.0, 1.0], [34700.0, 3.0], [33700.0, 1.0], [34100.0, 2.0], [33500.0, 4.0], [32900.0, 2.0], [35100.0, 1.0], [35300.0, 3.0], [36700.0, 2.0], [36300.0, 1.0], [35700.0, 1.0], [35500.0, 1.0], [36900.0, 3.0], [37900.0, 4.0], [37700.0, 2.0], [37300.0, 2.0], [37500.0, 2.0], [39100.0, 1.0], [39500.0, 1.0], [39700.0, 2.0], [40900.0, 2.0], [40700.0, 1.0], [40500.0, 1.0], [41100.0, 3.0], [42900.0, 1.0], [41900.0, 2.0], [41300.0, 2.0], [42300.0, 1.0], [200.0, 6.0], [300.0, 9.0], [400.0, 13.0], [500.0, 9.0], [600.0, 7.0], [700.0, 10.0], [800.0, 6.0], [1000.0, 2.0], [1100.0, 1.0], [1200.0, 1.0], [14400.0, 1.0], [15000.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [16300.0, 2.0], [16600.0, 1.0], [17400.0, 1.0], [18300.0, 1.0], [18400.0, 1.0], [18700.0, 1.0], [18800.0, 2.0], [18500.0, 3.0], [18600.0, 2.0], [19500.0, 1.0], [20400.0, 1.0], [19800.0, 1.0], [20300.0, 1.0], [20200.0, 1.0], [20700.0, 1.0], [21000.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [22800.0, 1.0], [22900.0, 1.0], [23600.0, 1.0], [24100.0, 1.0], [24200.0, 2.0], [25000.0, 2.0], [24800.0, 1.0], [26100.0, 1.0], [26600.0, 2.0], [25800.0, 1.0], [25600.0, 1.0], [25700.0, 1.0], [25900.0, 1.0], [26000.0, 1.0], [26800.0, 2.0], [27300.0, 1.0], [27200.0, 1.0], [27500.0, 1.0], [27000.0, 1.0], [28300.0, 3.0], [28200.0, 2.0], [28600.0, 1.0], [27800.0, 1.0], [27700.0, 1.0], [28500.0, 1.0], [27900.0, 1.0], [28400.0, 1.0], [29500.0, 2.0], [28700.0, 3.0], [29400.0, 3.0], [28800.0, 1.0], [28900.0, 1.0], [29200.0, 1.0], [30300.0, 3.0], [30600.0, 2.0], [30400.0, 2.0], [29900.0, 2.0], [29700.0, 2.0], [29800.0, 1.0], [30500.0, 1.0], [30700.0, 1.0], [30000.0, 1.0], [31700.0, 2.0], [31300.0, 1.0], [31200.0, 2.0], [30900.0, 1.0], [31100.0, 1.0], [31500.0, 1.0], [32300.0, 1.0], [32100.0, 1.0], [32400.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [31800.0, 1.0], [32000.0, 2.0], [32600.0, 1.0], [34200.0, 1.0], [33400.0, 5.0], [34600.0, 1.0], [33200.0, 2.0], [33000.0, 1.0], [32800.0, 1.0], [33800.0, 1.0], [33600.0, 2.0], [35000.0, 2.0], [36400.0, 3.0], [36200.0, 1.0], [36000.0, 1.0], [35600.0, 1.0], [37800.0, 3.0], [37400.0, 2.0], [37600.0, 1.0], [38800.0, 1.0], [38400.0, 1.0], [37200.0, 2.0], [38200.0, 1.0], [39400.0, 1.0], [39600.0, 2.0], [39200.0, 1.0], [40200.0, 1.0], [40800.0, 2.0], [41000.0, 1.0], [41200.0, 1.0], [43000.0, 2.0], [42000.0, 1.0], [44000.0, 1.0], [43600.0, 1.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[0.0, 34.0], [100.0, 11.0], [32900.0, 2.0], [34700.0, 2.0], [33900.0, 1.0], [33300.0, 2.0], [34100.0, 3.0], [34500.0, 1.0], [33500.0, 1.0], [33700.0, 2.0], [33100.0, 1.0], [36500.0, 4.0], [35500.0, 2.0], [36700.0, 2.0], [35300.0, 1.0], [36300.0, 1.0], [38500.0, 1.0], [38300.0, 2.0], [37300.0, 2.0], [37700.0, 1.0], [38700.0, 2.0], [37500.0, 1.0], [38100.0, 1.0], [38900.0, 1.0], [39700.0, 2.0], [40100.0, 2.0], [40700.0, 1.0], [40900.0, 1.0], [41500.0, 2.0], [42300.0, 1.0], [42500.0, 1.0], [43100.0, 3.0], [43700.0, 2.0], [43300.0, 3.0], [43900.0, 1.0], [200.0, 9.0], [300.0, 14.0], [400.0, 8.0], [500.0, 4.0], [600.0, 4.0], [700.0, 5.0], [800.0, 4.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 1.0], [1600.0, 1.0], [13400.0, 1.0], [14400.0, 1.0], [15800.0, 1.0], [15400.0, 1.0], [15600.0, 1.0], [15500.0, 1.0], [17400.0, 1.0], [18400.0, 1.0], [19300.0, 3.0], [19000.0, 1.0], [19400.0, 1.0], [18800.0, 1.0], [20300.0, 3.0], [20800.0, 1.0], [21300.0, 1.0], [20900.0, 1.0], [21000.0, 1.0], [23400.0, 1.0], [22600.0, 1.0], [22700.0, 1.0], [22900.0, 1.0], [23200.0, 1.0], [24200.0, 1.0], [24000.0, 1.0], [23700.0, 1.0], [24500.0, 2.0], [24300.0, 1.0], [24100.0, 1.0], [25300.0, 1.0], [25500.0, 1.0], [25400.0, 1.0], [25200.0, 1.0], [24800.0, 1.0], [24600.0, 2.0], [24900.0, 1.0], [26000.0, 1.0], [26400.0, 3.0], [26300.0, 2.0], [26600.0, 1.0], [26500.0, 1.0], [26100.0, 1.0], [26800.0, 2.0], [27600.0, 1.0], [27300.0, 1.0], [27200.0, 1.0], [28400.0, 1.0], [28100.0, 1.0], [28200.0, 1.0], [27900.0, 1.0], [27800.0, 2.0], [28600.0, 4.0], [28000.0, 2.0], [28300.0, 1.0], [29600.0, 1.0], [29300.0, 1.0], [29000.0, 1.0], [28900.0, 2.0], [28800.0, 1.0], [30200.0, 1.0], [30700.0, 2.0], [29800.0, 2.0], [30600.0, 1.0], [30100.0, 2.0], [30000.0, 1.0], [30400.0, 2.0], [30900.0, 2.0], [31200.0, 4.0], [31000.0, 2.0], [31400.0, 2.0], [30800.0, 2.0], [31300.0, 2.0], [31500.0, 1.0], [31900.0, 2.0], [32300.0, 1.0], [32000.0, 3.0], [32500.0, 3.0], [32100.0, 3.0], [32200.0, 1.0], [32400.0, 3.0], [32700.0, 2.0], [32600.0, 1.0], [34800.0, 3.0], [33000.0, 1.0], [33800.0, 4.0], [33400.0, 3.0], [34000.0, 1.0], [34200.0, 1.0], [33200.0, 5.0], [34600.0, 1.0], [33600.0, 3.0], [36000.0, 1.0], [36600.0, 1.0], [35200.0, 2.0], [35600.0, 1.0], [35400.0, 1.0], [35000.0, 2.0], [35800.0, 1.0], [38200.0, 1.0], [38400.0, 3.0], [38800.0, 2.0], [37800.0, 2.0], [37400.0, 1.0], [37000.0, 1.0], [39400.0, 1.0], [40600.0, 2.0], [39600.0, 1.0], [39800.0, 1.0], [40400.0, 1.0], [40200.0, 1.0], [40800.0, 1.0], [40000.0, 1.0], [42600.0, 1.0], [41400.0, 2.0], [42400.0, 1.0], [41800.0, 1.0], [42200.0, 2.0], [42000.0, 1.0], [43600.0, 3.0], [43200.0, 2.0], [43400.0, 3.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 83200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 58.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 640.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 58.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 640.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 41.46014492753628, "minX": 1.60602828E12, "maxY": 50.0, "series": [{"data": [[1.60602828E12, 50.0], [1.6060284E12, 50.0], [1.60602846E12, 50.0], [1.60602834E12, 50.0], [1.60602852E12, 41.46014492753628]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602852E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14475.0, "minX": 1.0, "maxY": 58706.0, "series": [{"data": [[33.0, 31367.0], [32.0, 32123.5], [35.0, 31305.0], [34.0, 29567.0], [39.0, 50509.666666666664], [40.0, 29762.0], [42.0, 30830.5], [45.0, 30645.0], [47.0, 30683.0], [46.0, 33899.0], [48.0, 32412.0], [3.0, 15546.5], [50.0, 44261.02749140892], [4.0, 15594.0], [5.0, 15476.0], [6.0, 14476.0], [7.0, 19268.0], [13.0, 36982.83333333333], [1.0, 15502.0], [17.0, 21171.5], [18.0, 37971.5], [19.0, 23203.5], [20.0, 22114.0], [21.0, 20643.0], [22.0, 56214.0], [23.0, 25090.0], [24.0, 54332.0], [25.0, 58706.0], [27.0, 28213.0], [29.0, 38562.333333333336], [30.0, 28767.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[46.51032448377582, 42495.14159292035]], "isOverall": false, "label": "DELETE Test-Aggregated", "isController": true}, {"data": [[32.0, 31544.0], [39.0, 31556.5], [40.0, 29428.0], [42.0, 31192.0], [46.0, 30059.5], [3.0, 15035.0], [50.0, 20979.934256055352], [13.0, 18909.5], [4.0, 15566.0], [18.0, 21326.0], [22.0, 18567.0], [24.0, 18646.0], [25.0, 22911.0], [27.0, 27068.0], [29.0, 28408.5]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[48.43689320388351, 21197.964401294492]], "isOverall": false, "label": "POST DELETE participant-Aggregated", "isController": false}, {"data": [[32.0, 32585.0], [35.0, 28987.0], [34.0, 31367.0], [36.0, 31305.0], [39.0, 31495.0], [40.0, 29035.0], [42.0, 30461.0], [46.0, 32027.5], [49.0, 32190.0], [48.0, 30089.0], [3.0, 15631.0], [50.0, 22922.405144694527], [5.0, 15476.0], [6.0, 14475.0], [7.0, 18879.0], [13.0, 20348.5], [1.0, 15502.0], [17.0, 21075.0], [18.0, 19407.5], [19.0, 22146.5], [20.0, 20913.0], [21.0, 20370.0], [23.0, 23229.0], [29.0, 28839.0], [30.0, 28057.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}, {"data": [[47.96165191740415, 23058.076696165183]], "isOverall": false, "label": "POST USER LOGIN-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 954582.0, "minX": 1.60602828E12, "maxY": 1.4119139913333333E8, "series": [{"data": [[1.60602828E12, 1.4119139913333333E8], [1.6060284E12, 2962709.8], [1.60602846E12, 2503698.3333333335], [1.60602834E12, 2241028.433333333], [1.60602852E12, 4751857.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60602828E12, 1569870.0], [1.6060284E12, 1280076.1666666667], [1.60602846E12, 954582.0], [1.60602834E12, 971683.6166666667], [1.60602852E12, 1832256.9333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602852E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16031.283950617288, "minX": 1.60602828E12, "maxY": 62274.25490196078, "series": [{"data": [[1.60602828E12, 62274.25490196078], [1.6060284E12, 46992.64102564101], [1.60602846E12, 45766.862068965514], [1.60602834E12, 36487.93333333334], [1.60602852E12, 30542.102803738322]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.60602828E12, 26339.098039215685], [1.6060284E12, 24743.519480519477], [1.60602846E12, 23071.357142857145], [1.60602834E12, 16161.272727272728], [1.60602852E12, 16031.283950617288]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.60602828E12, 35984.56140350877], [1.6060284E12, 19049.11594202899], [1.60602846E12, 24184.288461538457], [1.60602834E12, 22531.000000000004], [1.60602852E12, 17600.375000000007]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602852E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60602828E12, "maxY": 1179.6842105263158, "series": [{"data": [[1.60602828E12, 0.0], [1.6060284E12, 0.0], [1.60602846E12, 0.0], [1.60602834E12, 0.0], [1.60602852E12, 0.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.60602828E12, 386.21568627450984], [1.6060284E12, 269.22077922077926], [1.60602846E12, 326.6607142857142], [1.60602834E12, 217.4318181818182], [1.60602852E12, 252.7283950617284]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.60602828E12, 1179.6842105263158], [1.6060284E12, 207.60869565217382], [1.60602846E12, 254.76923076923077], [1.60602834E12, 243.95890410958899], [1.60602852E12, 210.74999999999991]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602852E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60602828E12, "maxY": 362.8392857142857, "series": [{"data": [[1.60602828E12, 0.0], [1.6060284E12, 0.0], [1.60602846E12, 0.0], [1.60602834E12, 0.0], [1.60602852E12, 0.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.60602828E12, 152.84313725490193], [1.6060284E12, 262.5064935064934], [1.60602846E12, 362.8392857142857], [1.60602834E12, 286.0454545454545], [1.60602852E12, 281.3333333333334]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.60602828E12, 63.78947368421053], [1.6060284E12, 172.28985507246375], [1.60602846E12, 181.0], [1.60602834E12, 251.01369863013696], [1.60602852E12, 195.78409090909088]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602852E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14477.0, "minX": 1.60602828E12, "maxY": 43998.0, "series": [{"data": [[1.60602828E12, 43998.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60602828E12, 14477.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60602828E12, 43609.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60602828E12, 43998.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60602828E12, 43712.95]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602828E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27426.0, "minX": 1000.0, "maxY": 41693.5, "series": [{"data": [[1000.0, 40534.0], [2000.0, 41693.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 27426.0], [2000.0, 28408.5], [4000.0, 33155.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 1162.5, "series": [{"data": [[1000.0, 1162.5], [2000.0, 719.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 194.0], [2000.0, 0.0], [4000.0, 146.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.60602822E12, "maxY": 2.683333333333333, "series": [{"data": [[1.60602828E12, 1.5833333333333333], [1.6060284E12, 2.4166666666666665], [1.60602846E12, 1.95], [1.60602822E12, 0.8333333333333334], [1.60602834E12, 2.1666666666666665], [1.60602852E12, 2.683333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602852E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.60602828E12, "maxY": 2.3833333333333333, "series": [{"data": [[1.60602828E12, 1.5833333333333333], [1.6060284E12, 1.6166666666666667], [1.60602846E12, 1.35], [1.60602834E12, 1.1666666666666667], [1.60602852E12, 2.3833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60602828E12, 0.21666666666666667], [1.6060284E12, 0.8166666666666667], [1.60602846E12, 0.45], [1.60602834E12, 0.7833333333333333], [1.60602852E12, 1.2666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60602852E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.60602828E12, "maxY": 1.7833333333333334, "series": [{"data": [[1.60602828E12, 0.13333333333333333]], "isOverall": false, "label": "DELETE Test-success", "isController": true}, {"data": [[1.60602828E12, 0.8333333333333334]], "isOverall": false, "label": "POST USER LOGIN-success", "isController": false}, {"data": [[1.60602828E12, 0.13333333333333333]], "isOverall": false, "label": "POST DELETE participant-success", "isController": false}, {"data": [[1.60602828E12, 0.7166666666666667], [1.6060284E12, 1.2833333333333334], [1.60602846E12, 0.9333333333333333], [1.60602834E12, 0.7333333333333333], [1.60602852E12, 1.35]], "isOverall": false, "label": "POST DELETE participant-failure", "isController": false}, {"data": [[1.60602828E12, 0.11666666666666667], [1.6060284E12, 1.15], [1.60602846E12, 0.8666666666666667], [1.60602834E12, 1.2166666666666666], [1.60602852E12, 1.4666666666666666]], "isOverall": false, "label": "POST USER LOGIN-failure", "isController": false}, {"data": [[1.60602828E12, 0.7166666666666667], [1.6060284E12, 1.3], [1.60602846E12, 0.9666666666666667], [1.60602834E12, 0.75], [1.60602852E12, 1.7833333333333334]], "isOverall": false, "label": "DELETE Test-failure", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602852E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.60602828E12, "maxY": 4.6, "series": [{"data": [[1.60602828E12, 1.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60602828E12, 1.55], [1.6060284E12, 3.7333333333333334], [1.60602846E12, 2.7666666666666666], [1.60602834E12, 2.7], [1.60602852E12, 4.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60602852E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

