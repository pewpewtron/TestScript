/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 204450.0, "series": [{"data": [[0.0, 8.0], [0.1, 8.0], [0.2, 8.0], [0.3, 8.0], [0.4, 14.0], [0.5, 14.0], [0.6, 14.0], [0.7, 14.0], [0.8, 15.0], [0.9, 15.0], [1.0, 15.0], [1.1, 15.0], [1.2, 17.0], [1.3, 17.0], [1.4, 17.0], [1.5, 17.0], [1.6, 17.0], [1.7, 17.0], [1.8, 17.0], [1.9, 17.0], [2.0, 22.0], [2.1, 22.0], [2.2, 22.0], [2.3, 22.0], [2.4, 22.0], [2.5, 22.0], [2.6, 22.0], [2.7, 22.0], [2.8, 23.0], [2.9, 23.0], [3.0, 23.0], [3.1, 23.0], [3.2, 46.0], [3.3, 46.0], [3.4, 46.0], [3.5, 46.0], [3.6, 53.0], [3.7, 53.0], [3.8, 53.0], [3.9, 59.0], [4.0, 59.0], [4.1, 59.0], [4.2, 59.0], [4.3, 68.0], [4.4, 68.0], [4.5, 68.0], [4.6, 68.0], [4.7, 70.0], [4.8, 70.0], [4.9, 70.0], [5.0, 70.0], [5.1, 84.0], [5.2, 84.0], [5.3, 84.0], [5.4, 84.0], [5.5, 118.0], [5.6, 118.0], [5.7, 118.0], [5.8, 118.0], [5.9, 195.0], [6.0, 195.0], [6.1, 195.0], [6.2, 195.0], [6.3, 211.0], [6.4, 211.0], [6.5, 211.0], [6.6, 211.0], [6.7, 213.0], [6.8, 213.0], [6.9, 213.0], [7.0, 213.0], [7.1, 249.0], [7.2, 249.0], [7.3, 249.0], [7.4, 251.0], [7.5, 251.0], [7.6, 251.0], [7.7, 251.0], [7.8, 262.0], [7.9, 262.0], [8.0, 262.0], [8.1, 262.0], [8.2, 271.0], [8.3, 271.0], [8.4, 271.0], [8.5, 271.0], [8.6, 271.0], [8.7, 271.0], [8.8, 271.0], [8.9, 271.0], [9.0, 297.0], [9.1, 297.0], [9.2, 297.0], [9.3, 297.0], [9.4, 331.0], [9.5, 331.0], [9.6, 331.0], [9.7, 331.0], [9.8, 341.0], [9.9, 341.0], [10.0, 341.0], [10.1, 341.0], [10.2, 347.0], [10.3, 347.0], [10.4, 347.0], [10.5, 347.0], [10.6, 355.0], [10.7, 355.0], [10.8, 355.0], [10.9, 382.0], [11.0, 382.0], [11.1, 382.0], [11.2, 382.0], [11.3, 382.0], [11.4, 382.0], [11.5, 382.0], [11.6, 382.0], [11.7, 394.0], [11.8, 394.0], [11.9, 394.0], [12.0, 394.0], [12.1, 405.0], [12.2, 405.0], [12.3, 405.0], [12.4, 405.0], [12.5, 431.0], [12.6, 431.0], [12.7, 431.0], [12.8, 431.0], [12.9, 437.0], [13.0, 437.0], [13.1, 437.0], [13.2, 437.0], [13.3, 495.0], [13.4, 495.0], [13.5, 495.0], [13.6, 495.0], [13.7, 498.0], [13.8, 498.0], [13.9, 498.0], [14.0, 498.0], [14.1, 505.0], [14.2, 505.0], [14.3, 505.0], [14.4, 509.0], [14.5, 509.0], [14.6, 509.0], [14.7, 509.0], [14.8, 523.0], [14.9, 523.0], [15.0, 523.0], [15.1, 523.0], [15.2, 523.0], [15.3, 523.0], [15.4, 523.0], [15.5, 523.0], [15.6, 524.0], [15.7, 524.0], [15.8, 524.0], [15.9, 524.0], [16.0, 541.0], [16.1, 541.0], [16.2, 541.0], [16.3, 541.0], [16.4, 554.0], [16.5, 554.0], [16.6, 554.0], [16.7, 554.0], [16.8, 589.0], [16.9, 589.0], [17.0, 589.0], [17.1, 589.0], [17.2, 622.0], [17.3, 622.0], [17.4, 622.0], [17.5, 622.0], [17.6, 630.0], [17.7, 630.0], [17.8, 630.0], [17.9, 632.0], [18.0, 632.0], [18.1, 632.0], [18.2, 632.0], [18.3, 641.0], [18.4, 641.0], [18.5, 641.0], [18.6, 641.0], [18.7, 647.0], [18.8, 647.0], [18.9, 647.0], [19.0, 647.0], [19.1, 652.0], [19.2, 652.0], [19.3, 652.0], [19.4, 652.0], [19.5, 655.0], [19.6, 655.0], [19.7, 655.0], [19.8, 655.0], [19.9, 675.0], [20.0, 675.0], [20.1, 675.0], [20.2, 675.0], [20.3, 689.0], [20.4, 689.0], [20.5, 689.0], [20.6, 689.0], [20.7, 690.0], [20.8, 690.0], [20.9, 690.0], [21.0, 690.0], [21.1, 692.0], [21.2, 692.0], [21.3, 692.0], [21.4, 692.0], [21.5, 705.0], [21.6, 705.0], [21.7, 705.0], [21.8, 710.0], [21.9, 710.0], [22.0, 710.0], [22.1, 710.0], [22.2, 712.0], [22.3, 712.0], [22.4, 712.0], [22.5, 712.0], [22.6, 712.0], [22.7, 712.0], [22.8, 712.0], [22.9, 712.0], [23.0, 717.0], [23.1, 717.0], [23.2, 717.0], [23.3, 717.0], [23.4, 730.0], [23.5, 730.0], [23.6, 730.0], [23.7, 730.0], [23.8, 731.0], [23.9, 731.0], [24.0, 731.0], [24.1, 731.0], [24.2, 733.0], [24.3, 733.0], [24.4, 733.0], [24.5, 733.0], [24.6, 759.0], [24.7, 759.0], [24.8, 759.0], [24.9, 759.0], [25.0, 762.0], [25.1, 762.0], [25.2, 762.0], [25.3, 788.0], [25.4, 788.0], [25.5, 788.0], [25.6, 788.0], [25.7, 795.0], [25.8, 795.0], [25.9, 795.0], [26.0, 795.0], [26.1, 804.0], [26.2, 804.0], [26.3, 804.0], [26.4, 804.0], [26.5, 809.0], [26.6, 809.0], [26.7, 809.0], [26.8, 809.0], [26.9, 824.0], [27.0, 824.0], [27.1, 824.0], [27.2, 824.0], [27.3, 826.0], [27.4, 826.0], [27.5, 826.0], [27.6, 826.0], [27.7, 843.0], [27.8, 843.0], [27.9, 843.0], [28.0, 843.0], [28.1, 854.0], [28.2, 854.0], [28.3, 854.0], [28.4, 854.0], [28.5, 864.0], [28.6, 864.0], [28.7, 864.0], [28.8, 872.0], [28.9, 872.0], [29.0, 872.0], [29.1, 872.0], [29.2, 880.0], [29.3, 880.0], [29.4, 880.0], [29.5, 880.0], [29.6, 881.0], [29.7, 881.0], [29.8, 881.0], [29.9, 881.0], [30.0, 890.0], [30.1, 890.0], [30.2, 890.0], [30.3, 890.0], [30.4, 895.0], [30.5, 895.0], [30.6, 895.0], [30.7, 895.0], [30.8, 917.0], [30.9, 917.0], [31.0, 917.0], [31.1, 917.0], [31.2, 921.0], [31.3, 921.0], [31.4, 921.0], [31.5, 921.0], [31.6, 924.0], [31.7, 924.0], [31.8, 924.0], [31.9, 924.0], [32.0, 933.0], [32.1, 933.0], [32.2, 933.0], [32.3, 947.0], [32.4, 947.0], [32.5, 947.0], [32.6, 947.0], [32.7, 961.0], [32.8, 961.0], [32.9, 961.0], [33.0, 961.0], [33.1, 962.0], [33.2, 962.0], [33.3, 962.0], [33.4, 962.0], [33.5, 965.0], [33.6, 965.0], [33.7, 965.0], [33.8, 965.0], [33.9, 986.0], [34.0, 986.0], [34.1, 986.0], [34.2, 986.0], [34.3, 990.0], [34.4, 990.0], [34.5, 990.0], [34.6, 990.0], [34.7, 997.0], [34.8, 997.0], [34.9, 997.0], [35.0, 997.0], [35.1, 1004.0], [35.2, 1004.0], [35.3, 1004.0], [35.4, 1004.0], [35.5, 1009.0], [35.6, 1009.0], [35.7, 1009.0], [35.8, 1051.0], [35.9, 1051.0], [36.0, 1051.0], [36.1, 1051.0], [36.2, 1052.0], [36.3, 1052.0], [36.4, 1052.0], [36.5, 1052.0], [36.6, 1059.0], [36.7, 1059.0], [36.8, 1059.0], [36.9, 1059.0], [37.0, 1077.0], [37.1, 1077.0], [37.2, 1077.0], [37.3, 1077.0], [37.4, 1109.0], [37.5, 1109.0], [37.6, 1109.0], [37.7, 1109.0], [37.8, 1111.0], [37.9, 1111.0], [38.0, 1111.0], [38.1, 1111.0], [38.2, 1118.0], [38.3, 1118.0], [38.4, 1118.0], [38.5, 1118.0], [38.6, 1164.0], [38.7, 1164.0], [38.8, 1164.0], [38.9, 1164.0], [39.0, 1216.0], [39.1, 1216.0], [39.2, 1216.0], [39.3, 1249.0], [39.4, 1249.0], [39.5, 1249.0], [39.6, 1249.0], [39.7, 1264.0], [39.8, 1264.0], [39.9, 1264.0], [40.0, 1264.0], [40.1, 1297.0], [40.2, 1297.0], [40.3, 1297.0], [40.4, 1297.0], [40.5, 1314.0], [40.6, 1314.0], [40.7, 1314.0], [40.8, 1314.0], [40.9, 1483.0], [41.0, 1483.0], [41.1, 1483.0], [41.2, 1483.0], [41.3, 1508.0], [41.4, 1508.0], [41.5, 1508.0], [41.6, 1508.0], [41.7, 2145.0], [41.8, 2145.0], [41.9, 2145.0], [42.0, 2145.0], [42.1, 2604.0], [42.2, 2604.0], [42.3, 2604.0], [42.4, 2604.0], [42.5, 26922.0], [42.6, 26922.0], [42.7, 26922.0], [42.8, 26922.0], [42.9, 30655.0], [43.0, 30655.0], [43.1, 30655.0], [43.2, 34691.0], [43.3, 34691.0], [43.4, 34691.0], [43.5, 34691.0], [43.6, 38763.0], [43.7, 38763.0], [43.8, 38763.0], [43.9, 38763.0], [44.0, 41229.0], [44.1, 41229.0], [44.2, 41229.0], [44.3, 41229.0], [44.4, 41550.0], [44.5, 41550.0], [44.6, 41550.0], [44.7, 41550.0], [44.8, 41990.0], [44.9, 41990.0], [45.0, 41990.0], [45.1, 41990.0], [45.2, 42279.0], [45.3, 42279.0], [45.4, 42279.0], [45.5, 42279.0], [45.6, 44818.0], [45.7, 44818.0], [45.8, 44818.0], [45.9, 44818.0], [46.0, 46286.0], [46.1, 46286.0], [46.2, 46286.0], [46.3, 46286.0], [46.4, 47434.0], [46.5, 47434.0], [46.6, 47434.0], [46.7, 47561.0], [46.8, 47561.0], [46.9, 47561.0], [47.0, 47561.0], [47.1, 47902.0], [47.2, 47902.0], [47.3, 47902.0], [47.4, 47902.0], [47.5, 48770.0], [47.6, 48770.0], [47.7, 48770.0], [47.8, 48770.0], [47.9, 48929.0], [48.0, 48929.0], [48.1, 48929.0], [48.2, 48929.0], [48.3, 48958.0], [48.4, 48958.0], [48.5, 48958.0], [48.6, 48958.0], [48.7, 49057.0], [48.8, 49057.0], [48.9, 49057.0], [49.0, 49057.0], [49.1, 49070.0], [49.2, 49070.0], [49.3, 49070.0], [49.4, 49070.0], [49.5, 49075.0], [49.6, 49075.0], [49.7, 49075.0], [49.8, 49075.0], [49.9, 49739.0], [50.0, 49739.0], [50.1, 49739.0], [50.2, 50091.0], [50.3, 50091.0], [50.4, 50091.0], [50.5, 50091.0], [50.6, 50515.0], [50.7, 50515.0], [50.8, 50515.0], [50.9, 50515.0], [51.0, 50832.0], [51.1, 50832.0], [51.2, 50832.0], [51.3, 50832.0], [51.4, 50878.0], [51.5, 50878.0], [51.6, 50878.0], [51.7, 50878.0], [51.8, 51061.0], [51.9, 51061.0], [52.0, 51061.0], [52.1, 51061.0], [52.2, 51259.0], [52.3, 51259.0], [52.4, 51259.0], [52.5, 51259.0], [52.6, 51632.0], [52.7, 51632.0], [52.8, 51632.0], [52.9, 51632.0], [53.0, 51741.0], [53.1, 51741.0], [53.2, 51741.0], [53.3, 51741.0], [53.4, 51767.0], [53.5, 51767.0], [53.6, 51767.0], [53.7, 51877.0], [53.8, 51877.0], [53.9, 51877.0], [54.0, 51877.0], [54.1, 51989.0], [54.2, 51989.0], [54.3, 51989.0], [54.4, 51989.0], [54.5, 52464.0], [54.6, 52464.0], [54.7, 52464.0], [54.8, 52464.0], [54.9, 52478.0], [55.0, 52478.0], [55.1, 52478.0], [55.2, 52478.0], [55.3, 52486.0], [55.4, 52486.0], [55.5, 52486.0], [55.6, 52486.0], [55.7, 52659.0], [55.8, 52659.0], [55.9, 52659.0], [56.0, 52659.0], [56.1, 52782.0], [56.2, 52782.0], [56.3, 52782.0], [56.4, 52782.0], [56.5, 53015.0], [56.6, 53015.0], [56.7, 53015.0], [56.8, 53015.0], [56.9, 53075.0], [57.0, 53075.0], [57.1, 53075.0], [57.2, 53497.0], [57.3, 53497.0], [57.4, 53497.0], [57.5, 53497.0], [57.6, 53590.0], [57.7, 53590.0], [57.8, 53590.0], [57.9, 53590.0], [58.0, 53739.0], [58.1, 53739.0], [58.2, 53739.0], [58.3, 53739.0], [58.4, 53914.0], [58.5, 53914.0], [58.6, 53914.0], [58.7, 53914.0], [58.8, 53918.0], [58.9, 53918.0], [59.0, 53918.0], [59.1, 53918.0], [59.2, 55788.0], [59.3, 55788.0], [59.4, 55788.0], [59.5, 55788.0], [59.6, 59089.0], [59.7, 59089.0], [59.8, 59089.0], [59.9, 59089.0], [60.0, 59865.0], [60.1, 59865.0], [60.2, 59865.0], [60.3, 59865.0], [60.4, 63305.0], [60.5, 63305.0], [60.6, 63305.0], [60.7, 63305.0], [60.8, 63382.0], [60.9, 63382.0], [61.0, 63382.0], [61.1, 64877.0], [61.2, 64877.0], [61.3, 64877.0], [61.4, 64877.0], [61.5, 64929.0], [61.6, 64929.0], [61.7, 64929.0], [61.8, 64929.0], [61.9, 65590.0], [62.0, 65590.0], [62.1, 65590.0], [62.2, 65590.0], [62.3, 68974.0], [62.4, 68974.0], [62.5, 68974.0], [62.6, 68974.0], [62.7, 69430.0], [62.8, 69430.0], [62.9, 69430.0], [63.0, 69430.0], [63.1, 69859.0], [63.2, 69859.0], [63.3, 69859.0], [63.4, 69859.0], [63.5, 70999.0], [63.6, 70999.0], [63.7, 70999.0], [63.8, 70999.0], [63.9, 71513.0], [64.0, 71513.0], [64.1, 71513.0], [64.2, 71513.0], [64.3, 72059.0], [64.4, 72059.0], [64.5, 72059.0], [64.6, 73228.0], [64.7, 73228.0], [64.8, 73228.0], [64.9, 73228.0], [65.0, 75738.0], [65.1, 75738.0], [65.2, 75738.0], [65.3, 75738.0], [65.4, 77631.0], [65.5, 77631.0], [65.6, 77631.0], [65.7, 77631.0], [65.8, 78348.0], [65.9, 78348.0], [66.0, 78348.0], [66.1, 78348.0], [66.2, 82325.0], [66.3, 82325.0], [66.4, 82325.0], [66.5, 82325.0], [66.6, 87066.0], [66.7, 87066.0], [66.8, 87066.0], [66.9, 87066.0], [67.0, 88260.0], [67.1, 88260.0], [67.2, 88260.0], [67.3, 88260.0], [67.4, 88297.0], [67.5, 88297.0], [67.6, 88297.0], [67.7, 88297.0], [67.8, 89468.0], [67.9, 89468.0], [68.0, 89468.0], [68.1, 89904.0], [68.2, 89904.0], [68.3, 89904.0], [68.4, 89904.0], [68.5, 90314.0], [68.6, 90314.0], [68.7, 90314.0], [68.8, 90314.0], [68.9, 91391.0], [69.0, 91391.0], [69.1, 91391.0], [69.2, 91391.0], [69.3, 92503.0], [69.4, 92503.0], [69.5, 92503.0], [69.6, 92503.0], [69.7, 99987.0], [69.8, 99987.0], [69.9, 99987.0], [70.0, 99987.0], [70.1, 102770.0], [70.2, 102770.0], [70.3, 102770.0], [70.4, 102770.0], [70.5, 102860.0], [70.6, 102860.0], [70.7, 102860.0], [70.8, 102860.0], [70.9, 104585.0], [71.0, 104585.0], [71.1, 104585.0], [71.2, 104585.0], [71.3, 105356.0], [71.4, 105356.0], [71.5, 105356.0], [71.6, 105488.0], [71.7, 105488.0], [71.8, 105488.0], [71.9, 105488.0], [72.0, 106367.0], [72.1, 106367.0], [72.2, 106367.0], [72.3, 106367.0], [72.4, 106474.0], [72.5, 106474.0], [72.6, 106474.0], [72.7, 106474.0], [72.8, 106683.0], [72.9, 106683.0], [73.0, 106683.0], [73.1, 106683.0], [73.2, 106846.0], [73.3, 106846.0], [73.4, 106846.0], [73.5, 106846.0], [73.6, 107688.0], [73.7, 107688.0], [73.8, 107688.0], [73.9, 107688.0], [74.0, 108683.0], [74.1, 108683.0], [74.2, 108683.0], [74.3, 108683.0], [74.4, 109502.0], [74.5, 109502.0], [74.6, 109502.0], [74.7, 109502.0], [74.8, 109645.0], [74.9, 109645.0], [75.0, 109645.0], [75.1, 109900.0], [75.2, 109900.0], [75.3, 109900.0], [75.4, 109900.0], [75.5, 110443.0], [75.6, 110443.0], [75.7, 110443.0], [75.8, 110443.0], [75.9, 110940.0], [76.0, 110940.0], [76.1, 110940.0], [76.2, 110940.0], [76.3, 111607.0], [76.4, 111607.0], [76.5, 111607.0], [76.6, 111607.0], [76.7, 112808.0], [76.8, 112808.0], [76.9, 112808.0], [77.0, 112808.0], [77.1, 113495.0], [77.2, 113495.0], [77.3, 113495.0], [77.4, 113495.0], [77.5, 113497.0], [77.6, 113497.0], [77.7, 113497.0], [77.8, 113497.0], [77.9, 113621.0], [78.0, 113621.0], [78.1, 113621.0], [78.2, 113621.0], [78.3, 113906.0], [78.4, 113906.0], [78.5, 113906.0], [78.6, 114527.0], [78.7, 114527.0], [78.8, 114527.0], [78.9, 114527.0], [79.0, 114716.0], [79.1, 114716.0], [79.2, 114716.0], [79.3, 114716.0], [79.4, 114830.0], [79.5, 114830.0], [79.6, 114830.0], [79.7, 114830.0], [79.8, 115296.0], [79.9, 115296.0], [80.0, 115296.0], [80.1, 115296.0], [80.2, 118560.0], [80.3, 118560.0], [80.4, 118560.0], [80.5, 118560.0], [80.6, 140574.0], [80.7, 140574.0], [80.8, 140574.0], [80.9, 140574.0], [81.0, 140988.0], [81.1, 140988.0], [81.2, 140988.0], [81.3, 140988.0], [81.4, 144062.0], [81.5, 144062.0], [81.6, 144062.0], [81.7, 144062.0], [81.8, 144118.0], [81.9, 144118.0], [82.0, 144118.0], [82.1, 144118.0], [82.2, 145743.0], [82.3, 145743.0], [82.4, 145743.0], [82.5, 145777.0], [82.6, 145777.0], [82.7, 145777.0], [82.8, 145777.0], [82.9, 146488.0], [83.0, 146488.0], [83.1, 146488.0], [83.2, 146488.0], [83.3, 147630.0], [83.4, 147630.0], [83.5, 147630.0], [83.6, 147630.0], [83.7, 147815.0], [83.8, 147815.0], [83.9, 147815.0], [84.0, 147815.0], [84.1, 148605.0], [84.2, 148605.0], [84.3, 148605.0], [84.4, 148605.0], [84.5, 148645.0], [84.6, 148645.0], [84.7, 148645.0], [84.8, 148645.0], [84.9, 149221.0], [85.0, 149221.0], [85.1, 149221.0], [85.2, 149221.0], [85.3, 150789.0], [85.4, 150789.0], [85.5, 150789.0], [85.6, 150789.0], [85.7, 151947.0], [85.8, 151947.0], [85.9, 151947.0], [86.0, 152777.0], [86.1, 152777.0], [86.2, 152777.0], [86.3, 152777.0], [86.4, 153756.0], [86.5, 153756.0], [86.6, 153756.0], [86.7, 153756.0], [86.8, 154574.0], [86.9, 154574.0], [87.0, 154574.0], [87.1, 154574.0], [87.2, 156119.0], [87.3, 156119.0], [87.4, 156119.0], [87.5, 156119.0], [87.6, 157719.0], [87.7, 157719.0], [87.8, 157719.0], [87.9, 157719.0], [88.0, 158751.0], [88.1, 158751.0], [88.2, 158751.0], [88.3, 158751.0], [88.4, 159117.0], [88.5, 159117.0], [88.6, 159117.0], [88.7, 159117.0], [88.8, 159423.0], [88.9, 159423.0], [89.0, 159423.0], [89.1, 159423.0], [89.2, 161101.0], [89.3, 161101.0], [89.4, 161101.0], [89.5, 161651.0], [89.6, 161651.0], [89.7, 161651.0], [89.8, 161651.0], [89.9, 165392.0], [90.0, 165392.0], [90.1, 165392.0], [90.2, 165392.0], [90.3, 165587.0], [90.4, 165587.0], [90.5, 165587.0], [90.6, 165587.0], [90.7, 166411.0], [90.8, 166411.0], [90.9, 166411.0], [91.0, 166411.0], [91.1, 168424.0], [91.2, 168424.0], [91.3, 168424.0], [91.4, 168424.0], [91.5, 169591.0], [91.6, 169591.0], [91.7, 169591.0], [91.8, 169591.0], [91.9, 171722.0], [92.0, 171722.0], [92.1, 171722.0], [92.2, 171722.0], [92.3, 174454.0], [92.4, 174454.0], [92.5, 174454.0], [92.6, 174454.0], [92.7, 174853.0], [92.8, 174853.0], [92.9, 174853.0], [93.0, 175588.0], [93.1, 175588.0], [93.2, 175588.0], [93.3, 175588.0], [93.4, 176944.0], [93.5, 176944.0], [93.6, 176944.0], [93.7, 176944.0], [93.8, 181892.0], [93.9, 181892.0], [94.0, 181892.0], [94.1, 181892.0], [94.2, 183141.0], [94.3, 183141.0], [94.4, 183141.0], [94.5, 183141.0], [94.6, 183611.0], [94.7, 183611.0], [94.8, 183611.0], [94.9, 183611.0], [95.0, 188189.0], [95.1, 188189.0], [95.2, 188189.0], [95.3, 188189.0], [95.4, 188207.0], [95.5, 188207.0], [95.6, 188207.0], [95.7, 188207.0], [95.8, 191263.0], [95.9, 191263.0], [96.0, 191263.0], [96.1, 191263.0], [96.2, 200745.0], [96.3, 200745.0], [96.4, 200745.0], [96.5, 200750.0], [96.6, 200750.0], [96.7, 200750.0], [96.8, 200750.0], [96.9, 202226.0], [97.0, 202226.0], [97.1, 202226.0], [97.2, 202226.0], [97.3, 202756.0], [97.4, 202756.0], [97.5, 202756.0], [97.6, 202756.0], [97.7, 203129.0], [97.8, 203129.0], [97.9, 203129.0], [98.0, 203129.0], [98.1, 203362.0], [98.2, 203362.0], [98.3, 203362.0], [98.4, 203362.0], [98.5, 203717.0], [98.6, 203717.0], [98.7, 203717.0], [98.8, 203717.0], [98.9, 204258.0], [99.0, 204258.0], [99.1, 204258.0], [99.2, 204258.0], [99.3, 204285.0], [99.4, 204285.0], [99.5, 204285.0], [99.6, 204285.0], [99.7, 204450.0], [99.8, 204450.0], [99.9, 204450.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[0.0, 3.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 9.0], [6.0, 9.0], [6.1, 9.0], [6.2, 9.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 11.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 12.0], [8.2, 12.0], [8.3, 12.0], [8.4, 12.0], [8.5, 12.0], [8.6, 12.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 13.0], [9.1, 13.0], [9.2, 13.0], [9.3, 13.0], [9.4, 13.0], [9.5, 17.0], [9.6, 17.0], [9.7, 17.0], [9.8, 17.0], [9.9, 21.0], [10.0, 21.0], [10.1, 21.0], [10.2, 21.0], [10.3, 21.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 24.0], [10.9, 24.0], [11.0, 24.0], [11.1, 24.0], [11.2, 24.0], [11.3, 25.0], [11.4, 25.0], [11.5, 25.0], [11.6, 25.0], [11.7, 27.0], [11.8, 27.0], [11.9, 27.0], [12.0, 27.0], [12.1, 27.0], [12.2, 29.0], [12.3, 29.0], [12.4, 29.0], [12.5, 29.0], [12.6, 35.0], [12.7, 35.0], [12.8, 35.0], [12.9, 35.0], [13.0, 35.0], [13.1, 35.0], [13.2, 35.0], [13.3, 35.0], [13.4, 35.0], [13.5, 56.0], [13.6, 56.0], [13.7, 56.0], [13.8, 56.0], [13.9, 56.0], [14.0, 58.0], [14.1, 58.0], [14.2, 58.0], [14.3, 58.0], [14.4, 64.0], [14.5, 64.0], [14.6, 64.0], [14.7, 64.0], [14.8, 65.0], [14.9, 65.0], [15.0, 65.0], [15.1, 65.0], [15.2, 65.0], [15.3, 77.0], [15.4, 77.0], [15.5, 77.0], [15.6, 77.0], [15.7, 84.0], [15.8, 84.0], [15.9, 84.0], [16.0, 84.0], [16.1, 84.0], [16.2, 114.0], [16.3, 114.0], [16.4, 114.0], [16.5, 114.0], [16.6, 122.0], [16.7, 122.0], [16.8, 122.0], [16.9, 122.0], [17.0, 122.0], [17.1, 130.0], [17.2, 130.0], [17.3, 130.0], [17.4, 130.0], [17.5, 145.0], [17.6, 145.0], [17.7, 145.0], [17.8, 145.0], [17.9, 145.0], [18.0, 162.0], [18.1, 162.0], [18.2, 162.0], [18.3, 162.0], [18.4, 164.0], [18.5, 164.0], [18.6, 164.0], [18.7, 164.0], [18.8, 164.0], [18.9, 182.0], [19.0, 182.0], [19.1, 182.0], [19.2, 182.0], [19.3, 184.0], [19.4, 184.0], [19.5, 184.0], [19.6, 184.0], [19.7, 184.0], [19.8, 199.0], [19.9, 199.0], [20.0, 199.0], [20.1, 199.0], [20.2, 205.0], [20.3, 205.0], [20.4, 205.0], [20.5, 205.0], [20.6, 205.0], [20.7, 210.0], [20.8, 210.0], [20.9, 210.0], [21.0, 210.0], [21.1, 228.0], [21.2, 228.0], [21.3, 228.0], [21.4, 228.0], [21.5, 228.0], [21.6, 229.0], [21.7, 229.0], [21.8, 229.0], [21.9, 229.0], [22.0, 244.0], [22.1, 244.0], [22.2, 244.0], [22.3, 244.0], [22.4, 244.0], [22.5, 255.0], [22.6, 255.0], [22.7, 255.0], [22.8, 255.0], [22.9, 271.0], [23.0, 271.0], [23.1, 271.0], [23.2, 271.0], [23.3, 271.0], [23.4, 274.0], [23.5, 274.0], [23.6, 274.0], [23.7, 274.0], [23.8, 284.0], [23.9, 284.0], [24.0, 284.0], [24.1, 284.0], [24.2, 284.0], [24.3, 297.0], [24.4, 297.0], [24.5, 297.0], [24.6, 297.0], [24.7, 300.0], [24.8, 300.0], [24.9, 300.0], [25.0, 300.0], [25.1, 300.0], [25.2, 356.0], [25.3, 356.0], [25.4, 356.0], [25.5, 356.0], [25.6, 359.0], [25.7, 359.0], [25.8, 359.0], [25.9, 359.0], [26.0, 359.0], [26.1, 362.0], [26.2, 362.0], [26.3, 362.0], [26.4, 362.0], [26.5, 384.0], [26.6, 384.0], [26.7, 384.0], [26.8, 384.0], [26.9, 384.0], [27.0, 401.0], [27.1, 401.0], [27.2, 401.0], [27.3, 401.0], [27.4, 413.0], [27.5, 413.0], [27.6, 413.0], [27.7, 413.0], [27.8, 413.0], [27.9, 415.0], [28.0, 415.0], [28.1, 415.0], [28.2, 415.0], [28.3, 449.0], [28.4, 449.0], [28.5, 449.0], [28.6, 449.0], [28.7, 453.0], [28.8, 453.0], [28.9, 453.0], [29.0, 453.0], [29.1, 453.0], [29.2, 461.0], [29.3, 461.0], [29.4, 461.0], [29.5, 461.0], [29.6, 487.0], [29.7, 487.0], [29.8, 487.0], [29.9, 487.0], [30.0, 487.0], [30.1, 499.0], [30.2, 499.0], [30.3, 499.0], [30.4, 499.0], [30.5, 512.0], [30.6, 512.0], [30.7, 512.0], [30.8, 512.0], [30.9, 512.0], [31.0, 515.0], [31.1, 515.0], [31.2, 515.0], [31.3, 515.0], [31.4, 518.0], [31.5, 518.0], [31.6, 518.0], [31.7, 518.0], [31.8, 518.0], [31.9, 519.0], [32.0, 519.0], [32.1, 519.0], [32.2, 519.0], [32.3, 562.0], [32.4, 562.0], [32.5, 562.0], [32.6, 562.0], [32.7, 562.0], [32.8, 569.0], [32.9, 569.0], [33.0, 569.0], [33.1, 569.0], [33.2, 572.0], [33.3, 572.0], [33.4, 572.0], [33.5, 572.0], [33.6, 572.0], [33.7, 576.0], [33.8, 576.0], [33.9, 576.0], [34.0, 576.0], [34.1, 594.0], [34.2, 594.0], [34.3, 594.0], [34.4, 594.0], [34.5, 594.0], [34.6, 624.0], [34.7, 624.0], [34.8, 624.0], [34.9, 624.0], [35.0, 625.0], [35.1, 625.0], [35.2, 625.0], [35.3, 625.0], [35.4, 625.0], [35.5, 626.0], [35.6, 626.0], [35.7, 626.0], [35.8, 626.0], [35.9, 667.0], [36.0, 667.0], [36.1, 667.0], [36.2, 667.0], [36.3, 667.0], [36.4, 668.0], [36.5, 668.0], [36.6, 668.0], [36.7, 668.0], [36.8, 674.0], [36.9, 674.0], [37.0, 674.0], [37.1, 674.0], [37.2, 674.0], [37.3, 675.0], [37.4, 675.0], [37.5, 675.0], [37.6, 675.0], [37.7, 682.0], [37.8, 682.0], [37.9, 682.0], [38.0, 682.0], [38.1, 682.0], [38.2, 688.0], [38.3, 688.0], [38.4, 688.0], [38.5, 688.0], [38.6, 698.0], [38.7, 698.0], [38.8, 698.0], [38.9, 698.0], [39.0, 698.0], [39.1, 701.0], [39.2, 701.0], [39.3, 701.0], [39.4, 701.0], [39.5, 717.0], [39.6, 717.0], [39.7, 717.0], [39.8, 717.0], [39.9, 717.0], [40.0, 738.0], [40.1, 738.0], [40.2, 738.0], [40.3, 738.0], [40.4, 750.0], [40.5, 750.0], [40.6, 750.0], [40.7, 750.0], [40.8, 750.0], [40.9, 751.0], [41.0, 751.0], [41.1, 751.0], [41.2, 751.0], [41.3, 765.0], [41.4, 765.0], [41.5, 765.0], [41.6, 765.0], [41.7, 765.0], [41.8, 770.0], [41.9, 770.0], [42.0, 770.0], [42.1, 770.0], [42.2, 798.0], [42.3, 798.0], [42.4, 798.0], [42.5, 798.0], [42.6, 798.0], [42.7, 799.0], [42.8, 799.0], [42.9, 799.0], [43.0, 799.0], [43.1, 819.0], [43.2, 819.0], [43.3, 819.0], [43.4, 819.0], [43.5, 828.0], [43.6, 828.0], [43.7, 828.0], [43.8, 828.0], [43.9, 828.0], [44.0, 840.0], [44.1, 840.0], [44.2, 840.0], [44.3, 840.0], [44.4, 863.0], [44.5, 863.0], [44.6, 863.0], [44.7, 863.0], [44.8, 863.0], [44.9, 864.0], [45.0, 864.0], [45.1, 864.0], [45.2, 864.0], [45.3, 871.0], [45.4, 871.0], [45.5, 871.0], [45.6, 871.0], [45.7, 871.0], [45.8, 871.0], [45.9, 871.0], [46.0, 871.0], [46.1, 871.0], [46.2, 876.0], [46.3, 876.0], [46.4, 876.0], [46.5, 876.0], [46.6, 876.0], [46.7, 886.0], [46.8, 886.0], [46.9, 886.0], [47.0, 886.0], [47.1, 926.0], [47.2, 926.0], [47.3, 926.0], [47.4, 926.0], [47.5, 926.0], [47.6, 974.0], [47.7, 974.0], [47.8, 974.0], [47.9, 974.0], [48.0, 1035.0], [48.1, 1035.0], [48.2, 1035.0], [48.3, 1035.0], [48.4, 1035.0], [48.5, 1290.0], [48.6, 1290.0], [48.7, 1290.0], [48.8, 1290.0], [48.9, 17029.0], [49.0, 17029.0], [49.1, 17029.0], [49.2, 17029.0], [49.3, 17029.0], [49.4, 17925.0], [49.5, 17925.0], [49.6, 17925.0], [49.7, 17925.0], [49.8, 18494.0], [49.9, 18494.0], [50.0, 18494.0], [50.1, 18494.0], [50.2, 18494.0], [50.3, 18818.0], [50.4, 18818.0], [50.5, 18818.0], [50.6, 18818.0], [50.7, 20032.0], [50.8, 20032.0], [50.9, 20032.0], [51.0, 20032.0], [51.1, 20032.0], [51.2, 23232.0], [51.3, 23232.0], [51.4, 23232.0], [51.5, 23232.0], [51.6, 26298.0], [51.7, 26298.0], [51.8, 26298.0], [51.9, 26298.0], [52.0, 26298.0], [52.1, 26716.0], [52.2, 26716.0], [52.3, 26716.0], [52.4, 26716.0], [52.5, 26912.0], [52.6, 26912.0], [52.7, 26912.0], [52.8, 26912.0], [52.9, 26912.0], [53.0, 27187.0], [53.1, 27187.0], [53.2, 27187.0], [53.3, 27187.0], [53.4, 27577.0], [53.5, 27577.0], [53.6, 27577.0], [53.7, 27577.0], [53.8, 27577.0], [53.9, 27640.0], [54.0, 27640.0], [54.1, 27640.0], [54.2, 27640.0], [54.3, 28103.0], [54.4, 28103.0], [54.5, 28103.0], [54.6, 28103.0], [54.7, 28103.0], [54.8, 28204.0], [54.9, 28204.0], [55.0, 28204.0], [55.1, 28204.0], [55.2, 28773.0], [55.3, 28773.0], [55.4, 28773.0], [55.5, 28773.0], [55.6, 28773.0], [55.7, 28793.0], [55.8, 28793.0], [55.9, 28793.0], [56.0, 28793.0], [56.1, 28940.0], [56.2, 28940.0], [56.3, 28940.0], [56.4, 28940.0], [56.5, 28940.0], [56.6, 29385.0], [56.7, 29385.0], [56.8, 29385.0], [56.9, 29385.0], [57.0, 29677.0], [57.1, 29677.0], [57.2, 29677.0], [57.3, 29677.0], [57.4, 30681.0], [57.5, 30681.0], [57.6, 30681.0], [57.7, 30681.0], [57.8, 30681.0], [57.9, 31142.0], [58.0, 31142.0], [58.1, 31142.0], [58.2, 31142.0], [58.3, 31761.0], [58.4, 31761.0], [58.5, 31761.0], [58.6, 31761.0], [58.7, 31761.0], [58.8, 31783.0], [58.9, 31783.0], [59.0, 31783.0], [59.1, 31783.0], [59.2, 33605.0], [59.3, 33605.0], [59.4, 33605.0], [59.5, 33605.0], [59.6, 33605.0], [59.7, 33914.0], [59.8, 33914.0], [59.9, 33914.0], [60.0, 33914.0], [60.1, 34345.0], [60.2, 34345.0], [60.3, 34345.0], [60.4, 34345.0], [60.5, 34345.0], [60.6, 34875.0], [60.7, 34875.0], [60.8, 34875.0], [60.9, 34875.0], [61.0, 35022.0], [61.1, 35022.0], [61.2, 35022.0], [61.3, 35022.0], [61.4, 35022.0], [61.5, 35802.0], [61.6, 35802.0], [61.7, 35802.0], [61.8, 35802.0], [61.9, 37191.0], [62.0, 37191.0], [62.1, 37191.0], [62.2, 37191.0], [62.3, 37191.0], [62.4, 37564.0], [62.5, 37564.0], [62.6, 37564.0], [62.7, 37564.0], [62.8, 37786.0], [62.9, 37786.0], [63.0, 37786.0], [63.1, 37786.0], [63.2, 37786.0], [63.3, 38330.0], [63.4, 38330.0], [63.5, 38330.0], [63.6, 38330.0], [63.7, 38396.0], [63.8, 38396.0], [63.9, 38396.0], [64.0, 38396.0], [64.1, 38396.0], [64.2, 38694.0], [64.3, 38694.0], [64.4, 38694.0], [64.5, 38694.0], [64.6, 38728.0], [64.7, 38728.0], [64.8, 38728.0], [64.9, 38728.0], [65.0, 38728.0], [65.1, 39462.0], [65.2, 39462.0], [65.3, 39462.0], [65.4, 39462.0], [65.5, 39497.0], [65.6, 39497.0], [65.7, 39497.0], [65.8, 39497.0], [65.9, 39497.0], [66.0, 39817.0], [66.1, 39817.0], [66.2, 39817.0], [66.3, 39817.0], [66.4, 40745.0], [66.5, 40745.0], [66.6, 40745.0], [66.7, 40745.0], [66.8, 40745.0], [66.9, 41205.0], [67.0, 41205.0], [67.1, 41205.0], [67.2, 41205.0], [67.3, 41453.0], [67.4, 41453.0], [67.5, 41453.0], [67.6, 41453.0], [67.7, 41453.0], [67.8, 41876.0], [67.9, 41876.0], [68.0, 41876.0], [68.1, 41876.0], [68.2, 41959.0], [68.3, 41959.0], [68.4, 41959.0], [68.5, 41959.0], [68.6, 41959.0], [68.7, 42006.0], [68.8, 42006.0], [68.9, 42006.0], [69.0, 42006.0], [69.1, 42117.0], [69.2, 42117.0], [69.3, 42117.0], [69.4, 42117.0], [69.5, 42117.0], [69.6, 43094.0], [69.7, 43094.0], [69.8, 43094.0], [69.9, 43094.0], [70.0, 44468.0], [70.1, 44468.0], [70.2, 44468.0], [70.3, 44468.0], [70.4, 44468.0], [70.5, 45017.0], [70.6, 45017.0], [70.7, 45017.0], [70.8, 45017.0], [70.9, 45927.0], [71.0, 45927.0], [71.1, 45927.0], [71.2, 45927.0], [71.3, 45927.0], [71.4, 45986.0], [71.5, 45986.0], [71.6, 45986.0], [71.7, 45986.0], [71.8, 46939.0], [71.9, 46939.0], [72.0, 46939.0], [72.1, 46939.0], [72.2, 47039.0], [72.3, 47039.0], [72.4, 47039.0], [72.5, 47039.0], [72.6, 47039.0], [72.7, 47216.0], [72.8, 47216.0], [72.9, 47216.0], [73.0, 47216.0], [73.1, 47320.0], [73.2, 47320.0], [73.3, 47320.0], [73.4, 47320.0], [73.5, 47320.0], [73.6, 47530.0], [73.7, 47530.0], [73.8, 47530.0], [73.9, 47530.0], [74.0, 47610.0], [74.1, 47610.0], [74.2, 47610.0], [74.3, 47610.0], [74.4, 47610.0], [74.5, 47850.0], [74.6, 47850.0], [74.7, 47850.0], [74.8, 47850.0], [74.9, 48111.0], [75.0, 48111.0], [75.1, 48111.0], [75.2, 48111.0], [75.3, 48111.0], [75.4, 48335.0], [75.5, 48335.0], [75.6, 48335.0], [75.7, 48335.0], [75.8, 48552.0], [75.9, 48552.0], [76.0, 48552.0], [76.1, 48552.0], [76.2, 48552.0], [76.3, 48819.0], [76.4, 48819.0], [76.5, 48819.0], [76.6, 48819.0], [76.7, 48977.0], [76.8, 48977.0], [76.9, 48977.0], [77.0, 48977.0], [77.1, 48977.0], [77.2, 49183.0], [77.3, 49183.0], [77.4, 49183.0], [77.5, 49183.0], [77.6, 49706.0], [77.7, 49706.0], [77.8, 49706.0], [77.9, 49706.0], [78.0, 49706.0], [78.1, 50128.0], [78.2, 50128.0], [78.3, 50128.0], [78.4, 50128.0], [78.5, 51065.0], [78.6, 51065.0], [78.7, 51065.0], [78.8, 51065.0], [78.9, 51065.0], [79.0, 51272.0], [79.1, 51272.0], [79.2, 51272.0], [79.3, 51272.0], [79.4, 51727.0], [79.5, 51727.0], [79.6, 51727.0], [79.7, 51727.0], [79.8, 51727.0], [79.9, 51957.0], [80.0, 51957.0], [80.1, 51957.0], [80.2, 51957.0], [80.3, 51971.0], [80.4, 51971.0], [80.5, 51971.0], [80.6, 51971.0], [80.7, 51971.0], [80.8, 52267.0], [80.9, 52267.0], [81.0, 52267.0], [81.1, 52267.0], [81.2, 52327.0], [81.3, 52327.0], [81.4, 52327.0], [81.5, 52327.0], [81.6, 52327.0], [81.7, 52351.0], [81.8, 52351.0], [81.9, 52351.0], [82.0, 52351.0], [82.1, 52423.0], [82.2, 52423.0], [82.3, 52423.0], [82.4, 52423.0], [82.5, 52423.0], [82.6, 52667.0], [82.7, 52667.0], [82.8, 52667.0], [82.9, 52667.0], [83.0, 52792.0], [83.1, 52792.0], [83.2, 52792.0], [83.3, 52792.0], [83.4, 52792.0], [83.5, 52799.0], [83.6, 52799.0], [83.7, 52799.0], [83.8, 52799.0], [83.9, 52885.0], [84.0, 52885.0], [84.1, 52885.0], [84.2, 52885.0], [84.3, 52885.0], [84.4, 52920.0], [84.5, 52920.0], [84.6, 52920.0], [84.7, 52920.0], [84.8, 53185.0], [84.9, 53185.0], [85.0, 53185.0], [85.1, 53185.0], [85.2, 53185.0], [85.3, 53208.0], [85.4, 53208.0], [85.5, 53208.0], [85.6, 53208.0], [85.7, 53278.0], [85.8, 53278.0], [85.9, 53278.0], [86.0, 53278.0], [86.1, 53320.0], [86.2, 53320.0], [86.3, 53320.0], [86.4, 53320.0], [86.5, 53320.0], [86.6, 53476.0], [86.7, 53476.0], [86.8, 53476.0], [86.9, 53476.0], [87.0, 53502.0], [87.1, 53502.0], [87.2, 53502.0], [87.3, 53502.0], [87.4, 53502.0], [87.5, 53544.0], [87.6, 53544.0], [87.7, 53544.0], [87.8, 53544.0], [87.9, 53823.0], [88.0, 53823.0], [88.1, 53823.0], [88.2, 53823.0], [88.3, 53823.0], [88.4, 53931.0], [88.5, 53931.0], [88.6, 53931.0], [88.7, 53931.0], [88.8, 53948.0], [88.9, 53948.0], [89.0, 53948.0], [89.1, 53948.0], [89.2, 53948.0], [89.3, 54030.0], [89.4, 54030.0], [89.5, 54030.0], [89.6, 54030.0], [89.7, 54056.0], [89.8, 54056.0], [89.9, 54056.0], [90.0, 54056.0], [90.1, 54056.0], [90.2, 54399.0], [90.3, 54399.0], [90.4, 54399.0], [90.5, 54399.0], [90.6, 54451.0], [90.7, 54451.0], [90.8, 54451.0], [90.9, 54451.0], [91.0, 54451.0], [91.1, 54614.0], [91.2, 54614.0], [91.3, 54614.0], [91.4, 54614.0], [91.5, 54634.0], [91.6, 54634.0], [91.7, 54634.0], [91.8, 54634.0], [91.9, 54634.0], [92.0, 54842.0], [92.1, 54842.0], [92.2, 54842.0], [92.3, 54842.0], [92.4, 54973.0], [92.5, 54973.0], [92.6, 54973.0], [92.7, 54973.0], [92.8, 54973.0], [92.9, 55086.0], [93.0, 55086.0], [93.1, 55086.0], [93.2, 55086.0], [93.3, 55119.0], [93.4, 55119.0], [93.5, 55119.0], [93.6, 55119.0], [93.7, 55119.0], [93.8, 55125.0], [93.9, 55125.0], [94.0, 55125.0], [94.1, 55125.0], [94.2, 55364.0], [94.3, 55364.0], [94.4, 55364.0], [94.5, 55364.0], [94.6, 55364.0], [94.7, 55676.0], [94.8, 55676.0], [94.9, 55676.0], [95.0, 55676.0], [95.1, 55784.0], [95.2, 55784.0], [95.3, 55784.0], [95.4, 55784.0], [95.5, 55784.0], [95.6, 63582.0], [95.7, 63582.0], [95.8, 63582.0], [95.9, 63582.0], [96.0, 63683.0], [96.1, 63683.0], [96.2, 63683.0], [96.3, 63683.0], [96.4, 63683.0], [96.5, 65542.0], [96.6, 65542.0], [96.7, 65542.0], [96.8, 65542.0], [96.9, 65812.0], [97.0, 65812.0], [97.1, 65812.0], [97.2, 65812.0], [97.3, 65812.0], [97.4, 65960.0], [97.5, 65960.0], [97.6, 65960.0], [97.7, 65960.0], [97.8, 66232.0], [97.9, 66232.0], [98.0, 66232.0], [98.1, 66232.0], [98.2, 66232.0], [98.3, 66567.0], [98.4, 66567.0], [98.5, 66567.0], [98.6, 66567.0], [98.7, 66910.0], [98.8, 66910.0], [98.9, 66910.0], [99.0, 66910.0], [99.1, 66910.0], [99.2, 67029.0], [99.3, 67029.0], [99.4, 67029.0], [99.5, 67029.0], [99.6, 67659.0], [99.7, 67659.0], [99.8, 67659.0], [99.9, 67659.0], [100.0, 67659.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 7.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 10.0], [2.9, 10.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 11.0], [4.0, 11.0], [4.1, 11.0], [4.2, 11.0], [4.3, 11.0], [4.4, 11.0], [4.5, 11.0], [4.6, 11.0], [4.7, 12.0], [4.8, 12.0], [4.9, 12.0], [5.0, 12.0], [5.1, 12.0], [5.2, 12.0], [5.3, 12.0], [5.4, 12.0], [5.5, 12.0], [5.6, 12.0], [5.7, 12.0], [5.8, 12.0], [5.9, 12.0], [6.0, 12.0], [6.1, 12.0], [6.2, 12.0], [6.3, 16.0], [6.4, 16.0], [6.5, 16.0], [6.6, 16.0], [6.7, 16.0], [6.8, 16.0], [6.9, 16.0], [7.0, 16.0], [7.1, 16.0], [7.2, 16.0], [7.3, 16.0], [7.4, 16.0], [7.5, 16.0], [7.6, 16.0], [7.7, 16.0], [7.8, 16.0], [7.9, 16.0], [8.0, 16.0], [8.1, 16.0], [8.2, 17.0], [8.3, 17.0], [8.4, 17.0], [8.5, 17.0], [8.6, 18.0], [8.7, 18.0], [8.8, 18.0], [8.9, 18.0], [9.0, 18.0], [9.1, 18.0], [9.2, 18.0], [9.3, 18.0], [9.4, 18.0], [9.5, 18.0], [9.6, 18.0], [9.7, 18.0], [9.8, 18.0], [9.9, 18.0], [10.0, 18.0], [10.1, 18.0], [10.2, 19.0], [10.3, 19.0], [10.4, 19.0], [10.5, 19.0], [10.6, 24.0], [10.7, 24.0], [10.8, 24.0], [10.9, 24.0], [11.0, 24.0], [11.1, 24.0], [11.2, 24.0], [11.3, 24.0], [11.4, 24.0], [11.5, 24.0], [11.6, 24.0], [11.7, 26.0], [11.8, 26.0], [11.9, 26.0], [12.0, 26.0], [12.1, 27.0], [12.2, 27.0], [12.3, 27.0], [12.4, 27.0], [12.5, 28.0], [12.6, 28.0], [12.7, 28.0], [12.8, 28.0], [12.9, 29.0], [13.0, 29.0], [13.1, 29.0], [13.2, 29.0], [13.3, 30.0], [13.4, 30.0], [13.5, 30.0], [13.6, 30.0], [13.7, 31.0], [13.8, 31.0], [13.9, 31.0], [14.0, 31.0], [14.1, 31.0], [14.2, 31.0], [14.3, 31.0], [14.4, 38.0], [14.5, 38.0], [14.6, 38.0], [14.7, 38.0], [14.8, 38.0], [14.9, 38.0], [15.0, 38.0], [15.1, 38.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 49.0], [15.7, 49.0], [15.8, 49.0], [15.9, 49.0], [16.0, 50.0], [16.1, 50.0], [16.2, 50.0], [16.3, 50.0], [16.4, 53.0], [16.5, 53.0], [16.6, 53.0], [16.7, 53.0], [16.8, 53.0], [16.9, 53.0], [17.0, 53.0], [17.1, 53.0], [17.2, 54.0], [17.3, 54.0], [17.4, 54.0], [17.5, 54.0], [17.6, 60.0], [17.7, 60.0], [17.8, 60.0], [17.9, 61.0], [18.0, 61.0], [18.1, 61.0], [18.2, 61.0], [18.3, 76.0], [18.4, 76.0], [18.5, 76.0], [18.6, 76.0], [18.7, 81.0], [18.8, 81.0], [18.9, 81.0], [19.0, 81.0], [19.1, 81.0], [19.2, 81.0], [19.3, 81.0], [19.4, 81.0], [19.5, 81.0], [19.6, 81.0], [19.7, 81.0], [19.8, 81.0], [19.9, 89.0], [20.0, 89.0], [20.1, 89.0], [20.2, 89.0], [20.3, 97.0], [20.4, 97.0], [20.5, 97.0], [20.6, 97.0], [20.7, 105.0], [20.8, 105.0], [20.9, 105.0], [21.0, 105.0], [21.1, 111.0], [21.2, 111.0], [21.3, 111.0], [21.4, 111.0], [21.5, 115.0], [21.6, 115.0], [21.7, 115.0], [21.8, 135.0], [21.9, 135.0], [22.0, 135.0], [22.1, 135.0], [22.2, 157.0], [22.3, 157.0], [22.4, 157.0], [22.5, 157.0], [22.6, 162.0], [22.7, 162.0], [22.8, 162.0], [22.9, 162.0], [23.0, 164.0], [23.1, 164.0], [23.2, 164.0], [23.3, 164.0], [23.4, 195.0], [23.5, 195.0], [23.6, 195.0], [23.7, 195.0], [23.8, 201.0], [23.9, 201.0], [24.0, 201.0], [24.1, 201.0], [24.2, 216.0], [24.3, 216.0], [24.4, 216.0], [24.5, 216.0], [24.6, 217.0], [24.7, 217.0], [24.8, 217.0], [24.9, 217.0], [25.0, 218.0], [25.1, 218.0], [25.2, 218.0], [25.3, 225.0], [25.4, 225.0], [25.5, 225.0], [25.6, 225.0], [25.7, 238.0], [25.8, 238.0], [25.9, 238.0], [26.0, 238.0], [26.1, 253.0], [26.2, 253.0], [26.3, 253.0], [26.4, 253.0], [26.5, 255.0], [26.6, 255.0], [26.7, 255.0], [26.8, 255.0], [26.9, 259.0], [27.0, 259.0], [27.1, 259.0], [27.2, 259.0], [27.3, 278.0], [27.4, 278.0], [27.5, 278.0], [27.6, 278.0], [27.7, 283.0], [27.8, 283.0], [27.9, 283.0], [28.0, 283.0], [28.1, 290.0], [28.2, 290.0], [28.3, 290.0], [28.4, 290.0], [28.5, 293.0], [28.6, 293.0], [28.7, 293.0], [28.8, 293.0], [28.9, 293.0], [29.0, 293.0], [29.1, 293.0], [29.2, 306.0], [29.3, 306.0], [29.4, 306.0], [29.5, 306.0], [29.6, 310.0], [29.7, 310.0], [29.8, 310.0], [29.9, 310.0], [30.0, 315.0], [30.1, 315.0], [30.2, 315.0], [30.3, 315.0], [30.4, 318.0], [30.5, 318.0], [30.6, 318.0], [30.7, 318.0], [30.8, 343.0], [30.9, 343.0], [31.0, 343.0], [31.1, 343.0], [31.2, 350.0], [31.3, 350.0], [31.4, 350.0], [31.5, 350.0], [31.6, 358.0], [31.7, 358.0], [31.8, 358.0], [31.9, 358.0], [32.0, 360.0], [32.1, 360.0], [32.2, 360.0], [32.3, 361.0], [32.4, 361.0], [32.5, 361.0], [32.6, 361.0], [32.7, 367.0], [32.8, 367.0], [32.9, 367.0], [33.0, 367.0], [33.1, 376.0], [33.2, 376.0], [33.3, 376.0], [33.4, 376.0], [33.5, 384.0], [33.6, 384.0], [33.7, 384.0], [33.8, 384.0], [33.9, 394.0], [34.0, 394.0], [34.1, 394.0], [34.2, 394.0], [34.3, 421.0], [34.4, 421.0], [34.5, 421.0], [34.6, 421.0], [34.7, 424.0], [34.8, 424.0], [34.9, 424.0], [35.0, 424.0], [35.1, 459.0], [35.2, 459.0], [35.3, 459.0], [35.4, 459.0], [35.5, 485.0], [35.6, 485.0], [35.7, 485.0], [35.8, 489.0], [35.9, 489.0], [36.0, 489.0], [36.1, 489.0], [36.2, 513.0], [36.3, 513.0], [36.4, 513.0], [36.5, 513.0], [36.6, 543.0], [36.7, 543.0], [36.8, 543.0], [36.9, 543.0], [37.0, 549.0], [37.1, 549.0], [37.2, 549.0], [37.3, 549.0], [37.4, 582.0], [37.5, 582.0], [37.6, 582.0], [37.7, 582.0], [37.8, 608.0], [37.9, 608.0], [38.0, 608.0], [38.1, 608.0], [38.2, 622.0], [38.3, 622.0], [38.4, 622.0], [38.5, 622.0], [38.6, 640.0], [38.7, 640.0], [38.8, 640.0], [38.9, 640.0], [39.0, 671.0], [39.1, 671.0], [39.2, 671.0], [39.3, 673.0], [39.4, 673.0], [39.5, 673.0], [39.6, 673.0], [39.7, 677.0], [39.8, 677.0], [39.9, 677.0], [40.0, 677.0], [40.1, 680.0], [40.2, 680.0], [40.3, 680.0], [40.4, 680.0], [40.5, 684.0], [40.6, 684.0], [40.7, 684.0], [40.8, 684.0], [40.9, 688.0], [41.0, 688.0], [41.1, 688.0], [41.2, 688.0], [41.3, 690.0], [41.4, 690.0], [41.5, 690.0], [41.6, 690.0], [41.7, 777.0], [41.8, 777.0], [41.9, 777.0], [42.0, 777.0], [42.1, 803.0], [42.2, 803.0], [42.3, 803.0], [42.4, 803.0], [42.5, 853.0], [42.6, 853.0], [42.7, 853.0], [42.8, 853.0], [42.9, 860.0], [43.0, 860.0], [43.1, 860.0], [43.2, 883.0], [43.3, 883.0], [43.4, 883.0], [43.5, 883.0], [43.6, 913.0], [43.7, 913.0], [43.8, 913.0], [43.9, 913.0], [44.0, 918.0], [44.1, 918.0], [44.2, 918.0], [44.3, 918.0], [44.4, 936.0], [44.5, 936.0], [44.6, 936.0], [44.7, 936.0], [44.8, 943.0], [44.9, 943.0], [45.0, 943.0], [45.1, 943.0], [45.2, 1032.0], [45.3, 1032.0], [45.4, 1032.0], [45.5, 1032.0], [45.6, 2141.0], [45.7, 2141.0], [45.8, 2141.0], [45.9, 2141.0], [46.0, 2596.0], [46.1, 2596.0], [46.2, 2596.0], [46.3, 2596.0], [46.4, 16157.0], [46.5, 16157.0], [46.6, 16157.0], [46.7, 16175.0], [46.8, 16175.0], [46.9, 16175.0], [47.0, 16175.0], [47.1, 17075.0], [47.2, 17075.0], [47.3, 17075.0], [47.4, 17075.0], [47.5, 17981.0], [47.6, 17981.0], [47.7, 17981.0], [47.8, 17981.0], [47.9, 19629.0], [48.0, 19629.0], [48.1, 19629.0], [48.2, 19629.0], [48.3, 20787.0], [48.4, 20787.0], [48.5, 20787.0], [48.6, 20787.0], [48.7, 21303.0], [48.8, 21303.0], [48.9, 21303.0], [49.0, 21303.0], [49.1, 22194.0], [49.2, 22194.0], [49.3, 22194.0], [49.4, 22194.0], [49.5, 22539.0], [49.6, 22539.0], [49.7, 22539.0], [49.8, 22539.0], [49.9, 24839.0], [50.0, 24839.0], [50.1, 24839.0], [50.2, 25463.0], [50.3, 25463.0], [50.4, 25463.0], [50.5, 25463.0], [50.6, 25919.0], [50.7, 25919.0], [50.8, 25919.0], [50.9, 25919.0], [51.0, 30510.0], [51.1, 30510.0], [51.2, 30510.0], [51.3, 30510.0], [51.4, 34267.0], [51.5, 34267.0], [51.6, 34267.0], [51.7, 34267.0], [51.8, 34799.0], [51.9, 34799.0], [52.0, 34799.0], [52.1, 34799.0], [52.2, 34834.0], [52.3, 34834.0], [52.4, 34834.0], [52.5, 34834.0], [52.6, 35909.0], [52.7, 35909.0], [52.8, 35909.0], [52.9, 35909.0], [53.0, 36418.0], [53.1, 36418.0], [53.2, 36418.0], [53.3, 36418.0], [53.4, 37378.0], [53.5, 37378.0], [53.6, 37378.0], [53.7, 37947.0], [53.8, 37947.0], [53.9, 37947.0], [54.0, 37947.0], [54.1, 39833.0], [54.2, 39833.0], [54.3, 39833.0], [54.4, 39833.0], [54.5, 42203.0], [54.6, 42203.0], [54.7, 42203.0], [54.8, 42203.0], [54.9, 44485.0], [55.0, 44485.0], [55.1, 44485.0], [55.2, 44485.0], [55.3, 44564.0], [55.4, 44564.0], [55.5, 44564.0], [55.6, 44564.0], [55.7, 44868.0], [55.8, 44868.0], [55.9, 44868.0], [56.0, 44868.0], [56.1, 46276.0], [56.2, 46276.0], [56.3, 46276.0], [56.4, 46276.0], [56.5, 46286.0], [56.6, 46286.0], [56.7, 46286.0], [56.8, 46286.0], [56.9, 47004.0], [57.0, 47004.0], [57.1, 47004.0], [57.2, 47096.0], [57.3, 47096.0], [57.4, 47096.0], [57.5, 47096.0], [57.6, 47315.0], [57.7, 47315.0], [57.8, 47315.0], [57.9, 47315.0], [58.0, 47351.0], [58.1, 47351.0], [58.2, 47351.0], [58.3, 47351.0], [58.4, 48377.0], [58.5, 48377.0], [58.6, 48377.0], [58.7, 48377.0], [58.8, 48777.0], [58.9, 48777.0], [59.0, 48777.0], [59.1, 48777.0], [59.2, 48928.0], [59.3, 48928.0], [59.4, 48928.0], [59.5, 48928.0], [59.6, 48929.0], [59.7, 48929.0], [59.8, 48929.0], [59.9, 48929.0], [60.0, 49057.0], [60.1, 49057.0], [60.2, 49057.0], [60.3, 49057.0], [60.4, 49070.0], [60.5, 49070.0], [60.6, 49070.0], [60.7, 49070.0], [60.8, 49499.0], [60.9, 49499.0], [61.0, 49499.0], [61.1, 49587.0], [61.2, 49587.0], [61.3, 49587.0], [61.4, 49587.0], [61.5, 50090.0], [61.6, 50090.0], [61.7, 50090.0], [61.8, 50090.0], [61.9, 50100.0], [62.0, 50100.0], [62.1, 50100.0], [62.2, 50100.0], [62.3, 50515.0], [62.4, 50515.0], [62.5, 50515.0], [62.6, 50515.0], [62.7, 50832.0], [62.8, 50832.0], [62.9, 50832.0], [63.0, 50832.0], [63.1, 50878.0], [63.2, 50878.0], [63.3, 50878.0], [63.4, 50878.0], [63.5, 50992.0], [63.6, 50992.0], [63.7, 50992.0], [63.8, 50992.0], [63.9, 51201.0], [64.0, 51201.0], [64.1, 51201.0], [64.2, 51201.0], [64.3, 51327.0], [64.4, 51327.0], [64.5, 51327.0], [64.6, 51632.0], [64.7, 51632.0], [64.8, 51632.0], [64.9, 51632.0], [65.0, 51741.0], [65.1, 51741.0], [65.2, 51741.0], [65.3, 51741.0], [65.4, 51767.0], [65.5, 51767.0], [65.6, 51767.0], [65.7, 51767.0], [65.8, 51876.0], [65.9, 51876.0], [66.0, 51876.0], [66.1, 51876.0], [66.2, 51988.0], [66.3, 51988.0], [66.4, 51988.0], [66.5, 51988.0], [66.6, 52012.0], [66.7, 52012.0], [66.8, 52012.0], [66.9, 52012.0], [67.0, 52081.0], [67.1, 52081.0], [67.2, 52081.0], [67.3, 52081.0], [67.4, 52447.0], [67.5, 52447.0], [67.6, 52447.0], [67.7, 52447.0], [67.8, 52464.0], [67.9, 52464.0], [68.0, 52464.0], [68.1, 52476.0], [68.2, 52476.0], [68.3, 52476.0], [68.4, 52476.0], [68.5, 52477.0], [68.6, 52477.0], [68.7, 52477.0], [68.8, 52477.0], [68.9, 52486.0], [69.0, 52486.0], [69.1, 52486.0], [69.2, 52486.0], [69.3, 52659.0], [69.4, 52659.0], [69.5, 52659.0], [69.6, 52659.0], [69.7, 52781.0], [69.8, 52781.0], [69.9, 52781.0], [70.0, 52781.0], [70.1, 53015.0], [70.2, 53015.0], [70.3, 53015.0], [70.4, 53015.0], [70.5, 53075.0], [70.6, 53075.0], [70.7, 53075.0], [70.8, 53075.0], [70.9, 53417.0], [71.0, 53417.0], [71.1, 53417.0], [71.2, 53417.0], [71.3, 53590.0], [71.4, 53590.0], [71.5, 53590.0], [71.6, 53738.0], [71.7, 53738.0], [71.8, 53738.0], [71.9, 53738.0], [72.0, 53914.0], [72.1, 53914.0], [72.2, 53914.0], [72.3, 53914.0], [72.4, 53917.0], [72.5, 53917.0], [72.6, 53917.0], [72.7, 53917.0], [72.8, 54047.0], [72.9, 54047.0], [73.0, 54047.0], [73.1, 54047.0], [73.2, 54813.0], [73.3, 54813.0], [73.4, 54813.0], [73.5, 54813.0], [73.6, 54888.0], [73.7, 54888.0], [73.8, 54888.0], [73.9, 54888.0], [74.0, 55153.0], [74.1, 55153.0], [74.2, 55153.0], [74.3, 55153.0], [74.4, 55194.0], [74.5, 55194.0], [74.6, 55194.0], [74.7, 55194.0], [74.8, 55237.0], [74.9, 55237.0], [75.0, 55237.0], [75.1, 55799.0], [75.2, 55799.0], [75.3, 55799.0], [75.4, 55799.0], [75.5, 56173.0], [75.6, 56173.0], [75.7, 56173.0], [75.8, 56173.0], [75.9, 56661.0], [76.0, 56661.0], [76.1, 56661.0], [76.2, 56661.0], [76.3, 57655.0], [76.4, 57655.0], [76.5, 57655.0], [76.6, 57655.0], [76.7, 57753.0], [76.8, 57753.0], [76.9, 57753.0], [77.0, 57753.0], [77.1, 58020.0], [77.2, 58020.0], [77.3, 58020.0], [77.4, 58020.0], [77.5, 58329.0], [77.6, 58329.0], [77.7, 58329.0], [77.8, 58329.0], [77.9, 58392.0], [78.0, 58392.0], [78.1, 58392.0], [78.2, 58392.0], [78.3, 59040.0], [78.4, 59040.0], [78.5, 59040.0], [78.6, 59153.0], [78.7, 59153.0], [78.8, 59153.0], [78.9, 59153.0], [79.0, 59958.0], [79.1, 59958.0], [79.2, 59958.0], [79.3, 59958.0], [79.4, 60923.0], [79.5, 60923.0], [79.6, 60923.0], [79.7, 60923.0], [79.8, 62432.0], [79.9, 62432.0], [80.0, 62432.0], [80.1, 62432.0], [80.2, 64504.0], [80.3, 64504.0], [80.4, 64504.0], [80.5, 64504.0], [80.6, 94049.0], [80.7, 94049.0], [80.8, 94049.0], [80.9, 94049.0], [81.0, 94588.0], [81.1, 94588.0], [81.2, 94588.0], [81.3, 94588.0], [81.4, 100968.0], [81.5, 100968.0], [81.6, 100968.0], [81.7, 100968.0], [81.8, 102112.0], [81.9, 102112.0], [82.0, 102112.0], [82.1, 102112.0], [82.2, 106281.0], [82.3, 106281.0], [82.4, 106281.0], [82.5, 107447.0], [82.6, 107447.0], [82.7, 107447.0], [82.8, 107447.0], [82.9, 107760.0], [83.0, 107760.0], [83.1, 107760.0], [83.2, 107760.0], [83.3, 109121.0], [83.4, 109121.0], [83.5, 109121.0], [83.6, 109121.0], [83.7, 114025.0], [83.8, 114025.0], [83.9, 114025.0], [84.0, 114025.0], [84.1, 116822.0], [84.2, 116822.0], [84.3, 116822.0], [84.4, 116822.0], [84.5, 118540.0], [84.6, 118540.0], [84.7, 118540.0], [84.8, 118540.0], [84.9, 120441.0], [85.0, 120441.0], [85.1, 120441.0], [85.2, 120441.0], [85.3, 123212.0], [85.4, 123212.0], [85.5, 123212.0], [85.6, 123212.0], [85.7, 124674.0], [85.8, 124674.0], [85.9, 124674.0], [86.0, 124897.0], [86.1, 124897.0], [86.2, 124897.0], [86.3, 124897.0], [86.4, 125231.0], [86.5, 125231.0], [86.6, 125231.0], [86.7, 125231.0], [86.8, 129811.0], [86.9, 129811.0], [87.0, 129811.0], [87.1, 129811.0], [87.2, 129821.0], [87.3, 129821.0], [87.4, 129821.0], [87.5, 129821.0], [87.6, 129959.0], [87.7, 129959.0], [87.8, 129959.0], [87.9, 129959.0], [88.0, 130517.0], [88.1, 130517.0], [88.2, 130517.0], [88.3, 130517.0], [88.4, 130524.0], [88.5, 130524.0], [88.6, 130524.0], [88.7, 130524.0], [88.8, 130532.0], [88.9, 130532.0], [89.0, 130532.0], [89.1, 130532.0], [89.2, 130630.0], [89.3, 130630.0], [89.4, 130630.0], [89.5, 131233.0], [89.6, 131233.0], [89.7, 131233.0], [89.8, 131233.0], [89.9, 131477.0], [90.0, 131477.0], [90.1, 131477.0], [90.2, 131477.0], [90.3, 132066.0], [90.4, 132066.0], [90.5, 132066.0], [90.6, 132066.0], [90.7, 132266.0], [90.8, 132266.0], [90.9, 132266.0], [91.0, 132266.0], [91.1, 133789.0], [91.2, 133789.0], [91.3, 133789.0], [91.4, 133789.0], [91.5, 133826.0], [91.6, 133826.0], [91.7, 133826.0], [91.8, 133826.0], [91.9, 134158.0], [92.0, 134158.0], [92.1, 134158.0], [92.2, 134158.0], [92.3, 134843.0], [92.4, 134843.0], [92.5, 134843.0], [92.6, 134843.0], [92.7, 134957.0], [92.8, 134957.0], [92.9, 134957.0], [93.0, 135036.0], [93.1, 135036.0], [93.2, 135036.0], [93.3, 135036.0], [93.4, 135068.0], [93.5, 135068.0], [93.6, 135068.0], [93.7, 135068.0], [93.8, 135291.0], [93.9, 135291.0], [94.0, 135291.0], [94.1, 135291.0], [94.2, 135479.0], [94.3, 135479.0], [94.4, 135479.0], [94.5, 135479.0], [94.6, 135522.0], [94.7, 135522.0], [94.8, 135522.0], [94.9, 135522.0], [95.0, 135965.0], [95.1, 135965.0], [95.2, 135965.0], [95.3, 135965.0], [95.4, 136001.0], [95.5, 136001.0], [95.6, 136001.0], [95.7, 136001.0], [95.8, 136058.0], [95.9, 136058.0], [96.0, 136058.0], [96.1, 136058.0], [96.2, 136236.0], [96.3, 136236.0], [96.4, 136236.0], [96.5, 136266.0], [96.6, 136266.0], [96.7, 136266.0], [96.8, 136266.0], [96.9, 136452.0], [97.0, 136452.0], [97.1, 136452.0], [97.2, 136452.0], [97.3, 137062.0], [97.4, 137062.0], [97.5, 137062.0], [97.6, 137062.0], [97.7, 137168.0], [97.8, 137168.0], [97.9, 137168.0], [98.0, 137168.0], [98.1, 137214.0], [98.2, 137214.0], [98.3, 137214.0], [98.4, 137214.0], [98.5, 137229.0], [98.6, 137229.0], [98.7, 137229.0], [98.8, 137229.0], [98.9, 137317.0], [99.0, 137317.0], [99.1, 137317.0], [99.2, 137317.0], [99.3, 137718.0], [99.4, 137718.0], [99.5, 137718.0], [99.6, 137718.0], [99.7, 138218.0], [99.8, 138218.0], [99.9, 138218.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 53.0, "series": [{"data": [[0.0, 14.0], [144000.0, 1.0], [146400.0, 1.0], [161600.0, 1.0], [166400.0, 1.0], [174400.0, 1.0], [191200.0, 1.0], [140900.0, 1.0], [144100.0, 1.0], [145700.0, 2.0], [153700.0, 1.0], [154500.0, 1.0], [156100.0, 1.0], [157700.0, 1.0], [176900.0, 1.0], [188100.0, 1.0], [203300.0, 1.0], [71500.0, 1.0], [78300.0, 1.0], [82300.0, 1.0], [89900.0, 1.0], [90300.0, 1.0], [99900.0, 1.0], [102700.0, 1.0], [106300.0, 1.0], [109900.0, 1.0], [109500.0, 1.0], [113900.0, 1.0], [114700.0, 1.0], [159400.0, 1.0], [181800.0, 1.0], [188200.0, 1.0], [204200.0, 2.0], [100.0, 2.0], [150700.0, 1.0], [38700.0, 1.0], [158700.0, 1.0], [161100.0, 1.0], [41500.0, 1.0], [41900.0, 1.0], [175500.0, 1.0], [48700.0, 1.0], [47900.0, 1.0], [48900.0, 2.0], [47500.0, 1.0], [202700.0, 1.0], [49700.0, 1.0], [50500.0, 1.0], [200.0, 8.0], [51900.0, 1.0], [51700.0, 2.0], [52700.0, 1.0], [53900.0, 2.0], [53700.0, 1.0], [53500.0, 1.0], [55700.0, 1.0], [63300.0, 2.0], [64900.0, 1.0], [65500.0, 1.0], [69400.0, 1.0], [69800.0, 1.0], [300.0, 7.0], [87000.0, 1.0], [88200.0, 2.0], [89400.0, 1.0], [400.0, 5.0], [105400.0, 1.0], [106600.0, 1.0], [108600.0, 1.0], [113400.0, 2.0], [500.0, 8.0], [147600.0, 1.0], [149200.0, 1.0], [600.0, 11.0], [168400.0, 1.0], [700.0, 12.0], [174800.0, 1.0], [183600.0, 1.0], [204400.0, 1.0], [800.0, 12.0], [900.0, 11.0], [1000.0, 6.0], [1100.0, 4.0], [1200.0, 4.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [2100.0, 1.0], [140500.0, 1.0], [165300.0, 1.0], [171700.0, 1.0], [2600.0, 1.0], [203700.0, 1.0], [68900.0, 1.0], [70900.0, 1.0], [75700.0, 1.0], [91300.0, 1.0], [92500.0, 1.0], [105300.0, 1.0], [104500.0, 1.0], [110900.0, 1.0], [114500.0, 1.0], [118500.0, 1.0], [147800.0, 1.0], [148600.0, 2.0], [202200.0, 1.0], [26900.0, 1.0], [30600.0, 1.0], [34600.0, 1.0], [151900.0, 1.0], [152700.0, 1.0], [159100.0, 1.0], [165500.0, 1.0], [169500.0, 1.0], [41200.0, 1.0], [42200.0, 1.0], [44800.0, 1.0], [183100.0, 1.0], [46200.0, 1.0], [49000.0, 3.0], [47400.0, 1.0], [200700.0, 2.0], [203100.0, 1.0], [50000.0, 1.0], [50800.0, 2.0], [51000.0, 1.0], [51800.0, 1.0], [51600.0, 1.0], [52400.0, 3.0], [51200.0, 1.0], [52600.0, 1.0], [53000.0, 2.0], [53400.0, 1.0], [59000.0, 1.0], [59800.0, 1.0], [64800.0, 1.0], [72000.0, 1.0], [73200.0, 1.0], [77600.0, 1.0], [102800.0, 1.0], [106400.0, 1.0], [109600.0, 1.0], [106800.0, 1.0], [107600.0, 1.0], [110400.0, 1.0], [111600.0, 1.0], [112800.0, 1.0], [113600.0, 1.0], [115200.0, 1.0], [114800.0, 1.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[0.0, 36.0], [65900.0, 1.0], [100.0, 9.0], [34300.0, 1.0], [33900.0, 1.0], [38300.0, 2.0], [38700.0, 1.0], [37100.0, 1.0], [37500.0, 1.0], [37700.0, 1.0], [40700.0, 1.0], [42100.0, 1.0], [41900.0, 1.0], [45900.0, 2.0], [46900.0, 1.0], [47500.0, 1.0], [48100.0, 1.0], [47300.0, 1.0], [49100.0, 1.0], [48900.0, 1.0], [48500.0, 1.0], [48300.0, 1.0], [49700.0, 1.0], [50100.0, 1.0], [200.0, 10.0], [51900.0, 2.0], [52700.0, 2.0], [52300.0, 2.0], [52900.0, 1.0], [51700.0, 1.0], [53100.0, 1.0], [53500.0, 2.0], [54300.0, 1.0], [53900.0, 2.0], [55100.0, 2.0], [54900.0, 1.0], [53300.0, 1.0], [55700.0, 1.0], [55300.0, 1.0], [63500.0, 1.0], [65500.0, 1.0], [65800.0, 1.0], [66200.0, 1.0], [67000.0, 1.0], [300.0, 5.0], [400.0, 8.0], [500.0, 9.0], [600.0, 10.0], [700.0, 9.0], [800.0, 9.0], [900.0, 2.0], [1000.0, 1.0], [1200.0, 1.0], [66900.0, 1.0], [66500.0, 1.0], [17000.0, 1.0], [17900.0, 1.0], [18400.0, 1.0], [18800.0, 1.0], [20000.0, 1.0], [23200.0, 1.0], [26200.0, 1.0], [27500.0, 1.0], [26700.0, 1.0], [27100.0, 1.0], [27600.0, 1.0], [26900.0, 1.0], [28200.0, 1.0], [28100.0, 1.0], [29600.0, 1.0], [28900.0, 1.0], [28700.0, 2.0], [29300.0, 1.0], [30600.0, 1.0], [31700.0, 2.0], [31100.0, 1.0], [33600.0, 1.0], [34800.0, 1.0], [35800.0, 1.0], [35000.0, 1.0], [38600.0, 1.0], [39400.0, 2.0], [39800.0, 1.0], [43000.0, 1.0], [42000.0, 1.0], [41800.0, 1.0], [41400.0, 1.0], [41200.0, 1.0], [45000.0, 1.0], [44400.0, 1.0], [47000.0, 1.0], [47800.0, 1.0], [47600.0, 1.0], [48800.0, 1.0], [47200.0, 1.0], [51000.0, 1.0], [51200.0, 1.0], [52600.0, 1.0], [52200.0, 1.0], [53200.0, 2.0], [52800.0, 1.0], [52400.0, 1.0], [54800.0, 1.0], [55000.0, 1.0], [54400.0, 1.0], [54600.0, 2.0], [53400.0, 1.0], [54000.0, 2.0], [53800.0, 1.0], [55600.0, 1.0], [63600.0, 1.0], [67600.0, 1.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[131200.0, 1.0], [0.0, 53.0], [132000.0, 1.0], [135200.0, 1.0], [136000.0, 2.0], [133700.0, 1.0], [137700.0, 1.0], [109100.0, 1.0], [129900.0, 1.0], [131400.0, 1.0], [132200.0, 1.0], [133800.0, 1.0], [135400.0, 1.0], [136200.0, 2.0], [137000.0, 1.0], [100.0, 8.0], [135500.0, 1.0], [137100.0, 1.0], [34700.0, 1.0], [35900.0, 1.0], [37900.0, 1.0], [37300.0, 1.0], [44500.0, 1.0], [47300.0, 2.0], [48300.0, 1.0], [48900.0, 2.0], [48700.0, 1.0], [50100.0, 1.0], [49500.0, 1.0], [50500.0, 1.0], [50900.0, 1.0], [200.0, 14.0], [51300.0, 1.0], [51900.0, 1.0], [51700.0, 2.0], [52700.0, 1.0], [55100.0, 2.0], [53900.0, 2.0], [53700.0, 1.0], [53500.0, 1.0], [56100.0, 1.0], [55700.0, 1.0], [57700.0, 1.0], [58300.0, 2.0], [59100.0, 1.0], [60900.0, 1.0], [59900.0, 1.0], [64500.0, 1.0], [300.0, 13.0], [106200.0, 1.0], [400.0, 5.0], [107400.0, 1.0], [124600.0, 1.0], [500.0, 4.0], [129800.0, 2.0], [130600.0, 1.0], [134800.0, 1.0], [136400.0, 1.0], [137200.0, 2.0], [600.0, 10.0], [700.0, 1.0], [800.0, 4.0], [900.0, 4.0], [1000.0, 1.0], [134100.0, 1.0], [134900.0, 1.0], [137300.0, 1.0], [2100.0, 1.0], [2500.0, 1.0], [94500.0, 1.0], [100900.0, 1.0], [102100.0, 1.0], [107700.0, 1.0], [118500.0, 1.0], [130500.0, 3.0], [138200.0, 1.0], [135000.0, 2.0], [16100.0, 2.0], [17000.0, 1.0], [17900.0, 1.0], [19600.0, 1.0], [20700.0, 1.0], [21300.0, 1.0], [22500.0, 1.0], [22100.0, 1.0], [24800.0, 1.0], [25400.0, 1.0], [25900.0, 1.0], [30500.0, 1.0], [135900.0, 1.0], [34200.0, 1.0], [34800.0, 1.0], [36400.0, 1.0], [39800.0, 1.0], [42200.0, 1.0], [44800.0, 1.0], [44400.0, 1.0], [46200.0, 2.0], [47000.0, 2.0], [49000.0, 2.0], [49400.0, 1.0], [50000.0, 1.0], [50800.0, 2.0], [52400.0, 5.0], [52000.0, 2.0], [51200.0, 1.0], [51600.0, 1.0], [51800.0, 1.0], [53000.0, 2.0], [52600.0, 1.0], [54800.0, 2.0], [54000.0, 1.0], [53400.0, 1.0], [55200.0, 1.0], [56600.0, 1.0], [57600.0, 1.0], [58000.0, 1.0], [59000.0, 1.0], [62400.0, 1.0], [94000.0, 1.0], [114000.0, 1.0], [116800.0, 1.0], [120400.0, 1.0], [123200.0, 1.0], [125200.0, 1.0], [124800.0, 1.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 204400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 55.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 475.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 55.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 475.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 31.419354838709673, "minX": 1.61649756E12, "maxY": 50.0, "series": [{"data": [[1.61649768E12, 50.0], [1.61649774E12, 50.0], [1.61649756E12, 50.0], [1.61649762E12, 50.0], [1.6164978E12, 31.419354838709673]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164978E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21238.769230769227, "minX": 2.0, "maxY": 115296.0, "series": [{"data": [[32.0, 50969.5], [2.0, 53590.0], [35.0, 70596.66666666667], [37.0, 49070.0], [36.0, 50091.0], [39.0, 108683.0], [38.0, 49057.0], [41.0, 48929.0], [40.0, 49739.0], [43.0, 47680.5], [44.0, 48958.0], [47.0, 48770.0], [46.0, 77795.0], [49.0, 30655.0], [48.0, 44818.0], [3.0, 93171.5], [50.0, 60712.08653846158], [4.0, 53739.0], [5.0, 69430.0], [6.0, 53497.0], [8.0, 51767.0], [9.0, 93877.5], [11.0, 52464.0], [13.0, 83138.5], [15.0, 115296.0], [18.0, 52117.0], [19.0, 52837.0], [21.0, 52486.0], [22.0, 51741.0], [28.0, 82805.0], [29.0, 51259.0], [30.0, 54929.666666666664], [31.0, 72105.66666666667]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[45.4785992217899, 61198.70038910509]], "isOverall": false, "label": "DELETE Test-Aggregated", "isController": true}, {"data": [[35.0, 50128.0], [9.0, 53558.0], [39.0, 48335.0], [46.0, 48552.0], [3.0, 53571.5], [50.0, 21238.769230769227], [13.0, 53208.0], [15.0, 53502.0], [18.0, 47039.0], [5.0, 52327.0], [28.0, 52423.0], [30.0, 41119.0], [31.0, 51727.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[48.044843049327355, 23190.143497757846]], "isOverall": false, "label": "POST DELETE participant-Aggregated", "isController": false}, {"data": [[32.0, 51167.333333333336], [35.0, 50673.5], [37.0, 49070.0], [36.0, 50090.0], [38.0, 49057.0], [41.0, 48928.0], [40.0, 49587.0], [43.0, 47531.5], [44.0, 48929.0], [47.0, 48377.0], [46.0, 47351.0], [49.0, 30510.0], [48.0, 44485.0], [3.0, 53590.0], [50.0, 39310.69058295963], [6.0, 53577.5], [9.0, 51767.0], [11.0, 52464.0], [14.0, 52781.0], [18.0, 53494.5], [19.0, 53197.0], [26.0, 51741.0], [28.0, 52237.0], [30.0, 52477.0], [31.0, 51538.5]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}, {"data": [[47.25291828793775, 40773.09727626459]], "isOverall": false, "label": "POST USER LOGIN-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 60118.13333333333, "minX": 1.61649756E12, "maxY": 2.447064484E8, "series": [{"data": [[1.61649768E12, 4314061.366666666], [1.61649774E12, 3348187.2666666666], [1.61649756E12, 1.0156702383333333E7], [1.61649762E12, 2.447064484E8], [1.6164978E12, 7398736.116666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61649768E12, 1764933.65], [1.61649774E12, 1306527.0333333334], [1.61649756E12, 60118.13333333333], [1.61649762E12, 2065608.5], [1.6164978E12, 2780643.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164978E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10906.89928057554, "minX": 1.61649756E12, "maxY": 117924.41666666669, "series": [{"data": [[1.61649768E12, 43474.8417266187], [1.61649774E12, 93860.43243243244], [1.61649762E12, 117924.41666666669], [1.6164978E12, 59334.05263157895]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.61649768E12, 13141.021428571426], [1.61649774E12, 49927.729729729734], [1.61649762E12, 28165.17391304348], [1.6164978E12, 36371.043478260865]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.61649768E12, 10906.89928057554], [1.61649774E12, 44819.77777777778], [1.61649756E12, 94318.5], [1.61649762E12, 114230.16666666667], [1.6164978E12, 40881.93181818181]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164978E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61649756E12, "maxY": 1940.1666666666663, "series": [{"data": [[1.61649768E12, 0.0], [1.61649774E12, 0.0], [1.61649762E12, 0.0], [1.6164978E12, 0.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.61649768E12, 232.76428571428573], [1.61649774E12, 784.7567567567568], [1.61649762E12, 304.5652173913043], [1.6164978E12, 1006.0434782608697]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.61649768E12, 70.23021582733814], [1.61649774E12, 481.61111111111103], [1.61649756E12, 194.0], [1.61649762E12, 1940.1666666666663], [1.6164978E12, 750.1590909090909]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164978E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61649756E12, "maxY": 312.8285714285715, "series": [{"data": [[1.61649768E12, 0.0], [1.61649774E12, 0.0], [1.61649762E12, 0.0], [1.6164978E12, 0.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.61649768E12, 312.8285714285715], [1.61649774E12, 66.86486486486486], [1.61649762E12, 179.2608695652174], [1.6164978E12, 140.3913043478261]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.61649768E12, 248.7913669064747], [1.61649774E12, 60.83333333333333], [1.61649756E12, 20.5], [1.61649762E12, 25.18518518518519], [1.6164978E12, 134.27272727272728]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164978E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 16157.0, "minX": 1.61649756E12, "maxY": 138218.0, "series": [{"data": [[1.61649774E12, 16175.0], [1.61649756E12, 94588.0], [1.61649762E12, 138218.0], [1.6164978E12, 17925.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61649774E12, 16157.0], [1.61649756E12, 94049.0], [1.61649762E12, 26716.0], [1.6164978E12, 17075.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61649774E12, 137195.6], [1.61649756E12, 94588.0], [1.61649762E12, 137204.8], [1.6164978E12, 137186.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61649774E12, 138218.0], [1.61649756E12, 94588.0], [1.61649762E12, 138218.0], [1.6164978E12, 138218.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61649774E12, 137437.3], [1.61649756E12, 94588.0], [1.61649762E12, 137477.4], [1.6164978E12, 137397.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164978E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 688.0, "minX": 1000.0, "maxY": 130630.0, "series": [{"data": [[1000.0, 130630.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 688.0], [2000.0, 51741.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 1366.0, "series": [{"data": [[1000.0, 1366.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1000.0, 0.0], [2000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6164975E12, "maxY": 4.75, "series": [{"data": [[1.61649768E12, 4.75], [1.61649774E12, 1.1], [1.61649756E12, 0.03333333333333333], [1.61649762E12, 1.25], [1.6164975E12, 0.8333333333333334], [1.6164978E12, 0.8666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164978E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61649756E12, "maxY": 3.466666666666667, "series": [{"data": [[1.61649768E12, 1.1833333333333333], [1.61649774E12, 0.9166666666666666], [1.61649756E12, 0.03333333333333333], [1.61649762E12, 1.1166666666666667], [1.6164978E12, 1.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61649768E12, 3.466666666666667], [1.61649762E12, 0.16666666666666666], [1.6164978E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164978E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.61649756E12, "maxY": 2.3333333333333335, "series": [{"data": [[1.61649762E12, 0.016666666666666666]], "isOverall": false, "label": "DELETE Test-success", "isController": true}, {"data": [[1.61649774E12, 0.03333333333333333], [1.61649756E12, 0.03333333333333333], [1.61649762E12, 0.8], [1.6164978E12, 0.016666666666666666]], "isOverall": false, "label": "POST USER LOGIN-success", "isController": false}, {"data": [[1.61649768E12, 2.3333333333333335], [1.61649774E12, 0.6166666666666667], [1.61649762E12, 0.36666666666666664], [1.6164978E12, 0.36666666666666664]], "isOverall": false, "label": "POST DELETE participant-failure", "isController": false}, {"data": [[1.61649762E12, 0.016666666666666666], [1.6164978E12, 0.016666666666666666]], "isOverall": false, "label": "POST DELETE participant-success", "isController": false}, {"data": [[1.61649768E12, 2.316666666666667], [1.61649774E12, 0.26666666666666666], [1.61649762E12, 0.1], [1.6164978E12, 0.7166666666666667]], "isOverall": false, "label": "POST USER LOGIN-failure", "isController": false}, {"data": [[1.61649768E12, 2.316666666666667], [1.61649774E12, 0.6166666666666667], [1.61649762E12, 0.38333333333333336], [1.6164978E12, 0.95]], "isOverall": false, "label": "DELETE Test-failure", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164978E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61649756E12, "maxY": 6.966666666666667, "series": [{"data": [[1.61649774E12, 0.03333333333333333], [1.61649756E12, 0.03333333333333333], [1.61649762E12, 0.8333333333333334], [1.6164978E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61649768E12, 6.966666666666667], [1.61649774E12, 1.5], [1.61649762E12, 0.85], [1.6164978E12, 2.033333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164978E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

