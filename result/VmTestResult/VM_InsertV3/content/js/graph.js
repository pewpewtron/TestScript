/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 21640.0, "series": [{"data": [[0.0, 12.0], [0.1, 13.0], [0.2, 13.0], [0.3, 14.0], [0.4, 15.0], [0.5, 16.0], [0.6, 16.0], [0.7, 17.0], [0.8, 17.0], [0.9, 18.0], [1.0, 18.0], [1.1, 19.0], [1.2, 20.0], [1.3, 21.0], [1.4, 22.0], [1.5, 23.0], [1.6, 25.0], [1.7, 26.0], [1.8, 27.0], [1.9, 29.0], [2.0, 30.0], [2.1, 32.0], [2.2, 35.0], [2.3, 36.0], [2.4, 37.0], [2.5, 38.0], [2.6, 39.0], [2.7, 40.0], [2.8, 42.0], [2.9, 43.0], [3.0, 44.0], [3.1, 47.0], [3.2, 48.0], [3.3, 49.0], [3.4, 51.0], [3.5, 56.0], [3.6, 65.0], [3.7, 69.0], [3.8, 74.0], [3.9, 81.0], [4.0, 89.0], [4.1, 95.0], [4.2, 102.0], [4.3, 126.0], [4.4, 133.0], [4.5, 149.0], [4.6, 175.0], [4.7, 209.0], [4.8, 234.0], [4.9, 271.0], [5.0, 327.0], [5.1, 344.0], [5.2, 462.0], [5.3, 1892.0], [5.4, 1981.0], [5.5, 2119.0], [5.6, 2211.0], [5.7, 2281.0], [5.8, 2345.0], [5.9, 2355.0], [6.0, 2380.0], [6.1, 2392.0], [6.2, 2420.0], [6.3, 2461.0], [6.4, 2491.0], [6.5, 2503.0], [6.6, 2507.0], [6.7, 2543.0], [6.8, 2561.0], [6.9, 2617.0], [7.0, 2658.0], [7.1, 2691.0], [7.2, 2742.0], [7.3, 2797.0], [7.4, 2882.0], [7.5, 2969.0], [7.6, 3112.0], [7.7, 3202.0], [7.8, 3255.0], [7.9, 3309.0], [8.0, 3351.0], [8.1, 3395.0], [8.2, 3455.0], [8.3, 3494.0], [8.4, 3514.0], [8.5, 3580.0], [8.6, 3678.0], [8.7, 3786.0], [8.8, 3821.0], [8.9, 3904.0], [9.0, 3946.0], [9.1, 4093.0], [9.2, 4123.0], [9.3, 4242.0], [9.4, 4261.0], [9.5, 4380.0], [9.6, 4438.0], [9.7, 4531.0], [9.8, 4663.0], [9.9, 4747.0], [10.0, 4880.0], [10.1, 4973.0], [10.2, 5035.0], [10.3, 5116.0], [10.4, 5144.0], [10.5, 5243.0], [10.6, 5296.0], [10.7, 5350.0], [10.8, 5379.0], [10.9, 5404.0], [11.0, 5442.0], [11.1, 5499.0], [11.2, 5532.0], [11.3, 5562.0], [11.4, 5602.0], [11.5, 5636.0], [11.6, 5688.0], [11.7, 5728.0], [11.8, 5747.0], [11.9, 5762.0], [12.0, 5781.0], [12.1, 5821.0], [12.2, 5834.0], [12.3, 5890.0], [12.4, 5929.0], [12.5, 5943.0], [12.6, 5952.0], [12.7, 5959.0], [12.8, 6041.0], [12.9, 6083.0], [13.0, 6109.0], [13.1, 6145.0], [13.2, 6179.0], [13.3, 6200.0], [13.4, 6221.0], [13.5, 6261.0], [13.6, 6293.0], [13.7, 6382.0], [13.8, 6434.0], [13.9, 6474.0], [14.0, 6558.0], [14.1, 6575.0], [14.2, 6614.0], [14.3, 6622.0], [14.4, 6668.0], [14.5, 6682.0], [14.6, 6691.0], [14.7, 6698.0], [14.8, 6707.0], [14.9, 6722.0], [15.0, 6737.0], [15.1, 6746.0], [15.2, 6751.0], [15.3, 6764.0], [15.4, 6769.0], [15.5, 6777.0], [15.6, 6783.0], [15.7, 6786.0], [15.8, 6799.0], [15.9, 6802.0], [16.0, 6806.0], [16.1, 6811.0], [16.2, 6816.0], [16.3, 6818.0], [16.4, 6820.0], [16.5, 6823.0], [16.6, 6826.0], [16.7, 6838.0], [16.8, 6842.0], [16.9, 6847.0], [17.0, 6850.0], [17.1, 6854.0], [17.2, 6860.0], [17.3, 6866.0], [17.4, 6870.0], [17.5, 6873.0], [17.6, 6879.0], [17.7, 6881.0], [17.8, 6882.0], [17.9, 6885.0], [18.0, 6890.0], [18.1, 6893.0], [18.2, 6894.0], [18.3, 6895.0], [18.4, 6898.0], [18.5, 6900.0], [18.6, 6902.0], [18.7, 6904.0], [18.8, 6905.0], [18.9, 6906.0], [19.0, 6909.0], [19.1, 6911.0], [19.2, 6911.0], [19.3, 6915.0], [19.4, 6918.0], [19.5, 6922.0], [19.6, 6925.0], [19.7, 6927.0], [19.8, 6928.0], [19.9, 6929.0], [20.0, 6932.0], [20.1, 6933.0], [20.2, 6936.0], [20.3, 6938.0], [20.4, 6940.0], [20.5, 6943.0], [20.6, 6944.0], [20.7, 6948.0], [20.8, 6949.0], [20.9, 6951.0], [21.0, 6953.0], [21.1, 6955.0], [21.2, 6957.0], [21.3, 6958.0], [21.4, 6960.0], [21.5, 6962.0], [21.6, 6965.0], [21.7, 6966.0], [21.8, 6968.0], [21.9, 6971.0], [22.0, 6974.0], [22.1, 6977.0], [22.2, 6980.0], [22.3, 6982.0], [22.4, 6984.0], [22.5, 6986.0], [22.6, 6987.0], [22.7, 6989.0], [22.8, 6993.0], [22.9, 6995.0], [23.0, 6996.0], [23.1, 6997.0], [23.2, 6999.0], [23.3, 7001.0], [23.4, 7004.0], [23.5, 7004.0], [23.6, 7006.0], [23.7, 7010.0], [23.8, 7011.0], [23.9, 7014.0], [24.0, 7018.0], [24.1, 7020.0], [24.2, 7021.0], [24.3, 7022.0], [24.4, 7023.0], [24.5, 7024.0], [24.6, 7025.0], [24.7, 7027.0], [24.8, 7029.0], [24.9, 7031.0], [25.0, 7033.0], [25.1, 7035.0], [25.2, 7036.0], [25.3, 7038.0], [25.4, 7039.0], [25.5, 7042.0], [25.6, 7045.0], [25.7, 7046.0], [25.8, 7047.0], [25.9, 7047.0], [26.0, 7049.0], [26.1, 7050.0], [26.2, 7050.0], [26.3, 7051.0], [26.4, 7054.0], [26.5, 7056.0], [26.6, 7057.0], [26.7, 7058.0], [26.8, 7058.0], [26.9, 7060.0], [27.0, 7060.0], [27.1, 7062.0], [27.2, 7063.0], [27.3, 7066.0], [27.4, 7068.0], [27.5, 7068.0], [27.6, 7069.0], [27.7, 7070.0], [27.8, 7071.0], [27.9, 7072.0], [28.0, 7073.0], [28.1, 7074.0], [28.2, 7075.0], [28.3, 7076.0], [28.4, 7077.0], [28.5, 7079.0], [28.6, 7081.0], [28.7, 7084.0], [28.8, 7084.0], [28.9, 7085.0], [29.0, 7087.0], [29.1, 7087.0], [29.2, 7090.0], [29.3, 7091.0], [29.4, 7092.0], [29.5, 7092.0], [29.6, 7093.0], [29.7, 7095.0], [29.8, 7098.0], [29.9, 7099.0], [30.0, 7100.0], [30.1, 7101.0], [30.2, 7104.0], [30.3, 7105.0], [30.4, 7106.0], [30.5, 7107.0], [30.6, 7108.0], [30.7, 7109.0], [30.8, 7111.0], [30.9, 7112.0], [31.0, 7113.0], [31.1, 7115.0], [31.2, 7116.0], [31.3, 7117.0], [31.4, 7118.0], [31.5, 7119.0], [31.6, 7121.0], [31.7, 7123.0], [31.8, 7124.0], [31.9, 7125.0], [32.0, 7126.0], [32.1, 7128.0], [32.2, 7129.0], [32.3, 7129.0], [32.4, 7130.0], [32.5, 7131.0], [32.6, 7133.0], [32.7, 7134.0], [32.8, 7135.0], [32.9, 7137.0], [33.0, 7140.0], [33.1, 7141.0], [33.2, 7144.0], [33.3, 7144.0], [33.4, 7148.0], [33.5, 7148.0], [33.6, 7148.0], [33.7, 7149.0], [33.8, 7150.0], [33.9, 7152.0], [34.0, 7154.0], [34.1, 7155.0], [34.2, 7157.0], [34.3, 7157.0], [34.4, 7160.0], [34.5, 7160.0], [34.6, 7161.0], [34.7, 7164.0], [34.8, 7167.0], [34.9, 7169.0], [35.0, 7169.0], [35.1, 7172.0], [35.2, 7173.0], [35.3, 7174.0], [35.4, 7176.0], [35.5, 7178.0], [35.6, 7178.0], [35.7, 7180.0], [35.8, 7181.0], [35.9, 7182.0], [36.0, 7182.0], [36.1, 7183.0], [36.2, 7184.0], [36.3, 7185.0], [36.4, 7185.0], [36.5, 7187.0], [36.6, 7189.0], [36.7, 7190.0], [36.8, 7192.0], [36.9, 7193.0], [37.0, 7193.0], [37.1, 7195.0], [37.2, 7196.0], [37.3, 7197.0], [37.4, 7199.0], [37.5, 7200.0], [37.6, 7201.0], [37.7, 7203.0], [37.8, 7204.0], [37.9, 7206.0], [38.0, 7208.0], [38.1, 7209.0], [38.2, 7211.0], [38.3, 7214.0], [38.4, 7215.0], [38.5, 7217.0], [38.6, 7218.0], [38.7, 7219.0], [38.8, 7220.0], [38.9, 7222.0], [39.0, 7224.0], [39.1, 7224.0], [39.2, 7226.0], [39.3, 7227.0], [39.4, 7228.0], [39.5, 7230.0], [39.6, 7231.0], [39.7, 7232.0], [39.8, 7236.0], [39.9, 7238.0], [40.0, 7239.0], [40.1, 7240.0], [40.2, 7241.0], [40.3, 7244.0], [40.4, 7248.0], [40.5, 7249.0], [40.6, 7252.0], [40.7, 7253.0], [40.8, 7255.0], [40.9, 7257.0], [41.0, 7261.0], [41.1, 7262.0], [41.2, 7264.0], [41.3, 7265.0], [41.4, 7268.0], [41.5, 7269.0], [41.6, 7272.0], [41.7, 7274.0], [41.8, 7276.0], [41.9, 7278.0], [42.0, 7280.0], [42.1, 7282.0], [42.2, 7284.0], [42.3, 7288.0], [42.4, 7288.0], [42.5, 7289.0], [42.6, 7292.0], [42.7, 7294.0], [42.8, 7295.0], [42.9, 7296.0], [43.0, 7299.0], [43.1, 7301.0], [43.2, 7303.0], [43.3, 7305.0], [43.4, 7307.0], [43.5, 7309.0], [43.6, 7310.0], [43.7, 7311.0], [43.8, 7312.0], [43.9, 7314.0], [44.0, 7315.0], [44.1, 7317.0], [44.2, 7321.0], [44.3, 7324.0], [44.4, 7326.0], [44.5, 7329.0], [44.6, 7330.0], [44.7, 7332.0], [44.8, 7334.0], [44.9, 7338.0], [45.0, 7339.0], [45.1, 7341.0], [45.2, 7343.0], [45.3, 7347.0], [45.4, 7348.0], [45.5, 7352.0], [45.6, 7355.0], [45.7, 7357.0], [45.8, 7360.0], [45.9, 7363.0], [46.0, 7364.0], [46.1, 7366.0], [46.2, 7368.0], [46.3, 7372.0], [46.4, 7376.0], [46.5, 7378.0], [46.6, 7381.0], [46.7, 7384.0], [46.8, 7390.0], [46.9, 7393.0], [47.0, 7394.0], [47.1, 7396.0], [47.2, 7398.0], [47.3, 7402.0], [47.4, 7408.0], [47.5, 7410.0], [47.6, 7411.0], [47.7, 7413.0], [47.8, 7417.0], [47.9, 7420.0], [48.0, 7422.0], [48.1, 7424.0], [48.2, 7429.0], [48.3, 7431.0], [48.4, 7433.0], [48.5, 7436.0], [48.6, 7441.0], [48.7, 7444.0], [48.8, 7451.0], [48.9, 7453.0], [49.0, 7459.0], [49.1, 7463.0], [49.2, 7467.0], [49.3, 7472.0], [49.4, 7475.0], [49.5, 7479.0], [49.6, 7483.0], [49.7, 7492.0], [49.8, 7496.0], [49.9, 7499.0], [50.0, 7506.0], [50.1, 7509.0], [50.2, 7515.0], [50.3, 7524.0], [50.4, 7528.0], [50.5, 7531.0], [50.6, 7538.0], [50.7, 7549.0], [50.8, 7557.0], [50.9, 7567.0], [51.0, 7571.0], [51.1, 7575.0], [51.2, 7578.0], [51.3, 7587.0], [51.4, 7591.0], [51.5, 7597.0], [51.6, 7611.0], [51.7, 7616.0], [51.8, 7619.0], [51.9, 7622.0], [52.0, 7625.0], [52.1, 7627.0], [52.2, 7630.0], [52.3, 7635.0], [52.4, 7638.0], [52.5, 7643.0], [52.6, 7650.0], [52.7, 7660.0], [52.8, 7670.0], [52.9, 7681.0], [53.0, 7687.0], [53.1, 7692.0], [53.2, 7696.0], [53.3, 7704.0], [53.4, 7713.0], [53.5, 7715.0], [53.6, 7724.0], [53.7, 7726.0], [53.8, 7728.0], [53.9, 7739.0], [54.0, 7742.0], [54.1, 7747.0], [54.2, 7755.0], [54.3, 7763.0], [54.4, 7771.0], [54.5, 7778.0], [54.6, 7781.0], [54.7, 7783.0], [54.8, 7788.0], [54.9, 7791.0], [55.0, 7792.0], [55.1, 7798.0], [55.2, 7809.0], [55.3, 7815.0], [55.4, 7824.0], [55.5, 7827.0], [55.6, 7829.0], [55.7, 7835.0], [55.8, 7842.0], [55.9, 7845.0], [56.0, 7850.0], [56.1, 7852.0], [56.2, 7859.0], [56.3, 7869.0], [56.4, 7870.0], [56.5, 7873.0], [56.6, 7875.0], [56.7, 7884.0], [56.8, 7887.0], [56.9, 7890.0], [57.0, 7894.0], [57.1, 7897.0], [57.2, 7898.0], [57.3, 7901.0], [57.4, 7902.0], [57.5, 7903.0], [57.6, 7910.0], [57.7, 7911.0], [57.8, 7915.0], [57.9, 7920.0], [58.0, 7923.0], [58.1, 7926.0], [58.2, 7930.0], [58.3, 7933.0], [58.4, 7935.0], [58.5, 7938.0], [58.6, 7941.0], [58.7, 7944.0], [58.8, 7948.0], [58.9, 7952.0], [59.0, 7956.0], [59.1, 7957.0], [59.2, 7959.0], [59.3, 7963.0], [59.4, 7964.0], [59.5, 7967.0], [59.6, 7969.0], [59.7, 7972.0], [59.8, 7974.0], [59.9, 7976.0], [60.0, 7979.0], [60.1, 7982.0], [60.2, 7984.0], [60.3, 7988.0], [60.4, 7990.0], [60.5, 7995.0], [60.6, 7997.0], [60.7, 7999.0], [60.8, 8001.0], [60.9, 8004.0], [61.0, 8005.0], [61.1, 8006.0], [61.2, 8009.0], [61.3, 8011.0], [61.4, 8012.0], [61.5, 8013.0], [61.6, 8016.0], [61.7, 8018.0], [61.8, 8020.0], [61.9, 8022.0], [62.0, 8025.0], [62.1, 8030.0], [62.2, 8032.0], [62.3, 8034.0], [62.4, 8037.0], [62.5, 8038.0], [62.6, 8040.0], [62.7, 8041.0], [62.8, 8043.0], [62.9, 8047.0], [63.0, 8048.0], [63.1, 8050.0], [63.2, 8052.0], [63.3, 8055.0], [63.4, 8058.0], [63.5, 8061.0], [63.6, 8066.0], [63.7, 8068.0], [63.8, 8070.0], [63.9, 8074.0], [64.0, 8075.0], [64.1, 8078.0], [64.2, 8079.0], [64.3, 8082.0], [64.4, 8085.0], [64.5, 8088.0], [64.6, 8090.0], [64.7, 8091.0], [64.8, 8093.0], [64.9, 8095.0], [65.0, 8097.0], [65.1, 8099.0], [65.2, 8101.0], [65.3, 8102.0], [65.4, 8104.0], [65.5, 8106.0], [65.6, 8109.0], [65.7, 8110.0], [65.8, 8113.0], [65.9, 8115.0], [66.0, 8119.0], [66.1, 8120.0], [66.2, 8122.0], [66.3, 8125.0], [66.4, 8126.0], [66.5, 8127.0], [66.6, 8128.0], [66.7, 8130.0], [66.8, 8133.0], [66.9, 8136.0], [67.0, 8139.0], [67.1, 8142.0], [67.2, 8143.0], [67.3, 8146.0], [67.4, 8147.0], [67.5, 8148.0], [67.6, 8149.0], [67.7, 8152.0], [67.8, 8153.0], [67.9, 8156.0], [68.0, 8158.0], [68.1, 8160.0], [68.2, 8160.0], [68.3, 8161.0], [68.4, 8163.0], [68.5, 8164.0], [68.6, 8166.0], [68.7, 8167.0], [68.8, 8168.0], [68.9, 8170.0], [69.0, 8172.0], [69.1, 8173.0], [69.2, 8175.0], [69.3, 8177.0], [69.4, 8178.0], [69.5, 8181.0], [69.6, 8182.0], [69.7, 8184.0], [69.8, 8186.0], [69.9, 8187.0], [70.0, 8190.0], [70.1, 8193.0], [70.2, 8193.0], [70.3, 8195.0], [70.4, 8196.0], [70.5, 8197.0], [70.6, 8198.0], [70.7, 8199.0], [70.8, 8201.0], [70.9, 8201.0], [71.0, 8202.0], [71.1, 8203.0], [71.2, 8205.0], [71.3, 8206.0], [71.4, 8208.0], [71.5, 8209.0], [71.6, 8210.0], [71.7, 8213.0], [71.8, 8215.0], [71.9, 8216.0], [72.0, 8217.0], [72.1, 8218.0], [72.2, 8221.0], [72.3, 8223.0], [72.4, 8225.0], [72.5, 8226.0], [72.6, 8228.0], [72.7, 8229.0], [72.8, 8230.0], [72.9, 8231.0], [73.0, 8232.0], [73.1, 8234.0], [73.2, 8235.0], [73.3, 8238.0], [73.4, 8239.0], [73.5, 8240.0], [73.6, 8243.0], [73.7, 8245.0], [73.8, 8246.0], [73.9, 8247.0], [74.0, 8251.0], [74.1, 8252.0], [74.2, 8253.0], [74.3, 8255.0], [74.4, 8257.0], [74.5, 8258.0], [74.6, 8261.0], [74.7, 8262.0], [74.8, 8264.0], [74.9, 8266.0], [75.0, 8268.0], [75.1, 8269.0], [75.2, 8270.0], [75.3, 8272.0], [75.4, 8274.0], [75.5, 8276.0], [75.6, 8277.0], [75.7, 8279.0], [75.8, 8280.0], [75.9, 8282.0], [76.0, 8283.0], [76.1, 8285.0], [76.2, 8286.0], [76.3, 8286.0], [76.4, 8289.0], [76.5, 8290.0], [76.6, 8294.0], [76.7, 8296.0], [76.8, 8298.0], [76.9, 8299.0], [77.0, 8300.0], [77.1, 8301.0], [77.2, 8303.0], [77.3, 8307.0], [77.4, 8309.0], [77.5, 8312.0], [77.6, 8314.0], [77.7, 8316.0], [77.8, 8318.0], [77.9, 8320.0], [78.0, 8325.0], [78.1, 8327.0], [78.2, 8329.0], [78.3, 8330.0], [78.4, 8332.0], [78.5, 8333.0], [78.6, 8335.0], [78.7, 8336.0], [78.8, 8337.0], [78.9, 8339.0], [79.0, 8341.0], [79.1, 8342.0], [79.2, 8344.0], [79.3, 8346.0], [79.4, 8348.0], [79.5, 8349.0], [79.6, 8350.0], [79.7, 8351.0], [79.8, 8354.0], [79.9, 8355.0], [80.0, 8357.0], [80.1, 8359.0], [80.2, 8361.0], [80.3, 8362.0], [80.4, 8364.0], [80.5, 8365.0], [80.6, 8368.0], [80.7, 8369.0], [80.8, 8371.0], [80.9, 8373.0], [81.0, 8374.0], [81.1, 8375.0], [81.2, 8378.0], [81.3, 8378.0], [81.4, 8379.0], [81.5, 8382.0], [81.6, 8384.0], [81.7, 8385.0], [81.8, 8387.0], [81.9, 8388.0], [82.0, 8390.0], [82.1, 8392.0], [82.2, 8393.0], [82.3, 8396.0], [82.4, 8397.0], [82.5, 8399.0], [82.6, 8400.0], [82.7, 8400.0], [82.8, 8402.0], [82.9, 8405.0], [83.0, 8407.0], [83.1, 8408.0], [83.2, 8410.0], [83.3, 8411.0], [83.4, 8413.0], [83.5, 8414.0], [83.6, 8415.0], [83.7, 8418.0], [83.8, 8419.0], [83.9, 8423.0], [84.0, 8426.0], [84.1, 8430.0], [84.2, 8431.0], [84.3, 8436.0], [84.4, 8437.0], [84.5, 8439.0], [84.6, 8440.0], [84.7, 8442.0], [84.8, 8444.0], [84.9, 8445.0], [85.0, 8448.0], [85.1, 8450.0], [85.2, 8454.0], [85.3, 8458.0], [85.4, 8462.0], [85.5, 8465.0], [85.6, 8466.0], [85.7, 8467.0], [85.8, 8470.0], [85.9, 8471.0], [86.0, 8476.0], [86.1, 8479.0], [86.2, 8480.0], [86.3, 8483.0], [86.4, 8485.0], [86.5, 8486.0], [86.6, 8488.0], [86.7, 8491.0], [86.8, 8494.0], [86.9, 8496.0], [87.0, 8498.0], [87.1, 8501.0], [87.2, 8503.0], [87.3, 8506.0], [87.4, 8508.0], [87.5, 8511.0], [87.6, 8514.0], [87.7, 8519.0], [87.8, 8522.0], [87.9, 8522.0], [88.0, 8529.0], [88.1, 8535.0], [88.2, 8536.0], [88.3, 8539.0], [88.4, 8540.0], [88.5, 8543.0], [88.6, 8547.0], [88.7, 8552.0], [88.8, 8559.0], [88.9, 8562.0], [89.0, 8566.0], [89.1, 8575.0], [89.2, 8578.0], [89.3, 8580.0], [89.4, 8583.0], [89.5, 8585.0], [89.6, 8588.0], [89.7, 8593.0], [89.8, 8598.0], [89.9, 8603.0], [90.0, 8607.0], [90.1, 8613.0], [90.2, 8615.0], [90.3, 8616.0], [90.4, 8620.0], [90.5, 8623.0], [90.6, 8638.0], [90.7, 8642.0], [90.8, 8647.0], [90.9, 8653.0], [91.0, 8660.0], [91.1, 8669.0], [91.2, 8672.0], [91.3, 8680.0], [91.4, 8687.0], [91.5, 8693.0], [91.6, 8696.0], [91.7, 8702.0], [91.8, 8714.0], [91.9, 8722.0], [92.0, 8739.0], [92.1, 8748.0], [92.2, 8753.0], [92.3, 8761.0], [92.4, 8768.0], [92.5, 8778.0], [92.6, 8786.0], [92.7, 8789.0], [92.8, 8798.0], [92.9, 8802.0], [93.0, 8809.0], [93.1, 8824.0], [93.2, 8835.0], [93.3, 8840.0], [93.4, 8853.0], [93.5, 8855.0], [93.6, 8874.0], [93.7, 8888.0], [93.8, 8901.0], [93.9, 8909.0], [94.0, 8921.0], [94.1, 8929.0], [94.2, 8945.0], [94.3, 8955.0], [94.4, 8972.0], [94.5, 8980.0], [94.6, 8999.0], [94.7, 9018.0], [94.8, 9042.0], [94.9, 9088.0], [95.0, 9103.0], [95.1, 9123.0], [95.2, 9150.0], [95.3, 9178.0], [95.4, 9216.0], [95.5, 9264.0], [95.6, 9290.0], [95.7, 9313.0], [95.8, 9378.0], [95.9, 9436.0], [96.0, 9475.0], [96.1, 9574.0], [96.2, 9760.0], [96.3, 9813.0], [96.4, 10041.0], [96.5, 11951.0], [96.6, 12584.0], [96.7, 12673.0], [96.8, 12727.0], [96.9, 12836.0], [97.0, 12942.0], [97.1, 13083.0], [97.2, 13185.0], [97.3, 13320.0], [97.4, 13565.0], [97.5, 15199.0], [97.6, 15364.0], [97.7, 15522.0], [97.8, 15708.0], [97.9, 15775.0], [98.0, 15840.0], [98.1, 15936.0], [98.2, 16003.0], [98.3, 16113.0], [98.4, 16243.0], [98.5, 16370.0], [98.6, 16624.0], [98.7, 16747.0], [98.8, 17060.0], [98.9, 17214.0], [99.0, 17691.0], [99.1, 17995.0], [99.2, 18308.0], [99.3, 18531.0], [99.4, 18876.0], [99.5, 19038.0], [99.6, 19347.0], [99.7, 19706.0], [99.8, 19908.0], [99.9, 20265.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 7.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 10.0], [2.6, 10.0], [2.7, 10.0], [2.8, 10.0], [2.9, 10.0], [3.0, 11.0], [3.1, 11.0], [3.2, 12.0], [3.3, 13.0], [3.4, 13.0], [3.5, 14.0], [3.6, 15.0], [3.7, 16.0], [3.8, 17.0], [3.9, 18.0], [4.0, 18.0], [4.1, 19.0], [4.2, 20.0], [4.3, 21.0], [4.4, 23.0], [4.5, 24.0], [4.6, 25.0], [4.7, 28.0], [4.8, 29.0], [4.9, 30.0], [5.0, 31.0], [5.1, 31.0], [5.2, 33.0], [5.3, 34.0], [5.4, 36.0], [5.5, 38.0], [5.6, 40.0], [5.7, 48.0], [5.8, 53.0], [5.9, 57.0], [6.0, 67.0], [6.1, 74.0], [6.2, 77.0], [6.3, 84.0], [6.4, 91.0], [6.5, 105.0], [6.6, 121.0], [6.7, 138.0], [6.8, 150.0], [6.9, 167.0], [7.0, 237.0], [7.1, 319.0], [7.2, 422.0], [7.3, 728.0], [7.4, 803.0], [7.5, 843.0], [7.6, 865.0], [7.7, 876.0], [7.8, 878.0], [7.9, 884.0], [8.0, 890.0], [8.1, 892.0], [8.2, 896.0], [8.3, 905.0], [8.4, 907.0], [8.5, 910.0], [8.6, 913.0], [8.7, 916.0], [8.8, 920.0], [8.9, 925.0], [9.0, 932.0], [9.1, 936.0], [9.2, 939.0], [9.3, 942.0], [9.4, 946.0], [9.5, 949.0], [9.6, 950.0], [9.7, 953.0], [9.8, 956.0], [9.9, 959.0], [10.0, 964.0], [10.1, 967.0], [10.2, 971.0], [10.3, 973.0], [10.4, 977.0], [10.5, 980.0], [10.6, 983.0], [10.7, 984.0], [10.8, 988.0], [10.9, 991.0], [11.0, 994.0], [11.1, 997.0], [11.2, 1000.0], [11.3, 1001.0], [11.4, 1004.0], [11.5, 1007.0], [11.6, 1008.0], [11.7, 1008.0], [11.8, 1011.0], [11.9, 1011.0], [12.0, 1013.0], [12.1, 1014.0], [12.2, 1015.0], [12.3, 1017.0], [12.4, 1018.0], [12.5, 1019.0], [12.6, 1021.0], [12.7, 1022.0], [12.8, 1024.0], [12.9, 1025.0], [13.0, 1026.0], [13.1, 1028.0], [13.2, 1029.0], [13.3, 1031.0], [13.4, 1032.0], [13.5, 1033.0], [13.6, 1036.0], [13.7, 1036.0], [13.8, 1038.0], [13.9, 1041.0], [14.0, 1042.0], [14.1, 1043.0], [14.2, 1044.0], [14.3, 1045.0], [14.4, 1046.0], [14.5, 1047.0], [14.6, 1048.0], [14.7, 1049.0], [14.8, 1050.0], [14.9, 1051.0], [15.0, 1052.0], [15.1, 1054.0], [15.2, 1056.0], [15.3, 1057.0], [15.4, 1059.0], [15.5, 1060.0], [15.6, 1062.0], [15.7, 1063.0], [15.8, 1065.0], [15.9, 1067.0], [16.0, 1070.0], [16.1, 1070.0], [16.2, 1072.0], [16.3, 1074.0], [16.4, 1076.0], [16.5, 1077.0], [16.6, 1078.0], [16.7, 1081.0], [16.8, 1082.0], [16.9, 1083.0], [17.0, 1085.0], [17.1, 1085.0], [17.2, 1089.0], [17.3, 1092.0], [17.4, 1093.0], [17.5, 1094.0], [17.6, 1095.0], [17.7, 1096.0], [17.8, 1097.0], [17.9, 1098.0], [18.0, 1100.0], [18.1, 1102.0], [18.2, 1102.0], [18.3, 1104.0], [18.4, 1105.0], [18.5, 1106.0], [18.6, 1107.0], [18.7, 1108.0], [18.8, 1110.0], [18.9, 1110.0], [19.0, 1112.0], [19.1, 1113.0], [19.2, 1114.0], [19.3, 1118.0], [19.4, 1119.0], [19.5, 1120.0], [19.6, 1121.0], [19.7, 1123.0], [19.8, 1124.0], [19.9, 1125.0], [20.0, 1126.0], [20.1, 1128.0], [20.2, 1129.0], [20.3, 1130.0], [20.4, 1132.0], [20.5, 1133.0], [20.6, 1135.0], [20.7, 1137.0], [20.8, 1137.0], [20.9, 1139.0], [21.0, 1140.0], [21.1, 1141.0], [21.2, 1143.0], [21.3, 1144.0], [21.4, 1146.0], [21.5, 1147.0], [21.6, 1148.0], [21.7, 1149.0], [21.8, 1150.0], [21.9, 1152.0], [22.0, 1153.0], [22.1, 1155.0], [22.2, 1156.0], [22.3, 1158.0], [22.4, 1159.0], [22.5, 1159.0], [22.6, 1160.0], [22.7, 1161.0], [22.8, 1163.0], [22.9, 1165.0], [23.0, 1166.0], [23.1, 1167.0], [23.2, 1168.0], [23.3, 1169.0], [23.4, 1171.0], [23.5, 1173.0], [23.6, 1175.0], [23.7, 1177.0], [23.8, 1178.0], [23.9, 1179.0], [24.0, 1179.0], [24.1, 1181.0], [24.2, 1182.0], [24.3, 1184.0], [24.4, 1185.0], [24.5, 1186.0], [24.6, 1188.0], [24.7, 1191.0], [24.8, 1191.0], [24.9, 1194.0], [25.0, 1195.0], [25.1, 1196.0], [25.2, 1197.0], [25.3, 1198.0], [25.4, 1199.0], [25.5, 1200.0], [25.6, 1201.0], [25.7, 1203.0], [25.8, 1203.0], [25.9, 1204.0], [26.0, 1205.0], [26.1, 1206.0], [26.2, 1208.0], [26.3, 1208.0], [26.4, 1211.0], [26.5, 1212.0], [26.6, 1213.0], [26.7, 1213.0], [26.8, 1215.0], [26.9, 1216.0], [27.0, 1216.0], [27.1, 1217.0], [27.2, 1218.0], [27.3, 1219.0], [27.4, 1220.0], [27.5, 1220.0], [27.6, 1222.0], [27.7, 1223.0], [27.8, 1224.0], [27.9, 1225.0], [28.0, 1228.0], [28.1, 1229.0], [28.2, 1230.0], [28.3, 1231.0], [28.4, 1233.0], [28.5, 1235.0], [28.6, 1237.0], [28.7, 1240.0], [28.8, 1241.0], [28.9, 1243.0], [29.0, 1245.0], [29.1, 1246.0], [29.2, 1249.0], [29.3, 1250.0], [29.4, 1251.0], [29.5, 1253.0], [29.6, 1254.0], [29.7, 1255.0], [29.8, 1258.0], [29.9, 1259.0], [30.0, 1260.0], [30.1, 1261.0], [30.2, 1262.0], [30.3, 1264.0], [30.4, 1265.0], [30.5, 1265.0], [30.6, 1266.0], [30.7, 1268.0], [30.8, 1269.0], [30.9, 1270.0], [31.0, 1272.0], [31.1, 1274.0], [31.2, 1276.0], [31.3, 1278.0], [31.4, 1278.0], [31.5, 1282.0], [31.6, 1283.0], [31.7, 1285.0], [31.8, 1286.0], [31.9, 1287.0], [32.0, 1288.0], [32.1, 1290.0], [32.2, 1292.0], [32.3, 1293.0], [32.4, 1295.0], [32.5, 1298.0], [32.6, 1301.0], [32.7, 1302.0], [32.8, 1303.0], [32.9, 1306.0], [33.0, 1308.0], [33.1, 1309.0], [33.2, 1310.0], [33.3, 1313.0], [33.4, 1315.0], [33.5, 1316.0], [33.6, 1317.0], [33.7, 1319.0], [33.8, 1320.0], [33.9, 1322.0], [34.0, 1324.0], [34.1, 1325.0], [34.2, 1327.0], [34.3, 1328.0], [34.4, 1331.0], [34.5, 1333.0], [34.6, 1335.0], [34.7, 1336.0], [34.8, 1337.0], [34.9, 1338.0], [35.0, 1340.0], [35.1, 1342.0], [35.2, 1344.0], [35.3, 1345.0], [35.4, 1345.0], [35.5, 1347.0], [35.6, 1349.0], [35.7, 1350.0], [35.8, 1353.0], [35.9, 1356.0], [36.0, 1357.0], [36.1, 1359.0], [36.2, 1362.0], [36.3, 1364.0], [36.4, 1365.0], [36.5, 1368.0], [36.6, 1369.0], [36.7, 1371.0], [36.8, 1372.0], [36.9, 1373.0], [37.0, 1376.0], [37.1, 1379.0], [37.2, 1381.0], [37.3, 1385.0], [37.4, 1386.0], [37.5, 1388.0], [37.6, 1391.0], [37.7, 1394.0], [37.8, 1395.0], [37.9, 1396.0], [38.0, 1399.0], [38.1, 1400.0], [38.2, 1402.0], [38.3, 1406.0], [38.4, 1407.0], [38.5, 1409.0], [38.6, 1410.0], [38.7, 1411.0], [38.8, 1412.0], [38.9, 1414.0], [39.0, 1419.0], [39.1, 1422.0], [39.2, 1423.0], [39.3, 1424.0], [39.4, 1425.0], [39.5, 1426.0], [39.6, 1427.0], [39.7, 1429.0], [39.8, 1431.0], [39.9, 1432.0], [40.0, 1434.0], [40.1, 1435.0], [40.2, 1436.0], [40.3, 1437.0], [40.4, 1438.0], [40.5, 1441.0], [40.6, 1444.0], [40.7, 1446.0], [40.8, 1447.0], [40.9, 1447.0], [41.0, 1448.0], [41.1, 1450.0], [41.2, 1452.0], [41.3, 1456.0], [41.4, 1460.0], [41.5, 1462.0], [41.6, 1467.0], [41.7, 1469.0], [41.8, 1471.0], [41.9, 1478.0], [42.0, 1485.0], [42.1, 1488.0], [42.2, 1490.0], [42.3, 1494.0], [42.4, 1495.0], [42.5, 1496.0], [42.6, 1498.0], [42.7, 1502.0], [42.8, 1504.0], [42.9, 1506.0], [43.0, 1509.0], [43.1, 1516.0], [43.2, 1519.0], [43.3, 1526.0], [43.4, 1527.0], [43.5, 1529.0], [43.6, 1530.0], [43.7, 1533.0], [43.8, 1537.0], [43.9, 1539.0], [44.0, 1543.0], [44.1, 1545.0], [44.2, 1546.0], [44.3, 1548.0], [44.4, 1550.0], [44.5, 1552.0], [44.6, 1556.0], [44.7, 1557.0], [44.8, 1560.0], [44.9, 1562.0], [45.0, 1565.0], [45.1, 1568.0], [45.2, 1572.0], [45.3, 1578.0], [45.4, 1582.0], [45.5, 1588.0], [45.6, 1589.0], [45.7, 1592.0], [45.8, 1595.0], [45.9, 1599.0], [46.0, 1602.0], [46.1, 1609.0], [46.2, 1616.0], [46.3, 1622.0], [46.4, 1625.0], [46.5, 1628.0], [46.6, 1637.0], [46.7, 1643.0], [46.8, 1650.0], [46.9, 1659.0], [47.0, 1662.0], [47.1, 1669.0], [47.2, 1678.0], [47.3, 1681.0], [47.4, 1685.0], [47.5, 1694.0], [47.6, 1702.0], [47.7, 1705.0], [47.8, 1716.0], [47.9, 1721.0], [48.0, 1733.0], [48.1, 1741.0], [48.2, 1744.0], [48.3, 1756.0], [48.4, 1761.0], [48.5, 1773.0], [48.6, 1783.0], [48.7, 1790.0], [48.8, 1796.0], [48.9, 1799.0], [49.0, 1804.0], [49.1, 1810.0], [49.2, 1820.0], [49.3, 1823.0], [49.4, 1826.0], [49.5, 1830.0], [49.6, 1841.0], [49.7, 1845.0], [49.8, 1850.0], [49.9, 1859.0], [50.0, 1864.0], [50.1, 1875.0], [50.2, 1882.0], [50.3, 1887.0], [50.4, 1891.0], [50.5, 1892.0], [50.6, 1906.0], [50.7, 1918.0], [50.8, 1926.0], [50.9, 1936.0], [51.0, 1941.0], [51.1, 1949.0], [51.2, 1951.0], [51.3, 1957.0], [51.4, 1964.0], [51.5, 1970.0], [51.6, 1976.0], [51.7, 1978.0], [51.8, 1983.0], [51.9, 1989.0], [52.0, 1993.0], [52.1, 2002.0], [52.2, 2003.0], [52.3, 2007.0], [52.4, 2012.0], [52.5, 2015.0], [52.6, 2019.0], [52.7, 2024.0], [52.8, 2029.0], [52.9, 2035.0], [53.0, 2036.0], [53.1, 2038.0], [53.2, 2040.0], [53.3, 2042.0], [53.4, 2048.0], [53.5, 2051.0], [53.6, 2056.0], [53.7, 2058.0], [53.8, 2062.0], [53.9, 2065.0], [54.0, 2066.0], [54.1, 2067.0], [54.2, 2069.0], [54.3, 2073.0], [54.4, 2074.0], [54.5, 2076.0], [54.6, 2080.0], [54.7, 2081.0], [54.8, 2083.0], [54.9, 2086.0], [55.0, 2088.0], [55.1, 2089.0], [55.2, 2091.0], [55.3, 2093.0], [55.4, 2094.0], [55.5, 2095.0], [55.6, 2097.0], [55.7, 2098.0], [55.8, 2100.0], [55.9, 2102.0], [56.0, 2103.0], [56.1, 2106.0], [56.2, 2109.0], [56.3, 2111.0], [56.4, 2112.0], [56.5, 2114.0], [56.6, 2115.0], [56.7, 2116.0], [56.8, 2119.0], [56.9, 2121.0], [57.0, 2122.0], [57.1, 2125.0], [57.2, 2126.0], [57.3, 2126.0], [57.4, 2127.0], [57.5, 2131.0], [57.6, 2133.0], [57.7, 2137.0], [57.8, 2138.0], [57.9, 2138.0], [58.0, 2140.0], [58.1, 2140.0], [58.2, 2144.0], [58.3, 2145.0], [58.4, 2148.0], [58.5, 2149.0], [58.6, 2150.0], [58.7, 2152.0], [58.8, 2153.0], [58.9, 2155.0], [59.0, 2158.0], [59.1, 2159.0], [59.2, 2161.0], [59.3, 2164.0], [59.4, 2165.0], [59.5, 2166.0], [59.6, 2169.0], [59.7, 2171.0], [59.8, 2172.0], [59.9, 2173.0], [60.0, 2174.0], [60.1, 2177.0], [60.2, 2178.0], [60.3, 2180.0], [60.4, 2181.0], [60.5, 2184.0], [60.6, 2185.0], [60.7, 2187.0], [60.8, 2187.0], [60.9, 2189.0], [61.0, 2191.0], [61.1, 2192.0], [61.2, 2193.0], [61.3, 2193.0], [61.4, 2194.0], [61.5, 2194.0], [61.6, 2196.0], [61.7, 2199.0], [61.8, 2201.0], [61.9, 2202.0], [62.0, 2203.0], [62.1, 2204.0], [62.2, 2205.0], [62.3, 2207.0], [62.4, 2208.0], [62.5, 2210.0], [62.6, 2211.0], [62.7, 2212.0], [62.8, 2214.0], [62.9, 2215.0], [63.0, 2216.0], [63.1, 2218.0], [63.2, 2218.0], [63.3, 2219.0], [63.4, 2221.0], [63.5, 2221.0], [63.6, 2222.0], [63.7, 2224.0], [63.8, 2226.0], [63.9, 2227.0], [64.0, 2227.0], [64.1, 2228.0], [64.2, 2230.0], [64.3, 2231.0], [64.4, 2235.0], [64.5, 2237.0], [64.6, 2239.0], [64.7, 2239.0], [64.8, 2241.0], [64.9, 2242.0], [65.0, 2243.0], [65.1, 2244.0], [65.2, 2246.0], [65.3, 2247.0], [65.4, 2248.0], [65.5, 2249.0], [65.6, 2251.0], [65.7, 2252.0], [65.8, 2253.0], [65.9, 2254.0], [66.0, 2254.0], [66.1, 2256.0], [66.2, 2256.0], [66.3, 2257.0], [66.4, 2258.0], [66.5, 2259.0], [66.6, 2260.0], [66.7, 2260.0], [66.8, 2262.0], [66.9, 2263.0], [67.0, 2264.0], [67.1, 2265.0], [67.2, 2266.0], [67.3, 2267.0], [67.4, 2268.0], [67.5, 2270.0], [67.6, 2273.0], [67.7, 2276.0], [67.8, 2277.0], [67.9, 2279.0], [68.0, 2280.0], [68.1, 2281.0], [68.2, 2282.0], [68.3, 2283.0], [68.4, 2286.0], [68.5, 2287.0], [68.6, 2289.0], [68.7, 2291.0], [68.8, 2292.0], [68.9, 2294.0], [69.0, 2298.0], [69.1, 2299.0], [69.2, 2300.0], [69.3, 2301.0], [69.4, 2302.0], [69.5, 2305.0], [69.6, 2308.0], [69.7, 2310.0], [69.8, 2312.0], [69.9, 2314.0], [70.0, 2316.0], [70.1, 2317.0], [70.2, 2319.0], [70.3, 2320.0], [70.4, 2322.0], [70.5, 2323.0], [70.6, 2324.0], [70.7, 2326.0], [70.8, 2327.0], [70.9, 2328.0], [71.0, 2329.0], [71.1, 2331.0], [71.2, 2333.0], [71.3, 2334.0], [71.4, 2336.0], [71.5, 2337.0], [71.6, 2340.0], [71.7, 2341.0], [71.8, 2343.0], [71.9, 2344.0], [72.0, 2346.0], [72.1, 2348.0], [72.2, 2350.0], [72.3, 2351.0], [72.4, 2352.0], [72.5, 2354.0], [72.6, 2357.0], [72.7, 2358.0], [72.8, 2359.0], [72.9, 2360.0], [73.0, 2363.0], [73.1, 2364.0], [73.2, 2365.0], [73.3, 2367.0], [73.4, 2369.0], [73.5, 2370.0], [73.6, 2371.0], [73.7, 2372.0], [73.8, 2373.0], [73.9, 2374.0], [74.0, 2376.0], [74.1, 2378.0], [74.2, 2379.0], [74.3, 2379.0], [74.4, 2382.0], [74.5, 2385.0], [74.6, 2385.0], [74.7, 2386.0], [74.8, 2387.0], [74.9, 2387.0], [75.0, 2389.0], [75.1, 2390.0], [75.2, 2392.0], [75.3, 2395.0], [75.4, 2397.0], [75.5, 2399.0], [75.6, 2400.0], [75.7, 2402.0], [75.8, 2404.0], [75.9, 2405.0], [76.0, 2406.0], [76.1, 2409.0], [76.2, 2409.0], [76.3, 2411.0], [76.4, 2412.0], [76.5, 2413.0], [76.6, 2415.0], [76.7, 2416.0], [76.8, 2417.0], [76.9, 2418.0], [77.0, 2419.0], [77.1, 2421.0], [77.2, 2421.0], [77.3, 2425.0], [77.4, 2425.0], [77.5, 2426.0], [77.6, 2426.0], [77.7, 2427.0], [77.8, 2429.0], [77.9, 2431.0], [78.0, 2435.0], [78.1, 2437.0], [78.2, 2439.0], [78.3, 2441.0], [78.4, 2442.0], [78.5, 2446.0], [78.6, 2449.0], [78.7, 2452.0], [78.8, 2453.0], [78.9, 2454.0], [79.0, 2455.0], [79.1, 2456.0], [79.2, 2457.0], [79.3, 2458.0], [79.4, 2460.0], [79.5, 2461.0], [79.6, 2463.0], [79.7, 2465.0], [79.8, 2466.0], [79.9, 2469.0], [80.0, 2473.0], [80.1, 2476.0], [80.2, 2478.0], [80.3, 2480.0], [80.4, 2481.0], [80.5, 2483.0], [80.6, 2485.0], [80.7, 2486.0], [80.8, 2487.0], [80.9, 2488.0], [81.0, 2491.0], [81.1, 2493.0], [81.2, 2494.0], [81.3, 2495.0], [81.4, 2496.0], [81.5, 2497.0], [81.6, 2499.0], [81.7, 2501.0], [81.8, 2502.0], [81.9, 2503.0], [82.0, 2505.0], [82.1, 2508.0], [82.2, 2509.0], [82.3, 2512.0], [82.4, 2512.0], [82.5, 2515.0], [82.6, 2517.0], [82.7, 2519.0], [82.8, 2520.0], [82.9, 2521.0], [83.0, 2522.0], [83.1, 2524.0], [83.2, 2525.0], [83.3, 2525.0], [83.4, 2528.0], [83.5, 2534.0], [83.6, 2537.0], [83.7, 2538.0], [83.8, 2539.0], [83.9, 2541.0], [84.0, 2543.0], [84.1, 2545.0], [84.2, 2546.0], [84.3, 2550.0], [84.4, 2551.0], [84.5, 2553.0], [84.6, 2556.0], [84.7, 2560.0], [84.8, 2560.0], [84.9, 2563.0], [85.0, 2564.0], [85.1, 2567.0], [85.2, 2570.0], [85.3, 2572.0], [85.4, 2575.0], [85.5, 2577.0], [85.6, 2582.0], [85.7, 2584.0], [85.8, 2587.0], [85.9, 2589.0], [86.0, 2591.0], [86.1, 2592.0], [86.2, 2593.0], [86.3, 2594.0], [86.4, 2595.0], [86.5, 2598.0], [86.6, 2600.0], [86.7, 2602.0], [86.8, 2604.0], [86.9, 2607.0], [87.0, 2609.0], [87.1, 2610.0], [87.2, 2611.0], [87.3, 2614.0], [87.4, 2618.0], [87.5, 2622.0], [87.6, 2623.0], [87.7, 2624.0], [87.8, 2625.0], [87.9, 2626.0], [88.0, 2628.0], [88.1, 2629.0], [88.2, 2630.0], [88.3, 2632.0], [88.4, 2634.0], [88.5, 2635.0], [88.6, 2636.0], [88.7, 2639.0], [88.8, 2643.0], [88.9, 2648.0], [89.0, 2650.0], [89.1, 2652.0], [89.2, 2654.0], [89.3, 2657.0], [89.4, 2658.0], [89.5, 2661.0], [89.6, 2661.0], [89.7, 2663.0], [89.8, 2664.0], [89.9, 2668.0], [90.0, 2670.0], [90.1, 2672.0], [90.2, 2672.0], [90.3, 2673.0], [90.4, 2675.0], [90.5, 2678.0], [90.6, 2680.0], [90.7, 2683.0], [90.8, 2685.0], [90.9, 2687.0], [91.0, 2690.0], [91.1, 2693.0], [91.2, 2694.0], [91.3, 2695.0], [91.4, 2700.0], [91.5, 2703.0], [91.6, 2705.0], [91.7, 2710.0], [91.8, 2711.0], [91.9, 2713.0], [92.0, 2717.0], [92.1, 2724.0], [92.2, 2726.0], [92.3, 2730.0], [92.4, 2732.0], [92.5, 2739.0], [92.6, 2740.0], [92.7, 2742.0], [92.8, 2748.0], [92.9, 2755.0], [93.0, 2758.0], [93.1, 2764.0], [93.2, 2766.0], [93.3, 2769.0], [93.4, 2773.0], [93.5, 2779.0], [93.6, 2782.0], [93.7, 2785.0], [93.8, 2788.0], [93.9, 2792.0], [94.0, 2797.0], [94.1, 2802.0], [94.2, 2804.0], [94.3, 2806.0], [94.4, 2813.0], [94.5, 2818.0], [94.6, 2819.0], [94.7, 2827.0], [94.8, 2833.0], [94.9, 2837.0], [95.0, 2841.0], [95.1, 2849.0], [95.2, 2854.0], [95.3, 2858.0], [95.4, 2863.0], [95.5, 2869.0], [95.6, 2871.0], [95.7, 2874.0], [95.8, 2877.0], [95.9, 2885.0], [96.0, 2890.0], [96.1, 2900.0], [96.2, 2905.0], [96.3, 2925.0], [96.4, 2934.0], [96.5, 2939.0], [96.6, 2951.0], [96.7, 2958.0], [96.8, 2980.0], [96.9, 3006.0], [97.0, 3009.0], [97.1, 3090.0], [97.2, 3114.0], [97.3, 3172.0], [97.4, 3234.0], [97.5, 3292.0], [97.6, 3479.0], [97.7, 3551.0], [97.8, 3598.0], [97.9, 3715.0], [98.0, 3741.0], [98.1, 3815.0], [98.2, 3970.0], [98.3, 4036.0], [98.4, 4097.0], [98.5, 4141.0], [98.6, 4227.0], [98.7, 4344.0], [98.8, 4373.0], [98.9, 4507.0], [99.0, 6772.0], [99.1, 6852.0], [99.2, 6941.0], [99.3, 7010.0], [99.4, 7030.0], [99.5, 7045.0], [99.6, 7085.0], [99.7, 7110.0], [99.8, 7201.0], [99.9, 7282.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 10.0], [2.7, 10.0], [2.8, 11.0], [2.9, 11.0], [3.0, 11.0], [3.1, 12.0], [3.2, 12.0], [3.3, 13.0], [3.4, 13.0], [3.5, 13.0], [3.6, 14.0], [3.7, 14.0], [3.8, 15.0], [3.9, 16.0], [4.0, 17.0], [4.1, 18.0], [4.2, 19.0], [4.3, 20.0], [4.4, 22.0], [4.5, 24.0], [4.6, 25.0], [4.7, 27.0], [4.8, 29.0], [4.9, 31.0], [5.0, 32.0], [5.1, 33.0], [5.2, 35.0], [5.3, 37.0], [5.4, 40.0], [5.5, 42.0], [5.6, 49.0], [5.7, 54.0], [5.8, 61.0], [5.9, 64.0], [6.0, 68.0], [6.1, 77.0], [6.2, 84.0], [6.3, 93.0], [6.4, 108.0], [6.5, 119.0], [6.6, 133.0], [6.7, 149.0], [6.8, 170.0], [6.9, 196.0], [7.0, 211.0], [7.1, 236.0], [7.2, 283.0], [7.3, 437.0], [7.4, 868.0], [7.5, 1038.0], [7.6, 1212.0], [7.7, 1337.0], [7.8, 1535.0], [7.9, 1681.0], [8.0, 1822.0], [8.1, 1924.0], [8.2, 1989.0], [8.3, 2097.0], [8.4, 2188.0], [8.5, 2261.0], [8.6, 2506.0], [8.7, 2806.0], [8.8, 2884.0], [8.9, 2944.0], [9.0, 3105.0], [9.1, 3156.0], [9.2, 3198.0], [9.3, 3235.0], [9.4, 3258.0], [9.5, 3321.0], [9.6, 3365.0], [9.7, 3400.0], [9.8, 3430.0], [9.9, 3472.0], [10.0, 3494.0], [10.1, 3501.0], [10.2, 3540.0], [10.3, 3595.0], [10.4, 3678.0], [10.5, 3755.0], [10.6, 3837.0], [10.7, 3897.0], [10.8, 3918.0], [10.9, 3962.0], [11.0, 4038.0], [11.1, 4085.0], [11.2, 4116.0], [11.3, 4134.0], [11.4, 4166.0], [11.5, 4252.0], [11.6, 4269.0], [11.7, 4317.0], [11.8, 4358.0], [11.9, 4419.0], [12.0, 4451.0], [12.1, 4502.0], [12.2, 4520.0], [12.3, 4598.0], [12.4, 4642.0], [12.5, 4747.0], [12.6, 4785.0], [12.7, 4824.0], [12.8, 4866.0], [12.9, 4895.0], [13.0, 4938.0], [13.1, 4979.0], [13.2, 5003.0], [13.3, 5026.0], [13.4, 5029.0], [13.5, 5047.0], [13.6, 5070.0], [13.7, 5101.0], [13.8, 5107.0], [13.9, 5112.0], [14.0, 5131.0], [14.1, 5150.0], [14.2, 5169.0], [14.3, 5188.0], [14.4, 5191.0], [14.5, 5218.0], [14.6, 5227.0], [14.7, 5235.0], [14.8, 5246.0], [14.9, 5250.0], [15.0, 5252.0], [15.1, 5255.0], [15.2, 5260.0], [15.3, 5265.0], [15.4, 5270.0], [15.5, 5274.0], [15.6, 5277.0], [15.7, 5283.0], [15.8, 5288.0], [15.9, 5293.0], [16.0, 5297.0], [16.1, 5307.0], [16.2, 5312.0], [16.3, 5315.0], [16.4, 5319.0], [16.5, 5323.0], [16.6, 5327.0], [16.7, 5330.0], [16.8, 5337.0], [16.9, 5343.0], [17.0, 5347.0], [17.1, 5350.0], [17.2, 5353.0], [17.3, 5357.0], [17.4, 5360.0], [17.5, 5362.0], [17.6, 5366.0], [17.7, 5373.0], [17.8, 5376.0], [17.9, 5379.0], [18.0, 5382.0], [18.1, 5385.0], [18.2, 5392.0], [18.3, 5394.0], [18.4, 5399.0], [18.5, 5402.0], [18.6, 5405.0], [18.7, 5406.0], [18.8, 5407.0], [18.9, 5410.0], [19.0, 5412.0], [19.1, 5415.0], [19.2, 5421.0], [19.3, 5424.0], [19.4, 5430.0], [19.5, 5434.0], [19.6, 5439.0], [19.7, 5443.0], [19.8, 5446.0], [19.9, 5450.0], [20.0, 5456.0], [20.1, 5458.0], [20.2, 5461.0], [20.3, 5462.0], [20.4, 5465.0], [20.5, 5468.0], [20.6, 5469.0], [20.7, 5474.0], [20.8, 5477.0], [20.9, 5479.0], [21.0, 5484.0], [21.1, 5485.0], [21.2, 5486.0], [21.3, 5488.0], [21.4, 5491.0], [21.5, 5493.0], [21.6, 5497.0], [21.7, 5499.0], [21.8, 5501.0], [21.9, 5503.0], [22.0, 5505.0], [22.1, 5511.0], [22.2, 5516.0], [22.3, 5518.0], [22.4, 5520.0], [22.5, 5521.0], [22.6, 5522.0], [22.7, 5523.0], [22.8, 5528.0], [22.9, 5530.0], [23.0, 5532.0], [23.1, 5533.0], [23.2, 5535.0], [23.3, 5537.0], [23.4, 5542.0], [23.5, 5543.0], [23.6, 5544.0], [23.7, 5545.0], [23.8, 5547.0], [23.9, 5550.0], [24.0, 5552.0], [24.1, 5554.0], [24.2, 5555.0], [24.3, 5556.0], [24.4, 5558.0], [24.5, 5560.0], [24.6, 5564.0], [24.7, 5566.0], [24.8, 5568.0], [24.9, 5569.0], [25.0, 5570.0], [25.1, 5571.0], [25.2, 5572.0], [25.3, 5574.0], [25.4, 5576.0], [25.5, 5578.0], [25.6, 5580.0], [25.7, 5582.0], [25.8, 5587.0], [25.9, 5587.0], [26.0, 5589.0], [26.1, 5591.0], [26.2, 5594.0], [26.3, 5595.0], [26.4, 5597.0], [26.5, 5599.0], [26.6, 5599.0], [26.7, 5601.0], [26.8, 5602.0], [26.9, 5605.0], [27.0, 5606.0], [27.1, 5609.0], [27.2, 5611.0], [27.3, 5613.0], [27.4, 5615.0], [27.5, 5616.0], [27.6, 5618.0], [27.7, 5619.0], [27.8, 5621.0], [27.9, 5621.0], [28.0, 5623.0], [28.1, 5625.0], [28.2, 5627.0], [28.3, 5629.0], [28.4, 5631.0], [28.5, 5633.0], [28.6, 5635.0], [28.7, 5637.0], [28.8, 5638.0], [28.9, 5639.0], [29.0, 5639.0], [29.1, 5640.0], [29.2, 5641.0], [29.3, 5642.0], [29.4, 5646.0], [29.5, 5647.0], [29.6, 5648.0], [29.7, 5649.0], [29.8, 5652.0], [29.9, 5653.0], [30.0, 5654.0], [30.1, 5655.0], [30.2, 5656.0], [30.3, 5657.0], [30.4, 5660.0], [30.5, 5662.0], [30.6, 5662.0], [30.7, 5664.0], [30.8, 5664.0], [30.9, 5665.0], [31.0, 5666.0], [31.1, 5667.0], [31.2, 5669.0], [31.3, 5669.0], [31.4, 5669.0], [31.5, 5670.0], [31.6, 5671.0], [31.7, 5672.0], [31.8, 5675.0], [31.9, 5676.0], [32.0, 5677.0], [32.1, 5679.0], [32.2, 5679.0], [32.3, 5680.0], [32.4, 5681.0], [32.5, 5682.0], [32.6, 5683.0], [32.7, 5686.0], [32.8, 5686.0], [32.9, 5687.0], [33.0, 5688.0], [33.1, 5688.0], [33.2, 5689.0], [33.3, 5692.0], [33.4, 5693.0], [33.5, 5694.0], [33.6, 5695.0], [33.7, 5696.0], [33.8, 5697.0], [33.9, 5698.0], [34.0, 5699.0], [34.1, 5700.0], [34.2, 5701.0], [34.3, 5702.0], [34.4, 5704.0], [34.5, 5705.0], [34.6, 5706.0], [34.7, 5707.0], [34.8, 5708.0], [34.9, 5709.0], [35.0, 5710.0], [35.1, 5711.0], [35.2, 5714.0], [35.3, 5715.0], [35.4, 5716.0], [35.5, 5718.0], [35.6, 5719.0], [35.7, 5720.0], [35.8, 5721.0], [35.9, 5722.0], [36.0, 5723.0], [36.1, 5724.0], [36.2, 5725.0], [36.3, 5726.0], [36.4, 5727.0], [36.5, 5729.0], [36.6, 5730.0], [36.7, 5732.0], [36.8, 5733.0], [36.9, 5733.0], [37.0, 5734.0], [37.1, 5736.0], [37.2, 5738.0], [37.3, 5738.0], [37.4, 5739.0], [37.5, 5740.0], [37.6, 5740.0], [37.7, 5741.0], [37.8, 5742.0], [37.9, 5743.0], [38.0, 5745.0], [38.1, 5746.0], [38.2, 5746.0], [38.3, 5748.0], [38.4, 5748.0], [38.5, 5750.0], [38.6, 5751.0], [38.7, 5752.0], [38.8, 5753.0], [38.9, 5754.0], [39.0, 5756.0], [39.1, 5757.0], [39.2, 5758.0], [39.3, 5758.0], [39.4, 5759.0], [39.5, 5759.0], [39.6, 5760.0], [39.7, 5762.0], [39.8, 5764.0], [39.9, 5765.0], [40.0, 5766.0], [40.1, 5766.0], [40.2, 5767.0], [40.3, 5768.0], [40.4, 5769.0], [40.5, 5770.0], [40.6, 5771.0], [40.7, 5772.0], [40.8, 5773.0], [40.9, 5773.0], [41.0, 5774.0], [41.1, 5776.0], [41.2, 5778.0], [41.3, 5780.0], [41.4, 5781.0], [41.5, 5782.0], [41.6, 5782.0], [41.7, 5783.0], [41.8, 5784.0], [41.9, 5785.0], [42.0, 5786.0], [42.1, 5787.0], [42.2, 5788.0], [42.3, 5789.0], [42.4, 5790.0], [42.5, 5790.0], [42.6, 5791.0], [42.7, 5791.0], [42.8, 5792.0], [42.9, 5793.0], [43.0, 5794.0], [43.1, 5796.0], [43.2, 5796.0], [43.3, 5797.0], [43.4, 5798.0], [43.5, 5799.0], [43.6, 5801.0], [43.7, 5802.0], [43.8, 5802.0], [43.9, 5803.0], [44.0, 5803.0], [44.1, 5805.0], [44.2, 5805.0], [44.3, 5806.0], [44.4, 5807.0], [44.5, 5808.0], [44.6, 5809.0], [44.7, 5811.0], [44.8, 5812.0], [44.9, 5812.0], [45.0, 5814.0], [45.1, 5814.0], [45.2, 5815.0], [45.3, 5816.0], [45.4, 5816.0], [45.5, 5817.0], [45.6, 5818.0], [45.7, 5820.0], [45.8, 5822.0], [45.9, 5822.0], [46.0, 5823.0], [46.1, 5824.0], [46.2, 5824.0], [46.3, 5825.0], [46.4, 5826.0], [46.5, 5827.0], [46.6, 5828.0], [46.7, 5829.0], [46.8, 5830.0], [46.9, 5831.0], [47.0, 5832.0], [47.1, 5833.0], [47.2, 5834.0], [47.3, 5835.0], [47.4, 5836.0], [47.5, 5837.0], [47.6, 5838.0], [47.7, 5838.0], [47.8, 5840.0], [47.9, 5841.0], [48.0, 5841.0], [48.1, 5842.0], [48.2, 5843.0], [48.3, 5844.0], [48.4, 5845.0], [48.5, 5846.0], [48.6, 5847.0], [48.7, 5848.0], [48.8, 5849.0], [48.9, 5851.0], [49.0, 5851.0], [49.1, 5853.0], [49.2, 5854.0], [49.3, 5854.0], [49.4, 5855.0], [49.5, 5856.0], [49.6, 5856.0], [49.7, 5857.0], [49.8, 5857.0], [49.9, 5858.0], [50.0, 5860.0], [50.1, 5861.0], [50.2, 5862.0], [50.3, 5863.0], [50.4, 5865.0], [50.5, 5865.0], [50.6, 5866.0], [50.7, 5868.0], [50.8, 5870.0], [50.9, 5870.0], [51.0, 5871.0], [51.1, 5874.0], [51.2, 5874.0], [51.3, 5875.0], [51.4, 5876.0], [51.5, 5878.0], [51.6, 5878.0], [51.7, 5879.0], [51.8, 5879.0], [51.9, 5881.0], [52.0, 5882.0], [52.1, 5883.0], [52.2, 5883.0], [52.3, 5884.0], [52.4, 5885.0], [52.5, 5886.0], [52.6, 5887.0], [52.7, 5889.0], [52.8, 5890.0], [52.9, 5891.0], [53.0, 5892.0], [53.1, 5893.0], [53.2, 5894.0], [53.3, 5895.0], [53.4, 5895.0], [53.5, 5898.0], [53.6, 5899.0], [53.7, 5899.0], [53.8, 5900.0], [53.9, 5901.0], [54.0, 5902.0], [54.1, 5903.0], [54.2, 5904.0], [54.3, 5905.0], [54.4, 5906.0], [54.5, 5907.0], [54.6, 5908.0], [54.7, 5909.0], [54.8, 5910.0], [54.9, 5911.0], [55.0, 5912.0], [55.1, 5913.0], [55.2, 5913.0], [55.3, 5913.0], [55.4, 5914.0], [55.5, 5916.0], [55.6, 5916.0], [55.7, 5917.0], [55.8, 5918.0], [55.9, 5920.0], [56.0, 5920.0], [56.1, 5923.0], [56.2, 5924.0], [56.3, 5924.0], [56.4, 5925.0], [56.5, 5926.0], [56.6, 5926.0], [56.7, 5927.0], [56.8, 5929.0], [56.9, 5930.0], [57.0, 5930.0], [57.1, 5932.0], [57.2, 5933.0], [57.3, 5934.0], [57.4, 5935.0], [57.5, 5935.0], [57.6, 5936.0], [57.7, 5937.0], [57.8, 5938.0], [57.9, 5939.0], [58.0, 5939.0], [58.1, 5941.0], [58.2, 5942.0], [58.3, 5942.0], [58.4, 5943.0], [58.5, 5944.0], [58.6, 5945.0], [58.7, 5946.0], [58.8, 5947.0], [58.9, 5948.0], [59.0, 5949.0], [59.1, 5950.0], [59.2, 5951.0], [59.3, 5952.0], [59.4, 5952.0], [59.5, 5953.0], [59.6, 5954.0], [59.7, 5955.0], [59.8, 5956.0], [59.9, 5958.0], [60.0, 5960.0], [60.1, 5960.0], [60.2, 5962.0], [60.3, 5963.0], [60.4, 5964.0], [60.5, 5966.0], [60.6, 5967.0], [60.7, 5968.0], [60.8, 5968.0], [60.9, 5970.0], [61.0, 5972.0], [61.1, 5973.0], [61.2, 5975.0], [61.3, 5975.0], [61.4, 5977.0], [61.5, 5977.0], [61.6, 5978.0], [61.7, 5980.0], [61.8, 5980.0], [61.9, 5981.0], [62.0, 5982.0], [62.1, 5983.0], [62.2, 5985.0], [62.3, 5985.0], [62.4, 5986.0], [62.5, 5987.0], [62.6, 5988.0], [62.7, 5990.0], [62.8, 5990.0], [62.9, 5992.0], [63.0, 5993.0], [63.1, 5995.0], [63.2, 5996.0], [63.3, 5997.0], [63.4, 5998.0], [63.5, 5999.0], [63.6, 5999.0], [63.7, 6000.0], [63.8, 6001.0], [63.9, 6001.0], [64.0, 6003.0], [64.1, 6003.0], [64.2, 6004.0], [64.3, 6006.0], [64.4, 6007.0], [64.5, 6008.0], [64.6, 6009.0], [64.7, 6010.0], [64.8, 6011.0], [64.9, 6012.0], [65.0, 6013.0], [65.1, 6013.0], [65.2, 6014.0], [65.3, 6015.0], [65.4, 6016.0], [65.5, 6016.0], [65.6, 6018.0], [65.7, 6019.0], [65.8, 6020.0], [65.9, 6021.0], [66.0, 6022.0], [66.1, 6023.0], [66.2, 6024.0], [66.3, 6025.0], [66.4, 6026.0], [66.5, 6027.0], [66.6, 6028.0], [66.7, 6029.0], [66.8, 6030.0], [66.9, 6030.0], [67.0, 6032.0], [67.1, 6032.0], [67.2, 6033.0], [67.3, 6034.0], [67.4, 6035.0], [67.5, 6036.0], [67.6, 6037.0], [67.7, 6038.0], [67.8, 6039.0], [67.9, 6040.0], [68.0, 6040.0], [68.1, 6041.0], [68.2, 6041.0], [68.3, 6042.0], [68.4, 6042.0], [68.5, 6043.0], [68.6, 6043.0], [68.7, 6044.0], [68.8, 6045.0], [68.9, 6046.0], [69.0, 6047.0], [69.1, 6048.0], [69.2, 6048.0], [69.3, 6049.0], [69.4, 6050.0], [69.5, 6051.0], [69.6, 6053.0], [69.7, 6054.0], [69.8, 6055.0], [69.9, 6056.0], [70.0, 6057.0], [70.1, 6058.0], [70.2, 6059.0], [70.3, 6060.0], [70.4, 6061.0], [70.5, 6061.0], [70.6, 6063.0], [70.7, 6064.0], [70.8, 6065.0], [70.9, 6067.0], [71.0, 6068.0], [71.1, 6070.0], [71.2, 6071.0], [71.3, 6072.0], [71.4, 6073.0], [71.5, 6074.0], [71.6, 6075.0], [71.7, 6075.0], [71.8, 6077.0], [71.9, 6078.0], [72.0, 6079.0], [72.1, 6081.0], [72.2, 6082.0], [72.3, 6082.0], [72.4, 6083.0], [72.5, 6085.0], [72.6, 6085.0], [72.7, 6085.0], [72.8, 6087.0], [72.9, 6088.0], [73.0, 6089.0], [73.1, 6090.0], [73.2, 6091.0], [73.3, 6092.0], [73.4, 6094.0], [73.5, 6094.0], [73.6, 6095.0], [73.7, 6096.0], [73.8, 6097.0], [73.9, 6098.0], [74.0, 6099.0], [74.1, 6100.0], [74.2, 6101.0], [74.3, 6102.0], [74.4, 6103.0], [74.5, 6104.0], [74.6, 6105.0], [74.7, 6107.0], [74.8, 6108.0], [74.9, 6109.0], [75.0, 6110.0], [75.1, 6112.0], [75.2, 6112.0], [75.3, 6113.0], [75.4, 6113.0], [75.5, 6114.0], [75.6, 6114.0], [75.7, 6115.0], [75.8, 6117.0], [75.9, 6119.0], [76.0, 6120.0], [76.1, 6120.0], [76.2, 6121.0], [76.3, 6122.0], [76.4, 6123.0], [76.5, 6124.0], [76.6, 6125.0], [76.7, 6126.0], [76.8, 6127.0], [76.9, 6127.0], [77.0, 6128.0], [77.1, 6129.0], [77.2, 6131.0], [77.3, 6132.0], [77.4, 6135.0], [77.5, 6137.0], [77.6, 6138.0], [77.7, 6140.0], [77.8, 6141.0], [77.9, 6143.0], [78.0, 6144.0], [78.1, 6145.0], [78.2, 6148.0], [78.3, 6149.0], [78.4, 6150.0], [78.5, 6153.0], [78.6, 6154.0], [78.7, 6156.0], [78.8, 6156.0], [78.9, 6158.0], [79.0, 6158.0], [79.1, 6160.0], [79.2, 6161.0], [79.3, 6163.0], [79.4, 6165.0], [79.5, 6166.0], [79.6, 6167.0], [79.7, 6170.0], [79.8, 6172.0], [79.9, 6173.0], [80.0, 6174.0], [80.1, 6175.0], [80.2, 6176.0], [80.3, 6177.0], [80.4, 6179.0], [80.5, 6179.0], [80.6, 6180.0], [80.7, 6182.0], [80.8, 6185.0], [80.9, 6186.0], [81.0, 6190.0], [81.1, 6191.0], [81.2, 6192.0], [81.3, 6194.0], [81.4, 6195.0], [81.5, 6196.0], [81.6, 6197.0], [81.7, 6198.0], [81.8, 6198.0], [81.9, 6200.0], [82.0, 6202.0], [82.1, 6207.0], [82.2, 6209.0], [82.3, 6209.0], [82.4, 6211.0], [82.5, 6212.0], [82.6, 6213.0], [82.7, 6215.0], [82.8, 6216.0], [82.9, 6217.0], [83.0, 6220.0], [83.1, 6224.0], [83.2, 6225.0], [83.3, 6226.0], [83.4, 6228.0], [83.5, 6230.0], [83.6, 6230.0], [83.7, 6231.0], [83.8, 6232.0], [83.9, 6233.0], [84.0, 6235.0], [84.1, 6237.0], [84.2, 6240.0], [84.3, 6241.0], [84.4, 6242.0], [84.5, 6243.0], [84.6, 6245.0], [84.7, 6248.0], [84.8, 6249.0], [84.9, 6251.0], [85.0, 6253.0], [85.1, 6254.0], [85.2, 6255.0], [85.3, 6257.0], [85.4, 6258.0], [85.5, 6261.0], [85.6, 6263.0], [85.7, 6264.0], [85.8, 6266.0], [85.9, 6269.0], [86.0, 6272.0], [86.1, 6274.0], [86.2, 6275.0], [86.3, 6276.0], [86.4, 6278.0], [86.5, 6279.0], [86.6, 6282.0], [86.7, 6286.0], [86.8, 6288.0], [86.9, 6294.0], [87.0, 6297.0], [87.1, 6301.0], [87.2, 6303.0], [87.3, 6304.0], [87.4, 6306.0], [87.5, 6307.0], [87.6, 6308.0], [87.7, 6309.0], [87.8, 6310.0], [87.9, 6314.0], [88.0, 6315.0], [88.1, 6319.0], [88.2, 6321.0], [88.3, 6322.0], [88.4, 6326.0], [88.5, 6328.0], [88.6, 6330.0], [88.7, 6332.0], [88.8, 6333.0], [88.9, 6338.0], [89.0, 6340.0], [89.1, 6343.0], [89.2, 6345.0], [89.3, 6347.0], [89.4, 6352.0], [89.5, 6353.0], [89.6, 6359.0], [89.7, 6364.0], [89.8, 6370.0], [89.9, 6374.0], [90.0, 6378.0], [90.1, 6381.0], [90.2, 6387.0], [90.3, 6392.0], [90.4, 6394.0], [90.5, 6397.0], [90.6, 6402.0], [90.7, 6405.0], [90.8, 6411.0], [90.9, 6414.0], [91.0, 6418.0], [91.1, 6425.0], [91.2, 6431.0], [91.3, 6437.0], [91.4, 6445.0], [91.5, 6450.0], [91.6, 6454.0], [91.7, 6463.0], [91.8, 6466.0], [91.9, 6468.0], [92.0, 6469.0], [92.1, 6486.0], [92.2, 6493.0], [92.3, 6502.0], [92.4, 6511.0], [92.5, 6522.0], [92.6, 6528.0], [92.7, 6535.0], [92.8, 6554.0], [92.9, 6560.0], [93.0, 6578.0], [93.1, 6584.0], [93.2, 6598.0], [93.3, 6609.0], [93.4, 6615.0], [93.5, 6626.0], [93.6, 6640.0], [93.7, 6657.0], [93.8, 6662.0], [93.9, 6675.0], [94.0, 6689.0], [94.1, 6722.0], [94.2, 6727.0], [94.3, 6737.0], [94.4, 6761.0], [94.5, 6779.0], [94.6, 6787.0], [94.7, 6799.0], [94.8, 6820.0], [94.9, 6845.0], [95.0, 6867.0], [95.1, 6870.0], [95.2, 6878.0], [95.3, 6912.0], [95.4, 6939.0], [95.5, 6965.0], [95.6, 6991.0], [95.7, 7003.0], [95.8, 7019.0], [95.9, 7031.0], [96.0, 7049.0], [96.1, 7072.0], [96.2, 7095.0], [96.3, 7110.0], [96.4, 7163.0], [96.5, 7195.0], [96.6, 7216.0], [96.7, 7233.0], [96.8, 7266.0], [96.9, 7292.0], [97.0, 7357.0], [97.1, 7421.0], [97.2, 7530.0], [97.3, 7618.0], [97.4, 7693.0], [97.5, 11558.0], [97.6, 11583.0], [97.7, 11603.0], [97.8, 11634.0], [97.9, 11678.0], [98.0, 11854.0], [98.1, 11950.0], [98.2, 12028.0], [98.3, 12176.0], [98.4, 12251.0], [98.5, 12289.0], [98.6, 12387.0], [98.7, 12436.0], [98.8, 14620.0], [98.9, 15757.0], [99.0, 15986.0], [99.1, 16354.0], [99.2, 16488.0], [99.3, 16631.0], [99.4, 16758.0], [99.5, 16913.0], [99.6, 16996.0], [99.7, 17110.0], [99.8, 17230.0], [99.9, 17358.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 408.0, "series": [{"data": [[0.0, 163.0], [100.0, 20.0], [200.0, 12.0], [300.0, 7.0], [400.0, 2.0], [500.0, 1.0], [600.0, 1.0], [1100.0, 1.0], [1800.0, 1.0], [1900.0, 4.0], [2000.0, 2.0], [2100.0, 3.0], [2300.0, 17.0], [2200.0, 7.0], [2400.0, 13.0], [2500.0, 16.0], [2600.0, 9.0], [2800.0, 6.0], [2700.0, 8.0], [2900.0, 1.0], [3000.0, 3.0], [3100.0, 4.0], [3300.0, 10.0], [3200.0, 8.0], [3400.0, 7.0], [3500.0, 8.0], [3600.0, 4.0], [3700.0, 4.0], [3800.0, 6.0], [3900.0, 8.0], [4000.0, 1.0], [4100.0, 7.0], [4200.0, 7.0], [4300.0, 3.0], [4500.0, 5.0], [4600.0, 3.0], [4400.0, 3.0], [4800.0, 3.0], [4700.0, 4.0], [4900.0, 5.0], [5000.0, 6.0], [5100.0, 6.0], [5300.0, 11.0], [5200.0, 7.0], [5400.0, 9.0], [5500.0, 10.0], [5600.0, 11.0], [5700.0, 14.0], [5800.0, 13.0], [6100.0, 13.0], [5900.0, 15.0], [6000.0, 9.0], [6200.0, 14.0], [6300.0, 3.0], [6400.0, 8.0], [6500.0, 8.0], [6600.0, 23.0], [6700.0, 46.0], [6800.0, 102.0], [6900.0, 185.0], [7100.0, 294.0], [7000.0, 264.0], [7300.0, 167.0], [7400.0, 103.0], [7200.0, 219.0], [7600.0, 67.0], [7500.0, 62.0], [7900.0, 138.0], [7800.0, 83.0], [7700.0, 74.0], [8000.0, 171.0], [8100.0, 220.0], [8200.0, 246.0], [8300.0, 219.0], [8500.0, 110.0], [8400.0, 175.0], [8700.0, 45.0], [8600.0, 72.0], [8800.0, 37.0], [9000.0, 14.0], [9100.0, 15.0], [8900.0, 33.0], [9200.0, 12.0], [9400.0, 8.0], [9300.0, 8.0], [9500.0, 2.0], [9700.0, 5.0], [9600.0, 1.0], [10000.0, 4.0], [9800.0, 2.0], [10300.0, 1.0], [11600.0, 1.0], [12200.0, 1.0], [11900.0, 1.0], [12600.0, 3.0], [12300.0, 2.0], [12700.0, 5.0], [12500.0, 2.0], [13100.0, 5.0], [13200.0, 2.0], [12800.0, 3.0], [12900.0, 6.0], [13300.0, 2.0], [13000.0, 2.0], [13600.0, 1.0], [13400.0, 2.0], [13500.0, 1.0], [15100.0, 3.0], [15300.0, 2.0], [15200.0, 2.0], [15700.0, 6.0], [15800.0, 5.0], [15400.0, 1.0], [15500.0, 3.0], [15600.0, 2.0], [15900.0, 5.0], [16100.0, 3.0], [16000.0, 4.0], [16200.0, 3.0], [16300.0, 3.0], [16600.0, 2.0], [16400.0, 1.0], [16700.0, 4.0], [16500.0, 2.0], [16900.0, 1.0], [17400.0, 1.0], [17200.0, 2.0], [17000.0, 2.0], [17100.0, 2.0], [17600.0, 2.0], [17700.0, 1.0], [18300.0, 4.0], [18200.0, 1.0], [17800.0, 1.0], [18000.0, 1.0], [17900.0, 2.0], [18400.0, 1.0], [18800.0, 2.0], [18500.0, 2.0], [18700.0, 1.0], [18900.0, 2.0], [19100.0, 2.0], [19000.0, 2.0], [19300.0, 4.0], [19400.0, 1.0], [19700.0, 2.0], [19900.0, 3.0], [20000.0, 1.0], [19800.0, 1.0], [20200.0, 1.0], [20100.0, 1.0], [20600.0, 1.0], [21400.0, 1.0], [21600.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 249.0], [700.0, 6.0], [800.0, 32.0], [900.0, 114.0], [1000.0, 260.0], [1100.0, 291.0], [1200.0, 272.0], [1300.0, 212.0], [1400.0, 177.0], [1500.0, 126.0], [1600.0, 64.0], [1700.0, 53.0], [1800.0, 61.0], [1900.0, 60.0], [2000.0, 141.0], [2100.0, 231.0], [2200.0, 284.0], [2300.0, 249.0], [2400.0, 233.0], [2500.0, 190.0], [2600.0, 186.0], [2700.0, 103.0], [2800.0, 78.0], [2900.0, 29.0], [3000.0, 12.0], [3100.0, 8.0], [3200.0, 6.0], [3300.0, 1.0], [3400.0, 4.0], [3500.0, 7.0], [3600.0, 3.0], [3700.0, 7.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 7.0], [4100.0, 5.0], [4200.0, 5.0], [4300.0, 7.0], [4400.0, 1.0], [4500.0, 3.0], [6900.0, 4.0], [6700.0, 3.0], [6800.0, 6.0], [7000.0, 13.0], [7100.0, 6.0], [7200.0, 6.0], [7300.0, 1.0], [7900.0, 1.0], [100.0, 18.0], [200.0, 4.0], [300.0, 4.0], [400.0, 4.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 249.0], [100.0, 23.0], [200.0, 11.0], [300.0, 1.0], [400.0, 4.0], [600.0, 1.0], [700.0, 1.0], [800.0, 1.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 4.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 3.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 4.0], [2200.0, 6.0], [2300.0, 1.0], [2500.0, 1.0], [2600.0, 3.0], [2800.0, 7.0], [2900.0, 3.0], [3000.0, 1.0], [3100.0, 9.0], [3300.0, 9.0], [3200.0, 10.0], [3400.0, 14.0], [3500.0, 10.0], [3700.0, 4.0], [3600.0, 5.0], [3800.0, 7.0], [3900.0, 10.0], [4000.0, 9.0], [4100.0, 8.0], [4200.0, 9.0], [4300.0, 8.0], [4600.0, 4.0], [4500.0, 10.0], [4400.0, 9.0], [4800.0, 10.0], [4700.0, 9.0], [5000.0, 20.0], [4900.0, 11.0], [5100.0, 29.0], [5200.0, 63.0], [5300.0, 94.0], [5400.0, 129.0], [5500.0, 191.0], [5600.0, 293.0], [5700.0, 371.0], [5800.0, 400.0], [5900.0, 387.0], [6000.0, 408.0], [6100.0, 308.0], [6300.0, 137.0], [6200.0, 203.0], [6600.0, 34.0], [6400.0, 66.0], [6500.0, 38.0], [6700.0, 25.0], [6900.0, 16.0], [6800.0, 21.0], [7100.0, 11.0], [7000.0, 23.0], [7200.0, 16.0], [7400.0, 3.0], [7300.0, 6.0], [7600.0, 5.0], [7500.0, 5.0], [7800.0, 1.0], [11600.0, 10.0], [11700.0, 1.0], [11500.0, 7.0], [11400.0, 1.0], [12200.0, 7.0], [11900.0, 4.0], [12100.0, 5.0], [11800.0, 5.0], [12000.0, 2.0], [12300.0, 5.0], [12400.0, 3.0], [13600.0, 1.0], [14600.0, 2.0], [15100.0, 1.0], [15400.0, 1.0], [15600.0, 1.0], [15700.0, 1.0], [15900.0, 4.0], [16300.0, 4.0], [16100.0, 1.0], [16600.0, 3.0], [16400.0, 4.0], [16800.0, 3.0], [16700.0, 3.0], [17200.0, 5.0], [17000.0, 2.0], [17100.0, 2.0], [16500.0, 1.0], [16900.0, 6.0], [17400.0, 1.0], [17300.0, 2.0], [20400.0, 1.0], [20300.0, 1.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4498.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4498.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3366.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 45.796178343949045, "minX": 1.6165203E12, "maxY": 50.0, "series": [{"data": [[1.6355661E12, 45.796178343949045], [1.61652036E12, 50.0], [1.63556592E12, 50.0], [1.61652054E12, 50.0], [1.63556598E12, 50.0], [1.61652048E12, 50.0], [1.6355658E12, 50.0], [1.6165203E12, 50.0], [1.63556586E12, 50.0], [1.6165206E12, 46.87100893997444], [1.63556604E12, 50.0], [1.61652042E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355661E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1161.0, "minX": 1.0, "maxY": 7545.5, "series": [{"data": [[2.0, 2884.0], [3.0, 3351.0], [4.0, 2887.0], [5.0, 3375.0], [6.0, 6277.5], [7.0, 3372.5], [8.0, 3362.0], [9.0, 3346.5], [10.0, 3277.5], [11.0, 3295.5], [12.0, 3550.0], [13.0, 3709.0], [14.0, 3853.5], [15.0, 4218.5], [16.0, 4354.5], [17.0, 4608.5], [18.0, 5641.0], [19.0, 4390.5], [20.0, 4611.0], [21.0, 4980.5], [22.0, 6499.5], [23.0, 5140.0], [24.0, 6393.0], [25.0, 5134.0], [26.0, 6394.0], [27.0, 6686.5], [28.0, 6532.5], [29.0, 6690.5], [30.0, 4802.5], [31.0, 6109.0], [33.0, 4286.0], [32.0, 5511.0], [35.0, 6111.5], [34.0, 4006.5], [37.0, 5860.5], [36.0, 5859.5], [39.0, 6731.5], [38.0, 6555.5], [41.0, 6136.5], [40.0, 6170.5], [43.0, 6838.0], [42.0, 5955.5], [45.0, 7461.5], [44.0, 7296.0], [47.0, 7545.5], [46.0, 6139.0], [49.0, 7438.0], [48.0, 6236.5], [50.0, 7406.948784949049], [1.0, 2807.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[49.43494897959195, 7357.25382653062]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[33.0, 2508.0], [34.0, 2343.0], [39.0, 1761.0], [38.0, 1566.0], [43.0, 1919.0], [45.0, 1705.5], [44.0, 1739.5], [47.0, 1696.5], [46.0, 1718.5], [49.0, 1710.0], [48.0, 1161.0], [50.0, 1814.779200418083], [18.0, 1879.0], [22.0, 2066.0], [24.0, 2032.0], [6.0, 3723.0], [26.0, 1975.0], [27.0, 1949.0], [28.0, 2007.0], [29.0, 2316.0], [30.0, 2376.0], [31.0, 2359.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[49.90604723592001, 1815.7902932779677]], "isOverall": false, "label": "(POST) INSERT New User-Aggregated", "isController": false}, {"data": [[32.0, 5511.0], [2.0, 2884.0], [33.0, 5602.0], [35.0, 6111.0], [34.0, 5523.0], [37.0, 5860.0], [36.0, 5859.5], [39.0, 6179.0], [38.0, 5670.0], [41.0, 6136.0], [40.0, 6169.5], [42.0, 5955.5], [43.0, 5929.0], [48.0, 5623.0], [3.0, 3351.0], [50.0, 5588.666493641311], [4.0, 2887.0], [5.0, 3374.0], [6.0, 3255.0], [7.0, 3372.0], [8.0, 3362.0], [9.0, 3346.0], [10.0, 3277.5], [11.0, 3295.5], [12.0, 3550.0], [13.0, 3709.0], [14.0, 3853.0], [15.0, 4218.5], [16.0, 4354.5], [1.0, 2806.0], [17.0, 4608.5], [18.0, 3918.0], [19.0, 4389.5], [20.0, 4611.0], [21.0, 4980.0], [22.0, 4512.0], [23.0, 5140.0], [24.0, 4867.0], [25.0, 5134.0], [26.0, 4938.0], [27.0, 4973.0], [28.0, 4747.0], [29.0, 5124.0], [30.0, 5406.0], [31.0, 5734.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}, {"data": [[49.527295918367415, 5572.45943877551]], "isOverall": false, "label": "(GET) Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 522939.35, "minX": 1.6165203E12, "maxY": 8937259.6, "series": [{"data": [[1.6355661E12, 5031954.483333333], [1.61652036E12, 7686502.7], [1.63556592E12, 8937259.6], [1.61652054E12, 8160508.083333333], [1.63556598E12, 8663101.1], [1.61652048E12, 7990209.6], [1.6355658E12, 5139681.9], [1.6165203E12, 3707365.3], [1.63556586E12, 8663778.55], [1.6165206E12, 6482965.233333333], [1.63556604E12, 8914726.016666668], [1.61652042E12, 8116588.133333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6355661E12, 1055704.6166666667], [1.61652036E12, 2212145.533333333], [1.63556592E12, 2172963.8333333335], [1.61652054E12, 2292661.7666666666], [1.63556598E12, 2160571.3], [1.61652048E12, 2217246.6], [1.6355658E12, 865492.5833333334], [1.6165203E12, 522939.35], [1.63556586E12, 2136894.5166666666], [1.6165206E12, 1678955.9333333333], [1.63556604E12, 2181496.8333333335], [1.61652042E12, 2263171.3666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355661E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1312.7169811320773, "minX": 1.6165203E12, "maxY": 13140.7, "series": [{"data": [[1.6355661E12, 6872.877906976743], [1.61652036E12, 7985.9105263157935], [1.63556592E12, 7238.414168937328], [1.61652054E12, 7164.167848699767], [1.63556598E12, 7241.453333333332], [1.61652048E12, 6003.196754563894], [1.6355658E12, 11681.80000000001], [1.6165203E12, 13140.7], [1.63556586E12, 7674.760217983651], [1.6165206E12, 7526.065217391307], [1.63556604E12, 7278.30997304582], [1.61652042E12, 6292.834033613441]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.6355661E12, 1561.1751824817518], [1.61652036E12, 2460.0078947368434], [1.63556592E12, 1361.2070844686646], [1.61652054E12, 2164.380614657213], [1.63556598E12, 1342.6853333333338], [1.61652048E12, 1747.718052738337], [1.6355658E12, 2011.6799999999994], [1.6165203E12, 3535.657142857143], [1.63556586E12, 1579.4250681198919], [1.6165206E12, 2215.8401639344256], [1.63556604E12, 1312.7169811320773], [1.61652042E12, 1913.336134453781]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.6355661E12, 5619.919753086421], [1.61652036E12, 5569.135734072026], [1.63556592E12, 5872.7704485488175], [1.61652054E12, 5038.738609112707], [1.63556598E12, 5904.736986301372], [1.61652048E12, 4222.678068410464], [1.6355658E12, 9670.119999999999], [1.6165203E12, 8291.0], [1.63556586E12, 6094.916442048519], [1.6165206E12, 5539.8897338403], [1.63556604E12, 5959.40266666666], [1.61652042E12, 4395.256249999999]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355661E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6165203E12, "maxY": 1977.7800000000007, "series": [{"data": [[1.6355661E12, 0.0], [1.61652036E12, 0.0], [1.63556592E12, 0.0], [1.61652054E12, 0.0], [1.63556598E12, 0.0], [1.61652048E12, 0.0], [1.6355658E12, 0.0], [1.6165203E12, 0.0], [1.63556586E12, 0.0], [1.6165206E12, 0.0], [1.63556604E12, 0.0], [1.61652042E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.6355661E12, 1161.408759124088], [1.61652036E12, 1243.9131578947374], [1.63556592E12, 1246.452316076294], [1.61652054E12, 1061.2222222222226], [1.63556598E12, 1198.5119999999997], [1.61652048E12, 858.7363083164305], [1.6355658E12, 1977.7800000000007], [1.6165203E12, 1620.5571428571423], [1.63556586E12, 1506.8637602179842], [1.6165206E12, 1129.7254098360668], [1.63556604E12, 1151.8948787062], [1.61652042E12, 951.6680672268905]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.6355661E12, 656.117283950617], [1.61652036E12, 831.969529085873], [1.63556592E12, 773.4960422163593], [1.61652054E12, 730.5803357314151], [1.63556598E12, 710.775342465753], [1.61652048E12, 633.0402414486922], [1.6355658E12, 1140.6000000000006], [1.6165203E12, 178.12000000000003], [1.63556586E12, 1121.5013477088955], [1.6165206E12, 832.6692015209128], [1.63556604E12, 669.5466666666669], [1.61652042E12, 657.9958333333327]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355661E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6165203E12, "maxY": 58.10000000000001, "series": [{"data": [[1.6355661E12, 0.0], [1.61652036E12, 0.0], [1.63556592E12, 0.0], [1.61652054E12, 0.0], [1.63556598E12, 0.0], [1.61652048E12, 0.0], [1.6355658E12, 0.0], [1.6165203E12, 0.0], [1.63556586E12, 0.0], [1.6165206E12, 0.0], [1.63556604E12, 0.0], [1.61652042E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.6355661E12, 35.693430656934304], [1.61652036E12, 7.465789473684213], [1.63556592E12, 35.6239782016349], [1.61652054E12, 16.026004728132396], [1.63556598E12, 36.95733333333329], [1.61652048E12, 14.858012170385402], [1.6355658E12, 58.10000000000001], [1.6165203E12, 26.057142857142868], [1.63556586E12, 39.746594005449595], [1.6165206E12, 11.495901639344263], [1.63556604E12, 36.89757412398922], [1.61652042E12, 17.048319327731114]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.6355661E12, 35.666666666666686], [1.61652036E12, 7.9279778393351785], [1.63556592E12, 35.345646437994716], [1.61652054E12, 15.410071942446052], [1.63556598E12, 35.81917808219178], [1.61652048E12, 14.877263581488938], [1.6355658E12, 38.66666666666666], [1.6165203E12, 12.039999999999996], [1.63556586E12, 40.326145552560654], [1.6165206E12, 10.76425855513308], [1.63556604E12, 36.00266666666666], [1.61652042E12, 14.331249999999994]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355661E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1308.0, "minX": 1.6165203E12, "maxY": 20452.0, "series": [{"data": [[1.6355661E12, 9300.0], [1.61652036E12, 7118.0], [1.63556592E12, 7287.0], [1.61652054E12, 7100.0], [1.63556598E12, 7183.0], [1.61652048E12, 7101.0], [1.6355658E12, 20452.0], [1.6165203E12, 12436.0], [1.63556586E12, 7595.0], [1.6165206E12, 7071.0], [1.63556604E12, 7282.0], [1.61652042E12, 7282.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6355661E12, 3112.0], [1.61652036E12, 1308.0], [1.63556592E12, 5189.0], [1.61652054E12, 1545.0], [1.63556598E12, 5327.0], [1.61652048E12, 1350.0], [1.6355658E12, 4583.0], [1.6165203E12, 2086.0], [1.63556586E12, 4932.0], [1.6165206E12, 1709.0], [1.63556604E12, 5484.0], [1.61652042E12, 1592.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6355661E12, 6255.0], [1.61652036E12, 6229.5], [1.63556592E12, 6272.0], [1.61652054E12, 6095.0], [1.63556598E12, 6260.0], [1.61652048E12, 6115.6], [1.6355658E12, 6216.400000000001], [1.6165203E12, 12169.8], [1.63556586E12, 6296.0], [1.6165206E12, 6126.2], [1.63556604E12, 6264.0], [1.61652042E12, 6161.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6355661E12, 15674.499999999973], [1.61652036E12, 12316.550000000001], [1.63556592E12, 16358.05], [1.61652054E12, 11958.699999999997], [1.63556598E12, 16211.15999999996], [1.61652048E12, 12151.400000000001], [1.6355658E12, 16627.879999999997], [1.6165203E12, 12427.72], [1.63556586E12, 16493.8], [1.6165206E12, 11866.159999999996], [1.63556604E12, 15921.109999999991], [1.61652042E12, 12251.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6355661E12, 6613.5], [1.61652036E12, 11602.5], [1.63556592E12, 6737.549999999997], [1.61652054E12, 6276.5], [1.63556598E12, 6668.5999999999985], [1.61652048E12, 6319.699999999999], [1.6355658E12, 6610.4], [1.6165203E12, 12304.949999999999], [1.63556586E12, 6867.899999999992], [1.6165206E12, 6288.599999999999], [1.63556604E12, 6619.049999999998], [1.61652042E12, 6433.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355661E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 1000.0, "maxY": 5671.0, "series": [{"data": [[3000.0, 5479.0], [1000.0, 5671.0], [2000.0, 5344.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3000.0, 8.0], [6000.0, 11.5], [1000.0, 1372.0], [2000.0, 1347.5], [4000.0, 10.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 6000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 1048.5, "series": [{"data": [[3000.0, 775.0], [1000.0, 947.0], [2000.0, 710.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3000.0, 0.0], [6000.0, 0.0], [1000.0, 1048.5], [2000.0, 0.0], [4000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 6000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.6666666666666665, "minX": 1.6165203E12, "maxY": 16.5, "series": [{"data": [[1.6355661E12, 4.983333333333333], [1.61652036E12, 12.35], [1.63556592E12, 12.433333333333334], [1.61652054E12, 14.0], [1.63556598E12, 12.333333333333334], [1.61652048E12, 16.5], [1.6355658E12, 5.833333333333333], [1.6165203E12, 3.6666666666666665], [1.63556586E12, 12.216666666666667], [1.6165206E12, 8.45], [1.63556604E12, 12.433333333333334], [1.61652042E12, 15.933333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355661E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6165203E12, "maxY": 12.666666666666666, "series": [{"data": [[1.6355661E12, 3.45], [1.61652036E12, 11.983333333333333], [1.63556592E12, 6.4], [1.61652054E12, 12.666666666666666], [1.63556598E12, 6.2], [1.61652048E12, 12.35], [1.6355658E12, 2.5], [1.6165203E12, 2.8333333333333335], [1.63556586E12, 6.2], [1.6165206E12, 8.9], [1.63556604E12, 6.383333333333334], [1.61652042E12, 12.616666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6355661E12, 2.283333333333333], [1.63556592E12, 6.033333333333333], [1.63556598E12, 6.133333333333334], [1.6355658E12, 2.5], [1.63556586E12, 6.083333333333333], [1.63556604E12, 6.05]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.61652036E12, 0.36666666666666664], [1.61652054E12, 1.3333333333333333], [1.61652048E12, 4.15], [1.6165206E12, 0.38333333333333336], [1.61652042E12, 3.316666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}, {"data": [[1.63556586E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355661E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6165203E12, "maxY": 6.216666666666667, "series": [{"data": [[1.6355661E12, 0.7333333333333333], [1.61652036E12, 5.416666666666667], [1.63556592E12, 0.08333333333333333], [1.61652054E12, 2.55], [1.63556598E12, 0.11666666666666667], [1.61652048E12, 2.4833333333333334], [1.6165203E12, 1.15], [1.63556586E12, 0.03333333333333333], [1.6165206E12, 3.0], [1.63556604E12, 0.13333333333333333], [1.61652042E12, 2.183333333333333]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.6355661E12, 2.1333333333333333], [1.61652036E12, 0.9166666666666666], [1.63556592E12, 6.033333333333333], [1.61652054E12, 4.5], [1.63556598E12, 6.133333333333334], [1.61652048E12, 5.733333333333333], [1.6355658E12, 2.5], [1.6165203E12, 0.016666666666666666], [1.63556586E12, 6.083333333333333], [1.6165206E12, 1.6], [1.63556604E12, 6.05], [1.61652042E12, 5.75]], "isOverall": false, "label": "INSERT Test-failure", "isController": true}, {"data": [[1.6355661E12, 2.1333333333333333], [1.61652036E12, 0.31666666666666665], [1.63556592E12, 6.033333333333333], [1.61652054E12, 1.5], [1.63556598E12, 6.133333333333334], [1.61652048E12, 3.0833333333333335], [1.6355658E12, 2.5], [1.63556586E12, 6.083333333333333], [1.6165206E12, 0.48333333333333334], [1.63556604E12, 6.05], [1.61652042E12, 2.3333333333333335]], "isOverall": false, "label": "(POST) INSERT New User-failure", "isController": false}, {"data": [[1.6355661E12, 2.7], [1.61652036E12, 5.05], [1.63556592E12, 6.216666666666667], [1.61652054E12, 2.9833333333333334], [1.63556598E12, 5.866666666666666], [1.61652048E12, 3.0166666666666666], [1.6355658E12, 2.15], [1.6165203E12, 1.6333333333333333], [1.63556586E12, 5.45], [1.6165206E12, 2.966666666666667], [1.63556604E12, 6.116666666666666], [1.61652042E12, 2.5]], "isOverall": false, "label": "(GET) Registration Page-success", "isController": false}, {"data": [[1.6355661E12, 0.15], [1.61652036E12, 6.016666666666667], [1.63556592E12, 0.08333333333333333], [1.61652054E12, 5.55], [1.63556598E12, 0.11666666666666667], [1.61652048E12, 5.133333333333334], [1.6165203E12, 1.1666666666666667], [1.63556586E12, 0.03333333333333333], [1.6165206E12, 3.5833333333333335], [1.63556604E12, 0.13333333333333333], [1.61652042E12, 5.6]], "isOverall": false, "label": "(POST) INSERT New User-success", "isController": false}, {"data": [[1.61652036E12, 0.9666666666666667], [1.63556592E12, 0.1], [1.61652054E12, 3.966666666666667], [1.63556598E12, 0.21666666666666667], [1.61652048E12, 5.266666666666667], [1.6355658E12, 0.35], [1.6165203E12, 0.03333333333333333], [1.63556586E12, 0.7333333333333333], [1.6165206E12, 1.4166666666666667], [1.63556604E12, 0.13333333333333333], [1.61652042E12, 5.5]], "isOverall": false, "label": "(GET) Registration Page-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355661E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6165203E12, "maxY": 16.483333333333334, "series": [{"data": [[1.6355661E12, 3.5833333333333335], [1.61652036E12, 16.483333333333334], [1.63556592E12, 6.383333333333334], [1.61652054E12, 11.083333333333334], [1.63556598E12, 6.1], [1.61652048E12, 10.633333333333333], [1.6355658E12, 2.15], [1.6165203E12, 3.95], [1.63556586E12, 5.516666666666667], [1.6165206E12, 9.55], [1.63556604E12, 6.383333333333334], [1.61652042E12, 10.283333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6355661E12, 4.266666666666667], [1.61652036E12, 2.2], [1.63556592E12, 12.166666666666666], [1.61652054E12, 9.966666666666667], [1.63556598E12, 12.483333333333333], [1.61652048E12, 14.083333333333334], [1.6355658E12, 5.35], [1.6165203E12, 0.05], [1.63556586E12, 12.9], [1.6165206E12, 3.5], [1.63556604E12, 12.233333333333333], [1.61652042E12, 13.583333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355661E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

