/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7269.0, "minX": 0.0, "maxY": 38050.0, "series": [{"data": [[0.0, 22813.0], [0.1, 22813.0], [0.2, 22813.0], [0.3, 22822.0], [0.4, 22822.0], [0.5, 22836.0], [0.6, 22836.0], [0.7, 23197.0], [0.8, 23197.0], [0.9, 23370.0], [1.0, 23370.0], [1.1, 23370.0], [1.2, 23525.0], [1.3, 23525.0], [1.4, 23742.0], [1.5, 23742.0], [1.6, 24105.0], [1.7, 24105.0], [1.8, 24224.0], [1.9, 24224.0], [2.0, 24224.0], [2.1, 24275.0], [2.2, 24275.0], [2.3, 24302.0], [2.4, 24302.0], [2.5, 24822.0], [2.6, 24822.0], [2.7, 24911.0], [2.8, 24911.0], [2.9, 24939.0], [3.0, 24939.0], [3.1, 24939.0], [3.2, 24979.0], [3.3, 24979.0], [3.4, 24982.0], [3.5, 24982.0], [3.6, 25009.0], [3.7, 25009.0], [3.8, 25077.0], [3.9, 25077.0], [4.0, 25077.0], [4.1, 25097.0], [4.2, 25097.0], [4.3, 25112.0], [4.4, 25112.0], [4.5, 25183.0], [4.6, 25183.0], [4.7, 25183.0], [4.8, 25183.0], [4.9, 25187.0], [5.0, 25187.0], [5.1, 25187.0], [5.2, 25209.0], [5.3, 25209.0], [5.4, 25243.0], [5.5, 25243.0], [5.6, 25333.0], [5.7, 25333.0], [5.8, 25338.0], [5.9, 25338.0], [6.0, 25338.0], [6.1, 25432.0], [6.2, 25432.0], [6.3, 25473.0], [6.4, 25473.0], [6.5, 25541.0], [6.6, 25541.0], [6.7, 25567.0], [6.8, 25567.0], [6.9, 25636.0], [7.0, 25636.0], [7.1, 25636.0], [7.2, 25647.0], [7.3, 25647.0], [7.4, 25711.0], [7.5, 25711.0], [7.6, 25739.0], [7.7, 25739.0], [7.8, 25795.0], [7.9, 25795.0], [8.0, 25795.0], [8.1, 25932.0], [8.2, 25932.0], [8.3, 26096.0], [8.4, 26096.0], [8.5, 26115.0], [8.6, 26115.0], [8.7, 26147.0], [8.8, 26147.0], [8.9, 26233.0], [9.0, 26233.0], [9.1, 26233.0], [9.2, 26297.0], [9.3, 26297.0], [9.4, 26417.0], [9.5, 26417.0], [9.6, 26467.0], [9.7, 26467.0], [9.8, 26473.0], [9.9, 26473.0], [10.0, 26521.0], [10.1, 26521.0], [10.2, 26521.0], [10.3, 26577.0], [10.4, 26577.0], [10.5, 26588.0], [10.6, 26588.0], [10.7, 26766.0], [10.8, 26766.0], [10.9, 26808.0], [11.0, 26808.0], [11.1, 26808.0], [11.2, 27062.0], [11.3, 27062.0], [11.4, 28252.0], [11.5, 28252.0], [11.6, 30492.0], [11.7, 30492.0], [11.8, 31795.0], [11.9, 31795.0], [12.0, 32165.0], [12.1, 32165.0], [12.2, 32165.0], [12.3, 32262.0], [12.4, 32262.0], [12.5, 32284.0], [12.6, 32284.0], [12.7, 32540.0], [12.8, 32540.0], [12.9, 32729.0], [13.0, 32729.0], [13.1, 32729.0], [13.2, 32800.0], [13.3, 32800.0], [13.4, 32816.0], [13.5, 32816.0], [13.6, 32864.0], [13.7, 32864.0], [13.8, 32903.0], [13.9, 32903.0], [14.0, 33145.0], [14.1, 33145.0], [14.2, 33145.0], [14.3, 33273.0], [14.4, 33273.0], [14.5, 33396.0], [14.6, 33396.0], [14.7, 33415.0], [14.8, 33415.0], [14.9, 33515.0], [15.0, 33515.0], [15.1, 33515.0], [15.2, 33584.0], [15.3, 33584.0], [15.4, 33781.0], [15.5, 33781.0], [15.6, 33868.0], [15.7, 33868.0], [15.8, 33878.0], [15.9, 33878.0], [16.0, 33977.0], [16.1, 33977.0], [16.2, 33977.0], [16.3, 33992.0], [16.4, 33992.0], [16.5, 34034.0], [16.6, 34034.0], [16.7, 34052.0], [16.8, 34052.0], [16.9, 34119.0], [17.0, 34119.0], [17.1, 34119.0], [17.2, 34148.0], [17.3, 34148.0], [17.4, 34158.0], [17.5, 34158.0], [17.6, 34164.0], [17.7, 34164.0], [17.8, 34166.0], [17.9, 34166.0], [18.0, 34172.0], [18.1, 34172.0], [18.2, 34172.0], [18.3, 34189.0], [18.4, 34189.0], [18.5, 34206.0], [18.6, 34206.0], [18.7, 34217.0], [18.8, 34217.0], [18.9, 34228.0], [19.0, 34228.0], [19.1, 34228.0], [19.2, 34230.0], [19.3, 34230.0], [19.4, 34242.0], [19.5, 34242.0], [19.6, 34248.0], [19.7, 34248.0], [19.8, 34264.0], [19.9, 34264.0], [20.0, 34278.0], [20.1, 34278.0], [20.2, 34278.0], [20.3, 34312.0], [20.4, 34312.0], [20.5, 34320.0], [20.6, 34320.0], [20.7, 34324.0], [20.8, 34324.0], [20.9, 34329.0], [21.0, 34329.0], [21.1, 34329.0], [21.2, 34330.0], [21.3, 34330.0], [21.4, 34349.0], [21.5, 34349.0], [21.6, 34359.0], [21.7, 34359.0], [21.8, 34360.0], [21.9, 34360.0], [22.0, 34385.0], [22.1, 34385.0], [22.2, 34385.0], [22.3, 34393.0], [22.4, 34393.0], [22.5, 34398.0], [22.6, 34398.0], [22.7, 34405.0], [22.8, 34405.0], [22.9, 34423.0], [23.0, 34423.0], [23.1, 34423.0], [23.2, 34468.0], [23.3, 34468.0], [23.4, 34471.0], [23.5, 34471.0], [23.6, 34477.0], [23.7, 34477.0], [23.8, 34493.0], [23.9, 34493.0], [24.0, 34495.0], [24.1, 34495.0], [24.2, 34495.0], [24.3, 34517.0], [24.4, 34517.0], [24.5, 34517.0], [24.6, 34517.0], [24.7, 34518.0], [24.8, 34518.0], [24.9, 34520.0], [25.0, 34520.0], [25.1, 34520.0], [25.2, 34532.0], [25.3, 34532.0], [25.4, 34532.0], [25.5, 34532.0], [25.6, 34560.0], [25.7, 34560.0], [25.8, 34561.0], [25.9, 34561.0], [26.0, 34562.0], [26.1, 34562.0], [26.2, 34562.0], [26.3, 34565.0], [26.4, 34565.0], [26.5, 34572.0], [26.6, 34572.0], [26.7, 34575.0], [26.8, 34575.0], [26.9, 34583.0], [27.0, 34583.0], [27.1, 34583.0], [27.2, 34587.0], [27.3, 34587.0], [27.4, 34592.0], [27.5, 34592.0], [27.6, 34593.0], [27.7, 34593.0], [27.8, 34607.0], [27.9, 34607.0], [28.0, 34610.0], [28.1, 34610.0], [28.2, 34610.0], [28.3, 34610.0], [28.4, 34610.0], [28.5, 34613.0], [28.6, 34613.0], [28.7, 34617.0], [28.8, 34617.0], [28.9, 34622.0], [29.0, 34622.0], [29.1, 34622.0], [29.2, 34628.0], [29.3, 34628.0], [29.4, 34656.0], [29.5, 34656.0], [29.6, 34662.0], [29.7, 34662.0], [29.8, 34664.0], [29.9, 34664.0], [30.0, 34671.0], [30.1, 34671.0], [30.2, 34671.0], [30.3, 34672.0], [30.4, 34672.0], [30.5, 34683.0], [30.6, 34683.0], [30.7, 34715.0], [30.8, 34715.0], [30.9, 34726.0], [31.0, 34726.0], [31.1, 34726.0], [31.2, 34740.0], [31.3, 34740.0], [31.4, 34751.0], [31.5, 34751.0], [31.6, 34752.0], [31.7, 34752.0], [31.8, 34785.0], [31.9, 34785.0], [32.0, 34788.0], [32.1, 34788.0], [32.2, 34788.0], [32.3, 34792.0], [32.4, 34792.0], [32.5, 34792.0], [32.6, 34792.0], [32.7, 34794.0], [32.8, 34794.0], [32.9, 34796.0], [33.0, 34796.0], [33.1, 34796.0], [33.2, 34816.0], [33.3, 34816.0], [33.4, 34827.0], [33.5, 34827.0], [33.6, 34846.0], [33.7, 34846.0], [33.8, 34853.0], [33.9, 34853.0], [34.0, 34856.0], [34.1, 34856.0], [34.2, 34856.0], [34.3, 34888.0], [34.4, 34888.0], [34.5, 34920.0], [34.6, 34920.0], [34.7, 34921.0], [34.8, 34921.0], [34.9, 34942.0], [35.0, 34942.0], [35.1, 34942.0], [35.2, 34943.0], [35.3, 34943.0], [35.4, 34944.0], [35.5, 34944.0], [35.6, 34966.0], [35.7, 34966.0], [35.8, 34980.0], [35.9, 34980.0], [36.0, 34985.0], [36.1, 34985.0], [36.2, 34985.0], [36.3, 34986.0], [36.4, 34986.0], [36.5, 34990.0], [36.6, 34990.0], [36.7, 35000.0], [36.8, 35000.0], [36.9, 35012.0], [37.0, 35012.0], [37.1, 35012.0], [37.2, 35031.0], [37.3, 35031.0], [37.4, 35050.0], [37.5, 35050.0], [37.6, 35055.0], [37.7, 35055.0], [37.8, 35059.0], [37.9, 35059.0], [38.0, 35059.0], [38.1, 35059.0], [38.2, 35059.0], [38.3, 35117.0], [38.4, 35117.0], [38.5, 35128.0], [38.6, 35128.0], [38.7, 35132.0], [38.8, 35132.0], [38.9, 35150.0], [39.0, 35150.0], [39.1, 35150.0], [39.2, 35168.0], [39.3, 35168.0], [39.4, 35210.0], [39.5, 35210.0], [39.6, 35258.0], [39.7, 35258.0], [39.8, 35268.0], [39.9, 35268.0], [40.0, 35318.0], [40.1, 35318.0], [40.2, 35318.0], [40.3, 35322.0], [40.4, 35322.0], [40.5, 35348.0], [40.6, 35348.0], [40.7, 35349.0], [40.8, 35349.0], [40.9, 35351.0], [41.0, 35351.0], [41.1, 35351.0], [41.2, 35351.0], [41.3, 35351.0], [41.4, 35361.0], [41.5, 35361.0], [41.6, 35374.0], [41.7, 35374.0], [41.8, 35383.0], [41.9, 35383.0], [42.0, 35395.0], [42.1, 35395.0], [42.2, 35395.0], [42.3, 35412.0], [42.4, 35412.0], [42.5, 35413.0], [42.6, 35413.0], [42.7, 35439.0], [42.8, 35439.0], [42.9, 35469.0], [43.0, 35469.0], [43.1, 35469.0], [43.2, 35476.0], [43.3, 35476.0], [43.4, 35478.0], [43.5, 35478.0], [43.6, 35482.0], [43.7, 35482.0], [43.8, 35484.0], [43.9, 35484.0], [44.0, 35488.0], [44.1, 35488.0], [44.2, 35488.0], [44.3, 35492.0], [44.4, 35492.0], [44.5, 35494.0], [44.6, 35494.0], [44.7, 35500.0], [44.8, 35500.0], [44.9, 35505.0], [45.0, 35505.0], [45.1, 35505.0], [45.2, 35507.0], [45.3, 35507.0], [45.4, 35507.0], [45.5, 35507.0], [45.6, 35509.0], [45.7, 35509.0], [45.8, 35514.0], [45.9, 35514.0], [46.0, 35519.0], [46.1, 35519.0], [46.2, 35519.0], [46.3, 35529.0], [46.4, 35529.0], [46.5, 35529.0], [46.6, 35529.0], [46.7, 35530.0], [46.8, 35530.0], [46.9, 35539.0], [47.0, 35539.0], [47.1, 35539.0], [47.2, 35542.0], [47.3, 35542.0], [47.4, 35552.0], [47.5, 35552.0], [47.6, 35556.0], [47.7, 35556.0], [47.8, 35557.0], [47.9, 35557.0], [48.0, 35562.0], [48.1, 35562.0], [48.2, 35562.0], [48.3, 35567.0], [48.4, 35567.0], [48.5, 35568.0], [48.6, 35568.0], [48.7, 35569.0], [48.8, 35569.0], [48.9, 35575.0], [49.0, 35575.0], [49.1, 35575.0], [49.2, 35580.0], [49.3, 35580.0], [49.4, 35587.0], [49.5, 35587.0], [49.6, 35589.0], [49.7, 35589.0], [49.8, 35591.0], [49.9, 35591.0], [50.0, 35598.0], [50.1, 35598.0], [50.2, 35598.0], [50.3, 35600.0], [50.4, 35600.0], [50.5, 35604.0], [50.6, 35604.0], [50.7, 35611.0], [50.8, 35611.0], [50.9, 35613.0], [51.0, 35613.0], [51.1, 35613.0], [51.2, 35615.0], [51.3, 35615.0], [51.4, 35623.0], [51.5, 35623.0], [51.6, 35624.0], [51.7, 35624.0], [51.8, 35629.0], [51.9, 35629.0], [52.0, 35629.0], [52.1, 35629.0], [52.2, 35629.0], [52.3, 35637.0], [52.4, 35637.0], [52.5, 35637.0], [52.6, 35637.0], [52.7, 35640.0], [52.8, 35640.0], [52.9, 35641.0], [53.0, 35641.0], [53.1, 35641.0], [53.2, 35643.0], [53.3, 35643.0], [53.4, 35644.0], [53.5, 35644.0], [53.6, 35648.0], [53.7, 35648.0], [53.8, 35648.0], [53.9, 35648.0], [54.0, 35651.0], [54.1, 35651.0], [54.2, 35651.0], [54.3, 35652.0], [54.4, 35652.0], [54.5, 35660.0], [54.6, 35660.0], [54.7, 35666.0], [54.8, 35666.0], [54.9, 35673.0], [55.0, 35673.0], [55.1, 35673.0], [55.2, 35681.0], [55.3, 35681.0], [55.4, 35682.0], [55.5, 35682.0], [55.6, 35682.0], [55.7, 35682.0], [55.8, 35683.0], [55.9, 35683.0], [56.0, 35689.0], [56.1, 35689.0], [56.2, 35689.0], [56.3, 35710.0], [56.4, 35710.0], [56.5, 35711.0], [56.6, 35711.0], [56.7, 35720.0], [56.8, 35720.0], [56.9, 35723.0], [57.0, 35723.0], [57.1, 35723.0], [57.2, 35732.0], [57.3, 35732.0], [57.4, 35733.0], [57.5, 35733.0], [57.6, 35747.0], [57.7, 35747.0], [57.8, 35750.0], [57.9, 35750.0], [58.0, 35757.0], [58.1, 35757.0], [58.2, 35757.0], [58.3, 35761.0], [58.4, 35761.0], [58.5, 35762.0], [58.6, 35762.0], [58.7, 35787.0], [58.8, 35787.0], [58.9, 35816.0], [59.0, 35816.0], [59.1, 35816.0], [59.2, 35819.0], [59.3, 35819.0], [59.4, 35827.0], [59.5, 35827.0], [59.6, 35829.0], [59.7, 35829.0], [59.8, 35840.0], [59.9, 35840.0], [60.0, 35845.0], [60.1, 35845.0], [60.2, 35845.0], [60.3, 35846.0], [60.4, 35846.0], [60.5, 35846.0], [60.6, 35846.0], [60.7, 35848.0], [60.8, 35848.0], [60.9, 35851.0], [61.0, 35851.0], [61.1, 35851.0], [61.2, 35858.0], [61.3, 35858.0], [61.4, 35864.0], [61.5, 35864.0], [61.6, 35877.0], [61.7, 35877.0], [61.8, 35878.0], [61.9, 35878.0], [62.0, 35883.0], [62.1, 35883.0], [62.2, 35883.0], [62.3, 35891.0], [62.4, 35891.0], [62.5, 35895.0], [62.6, 35895.0], [62.7, 35897.0], [62.8, 35897.0], [62.9, 35897.0], [63.0, 35897.0], [63.1, 35897.0], [63.2, 35898.0], [63.3, 35898.0], [63.4, 35899.0], [63.5, 35899.0], [63.6, 35900.0], [63.7, 35900.0], [63.8, 35902.0], [63.9, 35902.0], [64.0, 35910.0], [64.1, 35910.0], [64.2, 35910.0], [64.3, 35920.0], [64.4, 35920.0], [64.5, 35925.0], [64.6, 35925.0], [64.7, 35935.0], [64.8, 35935.0], [64.9, 35936.0], [65.0, 35936.0], [65.1, 35936.0], [65.2, 35936.0], [65.3, 35936.0], [65.4, 35937.0], [65.5, 35937.0], [65.6, 35938.0], [65.7, 35938.0], [65.8, 35949.0], [65.9, 35949.0], [66.0, 35950.0], [66.1, 35950.0], [66.2, 35950.0], [66.3, 35956.0], [66.4, 35956.0], [66.5, 35956.0], [66.6, 35956.0], [66.7, 35959.0], [66.8, 35959.0], [66.9, 35979.0], [67.0, 35979.0], [67.1, 35979.0], [67.2, 35980.0], [67.3, 35980.0], [67.4, 35989.0], [67.5, 35989.0], [67.6, 35993.0], [67.7, 35993.0], [67.8, 35998.0], [67.9, 35998.0], [68.0, 36001.0], [68.1, 36001.0], [68.2, 36001.0], [68.3, 36010.0], [68.4, 36010.0], [68.5, 36050.0], [68.6, 36050.0], [68.7, 36070.0], [68.8, 36070.0], [68.9, 36095.0], [69.0, 36095.0], [69.1, 36095.0], [69.2, 36095.0], [69.3, 36095.0], [69.4, 36098.0], [69.5, 36098.0], [69.6, 36118.0], [69.7, 36118.0], [69.8, 36118.0], [69.9, 36118.0], [70.0, 36123.0], [70.1, 36123.0], [70.2, 36123.0], [70.3, 36125.0], [70.4, 36125.0], [70.5, 36135.0], [70.6, 36135.0], [70.7, 36136.0], [70.8, 36136.0], [70.9, 36137.0], [71.0, 36137.0], [71.1, 36137.0], [71.2, 36192.0], [71.3, 36192.0], [71.4, 36192.0], [71.5, 36192.0], [71.6, 36196.0], [71.7, 36196.0], [71.8, 36199.0], [71.9, 36199.0], [72.0, 36205.0], [72.1, 36205.0], [72.2, 36205.0], [72.3, 36206.0], [72.4, 36206.0], [72.5, 36208.0], [72.6, 36208.0], [72.7, 36215.0], [72.8, 36215.0], [72.9, 36218.0], [73.0, 36218.0], [73.1, 36218.0], [73.2, 36245.0], [73.3, 36245.0], [73.4, 36246.0], [73.5, 36246.0], [73.6, 36247.0], [73.7, 36247.0], [73.8, 36249.0], [73.9, 36249.0], [74.0, 36249.0], [74.1, 36254.0], [74.2, 36254.0], [74.3, 36256.0], [74.4, 36256.0], [74.5, 36257.0], [74.6, 36257.0], [74.7, 36262.0], [74.8, 36262.0], [74.9, 36295.0], [75.0, 36295.0], [75.1, 36295.0], [75.2, 36298.0], [75.3, 36298.0], [75.4, 36310.0], [75.5, 36310.0], [75.6, 36312.0], [75.7, 36312.0], [75.8, 36321.0], [75.9, 36321.0], [76.0, 36321.0], [76.1, 36331.0], [76.2, 36331.0], [76.3, 36336.0], [76.4, 36336.0], [76.5, 36344.0], [76.6, 36344.0], [76.7, 36346.0], [76.8, 36346.0], [76.9, 36346.0], [77.0, 36346.0], [77.1, 36346.0], [77.2, 36349.0], [77.3, 36349.0], [77.4, 36354.0], [77.5, 36354.0], [77.6, 36354.0], [77.7, 36354.0], [77.8, 36357.0], [77.9, 36357.0], [78.0, 36357.0], [78.1, 36358.0], [78.2, 36358.0], [78.3, 36359.0], [78.4, 36359.0], [78.5, 36364.0], [78.6, 36364.0], [78.7, 36366.0], [78.8, 36366.0], [78.9, 36376.0], [79.0, 36376.0], [79.1, 36376.0], [79.2, 36376.0], [79.3, 36376.0], [79.4, 36379.0], [79.5, 36379.0], [79.6, 36380.0], [79.7, 36380.0], [79.8, 36386.0], [79.9, 36386.0], [80.0, 36386.0], [80.1, 36388.0], [80.2, 36388.0], [80.3, 36390.0], [80.4, 36390.0], [80.5, 36399.0], [80.6, 36399.0], [80.7, 36401.0], [80.8, 36401.0], [80.9, 36403.0], [81.0, 36403.0], [81.1, 36403.0], [81.2, 36405.0], [81.3, 36405.0], [81.4, 36407.0], [81.5, 36407.0], [81.6, 36408.0], [81.7, 36408.0], [81.8, 36415.0], [81.9, 36415.0], [82.0, 36415.0], [82.1, 36416.0], [82.2, 36416.0], [82.3, 36420.0], [82.4, 36420.0], [82.5, 36433.0], [82.6, 36433.0], [82.7, 36443.0], [82.8, 36443.0], [82.9, 36447.0], [83.0, 36447.0], [83.1, 36447.0], [83.2, 36450.0], [83.3, 36450.0], [83.4, 36467.0], [83.5, 36467.0], [83.6, 36475.0], [83.7, 36475.0], [83.8, 36479.0], [83.9, 36479.0], [84.0, 36479.0], [84.1, 36482.0], [84.2, 36482.0], [84.3, 36484.0], [84.4, 36484.0], [84.5, 36492.0], [84.6, 36492.0], [84.7, 36495.0], [84.8, 36495.0], [84.9, 36496.0], [85.0, 36496.0], [85.1, 36496.0], [85.2, 36507.0], [85.3, 36507.0], [85.4, 36517.0], [85.5, 36517.0], [85.6, 36526.0], [85.7, 36526.0], [85.8, 36534.0], [85.9, 36534.0], [86.0, 36534.0], [86.1, 36543.0], [86.2, 36543.0], [86.3, 36548.0], [86.4, 36548.0], [86.5, 36548.0], [86.6, 36548.0], [86.7, 36552.0], [86.8, 36552.0], [86.9, 36553.0], [87.0, 36553.0], [87.1, 36553.0], [87.2, 36555.0], [87.3, 36555.0], [87.4, 36560.0], [87.5, 36560.0], [87.6, 36571.0], [87.7, 36571.0], [87.8, 36574.0], [87.9, 36574.0], [88.0, 36574.0], [88.1, 36576.0], [88.2, 36576.0], [88.3, 36584.0], [88.4, 36584.0], [88.5, 36590.0], [88.6, 36590.0], [88.7, 36594.0], [88.8, 36594.0], [88.9, 36600.0], [89.0, 36600.0], [89.1, 36600.0], [89.2, 36603.0], [89.3, 36603.0], [89.4, 36611.0], [89.5, 36611.0], [89.6, 36612.0], [89.7, 36612.0], [89.8, 36621.0], [89.9, 36621.0], [90.0, 36621.0], [90.1, 36633.0], [90.2, 36633.0], [90.3, 36634.0], [90.4, 36634.0], [90.5, 36639.0], [90.6, 36639.0], [90.7, 36643.0], [90.8, 36643.0], [90.9, 36656.0], [91.0, 36656.0], [91.1, 36656.0], [91.2, 36658.0], [91.3, 36658.0], [91.4, 36681.0], [91.5, 36681.0], [91.6, 36706.0], [91.7, 36706.0], [91.8, 36716.0], [91.9, 36716.0], [92.0, 36716.0], [92.1, 36719.0], [92.2, 36719.0], [92.3, 36722.0], [92.4, 36722.0], [92.5, 36725.0], [92.6, 36725.0], [92.7, 36725.0], [92.8, 36725.0], [92.9, 36732.0], [93.0, 36732.0], [93.1, 36732.0], [93.2, 36745.0], [93.3, 36745.0], [93.4, 36772.0], [93.5, 36772.0], [93.6, 36777.0], [93.7, 36777.0], [93.8, 36793.0], [93.9, 36793.0], [94.0, 36793.0], [94.1, 36803.0], [94.2, 36803.0], [94.3, 36807.0], [94.4, 36807.0], [94.5, 36832.0], [94.6, 36832.0], [94.7, 36839.0], [94.8, 36839.0], [94.9, 36839.0], [95.0, 36839.0], [95.1, 36839.0], [95.2, 36860.0], [95.3, 36860.0], [95.4, 36864.0], [95.5, 36864.0], [95.6, 36872.0], [95.7, 36872.0], [95.8, 36874.0], [95.9, 36874.0], [96.0, 36874.0], [96.1, 36877.0], [96.2, 36877.0], [96.3, 36898.0], [96.4, 36898.0], [96.5, 36908.0], [96.6, 36908.0], [96.7, 36930.0], [96.8, 36930.0], [96.9, 36934.0], [97.0, 36934.0], [97.1, 36934.0], [97.2, 36947.0], [97.3, 36947.0], [97.4, 36990.0], [97.5, 36990.0], [97.6, 37021.0], [97.7, 37021.0], [97.8, 37056.0], [97.9, 37056.0], [98.0, 37056.0], [98.1, 37058.0], [98.2, 37058.0], [98.3, 37161.0], [98.4, 37161.0], [98.5, 37202.0], [98.6, 37202.0], [98.7, 37236.0], [98.8, 37236.0], [98.9, 37335.0], [99.0, 37335.0], [99.1, 37335.0], [99.2, 37478.0], [99.3, 37478.0], [99.4, 37493.0], [99.5, 37493.0], [99.6, 37929.0], [99.7, 37929.0], [99.8, 38050.0], [99.9, 38050.0], [100.0, 38050.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 7269.0], [0.1, 7269.0], [0.2, 7269.0], [0.3, 7303.0], [0.4, 7303.0], [0.5, 7344.0], [0.6, 7344.0], [0.7, 7344.0], [0.8, 7389.0], [0.9, 7389.0], [1.0, 7440.0], [1.1, 7440.0], [1.2, 7440.0], [1.3, 7471.0], [1.4, 7471.0], [1.5, 7546.0], [1.6, 7546.0], [1.7, 7546.0], [1.8, 7674.0], [1.9, 7674.0], [2.0, 7684.0], [2.1, 7684.0], [2.2, 7684.0], [2.3, 7685.0], [2.4, 7685.0], [2.5, 7699.0], [2.6, 7699.0], [2.7, 7699.0], [2.8, 7752.0], [2.9, 7752.0], [3.0, 7795.0], [3.1, 7795.0], [3.2, 7795.0], [3.3, 7799.0], [3.4, 7799.0], [3.5, 7835.0], [3.6, 7835.0], [3.7, 7835.0], [3.8, 7863.0], [3.9, 7863.0], [4.0, 7865.0], [4.1, 7865.0], [4.2, 7865.0], [4.3, 7867.0], [4.4, 7867.0], [4.5, 7889.0], [4.6, 7889.0], [4.7, 7889.0], [4.8, 7903.0], [4.9, 7903.0], [5.0, 7947.0], [5.1, 7947.0], [5.2, 7947.0], [5.3, 7957.0], [5.4, 7957.0], [5.5, 7975.0], [5.6, 7975.0], [5.7, 7975.0], [5.8, 7996.0], [5.9, 7996.0], [6.0, 8001.0], [6.1, 8001.0], [6.2, 8001.0], [6.3, 8010.0], [6.4, 8010.0], [6.5, 8013.0], [6.6, 8013.0], [6.7, 8013.0], [6.8, 8018.0], [6.9, 8018.0], [7.0, 8023.0], [7.1, 8023.0], [7.2, 8023.0], [7.3, 8048.0], [7.4, 8048.0], [7.5, 8069.0], [7.6, 8069.0], [7.7, 8069.0], [7.8, 8070.0], [7.9, 8070.0], [8.0, 8071.0], [8.1, 8071.0], [8.2, 8071.0], [8.3, 8072.0], [8.4, 8072.0], [8.5, 8084.0], [8.6, 8084.0], [8.7, 8084.0], [8.8, 8086.0], [8.9, 8086.0], [9.0, 8110.0], [9.1, 8110.0], [9.2, 8110.0], [9.3, 8114.0], [9.4, 8114.0], [9.5, 8120.0], [9.6, 8120.0], [9.7, 8120.0], [9.8, 8122.0], [9.9, 8122.0], [10.0, 8124.0], [10.1, 8124.0], [10.2, 8124.0], [10.3, 8131.0], [10.4, 8131.0], [10.5, 8131.0], [10.6, 8131.0], [10.7, 8131.0], [10.8, 8143.0], [10.9, 8143.0], [11.0, 8145.0], [11.1, 8145.0], [11.2, 8145.0], [11.3, 8149.0], [11.4, 8149.0], [11.5, 8158.0], [11.6, 8158.0], [11.7, 8158.0], [11.8, 8161.0], [11.9, 8161.0], [12.0, 8168.0], [12.1, 8168.0], [12.2, 8168.0], [12.3, 8175.0], [12.4, 8175.0], [12.5, 8175.0], [12.6, 8175.0], [12.7, 8175.0], [12.8, 8184.0], [12.9, 8184.0], [13.0, 8186.0], [13.1, 8186.0], [13.2, 8186.0], [13.3, 8187.0], [13.4, 8187.0], [13.5, 8188.0], [13.6, 8188.0], [13.7, 8188.0], [13.8, 8188.0], [13.9, 8188.0], [14.0, 8193.0], [14.1, 8193.0], [14.2, 8193.0], [14.3, 8194.0], [14.4, 8194.0], [14.5, 8197.0], [14.6, 8197.0], [14.7, 8197.0], [14.8, 8202.0], [14.9, 8202.0], [15.0, 8204.0], [15.1, 8204.0], [15.2, 8204.0], [15.3, 8205.0], [15.4, 8205.0], [15.5, 8213.0], [15.6, 8213.0], [15.7, 8213.0], [15.8, 8214.0], [15.9, 8214.0], [16.0, 8219.0], [16.1, 8219.0], [16.2, 8219.0], [16.3, 8251.0], [16.4, 8251.0], [16.5, 8260.0], [16.6, 8260.0], [16.7, 8260.0], [16.8, 8266.0], [16.9, 8266.0], [17.0, 8268.0], [17.1, 8268.0], [17.2, 8268.0], [17.3, 8269.0], [17.4, 8269.0], [17.5, 8272.0], [17.6, 8272.0], [17.7, 8272.0], [17.8, 8274.0], [17.9, 8274.0], [18.0, 8277.0], [18.1, 8277.0], [18.2, 8277.0], [18.3, 8283.0], [18.4, 8283.0], [18.5, 8289.0], [18.6, 8289.0], [18.7, 8289.0], [18.8, 8290.0], [18.9, 8290.0], [19.0, 8292.0], [19.1, 8292.0], [19.2, 8292.0], [19.3, 8292.0], [19.4, 8292.0], [19.5, 8295.0], [19.6, 8295.0], [19.7, 8295.0], [19.8, 8302.0], [19.9, 8302.0], [20.0, 8304.0], [20.1, 8304.0], [20.2, 8304.0], [20.3, 8305.0], [20.4, 8305.0], [20.5, 8307.0], [20.6, 8307.0], [20.7, 8307.0], [20.8, 8308.0], [20.9, 8308.0], [21.0, 8314.0], [21.1, 8314.0], [21.2, 8314.0], [21.3, 8318.0], [21.4, 8318.0], [21.5, 8320.0], [21.6, 8320.0], [21.7, 8320.0], [21.8, 8321.0], [21.9, 8321.0], [22.0, 8324.0], [22.1, 8324.0], [22.2, 8324.0], [22.3, 8325.0], [22.4, 8325.0], [22.5, 8329.0], [22.6, 8329.0], [22.7, 8329.0], [22.8, 8333.0], [22.9, 8333.0], [23.0, 8336.0], [23.1, 8336.0], [23.2, 8336.0], [23.3, 8338.0], [23.4, 8338.0], [23.5, 8353.0], [23.6, 8353.0], [23.7, 8353.0], [23.8, 8360.0], [23.9, 8360.0], [24.0, 8373.0], [24.1, 8373.0], [24.2, 8373.0], [24.3, 8375.0], [24.4, 8375.0], [24.5, 8383.0], [24.6, 8383.0], [24.7, 8383.0], [24.8, 8386.0], [24.9, 8386.0], [25.0, 8390.0], [25.1, 8390.0], [25.2, 8390.0], [25.3, 8392.0], [25.4, 8392.0], [25.5, 8400.0], [25.6, 8400.0], [25.7, 8400.0], [25.8, 8405.0], [25.9, 8405.0], [26.0, 8408.0], [26.1, 8408.0], [26.2, 8408.0], [26.3, 8410.0], [26.4, 8410.0], [26.5, 8411.0], [26.6, 8411.0], [26.7, 8411.0], [26.8, 8413.0], [26.9, 8413.0], [27.0, 8413.0], [27.1, 8413.0], [27.2, 8413.0], [27.3, 8421.0], [27.4, 8421.0], [27.5, 8424.0], [27.6, 8424.0], [27.7, 8424.0], [27.8, 8424.0], [27.9, 8424.0], [28.0, 8429.0], [28.1, 8429.0], [28.2, 8429.0], [28.3, 8429.0], [28.4, 8429.0], [28.5, 8432.0], [28.6, 8432.0], [28.7, 8432.0], [28.8, 8433.0], [28.9, 8433.0], [29.0, 8442.0], [29.1, 8442.0], [29.2, 8442.0], [29.3, 8447.0], [29.4, 8447.0], [29.5, 8450.0], [29.6, 8450.0], [29.7, 8450.0], [29.8, 8452.0], [29.9, 8452.0], [30.0, 8463.0], [30.1, 8463.0], [30.2, 8463.0], [30.3, 8467.0], [30.4, 8467.0], [30.5, 8468.0], [30.6, 8468.0], [30.7, 8468.0], [30.8, 8469.0], [30.9, 8469.0], [31.0, 8473.0], [31.1, 8473.0], [31.2, 8473.0], [31.3, 8476.0], [31.4, 8476.0], [31.5, 8476.0], [31.6, 8476.0], [31.7, 8476.0], [31.8, 8476.0], [31.9, 8476.0], [32.0, 8484.0], [32.1, 8484.0], [32.2, 8484.0], [32.3, 8490.0], [32.4, 8490.0], [32.5, 8497.0], [32.6, 8497.0], [32.7, 8497.0], [32.8, 8502.0], [32.9, 8502.0], [33.0, 8511.0], [33.1, 8511.0], [33.2, 8511.0], [33.3, 8515.0], [33.4, 8515.0], [33.5, 8516.0], [33.6, 8516.0], [33.7, 8516.0], [33.8, 8517.0], [33.9, 8517.0], [34.0, 8518.0], [34.1, 8518.0], [34.2, 8518.0], [34.3, 8524.0], [34.4, 8524.0], [34.5, 8530.0], [34.6, 8530.0], [34.7, 8530.0], [34.8, 8531.0], [34.9, 8531.0], [35.0, 8533.0], [35.1, 8533.0], [35.2, 8533.0], [35.3, 8535.0], [35.4, 8535.0], [35.5, 8535.0], [35.6, 8535.0], [35.7, 8535.0], [35.8, 8536.0], [35.9, 8536.0], [36.0, 8538.0], [36.1, 8538.0], [36.2, 8538.0], [36.3, 8547.0], [36.4, 8547.0], [36.5, 8547.0], [36.6, 8547.0], [36.7, 8547.0], [36.8, 8549.0], [36.9, 8549.0], [37.0, 8551.0], [37.1, 8551.0], [37.2, 8551.0], [37.3, 8551.0], [37.4, 8551.0], [37.5, 8553.0], [37.6, 8553.0], [37.7, 8553.0], [37.8, 8556.0], [37.9, 8556.0], [38.0, 8557.0], [38.1, 8557.0], [38.2, 8557.0], [38.3, 8560.0], [38.4, 8560.0], [38.5, 8567.0], [38.6, 8567.0], [38.7, 8567.0], [38.8, 8571.0], [38.9, 8571.0], [39.0, 8574.0], [39.1, 8574.0], [39.2, 8574.0], [39.3, 8575.0], [39.4, 8575.0], [39.5, 8577.0], [39.6, 8577.0], [39.7, 8577.0], [39.8, 8577.0], [39.9, 8577.0], [40.0, 8585.0], [40.1, 8585.0], [40.2, 8585.0], [40.3, 8587.0], [40.4, 8587.0], [40.5, 8593.0], [40.6, 8593.0], [40.7, 8593.0], [40.8, 8607.0], [40.9, 8607.0], [41.0, 8614.0], [41.1, 8614.0], [41.2, 8614.0], [41.3, 8616.0], [41.4, 8616.0], [41.5, 8617.0], [41.6, 8617.0], [41.7, 8617.0], [41.8, 8622.0], [41.9, 8622.0], [42.0, 8623.0], [42.1, 8623.0], [42.2, 8623.0], [42.3, 8623.0], [42.4, 8623.0], [42.5, 8624.0], [42.6, 8624.0], [42.7, 8624.0], [42.8, 8631.0], [42.9, 8631.0], [43.0, 8633.0], [43.1, 8633.0], [43.2, 8633.0], [43.3, 8634.0], [43.4, 8634.0], [43.5, 8635.0], [43.6, 8635.0], [43.7, 8635.0], [43.8, 8636.0], [43.9, 8636.0], [44.0, 8637.0], [44.1, 8637.0], [44.2, 8637.0], [44.3, 8638.0], [44.4, 8638.0], [44.5, 8640.0], [44.6, 8640.0], [44.7, 8640.0], [44.8, 8642.0], [44.9, 8642.0], [45.0, 8649.0], [45.1, 8649.0], [45.2, 8649.0], [45.3, 8649.0], [45.4, 8649.0], [45.5, 8658.0], [45.6, 8658.0], [45.7, 8658.0], [45.8, 8658.0], [45.9, 8658.0], [46.0, 8663.0], [46.1, 8663.0], [46.2, 8663.0], [46.3, 8664.0], [46.4, 8664.0], [46.5, 8667.0], [46.6, 8667.0], [46.7, 8667.0], [46.8, 8672.0], [46.9, 8672.0], [47.0, 8672.0], [47.1, 8672.0], [47.2, 8672.0], [47.3, 8679.0], [47.4, 8679.0], [47.5, 8681.0], [47.6, 8681.0], [47.7, 8681.0], [47.8, 8694.0], [47.9, 8694.0], [48.0, 8701.0], [48.1, 8701.0], [48.2, 8701.0], [48.3, 8702.0], [48.4, 8702.0], [48.5, 8703.0], [48.6, 8703.0], [48.7, 8703.0], [48.8, 8708.0], [48.9, 8708.0], [49.0, 8710.0], [49.1, 8710.0], [49.2, 8710.0], [49.3, 8716.0], [49.4, 8716.0], [49.5, 8717.0], [49.6, 8717.0], [49.7, 8717.0], [49.8, 8725.0], [49.9, 8725.0], [50.0, 8726.0], [50.1, 8726.0], [50.2, 8726.0], [50.3, 8731.0], [50.4, 8731.0], [50.5, 8734.0], [50.6, 8734.0], [50.7, 8734.0], [50.8, 8735.0], [50.9, 8735.0], [51.0, 8736.0], [51.1, 8736.0], [51.2, 8736.0], [51.3, 8741.0], [51.4, 8741.0], [51.5, 8745.0], [51.6, 8745.0], [51.7, 8745.0], [51.8, 8746.0], [51.9, 8746.0], [52.0, 8750.0], [52.1, 8750.0], [52.2, 8750.0], [52.3, 8755.0], [52.4, 8755.0], [52.5, 8765.0], [52.6, 8765.0], [52.7, 8765.0], [52.8, 8780.0], [52.9, 8780.0], [53.0, 8780.0], [53.1, 8780.0], [53.2, 8780.0], [53.3, 8791.0], [53.4, 8791.0], [53.5, 8791.0], [53.6, 8791.0], [53.7, 8791.0], [53.8, 8792.0], [53.9, 8792.0], [54.0, 8794.0], [54.1, 8794.0], [54.2, 8794.0], [54.3, 8800.0], [54.4, 8800.0], [54.5, 8801.0], [54.6, 8801.0], [54.7, 8801.0], [54.8, 8813.0], [54.9, 8813.0], [55.0, 8814.0], [55.1, 8814.0], [55.2, 8814.0], [55.3, 8822.0], [55.4, 8822.0], [55.5, 8829.0], [55.6, 8829.0], [55.7, 8829.0], [55.8, 8831.0], [55.9, 8831.0], [56.0, 8833.0], [56.1, 8833.0], [56.2, 8833.0], [56.3, 8842.0], [56.4, 8842.0], [56.5, 8843.0], [56.6, 8843.0], [56.7, 8843.0], [56.8, 8845.0], [56.9, 8845.0], [57.0, 8849.0], [57.1, 8849.0], [57.2, 8849.0], [57.3, 8857.0], [57.4, 8857.0], [57.5, 8859.0], [57.6, 8859.0], [57.7, 8859.0], [57.8, 8860.0], [57.9, 8860.0], [58.0, 8861.0], [58.1, 8861.0], [58.2, 8861.0], [58.3, 8869.0], [58.4, 8869.0], [58.5, 8877.0], [58.6, 8877.0], [58.7, 8877.0], [58.8, 8879.0], [58.9, 8879.0], [59.0, 8882.0], [59.1, 8882.0], [59.2, 8882.0], [59.3, 8883.0], [59.4, 8883.0], [59.5, 8884.0], [59.6, 8884.0], [59.7, 8884.0], [59.8, 8891.0], [59.9, 8891.0], [60.0, 8895.0], [60.1, 8895.0], [60.2, 8895.0], [60.3, 8897.0], [60.4, 8897.0], [60.5, 8900.0], [60.6, 8900.0], [60.7, 8900.0], [60.8, 8901.0], [60.9, 8901.0], [61.0, 8903.0], [61.1, 8903.0], [61.2, 8903.0], [61.3, 8904.0], [61.4, 8904.0], [61.5, 8907.0], [61.6, 8907.0], [61.7, 8907.0], [61.8, 8917.0], [61.9, 8917.0], [62.0, 8918.0], [62.1, 8918.0], [62.2, 8918.0], [62.3, 8920.0], [62.4, 8920.0], [62.5, 8921.0], [62.6, 8921.0], [62.7, 8921.0], [62.8, 8924.0], [62.9, 8924.0], [63.0, 8928.0], [63.1, 8928.0], [63.2, 8928.0], [63.3, 8934.0], [63.4, 8934.0], [63.5, 8938.0], [63.6, 8938.0], [63.7, 8938.0], [63.8, 8939.0], [63.9, 8939.0], [64.0, 8942.0], [64.1, 8942.0], [64.2, 8942.0], [64.3, 8942.0], [64.4, 8942.0], [64.5, 8952.0], [64.6, 8952.0], [64.7, 8952.0], [64.8, 8960.0], [64.9, 8960.0], [65.0, 8964.0], [65.1, 8964.0], [65.2, 8964.0], [65.3, 8983.0], [65.4, 8983.0], [65.5, 8983.0], [65.6, 8983.0], [65.7, 8983.0], [65.8, 8985.0], [65.9, 8985.0], [66.0, 8986.0], [66.1, 8986.0], [66.2, 8986.0], [66.3, 8987.0], [66.4, 8987.0], [66.5, 8988.0], [66.6, 8988.0], [66.7, 8988.0], [66.8, 8991.0], [66.9, 8991.0], [67.0, 8999.0], [67.1, 8999.0], [67.2, 8999.0], [67.3, 9000.0], [67.4, 9000.0], [67.5, 9003.0], [67.6, 9003.0], [67.7, 9003.0], [67.8, 9005.0], [67.9, 9005.0], [68.0, 9009.0], [68.1, 9009.0], [68.2, 9009.0], [68.3, 9021.0], [68.4, 9021.0], [68.5, 9027.0], [68.6, 9027.0], [68.7, 9027.0], [68.8, 9037.0], [68.9, 9037.0], [69.0, 9040.0], [69.1, 9040.0], [69.2, 9040.0], [69.3, 9047.0], [69.4, 9047.0], [69.5, 9048.0], [69.6, 9048.0], [69.7, 9048.0], [69.8, 9049.0], [69.9, 9049.0], [70.0, 9055.0], [70.1, 9055.0], [70.2, 9055.0], [70.3, 9073.0], [70.4, 9073.0], [70.5, 9074.0], [70.6, 9074.0], [70.7, 9074.0], [70.8, 9076.0], [70.9, 9076.0], [71.0, 9080.0], [71.1, 9080.0], [71.2, 9080.0], [71.3, 9082.0], [71.4, 9082.0], [71.5, 9084.0], [71.6, 9084.0], [71.7, 9084.0], [71.8, 9087.0], [71.9, 9087.0], [72.0, 9091.0], [72.1, 9091.0], [72.2, 9091.0], [72.3, 9091.0], [72.4, 9091.0], [72.5, 9095.0], [72.6, 9095.0], [72.7, 9095.0], [72.8, 9099.0], [72.9, 9099.0], [73.0, 9099.0], [73.1, 9099.0], [73.2, 9099.0], [73.3, 9116.0], [73.4, 9116.0], [73.5, 9121.0], [73.6, 9121.0], [73.7, 9121.0], [73.8, 9123.0], [73.9, 9123.0], [74.0, 9129.0], [74.1, 9129.0], [74.2, 9129.0], [74.3, 9131.0], [74.4, 9131.0], [74.5, 9152.0], [74.6, 9152.0], [74.7, 9152.0], [74.8, 9153.0], [74.9, 9153.0], [75.0, 9155.0], [75.1, 9155.0], [75.2, 9155.0], [75.3, 9162.0], [75.4, 9162.0], [75.5, 9165.0], [75.6, 9165.0], [75.7, 9165.0], [75.8, 9184.0], [75.9, 9184.0], [76.0, 9186.0], [76.1, 9186.0], [76.2, 9186.0], [76.3, 9193.0], [76.4, 9193.0], [76.5, 9194.0], [76.6, 9194.0], [76.7, 9194.0], [76.8, 9197.0], [76.9, 9197.0], [77.0, 9201.0], [77.1, 9201.0], [77.2, 9201.0], [77.3, 9219.0], [77.4, 9219.0], [77.5, 9223.0], [77.6, 9223.0], [77.7, 9223.0], [77.8, 9225.0], [77.9, 9225.0], [78.0, 9240.0], [78.1, 9240.0], [78.2, 9240.0], [78.3, 9265.0], [78.4, 9265.0], [78.5, 9291.0], [78.6, 9291.0], [78.7, 9291.0], [78.8, 9296.0], [78.9, 9296.0], [79.0, 9296.0], [79.1, 9296.0], [79.2, 9296.0], [79.3, 9296.0], [79.4, 9296.0], [79.5, 9301.0], [79.6, 9301.0], [79.7, 9301.0], [79.8, 9312.0], [79.9, 9312.0], [80.0, 9318.0], [80.1, 9318.0], [80.2, 9318.0], [80.3, 9350.0], [80.4, 9350.0], [80.5, 9352.0], [80.6, 9352.0], [80.7, 9352.0], [80.8, 9358.0], [80.9, 9358.0], [81.0, 9367.0], [81.1, 9367.0], [81.2, 9367.0], [81.3, 9377.0], [81.4, 9377.0], [81.5, 9383.0], [81.6, 9383.0], [81.7, 9383.0], [81.8, 9390.0], [81.9, 9390.0], [82.0, 9397.0], [82.1, 9397.0], [82.2, 9397.0], [82.3, 9400.0], [82.4, 9400.0], [82.5, 9406.0], [82.6, 9406.0], [82.7, 9406.0], [82.8, 9422.0], [82.9, 9422.0], [83.0, 9424.0], [83.1, 9424.0], [83.2, 9424.0], [83.3, 9446.0], [83.4, 9446.0], [83.5, 9446.0], [83.6, 9446.0], [83.7, 9446.0], [83.8, 9473.0], [83.9, 9473.0], [84.0, 9508.0], [84.1, 9508.0], [84.2, 9508.0], [84.3, 9508.0], [84.4, 9508.0], [84.5, 9520.0], [84.6, 9520.0], [84.7, 9520.0], [84.8, 9523.0], [84.9, 9523.0], [85.0, 9525.0], [85.1, 9525.0], [85.2, 9525.0], [85.3, 9540.0], [85.4, 9540.0], [85.5, 9547.0], [85.6, 9547.0], [85.7, 9547.0], [85.8, 9548.0], [85.9, 9548.0], [86.0, 9552.0], [86.1, 9552.0], [86.2, 9552.0], [86.3, 9557.0], [86.4, 9557.0], [86.5, 9579.0], [86.6, 9579.0], [86.7, 9579.0], [86.8, 9589.0], [86.9, 9589.0], [87.0, 9601.0], [87.1, 9601.0], [87.2, 9601.0], [87.3, 9622.0], [87.4, 9622.0], [87.5, 9627.0], [87.6, 9627.0], [87.7, 9627.0], [87.8, 9628.0], [87.9, 9628.0], [88.0, 9649.0], [88.1, 9649.0], [88.2, 9649.0], [88.3, 9654.0], [88.4, 9654.0], [88.5, 9655.0], [88.6, 9655.0], [88.7, 9655.0], [88.8, 9673.0], [88.9, 9673.0], [89.0, 9691.0], [89.1, 9691.0], [89.2, 9691.0], [89.3, 9707.0], [89.4, 9707.0], [89.5, 9715.0], [89.6, 9715.0], [89.7, 9715.0], [89.8, 9722.0], [89.9, 9722.0], [90.0, 9727.0], [90.1, 9727.0], [90.2, 9727.0], [90.3, 9744.0], [90.4, 9744.0], [90.5, 9747.0], [90.6, 9747.0], [90.7, 9747.0], [90.8, 9760.0], [90.9, 9760.0], [91.0, 9760.0], [91.1, 9760.0], [91.2, 9760.0], [91.3, 9761.0], [91.4, 9761.0], [91.5, 9772.0], [91.6, 9772.0], [91.7, 9772.0], [91.8, 9794.0], [91.9, 9794.0], [92.0, 9830.0], [92.1, 9830.0], [92.2, 9830.0], [92.3, 9837.0], [92.4, 9837.0], [92.5, 9840.0], [92.6, 9840.0], [92.7, 9840.0], [92.8, 9851.0], [92.9, 9851.0], [93.0, 9852.0], [93.1, 9852.0], [93.2, 9852.0], [93.3, 9853.0], [93.4, 9853.0], [93.5, 9856.0], [93.6, 9856.0], [93.7, 9856.0], [93.8, 9856.0], [93.9, 9856.0], [94.0, 9863.0], [94.1, 9863.0], [94.2, 9863.0], [94.3, 9867.0], [94.4, 9867.0], [94.5, 9876.0], [94.6, 9876.0], [94.7, 9876.0], [94.8, 9914.0], [94.9, 9914.0], [95.0, 9916.0], [95.1, 9916.0], [95.2, 9916.0], [95.3, 9935.0], [95.4, 9935.0], [95.5, 10014.0], [95.6, 10014.0], [95.7, 10014.0], [95.8, 10067.0], [95.9, 10067.0], [96.0, 10104.0], [96.1, 10104.0], [96.2, 10104.0], [96.3, 10116.0], [96.4, 10116.0], [96.5, 10125.0], [96.6, 10125.0], [96.7, 10125.0], [96.8, 10146.0], [96.9, 10146.0], [97.0, 10178.0], [97.1, 10178.0], [97.2, 10178.0], [97.3, 10190.0], [97.4, 10190.0], [97.5, 10195.0], [97.6, 10195.0], [97.7, 10195.0], [97.8, 10230.0], [97.9, 10230.0], [98.0, 10246.0], [98.1, 10246.0], [98.2, 10246.0], [98.3, 10251.0], [98.4, 10251.0], [98.5, 10278.0], [98.6, 10278.0], [98.7, 10278.0], [98.8, 10282.0], [98.9, 10282.0], [99.0, 10285.0], [99.1, 10285.0], [99.2, 10285.0], [99.3, 10316.0], [99.4, 10316.0], [99.5, 10363.0], [99.6, 10363.0], [99.7, 10363.0], [99.8, 10559.0], [99.9, 10559.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 19002.0], [0.1, 19002.0], [0.2, 19002.0], [0.3, 20863.0], [0.4, 20863.0], [0.5, 22693.0], [0.6, 22693.0], [0.7, 22812.0], [0.8, 22812.0], [0.9, 22822.0], [1.0, 22822.0], [1.1, 22822.0], [1.2, 22835.0], [1.3, 22835.0], [1.4, 23197.0], [1.5, 23197.0], [1.6, 23370.0], [1.7, 23370.0], [1.8, 23524.0], [1.9, 23524.0], [2.0, 23524.0], [2.1, 23620.0], [2.2, 23620.0], [2.3, 23742.0], [2.4, 23742.0], [2.5, 23787.0], [2.6, 23787.0], [2.7, 23827.0], [2.8, 23827.0], [2.9, 24011.0], [3.0, 24011.0], [3.1, 24011.0], [3.2, 24105.0], [3.3, 24105.0], [3.4, 24178.0], [3.5, 24178.0], [3.6, 24187.0], [3.7, 24187.0], [3.8, 24223.0], [3.9, 24223.0], [4.0, 24223.0], [4.1, 24224.0], [4.2, 24224.0], [4.3, 24275.0], [4.4, 24275.0], [4.5, 24302.0], [4.6, 24302.0], [4.7, 24336.0], [4.8, 24336.0], [4.9, 24411.0], [5.0, 24411.0], [5.1, 24411.0], [5.2, 24435.0], [5.3, 24435.0], [5.4, 24624.0], [5.5, 24624.0], [5.6, 24745.0], [5.7, 24745.0], [5.8, 24808.0], [5.9, 24808.0], [6.0, 24808.0], [6.1, 24822.0], [6.2, 24822.0], [6.3, 24910.0], [6.4, 24910.0], [6.5, 24929.0], [6.6, 24929.0], [6.7, 24939.0], [6.8, 24939.0], [6.9, 24979.0], [7.0, 24979.0], [7.1, 24979.0], [7.2, 24982.0], [7.3, 24982.0], [7.4, 24998.0], [7.5, 24998.0], [7.6, 25009.0], [7.7, 25009.0], [7.8, 25073.0], [7.9, 25073.0], [8.0, 25073.0], [8.1, 25077.0], [8.2, 25077.0], [8.3, 25097.0], [8.4, 25097.0], [8.5, 25112.0], [8.6, 25112.0], [8.7, 25132.0], [8.8, 25132.0], [8.9, 25149.0], [9.0, 25149.0], [9.1, 25149.0], [9.2, 25183.0], [9.3, 25183.0], [9.4, 25183.0], [9.5, 25183.0], [9.6, 25187.0], [9.7, 25187.0], [9.8, 25209.0], [9.9, 25209.0], [10.0, 25243.0], [10.1, 25243.0], [10.2, 25243.0], [10.3, 25247.0], [10.4, 25247.0], [10.5, 25311.0], [10.6, 25311.0], [10.7, 25332.0], [10.8, 25332.0], [10.9, 25337.0], [11.0, 25337.0], [11.1, 25337.0], [11.2, 25361.0], [11.3, 25361.0], [11.4, 25369.0], [11.5, 25369.0], [11.6, 25376.0], [11.7, 25376.0], [11.8, 25395.0], [11.9, 25395.0], [12.0, 25400.0], [12.1, 25400.0], [12.2, 25400.0], [12.3, 25402.0], [12.4, 25402.0], [12.5, 25432.0], [12.6, 25432.0], [12.7, 25473.0], [12.8, 25473.0], [12.9, 25498.0], [13.0, 25498.0], [13.1, 25498.0], [13.2, 25515.0], [13.3, 25515.0], [13.4, 25518.0], [13.5, 25518.0], [13.6, 25541.0], [13.7, 25541.0], [13.8, 25557.0], [13.9, 25557.0], [14.0, 25567.0], [14.1, 25567.0], [14.2, 25567.0], [14.3, 25570.0], [14.4, 25570.0], [14.5, 25577.0], [14.6, 25577.0], [14.7, 25580.0], [14.8, 25580.0], [14.9, 25581.0], [15.0, 25581.0], [15.1, 25581.0], [15.2, 25589.0], [15.3, 25589.0], [15.4, 25596.0], [15.5, 25596.0], [15.6, 25613.0], [15.7, 25613.0], [15.8, 25616.0], [15.9, 25616.0], [16.0, 25625.0], [16.1, 25625.0], [16.2, 25625.0], [16.3, 25635.0], [16.4, 25635.0], [16.5, 25646.0], [16.6, 25646.0], [16.7, 25648.0], [16.8, 25648.0], [16.9, 25658.0], [17.0, 25658.0], [17.1, 25658.0], [17.2, 25689.0], [17.3, 25689.0], [17.4, 25689.0], [17.5, 25689.0], [17.6, 25690.0], [17.7, 25690.0], [17.8, 25704.0], [17.9, 25704.0], [18.0, 25711.0], [18.1, 25711.0], [18.2, 25711.0], [18.3, 25726.0], [18.4, 25726.0], [18.5, 25732.0], [18.6, 25732.0], [18.7, 25739.0], [18.8, 25739.0], [18.9, 25758.0], [19.0, 25758.0], [19.1, 25758.0], [19.2, 25759.0], [19.3, 25759.0], [19.4, 25768.0], [19.5, 25768.0], [19.6, 25785.0], [19.7, 25785.0], [19.8, 25791.0], [19.9, 25791.0], [20.0, 25795.0], [20.1, 25795.0], [20.2, 25795.0], [20.3, 25845.0], [20.4, 25845.0], [20.5, 25848.0], [20.6, 25848.0], [20.7, 25858.0], [20.8, 25858.0], [20.9, 25876.0], [21.0, 25876.0], [21.1, 25876.0], [21.2, 25883.0], [21.3, 25883.0], [21.4, 25904.0], [21.5, 25904.0], [21.6, 25910.0], [21.7, 25910.0], [21.8, 25914.0], [21.9, 25914.0], [22.0, 25932.0], [22.1, 25932.0], [22.2, 25932.0], [22.3, 25967.0], [22.4, 25967.0], [22.5, 25976.0], [22.6, 25976.0], [22.7, 25984.0], [22.8, 25984.0], [22.9, 26002.0], [23.0, 26002.0], [23.1, 26002.0], [23.2, 26003.0], [23.3, 26003.0], [23.4, 26016.0], [23.5, 26016.0], [23.6, 26022.0], [23.7, 26022.0], [23.8, 26026.0], [23.9, 26026.0], [24.0, 26026.0], [24.1, 26026.0], [24.2, 26026.0], [24.3, 26032.0], [24.4, 26032.0], [24.5, 26034.0], [24.6, 26034.0], [24.7, 26035.0], [24.8, 26035.0], [24.9, 26036.0], [25.0, 26036.0], [25.1, 26036.0], [25.2, 26044.0], [25.3, 26044.0], [25.4, 26051.0], [25.5, 26051.0], [25.6, 26055.0], [25.7, 26055.0], [25.8, 26061.0], [25.9, 26061.0], [26.0, 26064.0], [26.1, 26064.0], [26.2, 26064.0], [26.3, 26069.0], [26.4, 26069.0], [26.5, 26077.0], [26.6, 26077.0], [26.7, 26078.0], [26.8, 26078.0], [26.9, 26080.0], [27.0, 26080.0], [27.1, 26080.0], [27.2, 26087.0], [27.3, 26087.0], [27.4, 26096.0], [27.5, 26096.0], [27.6, 26107.0], [27.7, 26107.0], [27.8, 26115.0], [27.9, 26115.0], [28.0, 26119.0], [28.1, 26119.0], [28.2, 26119.0], [28.3, 26120.0], [28.4, 26120.0], [28.5, 26127.0], [28.6, 26127.0], [28.7, 26144.0], [28.8, 26144.0], [28.9, 26147.0], [29.0, 26147.0], [29.1, 26147.0], [29.2, 26153.0], [29.3, 26153.0], [29.4, 26155.0], [29.5, 26155.0], [29.6, 26155.0], [29.7, 26155.0], [29.8, 26159.0], [29.9, 26159.0], [30.0, 26164.0], [30.1, 26164.0], [30.2, 26164.0], [30.3, 26171.0], [30.4, 26171.0], [30.5, 26177.0], [30.6, 26177.0], [30.7, 26185.0], [30.8, 26185.0], [30.9, 26191.0], [31.0, 26191.0], [31.1, 26191.0], [31.2, 26198.0], [31.3, 26198.0], [31.4, 26201.0], [31.5, 26201.0], [31.6, 26213.0], [31.7, 26213.0], [31.8, 26217.0], [31.9, 26217.0], [32.0, 26225.0], [32.1, 26225.0], [32.2, 26225.0], [32.3, 26232.0], [32.4, 26232.0], [32.5, 26233.0], [32.6, 26233.0], [32.7, 26234.0], [32.8, 26234.0], [32.9, 26240.0], [33.0, 26240.0], [33.1, 26240.0], [33.2, 26242.0], [33.3, 26242.0], [33.4, 26253.0], [33.5, 26253.0], [33.6, 26272.0], [33.7, 26272.0], [33.8, 26272.0], [33.9, 26272.0], [34.0, 26277.0], [34.1, 26277.0], [34.2, 26277.0], [34.3, 26285.0], [34.4, 26285.0], [34.5, 26295.0], [34.6, 26295.0], [34.7, 26296.0], [34.8, 26296.0], [34.9, 26297.0], [35.0, 26297.0], [35.1, 26297.0], [35.2, 26299.0], [35.3, 26299.0], [35.4, 26303.0], [35.5, 26303.0], [35.6, 26332.0], [35.7, 26332.0], [35.8, 26337.0], [35.9, 26337.0], [36.0, 26337.0], [36.1, 26337.0], [36.2, 26337.0], [36.3, 26339.0], [36.4, 26339.0], [36.5, 26343.0], [36.6, 26343.0], [36.7, 26346.0], [36.8, 26346.0], [36.9, 26357.0], [37.0, 26357.0], [37.1, 26357.0], [37.2, 26359.0], [37.3, 26359.0], [37.4, 26363.0], [37.5, 26363.0], [37.6, 26370.0], [37.7, 26370.0], [37.8, 26371.0], [37.9, 26371.0], [38.0, 26372.0], [38.1, 26372.0], [38.2, 26372.0], [38.3, 26380.0], [38.4, 26380.0], [38.5, 26388.0], [38.6, 26388.0], [38.7, 26389.0], [38.8, 26389.0], [38.9, 26390.0], [39.0, 26390.0], [39.1, 26390.0], [39.2, 26396.0], [39.3, 26396.0], [39.4, 26396.0], [39.5, 26396.0], [39.6, 26399.0], [39.7, 26399.0], [39.8, 26401.0], [39.9, 26401.0], [40.0, 26410.0], [40.1, 26410.0], [40.2, 26410.0], [40.3, 26413.0], [40.4, 26413.0], [40.5, 26416.0], [40.6, 26416.0], [40.7, 26434.0], [40.8, 26434.0], [40.9, 26434.0], [41.0, 26434.0], [41.1, 26434.0], [41.2, 26439.0], [41.3, 26439.0], [41.4, 26443.0], [41.5, 26443.0], [41.6, 26446.0], [41.7, 26446.0], [41.8, 26449.0], [41.9, 26449.0], [42.0, 26451.0], [42.1, 26451.0], [42.2, 26451.0], [42.3, 26455.0], [42.4, 26455.0], [42.5, 26455.0], [42.6, 26455.0], [42.7, 26461.0], [42.8, 26461.0], [42.9, 26467.0], [43.0, 26467.0], [43.1, 26467.0], [43.2, 26471.0], [43.3, 26471.0], [43.4, 26472.0], [43.5, 26472.0], [43.6, 26475.0], [43.7, 26475.0], [43.8, 26483.0], [43.9, 26483.0], [44.0, 26485.0], [44.1, 26485.0], [44.2, 26485.0], [44.3, 26488.0], [44.4, 26488.0], [44.5, 26489.0], [44.6, 26489.0], [44.7, 26489.0], [44.8, 26489.0], [44.9, 26506.0], [45.0, 26506.0], [45.1, 26506.0], [45.2, 26509.0], [45.3, 26509.0], [45.4, 26509.0], [45.5, 26509.0], [45.6, 26519.0], [45.7, 26519.0], [45.8, 26520.0], [45.9, 26520.0], [46.0, 26521.0], [46.1, 26521.0], [46.2, 26521.0], [46.3, 26524.0], [46.4, 26524.0], [46.5, 26532.0], [46.6, 26532.0], [46.7, 26536.0], [46.8, 26536.0], [46.9, 26537.0], [47.0, 26537.0], [47.1, 26537.0], [47.2, 26540.0], [47.3, 26540.0], [47.4, 26554.0], [47.5, 26554.0], [47.6, 26565.0], [47.7, 26565.0], [47.8, 26573.0], [47.9, 26573.0], [48.0, 26576.0], [48.1, 26576.0], [48.2, 26576.0], [48.3, 26580.0], [48.4, 26580.0], [48.5, 26585.0], [48.6, 26585.0], [48.7, 26588.0], [48.8, 26588.0], [48.9, 26592.0], [49.0, 26592.0], [49.1, 26592.0], [49.2, 26599.0], [49.3, 26599.0], [49.4, 26603.0], [49.5, 26603.0], [49.6, 26612.0], [49.7, 26612.0], [49.8, 26614.0], [49.9, 26614.0], [50.0, 26615.0], [50.1, 26615.0], [50.2, 26615.0], [50.3, 26615.0], [50.4, 26615.0], [50.5, 26621.0], [50.6, 26621.0], [50.7, 26623.0], [50.8, 26623.0], [50.9, 26629.0], [51.0, 26629.0], [51.1, 26629.0], [51.2, 26642.0], [51.3, 26642.0], [51.4, 26659.0], [51.5, 26659.0], [51.6, 26664.0], [51.7, 26664.0], [51.8, 26667.0], [51.9, 26667.0], [52.0, 26668.0], [52.1, 26668.0], [52.2, 26668.0], [52.3, 26676.0], [52.4, 26676.0], [52.5, 26679.0], [52.6, 26679.0], [52.7, 26680.0], [52.8, 26680.0], [52.9, 26685.0], [53.0, 26685.0], [53.1, 26685.0], [53.2, 26688.0], [53.3, 26688.0], [53.4, 26695.0], [53.5, 26695.0], [53.6, 26701.0], [53.7, 26701.0], [53.8, 26703.0], [53.9, 26703.0], [54.0, 26727.0], [54.1, 26727.0], [54.2, 26727.0], [54.3, 26736.0], [54.4, 26736.0], [54.5, 26737.0], [54.6, 26737.0], [54.7, 26738.0], [54.8, 26738.0], [54.9, 26744.0], [55.0, 26744.0], [55.1, 26744.0], [55.2, 26746.0], [55.3, 26746.0], [55.4, 26759.0], [55.5, 26759.0], [55.6, 26766.0], [55.7, 26766.0], [55.8, 26772.0], [55.9, 26772.0], [56.0, 26773.0], [56.1, 26773.0], [56.2, 26773.0], [56.3, 26794.0], [56.4, 26794.0], [56.5, 26801.0], [56.6, 26801.0], [56.7, 26808.0], [56.8, 26808.0], [56.9, 26812.0], [57.0, 26812.0], [57.1, 26812.0], [57.2, 26813.0], [57.3, 26813.0], [57.4, 26820.0], [57.5, 26820.0], [57.6, 26837.0], [57.7, 26837.0], [57.8, 26839.0], [57.9, 26839.0], [58.0, 26842.0], [58.1, 26842.0], [58.2, 26842.0], [58.3, 26843.0], [58.4, 26843.0], [58.5, 26843.0], [58.6, 26843.0], [58.7, 26846.0], [58.8, 26846.0], [58.9, 26847.0], [59.0, 26847.0], [59.1, 26847.0], [59.2, 26855.0], [59.3, 26855.0], [59.4, 26865.0], [59.5, 26865.0], [59.6, 26869.0], [59.7, 26869.0], [59.8, 26876.0], [59.9, 26876.0], [60.0, 26878.0], [60.1, 26878.0], [60.2, 26878.0], [60.3, 26885.0], [60.4, 26885.0], [60.5, 26888.0], [60.6, 26888.0], [60.7, 26903.0], [60.8, 26903.0], [60.9, 26931.0], [61.0, 26931.0], [61.1, 26931.0], [61.2, 26932.0], [61.3, 26932.0], [61.4, 26937.0], [61.5, 26937.0], [61.6, 26949.0], [61.7, 26949.0], [61.8, 26959.0], [61.9, 26959.0], [62.0, 26965.0], [62.1, 26965.0], [62.2, 26965.0], [62.3, 26965.0], [62.4, 26965.0], [62.5, 26969.0], [62.6, 26969.0], [62.7, 26970.0], [62.8, 26970.0], [62.9, 26971.0], [63.0, 26971.0], [63.1, 26971.0], [63.2, 26973.0], [63.3, 26973.0], [63.4, 27000.0], [63.5, 27000.0], [63.6, 27013.0], [63.7, 27013.0], [63.8, 27013.0], [63.9, 27013.0], [64.0, 27017.0], [64.1, 27017.0], [64.2, 27017.0], [64.3, 27028.0], [64.4, 27028.0], [64.5, 27035.0], [64.6, 27035.0], [64.7, 27036.0], [64.8, 27036.0], [64.9, 27036.0], [65.0, 27036.0], [65.1, 27036.0], [65.2, 27037.0], [65.3, 27037.0], [65.4, 27045.0], [65.5, 27045.0], [65.6, 27046.0], [65.7, 27046.0], [65.8, 27047.0], [65.9, 27047.0], [66.0, 27049.0], [66.1, 27049.0], [66.2, 27049.0], [66.3, 27051.0], [66.4, 27051.0], [66.5, 27051.0], [66.6, 27051.0], [66.7, 27053.0], [66.8, 27053.0], [66.9, 27055.0], [67.0, 27055.0], [67.1, 27055.0], [67.2, 27056.0], [67.3, 27056.0], [67.4, 27059.0], [67.5, 27059.0], [67.6, 27062.0], [67.7, 27062.0], [67.8, 27063.0], [67.9, 27063.0], [68.0, 27070.0], [68.1, 27070.0], [68.2, 27070.0], [68.3, 27070.0], [68.4, 27070.0], [68.5, 27078.0], [68.6, 27078.0], [68.7, 27083.0], [68.8, 27083.0], [68.9, 27085.0], [69.0, 27085.0], [69.1, 27085.0], [69.2, 27097.0], [69.3, 27097.0], [69.4, 27114.0], [69.5, 27114.0], [69.6, 27120.0], [69.7, 27120.0], [69.8, 27136.0], [69.9, 27136.0], [70.0, 27145.0], [70.1, 27145.0], [70.2, 27145.0], [70.3, 27150.0], [70.4, 27150.0], [70.5, 27166.0], [70.6, 27166.0], [70.7, 27176.0], [70.8, 27176.0], [70.9, 27190.0], [71.0, 27190.0], [71.1, 27190.0], [71.2, 27192.0], [71.3, 27192.0], [71.4, 27195.0], [71.5, 27195.0], [71.6, 27198.0], [71.7, 27198.0], [71.8, 27199.0], [71.9, 27199.0], [72.0, 27200.0], [72.1, 27200.0], [72.2, 27200.0], [72.3, 27202.0], [72.4, 27202.0], [72.5, 27207.0], [72.6, 27207.0], [72.7, 27212.0], [72.8, 27212.0], [72.9, 27217.0], [73.0, 27217.0], [73.1, 27217.0], [73.2, 27227.0], [73.3, 27227.0], [73.4, 27231.0], [73.5, 27231.0], [73.6, 27262.0], [73.7, 27262.0], [73.8, 27265.0], [73.9, 27265.0], [74.0, 27265.0], [74.1, 27265.0], [74.2, 27265.0], [74.3, 27272.0], [74.4, 27272.0], [74.5, 27275.0], [74.6, 27275.0], [74.7, 27278.0], [74.8, 27278.0], [74.9, 27287.0], [75.0, 27287.0], [75.1, 27287.0], [75.2, 27293.0], [75.3, 27293.0], [75.4, 27304.0], [75.5, 27304.0], [75.6, 27309.0], [75.7, 27309.0], [75.8, 27326.0], [75.9, 27326.0], [76.0, 27326.0], [76.1, 27329.0], [76.2, 27329.0], [76.3, 27330.0], [76.4, 27330.0], [76.5, 27338.0], [76.6, 27338.0], [76.7, 27340.0], [76.8, 27340.0], [76.9, 27340.0], [77.0, 27340.0], [77.1, 27340.0], [77.2, 27350.0], [77.3, 27350.0], [77.4, 27357.0], [77.5, 27357.0], [77.6, 27372.0], [77.7, 27372.0], [77.8, 27373.0], [77.9, 27373.0], [78.0, 27373.0], [78.1, 27381.0], [78.2, 27381.0], [78.3, 27384.0], [78.4, 27384.0], [78.5, 27391.0], [78.6, 27391.0], [78.7, 27397.0], [78.8, 27397.0], [78.9, 27397.0], [79.0, 27397.0], [79.1, 27397.0], [79.2, 27402.0], [79.3, 27402.0], [79.4, 27411.0], [79.5, 27411.0], [79.6, 27415.0], [79.7, 27415.0], [79.8, 27419.0], [79.9, 27419.0], [80.0, 27419.0], [80.1, 27421.0], [80.2, 27421.0], [80.3, 27429.0], [80.4, 27429.0], [80.5, 27430.0], [80.6, 27430.0], [80.7, 27434.0], [80.8, 27434.0], [80.9, 27445.0], [81.0, 27445.0], [81.1, 27445.0], [81.2, 27447.0], [81.3, 27447.0], [81.4, 27455.0], [81.5, 27455.0], [81.6, 27455.0], [81.7, 27455.0], [81.8, 27460.0], [81.9, 27460.0], [82.0, 27460.0], [82.1, 27468.0], [82.2, 27468.0], [82.3, 27488.0], [82.4, 27488.0], [82.5, 27488.0], [82.6, 27488.0], [82.7, 27518.0], [82.8, 27518.0], [82.9, 27539.0], [83.0, 27539.0], [83.1, 27539.0], [83.2, 27541.0], [83.3, 27541.0], [83.4, 27546.0], [83.5, 27546.0], [83.6, 27551.0], [83.7, 27551.0], [83.8, 27578.0], [83.9, 27578.0], [84.0, 27578.0], [84.1, 27585.0], [84.2, 27585.0], [84.3, 27589.0], [84.4, 27589.0], [84.5, 27630.0], [84.6, 27630.0], [84.7, 27635.0], [84.8, 27635.0], [84.9, 27643.0], [85.0, 27643.0], [85.1, 27643.0], [85.2, 27648.0], [85.3, 27648.0], [85.4, 27670.0], [85.5, 27670.0], [85.6, 27670.0], [85.7, 27670.0], [85.8, 27673.0], [85.9, 27673.0], [86.0, 27673.0], [86.1, 27677.0], [86.2, 27677.0], [86.3, 27685.0], [86.4, 27685.0], [86.5, 27696.0], [86.6, 27696.0], [86.7, 27698.0], [86.8, 27698.0], [86.9, 27710.0], [87.0, 27710.0], [87.1, 27710.0], [87.2, 27716.0], [87.3, 27716.0], [87.4, 27719.0], [87.5, 27719.0], [87.6, 27720.0], [87.7, 27720.0], [87.8, 27721.0], [87.9, 27721.0], [88.0, 27721.0], [88.1, 27733.0], [88.2, 27733.0], [88.3, 27752.0], [88.4, 27752.0], [88.5, 27755.0], [88.6, 27755.0], [88.7, 27765.0], [88.8, 27765.0], [88.9, 27769.0], [89.0, 27769.0], [89.1, 27769.0], [89.2, 27784.0], [89.3, 27784.0], [89.4, 27808.0], [89.5, 27808.0], [89.6, 27845.0], [89.7, 27845.0], [89.8, 27853.0], [89.9, 27853.0], [90.0, 27853.0], [90.1, 27853.0], [90.2, 27853.0], [90.3, 27878.0], [90.4, 27878.0], [90.5, 27879.0], [90.6, 27879.0], [90.7, 27892.0], [90.8, 27892.0], [90.9, 27922.0], [91.0, 27922.0], [91.1, 27922.0], [91.2, 27925.0], [91.3, 27925.0], [91.4, 27927.0], [91.5, 27927.0], [91.6, 27927.0], [91.7, 27927.0], [91.8, 27927.0], [91.9, 27927.0], [92.0, 27927.0], [92.1, 27935.0], [92.2, 27935.0], [92.3, 27937.0], [92.4, 27937.0], [92.5, 27954.0], [92.6, 27954.0], [92.7, 27956.0], [92.8, 27956.0], [92.9, 27973.0], [93.0, 27973.0], [93.1, 27973.0], [93.2, 27977.0], [93.3, 27977.0], [93.4, 27977.0], [93.5, 27977.0], [93.6, 27987.0], [93.7, 27987.0], [93.8, 27997.0], [93.9, 27997.0], [94.0, 27997.0], [94.1, 28024.0], [94.2, 28024.0], [94.3, 28026.0], [94.4, 28026.0], [94.5, 28050.0], [94.6, 28050.0], [94.7, 28072.0], [94.8, 28072.0], [94.9, 28080.0], [95.0, 28080.0], [95.1, 28080.0], [95.2, 28107.0], [95.3, 28107.0], [95.4, 28114.0], [95.5, 28114.0], [95.6, 28122.0], [95.7, 28122.0], [95.8, 28149.0], [95.9, 28149.0], [96.0, 28149.0], [96.1, 28187.0], [96.2, 28187.0], [96.3, 28188.0], [96.4, 28188.0], [96.5, 28201.0], [96.6, 28201.0], [96.7, 28227.0], [96.8, 28227.0], [96.9, 28279.0], [97.0, 28279.0], [97.1, 28279.0], [97.2, 28286.0], [97.3, 28286.0], [97.4, 28331.0], [97.5, 28331.0], [97.6, 28420.0], [97.7, 28420.0], [97.8, 28492.0], [97.9, 28492.0], [98.0, 28492.0], [98.1, 28609.0], [98.2, 28609.0], [98.3, 28861.0], [98.4, 28861.0], [98.5, 28902.0], [98.6, 28902.0], [98.7, 28914.0], [98.8, 28914.0], [98.9, 29017.0], [99.0, 29017.0], [99.1, 29017.0], [99.2, 29034.0], [99.3, 29034.0], [99.4, 29050.0], [99.5, 29050.0], [99.6, 29059.0], [99.7, 29059.0], [99.8, 29150.0], [99.9, 29150.0], [100.0, 29150.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 7200.0, "maxY": 32.0, "series": [{"data": [[23300.0, 1.0], [23500.0, 1.0], [22800.0, 3.0], [23100.0, 1.0], [24100.0, 1.0], [24200.0, 2.0], [24300.0, 1.0], [23700.0, 1.0], [25200.0, 2.0], [25100.0, 4.0], [25500.0, 2.0], [25000.0, 3.0], [25400.0, 2.0], [24900.0, 4.0], [25300.0, 2.0], [24800.0, 1.0], [26400.0, 3.0], [26500.0, 3.0], [26000.0, 1.0], [26100.0, 2.0], [25700.0, 3.0], [26200.0, 2.0], [25900.0, 1.0], [25600.0, 2.0], [27000.0, 1.0], [26700.0, 1.0], [26800.0, 1.0], [28200.0, 1.0], [30400.0, 1.0], [31700.0, 1.0], [32200.0, 2.0], [32100.0, 1.0], [32700.0, 1.0], [32500.0, 1.0], [32900.0, 1.0], [32800.0, 3.0], [33100.0, 1.0], [33300.0, 1.0], [33500.0, 2.0], [33400.0, 1.0], [33800.0, 2.0], [34800.0, 6.0], [34600.0, 13.0], [34700.0, 11.0], [34400.0, 7.0], [34500.0, 16.0], [33200.0, 1.0], [33900.0, 2.0], [34300.0, 11.0], [34200.0, 8.0], [34100.0, 7.0], [34000.0, 2.0], [33700.0, 1.0], [35100.0, 5.0], [35200.0, 3.0], [35500.0, 25.0], [35400.0, 11.0], [35300.0, 10.0], [35800.0, 21.0], [35000.0, 7.0], [34900.0, 10.0], [35600.0, 27.0], [35700.0, 12.0], [36400.0, 20.0], [36600.0, 12.0], [36500.0, 17.0], [36700.0, 11.0], [36800.0, 11.0], [35900.0, 20.0], [36300.0, 24.0], [36200.0, 15.0], [36100.0, 11.0], [36000.0, 7.0], [37300.0, 1.0], [37200.0, 2.0], [37400.0, 2.0], [37900.0, 1.0], [38000.0, 1.0], [37000.0, 3.0], [36900.0, 5.0], [37100.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[8200.0, 20.0], [8400.0, 29.0], [8300.0, 23.0], [8500.0, 32.0], [8600.0, 29.0], [8700.0, 25.0], [8800.0, 25.0], [9000.0, 24.0], [8900.0, 27.0], [9100.0, 15.0], [9200.0, 10.0], [9300.0, 11.0], [9500.0, 12.0], [9400.0, 7.0], [9600.0, 9.0], [9700.0, 11.0], [9800.0, 11.0], [9900.0, 3.0], [10100.0, 7.0], [10200.0, 6.0], [10000.0, 2.0], [10500.0, 1.0], [10300.0, 2.0], [7400.0, 2.0], [7300.0, 3.0], [7200.0, 1.0], [7600.0, 4.0], [7500.0, 1.0], [7700.0, 3.0], [7900.0, 5.0], [7800.0, 5.0], [8100.0, 23.0], [8000.0, 12.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[19000.0, 1.0], [20800.0, 1.0], [22600.0, 1.0], [23300.0, 1.0], [23500.0, 1.0], [22800.0, 3.0], [23100.0, 1.0], [23600.0, 1.0], [24000.0, 1.0], [23700.0, 2.0], [23800.0, 1.0], [24300.0, 2.0], [24100.0, 3.0], [24400.0, 2.0], [24200.0, 3.0], [24800.0, 2.0], [24700.0, 1.0], [24900.0, 6.0], [25000.0, 4.0], [25200.0, 3.0], [24600.0, 1.0], [25300.0, 7.0], [25100.0, 6.0], [25500.0, 11.0], [25400.0, 5.0], [26400.0, 23.0], [25600.0, 10.0], [25700.0, 11.0], [25800.0, 5.0], [26100.0, 17.0], [26000.0, 21.0], [25900.0, 7.0], [26200.0, 18.0], [26600.0, 19.0], [26300.0, 20.0], [26500.0, 20.0], [27400.0, 16.0], [26800.0, 19.0], [27200.0, 15.0], [27600.0, 11.0], [27300.0, 17.0], [27500.0, 8.0], [27000.0, 27.0], [26900.0, 12.0], [26700.0, 13.0], [27100.0, 12.0], [27800.0, 7.0], [28400.0, 2.0], [28200.0, 4.0], [28100.0, 6.0], [28000.0, 5.0], [27700.0, 11.0], [27900.0, 14.0], [28300.0, 1.0], [28600.0, 1.0], [28900.0, 2.0], [28800.0, 1.0], [29000.0, 4.0], [29100.0, 1.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 38000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 900.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 900.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 900.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 25.5, "minX": 1.6359339E12, "maxY": 50.0, "series": [{"data": [[1.63593408E12, 50.0], [1.63593414E12, 50.0], [1.63593396E12, 50.0], [1.63593402E12, 50.0], [1.6359339E12, 50.0], [1.6359342E12, 25.5]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6359342E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8808.432500000003, "minX": 1.0, "maxY": 35500.416458852866, "series": [{"data": [[2.0, 22836.0], [3.0, 23197.0], [4.0, 22813.0], [5.0, 23525.0], [6.0, 23742.0], [7.0, 23370.0], [8.0, 24302.0], [9.0, 24275.0], [10.0, 24224.0], [11.0, 24105.0], [12.0, 25183.0], [13.0, 24911.0], [14.0, 25112.0], [15.0, 25009.0], [16.0, 24822.0], [17.0, 25338.0], [18.0, 24939.0], [19.0, 25097.0], [20.0, 25243.0], [21.0, 24982.0], [22.0, 25183.0], [23.0, 25541.0], [24.0, 25647.0], [25.0, 25333.0], [26.0, 25711.0], [27.0, 25432.0], [28.0, 24979.0], [29.0, 25636.0], [30.0, 25473.0], [31.0, 25077.0], [33.0, 25795.0], [32.0, 25567.0], [35.0, 25209.0], [34.0, 25187.0], [37.0, 26297.0], [36.0, 25932.0], [39.0, 26233.0], [38.0, 26417.0], [41.0, 26115.0], [40.0, 26588.0], [43.0, 26147.0], [42.0, 25739.0], [45.0, 26808.0], [44.0, 26096.0], [47.0, 26467.0], [46.0, 26521.0], [49.0, 26766.0], [48.0, 26577.0], [50.0, 35500.416458852866], [1.0, 22822.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[47.27777777777777, 34377.7488888889]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[50.0, 8808.432500000003]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[50.0, 8808.432500000003]], "isOverall": false, "label": "(POST) INSERT New User-Aggregated", "isController": false}, {"data": [[2.0, 22835.0], [3.0, 23197.0], [4.0, 22812.0], [5.0, 23524.0], [6.0, 23742.0], [7.0, 23370.0], [8.0, 24302.0], [9.0, 24275.0], [10.0, 24224.0], [11.0, 24105.0], [12.0, 25183.0], [13.0, 24910.0], [14.0, 25112.0], [15.0, 25009.0], [16.0, 24822.0], [17.0, 25337.0], [18.0, 24939.0], [19.0, 25097.0], [20.0, 25243.0], [21.0, 24982.0], [22.0, 25183.0], [23.0, 25541.0], [24.0, 25646.0], [25.0, 25332.0], [26.0, 25711.0], [27.0, 25432.0], [28.0, 24979.0], [29.0, 25635.0], [30.0, 25473.0], [31.0, 25077.0], [33.0, 25795.0], [32.0, 25567.0], [35.0, 25209.0], [34.0, 25187.0], [37.0, 26296.0], [36.0, 25932.0], [39.0, 26233.0], [38.0, 26416.0], [41.0, 26115.0], [40.0, 26588.0], [43.0, 26147.0], [42.0, 25739.0], [45.0, 26808.0], [44.0, 26096.0], [47.0, 26467.0], [46.0, 26521.0], [49.0, 26766.0], [48.0, 26576.0], [50.0, 26713.950124688286], [1.0, 22822.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}, {"data": [[47.27777777777777, 26548.006666666675]], "isOverall": false, "label": "(GET) Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 293037.4, "minX": 1.6359339E12, "maxY": 2871445.0166666666, "series": [{"data": [[1.63593408E12, 1673317.8166666667], [1.63593414E12, 2615886.7666666666], [1.63593396E12, 2615883.066666667], [1.63593402E12, 2250501.8], [1.6359339E12, 2871445.0166666666], [1.6359342E12, 2298940.1333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63593408E12, 504389.9666666667], [1.63593414E12, 624521.9666666667], [1.63593396E12, 624497.8166666667], [1.63593402E12, 432345.8], [1.6359339E12, 310668.2833333333], [1.6359342E12, 293037.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6359342E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8563.150000000001, "minX": 1.6359339E12, "maxY": 36357.36000000001, "series": [{"data": [[1.63593408E12, 35579.36999999999], [1.63593414E12, 35158.819999999985], [1.63593396E12, 36357.36000000001], [1.63593402E12, 35730.50000000001], [1.6359339E12, 34250.5], [1.6359342E12, 25227.640000000003]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.63593408E12, 8995.450000000003], [1.63593414E12, 8563.150000000001], [1.63593396E12, 8994.779999999997], [1.63593402E12, 8683.880000000001], [1.6359339E12, 8676.82]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.63593408E12, 26481.18644067796], [1.63593414E12, 26595.669999999995], [1.63593396E12, 27362.579999999987], [1.63593402E12, 26904.75824175825], [1.6359339E12, 25573.68], [1.6359342E12, 25227.42]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6359342E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6359339E12, "maxY": 4518.819999999999, "series": [{"data": [[1.63593408E12, 0.0], [1.63593414E12, 0.0], [1.63593396E12, 0.0], [1.63593402E12, 0.0], [1.6359339E12, 0.0], [1.6359342E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.63593408E12, 4499.989999999998], [1.63593414E12, 4289.96], [1.63593396E12, 4518.819999999999], [1.63593402E12, 4369.539999999999], [1.6359339E12, 4311.259999999998]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.63593408E12, 3736.406779661017], [1.63593414E12, 3594.310000000001], [1.63593396E12, 3757.2700000000013], [1.63593402E12, 3567.637362637363], [1.6359339E12, 1509.3600000000004], [1.6359342E12, 3763.18]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6359342E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6359339E12, "maxY": 44.53999999999999, "series": [{"data": [[1.63593408E12, 0.0], [1.63593414E12, 0.0], [1.63593396E12, 0.0], [1.63593402E12, 0.0], [1.6359339E12, 0.0], [1.6359342E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.63593408E12, 35.02], [1.63593414E12, 35.14999999999999], [1.63593396E12, 35.30000000000001], [1.63593402E12, 35.12], [1.6359339E12, 36.059999999999995]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.63593408E12, 34.79661016949153], [1.63593414E12, 34.70000000000001], [1.63593396E12, 34.62], [1.63593402E12, 34.648351648351635], [1.6359339E12, 44.53999999999999], [1.6359342E12, 34.279999999999994]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6359342E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7269.0, "minX": 1.6359339E12, "maxY": 29150.0, "series": [{"data": [[1.63593408E12, 29059.0], [1.63593414E12, 27927.0], [1.63593396E12, 29150.0], [1.63593402E12, 28609.0], [1.6359339E12, 29050.0], [1.6359342E12, 27062.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63593408E12, 7269.0], [1.63593414E12, 7440.0], [1.63593396E12, 7303.0], [1.63593402E12, 8110.0], [1.6359339E12, 7389.0], [1.6359342E12, 22812.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63593408E12, 27708.8], [1.63593414E12, 27536.899999999998], [1.63593396E12, 27927.0], [1.63593402E12, 27748.2], [1.6359339E12, 26627.6], [1.6359342E12, 27429.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63593408E12, 28954.17], [1.63593414E12, 28876.989999999998], [1.63593396E12, 29033.83], [1.63593402E12, 28973.739999999998], [1.6359339E12, 29049.84], [1.6359342E12, 28707.279999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63593408E12, 27996.5], [1.63593414E12, 27927.0], [1.63593396E12, 28147.65], [1.63593402E12, 28047.6], [1.6359339E12, 28842.549999999996], [1.6359342E12, 27878.95]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6359342E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23156.5, "minX": 1000.0, "maxY": 25209.0, "series": [{"data": [[1000.0, 23156.5], [2000.0, 25209.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3262.0, "minX": 1000.0, "maxY": 3754.0, "series": [{"data": [[1000.0, 3754.0], [2000.0, 3262.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.35, "minX": 1.6359339E12, "maxY": 4.166666666666667, "series": [{"data": [[1.63593408E12, 2.65], [1.63593414E12, 4.166666666666667], [1.63593396E12, 3.3333333333333335], [1.63593402E12, 2.35], [1.6359339E12, 2.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63593414E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.6359339E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.63593408E12, 2.65], [1.63593414E12, 3.3333333333333335], [1.63593396E12, 3.3333333333333335], [1.63593402E12, 2.35], [1.6359339E12, 1.6666666666666667], [1.6359342E12, 1.6666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6359342E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.6359339E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.63593408E12, 1.6666666666666667], [1.63593414E12, 1.6666666666666667], [1.63593396E12, 1.6666666666666667], [1.63593402E12, 0.8333333333333334], [1.6359339E12, 0.8333333333333334], [1.6359342E12, 0.8333333333333334]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.63593408E12, 0.9833333333333333], [1.63593414E12, 1.6666666666666667], [1.63593396E12, 1.6666666666666667], [1.63593402E12, 1.5166666666666666], [1.6359339E12, 0.8333333333333334], [1.6359342E12, 0.8333333333333334]], "isOverall": false, "label": "(GET) Registration Page-success", "isController": false}, {"data": [[1.63593408E12, 1.6666666666666667], [1.63593414E12, 1.6666666666666667], [1.63593396E12, 1.6666666666666667], [1.63593402E12, 0.8333333333333334], [1.6359339E12, 0.8333333333333334]], "isOverall": false, "label": "(POST) INSERT New User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6359342E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.6359339E12, "maxY": 5.0, "series": [{"data": [[1.63593408E12, 4.316666666666666], [1.63593414E12, 5.0], [1.63593396E12, 5.0], [1.63593402E12, 3.183333333333333], [1.6359339E12, 2.5], [1.6359342E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6359342E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

