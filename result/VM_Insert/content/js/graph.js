/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2081.0, "minX": 0.0, "maxY": 18883.0, "series": [{"data": [[0.0, 2792.0], [0.1, 3377.0], [0.2, 3410.0], [0.3, 3897.0], [0.4, 4199.0], [0.5, 4485.0], [0.6, 4802.0], [0.7, 5141.0], [0.8, 5142.0], [0.9, 5966.0], [1.0, 6195.0], [1.1, 6588.0], [1.2, 6767.0], [1.3, 7173.0], [1.4, 7424.0], [1.5, 7425.0], [1.6, 7445.0], [1.7, 7494.0], [1.8, 7540.0], [1.9, 7566.0], [2.0, 7593.0], [2.1, 9595.0], [2.2, 9596.0], [2.3, 9606.0], [2.4, 9622.0], [2.5, 9635.0], [2.6, 9653.0], [2.7, 9676.0], [2.8, 9677.0], [2.9, 9680.0], [3.0, 9686.0], [3.1, 9691.0], [3.2, 9694.0], [3.3, 9698.0], [3.4, 9698.0], [3.5, 9699.0], [3.6, 9713.0], [3.7, 9716.0], [3.8, 9719.0], [3.9, 9723.0], [4.0, 9724.0], [4.1, 9733.0], [4.2, 9734.0], [4.3, 9740.0], [4.4, 9741.0], [4.5, 9753.0], [4.6, 9758.0], [4.7, 9759.0], [4.8, 9762.0], [4.9, 9763.0], [5.0, 9767.0], [5.1, 9771.0], [5.2, 9776.0], [5.3, 9776.0], [5.4, 9788.0], [5.5, 9788.0], [5.6, 9794.0], [5.7, 9796.0], [5.8, 9798.0], [5.9, 9799.0], [6.0, 9803.0], [6.1, 9806.0], [6.2, 9808.0], [6.3, 9809.0], [6.4, 9811.0], [6.5, 9811.0], [6.6, 9815.0], [6.7, 9815.0], [6.8, 9816.0], [6.9, 9819.0], [7.0, 9826.0], [7.1, 9827.0], [7.2, 9829.0], [7.3, 9830.0], [7.4, 9834.0], [7.5, 9837.0], [7.6, 9839.0], [7.7, 9849.0], [7.8, 9850.0], [7.9, 9851.0], [8.0, 9852.0], [8.1, 9854.0], [8.2, 9855.0], [8.3, 9855.0], [8.4, 9859.0], [8.5, 9859.0], [8.6, 9864.0], [8.7, 9866.0], [8.8, 9870.0], [8.9, 9875.0], [9.0, 9876.0], [9.1, 9877.0], [9.2, 9877.0], [9.3, 9881.0], [9.4, 9885.0], [9.5, 9888.0], [9.6, 9890.0], [9.7, 9890.0], [9.8, 9891.0], [9.9, 9893.0], [10.0, 9893.0], [10.1, 9894.0], [10.2, 9896.0], [10.3, 9898.0], [10.4, 9900.0], [10.5, 9900.0], [10.6, 9901.0], [10.7, 9902.0], [10.8, 9902.0], [10.9, 9903.0], [11.0, 9903.0], [11.1, 9908.0], [11.2, 9912.0], [11.3, 9913.0], [11.4, 9914.0], [11.5, 9916.0], [11.6, 9919.0], [11.7, 9925.0], [11.8, 9925.0], [11.9, 9927.0], [12.0, 9927.0], [12.1, 9929.0], [12.2, 9930.0], [12.3, 9930.0], [12.4, 9931.0], [12.5, 9931.0], [12.6, 9937.0], [12.7, 9937.0], [12.8, 9937.0], [12.9, 9942.0], [13.0, 9942.0], [13.1, 9947.0], [13.2, 9947.0], [13.3, 9948.0], [13.4, 9948.0], [13.5, 9949.0], [13.6, 9950.0], [13.7, 9951.0], [13.8, 9956.0], [13.9, 9957.0], [14.0, 9958.0], [14.1, 9958.0], [14.2, 9963.0], [14.3, 9963.0], [14.4, 9964.0], [14.5, 9964.0], [14.6, 9965.0], [14.7, 9966.0], [14.8, 9968.0], [14.9, 9968.0], [15.0, 9968.0], [15.1, 9971.0], [15.2, 9972.0], [15.3, 9976.0], [15.4, 9977.0], [15.5, 9977.0], [15.6, 9980.0], [15.7, 9980.0], [15.8, 9981.0], [15.9, 9981.0], [16.0, 9983.0], [16.1, 9984.0], [16.2, 9984.0], [16.3, 9985.0], [16.4, 9985.0], [16.5, 9986.0], [16.6, 9986.0], [16.7, 9989.0], [16.8, 9990.0], [16.9, 9993.0], [17.0, 9994.0], [17.1, 9995.0], [17.2, 9995.0], [17.3, 9996.0], [17.4, 9998.0], [17.5, 9999.0], [17.6, 10001.0], [17.7, 10001.0], [17.8, 10004.0], [17.9, 10004.0], [18.0, 10007.0], [18.1, 10008.0], [18.2, 10008.0], [18.3, 10013.0], [18.4, 10014.0], [18.5, 10015.0], [18.6, 10015.0], [18.7, 10016.0], [18.8, 10017.0], [18.9, 10018.0], [19.0, 10019.0], [19.1, 10020.0], [19.2, 10023.0], [19.3, 10023.0], [19.4, 10025.0], [19.5, 10026.0], [19.6, 10027.0], [19.7, 10027.0], [19.8, 10028.0], [19.9, 10029.0], [20.0, 10030.0], [20.1, 10033.0], [20.2, 10033.0], [20.3, 10034.0], [20.4, 10034.0], [20.5, 10037.0], [20.6, 10037.0], [20.7, 10039.0], [20.8, 10039.0], [20.9, 10043.0], [21.0, 10044.0], [21.1, 10046.0], [21.2, 10050.0], [21.3, 10051.0], [21.4, 10051.0], [21.5, 10052.0], [21.6, 10053.0], [21.7, 10053.0], [21.8, 10054.0], [21.9, 10055.0], [22.0, 10055.0], [22.1, 10057.0], [22.2, 10059.0], [22.3, 10061.0], [22.4, 10062.0], [22.5, 10063.0], [22.6, 10063.0], [22.7, 10064.0], [22.8, 10064.0], [22.9, 10065.0], [23.0, 10068.0], [23.1, 10069.0], [23.2, 10072.0], [23.3, 10072.0], [23.4, 10074.0], [23.5, 10075.0], [23.6, 10078.0], [23.7, 10078.0], [23.8, 10079.0], [23.9, 10081.0], [24.0, 10081.0], [24.1, 10084.0], [24.2, 10087.0], [24.3, 10088.0], [24.4, 10088.0], [24.5, 10090.0], [24.6, 10091.0], [24.7, 10091.0], [24.8, 10093.0], [24.9, 10094.0], [25.0, 10096.0], [25.1, 10096.0], [25.2, 10097.0], [25.3, 10097.0], [25.4, 10098.0], [25.5, 10100.0], [25.6, 10100.0], [25.7, 10103.0], [25.8, 10103.0], [25.9, 10105.0], [26.0, 10105.0], [26.1, 10107.0], [26.2, 10107.0], [26.3, 10108.0], [26.4, 10109.0], [26.5, 10110.0], [26.6, 10112.0], [26.7, 10112.0], [26.8, 10113.0], [26.9, 10113.0], [27.0, 10114.0], [27.1, 10115.0], [27.2, 10116.0], [27.3, 10116.0], [27.4, 10117.0], [27.5, 10117.0], [27.6, 10117.0], [27.7, 10118.0], [27.8, 10118.0], [27.9, 10119.0], [28.0, 10119.0], [28.1, 10121.0], [28.2, 10121.0], [28.3, 10123.0], [28.4, 10123.0], [28.5, 10123.0], [28.6, 10124.0], [28.7, 10125.0], [28.8, 10126.0], [28.9, 10127.0], [29.0, 10128.0], [29.1, 10129.0], [29.2, 10129.0], [29.3, 10130.0], [29.4, 10131.0], [29.5, 10132.0], [29.6, 10133.0], [29.7, 10135.0], [29.8, 10135.0], [29.9, 10136.0], [30.0, 10136.0], [30.1, 10138.0], [30.2, 10142.0], [30.3, 10142.0], [30.4, 10142.0], [30.5, 10143.0], [30.6, 10144.0], [30.7, 10145.0], [30.8, 10146.0], [30.9, 10146.0], [31.0, 10146.0], [31.1, 10148.0], [31.2, 10148.0], [31.3, 10149.0], [31.4, 10149.0], [31.5, 10150.0], [31.6, 10151.0], [31.7, 10151.0], [31.8, 10152.0], [31.9, 10152.0], [32.0, 10152.0], [32.1, 10153.0], [32.2, 10153.0], [32.3, 10153.0], [32.4, 10154.0], [32.5, 10155.0], [32.6, 10157.0], [32.7, 10159.0], [32.8, 10159.0], [32.9, 10160.0], [33.0, 10161.0], [33.1, 10161.0], [33.2, 10162.0], [33.3, 10163.0], [33.4, 10163.0], [33.5, 10164.0], [33.6, 10166.0], [33.7, 10167.0], [33.8, 10168.0], [33.9, 10169.0], [34.0, 10170.0], [34.1, 10171.0], [34.2, 10172.0], [34.3, 10172.0], [34.4, 10174.0], [34.5, 10174.0], [34.6, 10176.0], [34.7, 10178.0], [34.8, 10178.0], [34.9, 10179.0], [35.0, 10180.0], [35.1, 10182.0], [35.2, 10182.0], [35.3, 10184.0], [35.4, 10184.0], [35.5, 10185.0], [35.6, 10186.0], [35.7, 10187.0], [35.8, 10187.0], [35.9, 10187.0], [36.0, 10188.0], [36.1, 10189.0], [36.2, 10189.0], [36.3, 10189.0], [36.4, 10189.0], [36.5, 10191.0], [36.6, 10191.0], [36.7, 10192.0], [36.8, 10193.0], [36.9, 10195.0], [37.0, 10196.0], [37.1, 10197.0], [37.2, 10197.0], [37.3, 10198.0], [37.4, 10199.0], [37.5, 10200.0], [37.6, 10200.0], [37.7, 10201.0], [37.8, 10201.0], [37.9, 10202.0], [38.0, 10205.0], [38.1, 10206.0], [38.2, 10206.0], [38.3, 10206.0], [38.4, 10207.0], [38.5, 10208.0], [38.6, 10208.0], [38.7, 10209.0], [38.8, 10209.0], [38.9, 10210.0], [39.0, 10210.0], [39.1, 10211.0], [39.2, 10212.0], [39.3, 10212.0], [39.4, 10213.0], [39.5, 10213.0], [39.6, 10215.0], [39.7, 10215.0], [39.8, 10215.0], [39.9, 10216.0], [40.0, 10216.0], [40.1, 10216.0], [40.2, 10217.0], [40.3, 10218.0], [40.4, 10219.0], [40.5, 10221.0], [40.6, 10221.0], [40.7, 10221.0], [40.8, 10223.0], [40.9, 10224.0], [41.0, 10225.0], [41.1, 10225.0], [41.2, 10226.0], [41.3, 10226.0], [41.4, 10226.0], [41.5, 10227.0], [41.6, 10227.0], [41.7, 10227.0], [41.8, 10228.0], [41.9, 10230.0], [42.0, 10232.0], [42.1, 10232.0], [42.2, 10232.0], [42.3, 10233.0], [42.4, 10234.0], [42.5, 10235.0], [42.6, 10235.0], [42.7, 10236.0], [42.8, 10237.0], [42.9, 10237.0], [43.0, 10239.0], [43.1, 10239.0], [43.2, 10239.0], [43.3, 10240.0], [43.4, 10241.0], [43.5, 10242.0], [43.6, 10242.0], [43.7, 10242.0], [43.8, 10242.0], [43.9, 10243.0], [44.0, 10244.0], [44.1, 10244.0], [44.2, 10245.0], [44.3, 10245.0], [44.4, 10246.0], [44.5, 10247.0], [44.6, 10248.0], [44.7, 10248.0], [44.8, 10249.0], [44.9, 10249.0], [45.0, 10250.0], [45.1, 10251.0], [45.2, 10251.0], [45.3, 10253.0], [45.4, 10255.0], [45.5, 10256.0], [45.6, 10258.0], [45.7, 10259.0], [45.8, 10260.0], [45.9, 10261.0], [46.0, 10261.0], [46.1, 10262.0], [46.2, 10262.0], [46.3, 10263.0], [46.4, 10263.0], [46.5, 10263.0], [46.6, 10265.0], [46.7, 10265.0], [46.8, 10266.0], [46.9, 10266.0], [47.0, 10266.0], [47.1, 10266.0], [47.2, 10269.0], [47.3, 10269.0], [47.4, 10270.0], [47.5, 10271.0], [47.6, 10271.0], [47.7, 10272.0], [47.8, 10272.0], [47.9, 10273.0], [48.0, 10273.0], [48.1, 10273.0], [48.2, 10273.0], [48.3, 10273.0], [48.4, 10274.0], [48.5, 10274.0], [48.6, 10275.0], [48.7, 10276.0], [48.8, 10276.0], [48.9, 10278.0], [49.0, 10278.0], [49.1, 10279.0], [49.2, 10279.0], [49.3, 10279.0], [49.4, 10280.0], [49.5, 10281.0], [49.6, 10281.0], [49.7, 10281.0], [49.8, 10282.0], [49.9, 10284.0], [50.0, 10284.0], [50.1, 10284.0], [50.2, 10285.0], [50.3, 10285.0], [50.4, 10286.0], [50.5, 10286.0], [50.6, 10287.0], [50.7, 10288.0], [50.8, 10288.0], [50.9, 10289.0], [51.0, 10289.0], [51.1, 10290.0], [51.2, 10290.0], [51.3, 10290.0], [51.4, 10291.0], [51.5, 10292.0], [51.6, 10293.0], [51.7, 10294.0], [51.8, 10294.0], [51.9, 10295.0], [52.0, 10295.0], [52.1, 10297.0], [52.2, 10299.0], [52.3, 10299.0], [52.4, 10301.0], [52.5, 10301.0], [52.6, 10302.0], [52.7, 10303.0], [52.8, 10304.0], [52.9, 10307.0], [53.0, 10307.0], [53.1, 10308.0], [53.2, 10308.0], [53.3, 10308.0], [53.4, 10309.0], [53.5, 10309.0], [53.6, 10310.0], [53.7, 10310.0], [53.8, 10312.0], [53.9, 10312.0], [54.0, 10313.0], [54.1, 10313.0], [54.2, 10314.0], [54.3, 10314.0], [54.4, 10314.0], [54.5, 10315.0], [54.6, 10315.0], [54.7, 10317.0], [54.8, 10318.0], [54.9, 10319.0], [55.0, 10319.0], [55.1, 10320.0], [55.2, 10321.0], [55.3, 10321.0], [55.4, 10321.0], [55.5, 10322.0], [55.6, 10323.0], [55.7, 10323.0], [55.8, 10325.0], [55.9, 10325.0], [56.0, 10325.0], [56.1, 10326.0], [56.2, 10329.0], [56.3, 10332.0], [56.4, 10332.0], [56.5, 10333.0], [56.6, 10333.0], [56.7, 10335.0], [56.8, 10335.0], [56.9, 10336.0], [57.0, 10337.0], [57.1, 10339.0], [57.2, 10341.0], [57.3, 10341.0], [57.4, 10343.0], [57.5, 10343.0], [57.6, 10344.0], [57.7, 10344.0], [57.8, 10345.0], [57.9, 10345.0], [58.0, 10347.0], [58.1, 10347.0], [58.2, 10347.0], [58.3, 10347.0], [58.4, 10347.0], [58.5, 10348.0], [58.6, 10349.0], [58.7, 10349.0], [58.8, 10350.0], [58.9, 10351.0], [59.0, 10352.0], [59.1, 10352.0], [59.2, 10353.0], [59.3, 10354.0], [59.4, 10354.0], [59.5, 10355.0], [59.6, 10357.0], [59.7, 10357.0], [59.8, 10359.0], [59.9, 10361.0], [60.0, 10362.0], [60.1, 10364.0], [60.2, 10364.0], [60.3, 10365.0], [60.4, 10365.0], [60.5, 10366.0], [60.6, 10366.0], [60.7, 10367.0], [60.8, 10368.0], [60.9, 10370.0], [61.0, 10371.0], [61.1, 10371.0], [61.2, 10371.0], [61.3, 10371.0], [61.4, 10372.0], [61.5, 10372.0], [61.6, 10373.0], [61.7, 10374.0], [61.8, 10374.0], [61.9, 10376.0], [62.0, 10378.0], [62.1, 10379.0], [62.2, 10379.0], [62.3, 10380.0], [62.4, 10380.0], [62.5, 10380.0], [62.6, 10380.0], [62.7, 10382.0], [62.8, 10383.0], [62.9, 10383.0], [63.0, 10385.0], [63.1, 10385.0], [63.2, 10386.0], [63.3, 10386.0], [63.4, 10387.0], [63.5, 10387.0], [63.6, 10388.0], [63.7, 10389.0], [63.8, 10389.0], [63.9, 10390.0], [64.0, 10391.0], [64.1, 10392.0], [64.2, 10393.0], [64.3, 10393.0], [64.4, 10394.0], [64.5, 10395.0], [64.6, 10395.0], [64.7, 10395.0], [64.8, 10397.0], [64.9, 10398.0], [65.0, 10398.0], [65.1, 10399.0], [65.2, 10399.0], [65.3, 10400.0], [65.4, 10400.0], [65.5, 10400.0], [65.6, 10401.0], [65.7, 10402.0], [65.8, 10402.0], [65.9, 10402.0], [66.0, 10403.0], [66.1, 10404.0], [66.2, 10404.0], [66.3, 10404.0], [66.4, 10405.0], [66.5, 10405.0], [66.6, 10406.0], [66.7, 10407.0], [66.8, 10408.0], [66.9, 10409.0], [67.0, 10410.0], [67.1, 10411.0], [67.2, 10413.0], [67.3, 10413.0], [67.4, 10413.0], [67.5, 10414.0], [67.6, 10417.0], [67.7, 10418.0], [67.8, 10420.0], [67.9, 10420.0], [68.0, 10420.0], [68.1, 10422.0], [68.2, 10424.0], [68.3, 10424.0], [68.4, 10426.0], [68.5, 10426.0], [68.6, 10427.0], [68.7, 10428.0], [68.8, 10428.0], [68.9, 10428.0], [69.0, 10429.0], [69.1, 10430.0], [69.2, 10431.0], [69.3, 10433.0], [69.4, 10434.0], [69.5, 10436.0], [69.6, 10437.0], [69.7, 10438.0], [69.8, 10440.0], [69.9, 10442.0], [70.0, 10442.0], [70.1, 10442.0], [70.2, 10444.0], [70.3, 10444.0], [70.4, 10445.0], [70.5, 10445.0], [70.6, 10446.0], [70.7, 10447.0], [70.8, 10447.0], [70.9, 10447.0], [71.0, 10447.0], [71.1, 10448.0], [71.2, 10448.0], [71.3, 10449.0], [71.4, 10449.0], [71.5, 10451.0], [71.6, 10451.0], [71.7, 10451.0], [71.8, 10451.0], [71.9, 10451.0], [72.0, 10452.0], [72.1, 10453.0], [72.2, 10456.0], [72.3, 10457.0], [72.4, 10458.0], [72.5, 10459.0], [72.6, 10462.0], [72.7, 10462.0], [72.8, 10462.0], [72.9, 10464.0], [73.0, 10466.0], [73.1, 10468.0], [73.2, 10468.0], [73.3, 10469.0], [73.4, 10470.0], [73.5, 10470.0], [73.6, 10471.0], [73.7, 10471.0], [73.8, 10472.0], [73.9, 10473.0], [74.0, 10474.0], [74.1, 10476.0], [74.2, 10477.0], [74.3, 10477.0], [74.4, 10481.0], [74.5, 10482.0], [74.6, 10483.0], [74.7, 10484.0], [74.8, 10484.0], [74.9, 10485.0], [75.0, 10486.0], [75.1, 10486.0], [75.2, 10486.0], [75.3, 10489.0], [75.4, 10489.0], [75.5, 10490.0], [75.6, 10490.0], [75.7, 10491.0], [75.8, 10492.0], [75.9, 10493.0], [76.0, 10495.0], [76.1, 10495.0], [76.2, 10496.0], [76.3, 10498.0], [76.4, 10499.0], [76.5, 10500.0], [76.6, 10502.0], [76.7, 10504.0], [76.8, 10504.0], [76.9, 10505.0], [77.0, 10505.0], [77.1, 10506.0], [77.2, 10506.0], [77.3, 10506.0], [77.4, 10507.0], [77.5, 10507.0], [77.6, 10508.0], [77.7, 10508.0], [77.8, 10510.0], [77.9, 10510.0], [78.0, 10510.0], [78.1, 10514.0], [78.2, 10514.0], [78.3, 10515.0], [78.4, 10516.0], [78.5, 10519.0], [78.6, 10520.0], [78.7, 10522.0], [78.8, 10523.0], [78.9, 10524.0], [79.0, 10524.0], [79.1, 10525.0], [79.2, 10527.0], [79.3, 10528.0], [79.4, 10529.0], [79.5, 10529.0], [79.6, 10530.0], [79.7, 10531.0], [79.8, 10532.0], [79.9, 10534.0], [80.0, 10536.0], [80.1, 10537.0], [80.2, 10537.0], [80.3, 10538.0], [80.4, 10538.0], [80.5, 10539.0], [80.6, 10539.0], [80.7, 10540.0], [80.8, 10541.0], [80.9, 10542.0], [81.0, 10542.0], [81.1, 10543.0], [81.2, 10544.0], [81.3, 10544.0], [81.4, 10545.0], [81.5, 10545.0], [81.6, 10547.0], [81.7, 10548.0], [81.8, 10549.0], [81.9, 10549.0], [82.0, 10549.0], [82.1, 10550.0], [82.2, 10550.0], [82.3, 10552.0], [82.4, 10553.0], [82.5, 10554.0], [82.6, 10554.0], [82.7, 10557.0], [82.8, 10558.0], [82.9, 10558.0], [83.0, 10559.0], [83.1, 10560.0], [83.2, 10561.0], [83.3, 10562.0], [83.4, 10562.0], [83.5, 10563.0], [83.6, 10565.0], [83.7, 10566.0], [83.8, 10566.0], [83.9, 10568.0], [84.0, 10568.0], [84.1, 10573.0], [84.2, 10574.0], [84.3, 10575.0], [84.4, 10575.0], [84.5, 10576.0], [84.6, 10578.0], [84.7, 10578.0], [84.8, 10579.0], [84.9, 10579.0], [85.0, 10581.0], [85.1, 10581.0], [85.2, 10581.0], [85.3, 10583.0], [85.4, 10585.0], [85.5, 10587.0], [85.6, 10587.0], [85.7, 10587.0], [85.8, 10589.0], [85.9, 10590.0], [86.0, 10591.0], [86.1, 10593.0], [86.2, 10593.0], [86.3, 10597.0], [86.4, 10598.0], [86.5, 10599.0], [86.6, 10604.0], [86.7, 10605.0], [86.8, 10610.0], [86.9, 10611.0], [87.0, 10613.0], [87.1, 10614.0], [87.2, 10616.0], [87.3, 10617.0], [87.4, 10617.0], [87.5, 10618.0], [87.6, 10621.0], [87.7, 10626.0], [87.8, 10627.0], [87.9, 10628.0], [88.0, 10628.0], [88.1, 10631.0], [88.2, 10631.0], [88.3, 10632.0], [88.4, 10634.0], [88.5, 10634.0], [88.6, 10639.0], [88.7, 10640.0], [88.8, 10641.0], [88.9, 10642.0], [89.0, 10642.0], [89.1, 10644.0], [89.2, 10645.0], [89.3, 10651.0], [89.4, 10651.0], [89.5, 10660.0], [89.6, 10660.0], [89.7, 10662.0], [89.8, 10664.0], [89.9, 10673.0], [90.0, 10675.0], [90.1, 10677.0], [90.2, 10680.0], [90.3, 10681.0], [90.4, 10682.0], [90.5, 10683.0], [90.6, 10686.0], [90.7, 10687.0], [90.8, 10691.0], [90.9, 10691.0], [91.0, 10692.0], [91.1, 10695.0], [91.2, 10695.0], [91.3, 10702.0], [91.4, 10704.0], [91.5, 10716.0], [91.6, 10716.0], [91.7, 10718.0], [91.8, 10720.0], [91.9, 10721.0], [92.0, 10728.0], [92.1, 10734.0], [92.2, 10739.0], [92.3, 10742.0], [92.4, 10745.0], [92.5, 10745.0], [92.6, 10746.0], [92.7, 10750.0], [92.8, 10750.0], [92.9, 10752.0], [93.0, 10755.0], [93.1, 10761.0], [93.2, 10762.0], [93.3, 10767.0], [93.4, 10779.0], [93.5, 10783.0], [93.6, 10792.0], [93.7, 10794.0], [93.8, 10798.0], [93.9, 10798.0], [94.0, 10806.0], [94.1, 10813.0], [94.2, 10820.0], [94.3, 10821.0], [94.4, 10824.0], [94.5, 10827.0], [94.6, 10839.0], [94.7, 10846.0], [94.8, 10848.0], [94.9, 10860.0], [95.0, 10860.0], [95.1, 10891.0], [95.2, 10896.0], [95.3, 10912.0], [95.4, 10932.0], [95.5, 10961.0], [95.6, 10967.0], [95.7, 10992.0], [95.8, 11029.0], [95.9, 11047.0], [96.0, 11116.0], [96.1, 11279.0], [96.2, 13320.0], [96.3, 13323.0], [96.4, 13346.0], [96.5, 13862.0], [96.6, 13911.0], [96.7, 14486.0], [96.8, 14690.0], [96.9, 14844.0], [97.0, 14882.0], [97.1, 15260.0], [97.2, 15451.0], [97.3, 15521.0], [97.4, 15533.0], [97.5, 15663.0], [97.6, 15762.0], [97.7, 15821.0], [97.8, 15863.0], [97.9, 15982.0], [98.0, 16066.0], [98.1, 16116.0], [98.2, 16218.0], [98.3, 16321.0], [98.4, 16332.0], [98.5, 16464.0], [98.6, 16517.0], [98.7, 16542.0], [98.8, 16576.0], [98.9, 16612.0], [99.0, 16700.0], [99.1, 16722.0], [99.2, 16791.0], [99.3, 16817.0], [99.4, 16905.0], [99.5, 16990.0], [99.6, 17090.0], [99.7, 17236.0], [99.8, 17407.0], [99.9, 17503.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 2081.0], [0.1, 2096.0], [0.2, 2135.0], [0.3, 2186.0], [0.4, 2193.0], [0.5, 2207.0], [0.6, 2209.0], [0.7, 2210.0], [0.8, 2224.0], [0.9, 2229.0], [1.0, 2230.0], [1.1, 2250.0], [1.2, 2259.0], [1.3, 2264.0], [1.4, 2273.0], [1.5, 2277.0], [1.6, 2278.0], [1.7, 2284.0], [1.8, 2287.0], [1.9, 2287.0], [2.0, 2289.0], [2.1, 2290.0], [2.2, 2294.0], [2.3, 2303.0], [2.4, 2304.0], [2.5, 2306.0], [2.6, 2308.0], [2.7, 2313.0], [2.8, 2315.0], [2.9, 2319.0], [3.0, 2320.0], [3.1, 2322.0], [3.2, 2333.0], [3.3, 2335.0], [3.4, 2337.0], [3.5, 2338.0], [3.6, 2340.0], [3.7, 2348.0], [3.8, 2348.0], [3.9, 2350.0], [4.0, 2350.0], [4.1, 2352.0], [4.2, 2352.0], [4.3, 2354.0], [4.4, 2362.0], [4.5, 2362.0], [4.6, 2366.0], [4.7, 2375.0], [4.8, 2375.0], [4.9, 2379.0], [5.0, 2380.0], [5.1, 2381.0], [5.2, 2385.0], [5.3, 2388.0], [5.4, 2390.0], [5.5, 2393.0], [5.6, 2393.0], [5.7, 2394.0], [5.8, 2395.0], [5.9, 2400.0], [6.0, 2401.0], [6.1, 2401.0], [6.2, 2401.0], [6.3, 2403.0], [6.4, 2404.0], [6.5, 2407.0], [6.6, 2407.0], [6.7, 2409.0], [6.8, 2410.0], [6.9, 2410.0], [7.0, 2412.0], [7.1, 2412.0], [7.2, 2414.0], [7.3, 2418.0], [7.4, 2419.0], [7.5, 2421.0], [7.6, 2422.0], [7.7, 2424.0], [7.8, 2425.0], [7.9, 2425.0], [8.0, 2426.0], [8.1, 2429.0], [8.2, 2430.0], [8.3, 2431.0], [8.4, 2431.0], [8.5, 2433.0], [8.6, 2435.0], [8.7, 2438.0], [8.8, 2439.0], [8.9, 2440.0], [9.0, 2440.0], [9.1, 2441.0], [9.2, 2441.0], [9.3, 2441.0], [9.4, 2442.0], [9.5, 2442.0], [9.6, 2442.0], [9.7, 2444.0], [9.8, 2444.0], [9.9, 2445.0], [10.0, 2448.0], [10.1, 2449.0], [10.2, 2450.0], [10.3, 2450.0], [10.4, 2451.0], [10.5, 2454.0], [10.6, 2454.0], [10.7, 2455.0], [10.8, 2457.0], [10.9, 2460.0], [11.0, 2461.0], [11.1, 2462.0], [11.2, 2466.0], [11.3, 2467.0], [11.4, 2468.0], [11.5, 2469.0], [11.6, 2471.0], [11.7, 2474.0], [11.8, 2474.0], [11.9, 2477.0], [12.0, 2478.0], [12.1, 2481.0], [12.2, 2481.0], [12.3, 2484.0], [12.4, 2484.0], [12.5, 2486.0], [12.6, 2486.0], [12.7, 2487.0], [12.8, 2487.0], [12.9, 2490.0], [13.0, 2491.0], [13.1, 2492.0], [13.2, 2492.0], [13.3, 2493.0], [13.4, 2494.0], [13.5, 2496.0], [13.6, 2496.0], [13.7, 2498.0], [13.8, 2498.0], [13.9, 2499.0], [14.0, 2499.0], [14.1, 2499.0], [14.2, 2500.0], [14.3, 2500.0], [14.4, 2501.0], [14.5, 2501.0], [14.6, 2502.0], [14.7, 2503.0], [14.8, 2504.0], [14.9, 2504.0], [15.0, 2504.0], [15.1, 2504.0], [15.2, 2507.0], [15.3, 2507.0], [15.4, 2510.0], [15.5, 2511.0], [15.6, 2512.0], [15.7, 2513.0], [15.8, 2514.0], [15.9, 2515.0], [16.0, 2515.0], [16.1, 2516.0], [16.2, 2518.0], [16.3, 2518.0], [16.4, 2518.0], [16.5, 2519.0], [16.6, 2519.0], [16.7, 2520.0], [16.8, 2520.0], [16.9, 2521.0], [17.0, 2522.0], [17.1, 2522.0], [17.2, 2523.0], [17.3, 2523.0], [17.4, 2526.0], [17.5, 2527.0], [17.6, 2527.0], [17.7, 2528.0], [17.8, 2528.0], [17.9, 2528.0], [18.0, 2529.0], [18.1, 2531.0], [18.2, 2532.0], [18.3, 2534.0], [18.4, 2534.0], [18.5, 2534.0], [18.6, 2536.0], [18.7, 2537.0], [18.8, 2539.0], [18.9, 2539.0], [19.0, 2540.0], [19.1, 2541.0], [19.2, 2541.0], [19.3, 2542.0], [19.4, 2542.0], [19.5, 2543.0], [19.6, 2544.0], [19.7, 2544.0], [19.8, 2544.0], [19.9, 2544.0], [20.0, 2545.0], [20.1, 2546.0], [20.2, 2547.0], [20.3, 2547.0], [20.4, 2548.0], [20.5, 2549.0], [20.6, 2549.0], [20.7, 2551.0], [20.8, 2551.0], [20.9, 2552.0], [21.0, 2553.0], [21.1, 2553.0], [21.2, 2553.0], [21.3, 2555.0], [21.4, 2555.0], [21.5, 2555.0], [21.6, 2556.0], [21.7, 2559.0], [21.8, 2560.0], [21.9, 2561.0], [22.0, 2561.0], [22.1, 2562.0], [22.2, 2564.0], [22.3, 2565.0], [22.4, 2566.0], [22.5, 2567.0], [22.6, 2569.0], [22.7, 2569.0], [22.8, 2569.0], [22.9, 2569.0], [23.0, 2570.0], [23.1, 2572.0], [23.2, 2572.0], [23.3, 2572.0], [23.4, 2575.0], [23.5, 2576.0], [23.6, 2577.0], [23.7, 2579.0], [23.8, 2580.0], [23.9, 2580.0], [24.0, 2581.0], [24.1, 2582.0], [24.2, 2582.0], [24.3, 2584.0], [24.4, 2584.0], [24.5, 2584.0], [24.6, 2585.0], [24.7, 2586.0], [24.8, 2587.0], [24.9, 2587.0], [25.0, 2589.0], [25.1, 2590.0], [25.2, 2590.0], [25.3, 2592.0], [25.4, 2592.0], [25.5, 2593.0], [25.6, 2593.0], [25.7, 2594.0], [25.8, 2596.0], [25.9, 2596.0], [26.0, 2599.0], [26.1, 2600.0], [26.2, 2601.0], [26.3, 2602.0], [26.4, 2602.0], [26.5, 2603.0], [26.6, 2603.0], [26.7, 2604.0], [26.8, 2604.0], [26.9, 2604.0], [27.0, 2607.0], [27.1, 2607.0], [27.2, 2609.0], [27.3, 2610.0], [27.4, 2610.0], [27.5, 2611.0], [27.6, 2612.0], [27.7, 2612.0], [27.8, 2613.0], [27.9, 2614.0], [28.0, 2615.0], [28.1, 2615.0], [28.2, 2617.0], [28.3, 2617.0], [28.4, 2617.0], [28.5, 2618.0], [28.6, 2618.0], [28.7, 2619.0], [28.8, 2620.0], [28.9, 2620.0], [29.0, 2620.0], [29.1, 2622.0], [29.2, 2622.0], [29.3, 2622.0], [29.4, 2623.0], [29.5, 2624.0], [29.6, 2625.0], [29.7, 2625.0], [29.8, 2625.0], [29.9, 2626.0], [30.0, 2626.0], [30.1, 2627.0], [30.2, 2629.0], [30.3, 2630.0], [30.4, 2631.0], [30.5, 2631.0], [30.6, 2632.0], [30.7, 2634.0], [30.8, 2636.0], [30.9, 2636.0], [31.0, 2637.0], [31.1, 2637.0], [31.2, 2637.0], [31.3, 2638.0], [31.4, 2639.0], [31.5, 2641.0], [31.6, 2642.0], [31.7, 2642.0], [31.8, 2643.0], [31.9, 2643.0], [32.0, 2643.0], [32.1, 2644.0], [32.2, 2644.0], [32.3, 2645.0], [32.4, 2645.0], [32.5, 2646.0], [32.6, 2648.0], [32.7, 2649.0], [32.8, 2649.0], [32.9, 2649.0], [33.0, 2652.0], [33.1, 2653.0], [33.2, 2653.0], [33.3, 2655.0], [33.4, 2655.0], [33.5, 2656.0], [33.6, 2657.0], [33.7, 2658.0], [33.8, 2658.0], [33.9, 2659.0], [34.0, 2659.0], [34.1, 2659.0], [34.2, 2659.0], [34.3, 2659.0], [34.4, 2661.0], [34.5, 2661.0], [34.6, 2662.0], [34.7, 2663.0], [34.8, 2663.0], [34.9, 2664.0], [35.0, 2664.0], [35.1, 2665.0], [35.2, 2666.0], [35.3, 2666.0], [35.4, 2667.0], [35.5, 2668.0], [35.6, 2669.0], [35.7, 2670.0], [35.8, 2670.0], [35.9, 2671.0], [36.0, 2671.0], [36.1, 2671.0], [36.2, 2672.0], [36.3, 2674.0], [36.4, 2674.0], [36.5, 2675.0], [36.6, 2676.0], [36.7, 2676.0], [36.8, 2677.0], [36.9, 2681.0], [37.0, 2682.0], [37.1, 2683.0], [37.2, 2683.0], [37.3, 2684.0], [37.4, 2684.0], [37.5, 2685.0], [37.6, 2685.0], [37.7, 2685.0], [37.8, 2686.0], [37.9, 2686.0], [38.0, 2687.0], [38.1, 2687.0], [38.2, 2688.0], [38.3, 2688.0], [38.4, 2689.0], [38.5, 2689.0], [38.6, 2689.0], [38.7, 2689.0], [38.8, 2690.0], [38.9, 2691.0], [39.0, 2693.0], [39.1, 2693.0], [39.2, 2695.0], [39.3, 2695.0], [39.4, 2697.0], [39.5, 2699.0], [39.6, 2699.0], [39.7, 2700.0], [39.8, 2702.0], [39.9, 2702.0], [40.0, 2703.0], [40.1, 2703.0], [40.2, 2704.0], [40.3, 2705.0], [40.4, 2705.0], [40.5, 2707.0], [40.6, 2707.0], [40.7, 2708.0], [40.8, 2708.0], [40.9, 2710.0], [41.0, 2710.0], [41.1, 2711.0], [41.2, 2711.0], [41.3, 2711.0], [41.4, 2713.0], [41.5, 2714.0], [41.6, 2714.0], [41.7, 2715.0], [41.8, 2715.0], [41.9, 2717.0], [42.0, 2717.0], [42.1, 2717.0], [42.2, 2717.0], [42.3, 2718.0], [42.4, 2724.0], [42.5, 2725.0], [42.6, 2726.0], [42.7, 2727.0], [42.8, 2729.0], [42.9, 2729.0], [43.0, 2729.0], [43.1, 2730.0], [43.2, 2731.0], [43.3, 2731.0], [43.4, 2733.0], [43.5, 2733.0], [43.6, 2733.0], [43.7, 2733.0], [43.8, 2733.0], [43.9, 2734.0], [44.0, 2734.0], [44.1, 2734.0], [44.2, 2735.0], [44.3, 2736.0], [44.4, 2737.0], [44.5, 2738.0], [44.6, 2738.0], [44.7, 2739.0], [44.8, 2740.0], [44.9, 2740.0], [45.0, 2740.0], [45.1, 2740.0], [45.2, 2741.0], [45.3, 2742.0], [45.4, 2743.0], [45.5, 2743.0], [45.6, 2744.0], [45.7, 2745.0], [45.8, 2746.0], [45.9, 2747.0], [46.0, 2748.0], [46.1, 2749.0], [46.2, 2749.0], [46.3, 2749.0], [46.4, 2750.0], [46.5, 2750.0], [46.6, 2751.0], [46.7, 2752.0], [46.8, 2752.0], [46.9, 2754.0], [47.0, 2755.0], [47.1, 2755.0], [47.2, 2757.0], [47.3, 2758.0], [47.4, 2758.0], [47.5, 2759.0], [47.6, 2759.0], [47.7, 2760.0], [47.8, 2760.0], [47.9, 2761.0], [48.0, 2761.0], [48.1, 2762.0], [48.2, 2764.0], [48.3, 2765.0], [48.4, 2767.0], [48.5, 2767.0], [48.6, 2767.0], [48.7, 2768.0], [48.8, 2769.0], [48.9, 2769.0], [49.0, 2771.0], [49.1, 2771.0], [49.2, 2771.0], [49.3, 2772.0], [49.4, 2772.0], [49.5, 2773.0], [49.6, 2774.0], [49.7, 2774.0], [49.8, 2775.0], [49.9, 2776.0], [50.0, 2776.0], [50.1, 2777.0], [50.2, 2777.0], [50.3, 2778.0], [50.4, 2780.0], [50.5, 2781.0], [50.6, 2782.0], [50.7, 2782.0], [50.8, 2782.0], [50.9, 2783.0], [51.0, 2784.0], [51.1, 2784.0], [51.2, 2785.0], [51.3, 2786.0], [51.4, 2787.0], [51.5, 2788.0], [51.6, 2788.0], [51.7, 2788.0], [51.8, 2788.0], [51.9, 2788.0], [52.0, 2790.0], [52.1, 2790.0], [52.2, 2791.0], [52.3, 2791.0], [52.4, 2792.0], [52.5, 2793.0], [52.6, 2793.0], [52.7, 2795.0], [52.8, 2795.0], [52.9, 2796.0], [53.0, 2796.0], [53.1, 2797.0], [53.2, 2798.0], [53.3, 2798.0], [53.4, 2799.0], [53.5, 2800.0], [53.6, 2801.0], [53.7, 2801.0], [53.8, 2804.0], [53.9, 2805.0], [54.0, 2806.0], [54.1, 2806.0], [54.2, 2807.0], [54.3, 2807.0], [54.4, 2807.0], [54.5, 2808.0], [54.6, 2810.0], [54.7, 2810.0], [54.8, 2812.0], [54.9, 2812.0], [55.0, 2813.0], [55.1, 2815.0], [55.2, 2815.0], [55.3, 2815.0], [55.4, 2816.0], [55.5, 2817.0], [55.6, 2817.0], [55.7, 2817.0], [55.8, 2819.0], [55.9, 2819.0], [56.0, 2819.0], [56.1, 2820.0], [56.2, 2820.0], [56.3, 2821.0], [56.4, 2821.0], [56.5, 2823.0], [56.6, 2824.0], [56.7, 2824.0], [56.8, 2825.0], [56.9, 2826.0], [57.0, 2827.0], [57.1, 2828.0], [57.2, 2828.0], [57.3, 2832.0], [57.4, 2833.0], [57.5, 2835.0], [57.6, 2835.0], [57.7, 2837.0], [57.8, 2838.0], [57.9, 2838.0], [58.0, 2839.0], [58.1, 2842.0], [58.2, 2843.0], [58.3, 2843.0], [58.4, 2843.0], [58.5, 2845.0], [58.6, 2846.0], [58.7, 2846.0], [58.8, 2847.0], [58.9, 2847.0], [59.0, 2847.0], [59.1, 2847.0], [59.2, 2849.0], [59.3, 2850.0], [59.4, 2852.0], [59.5, 2852.0], [59.6, 2853.0], [59.7, 2856.0], [59.8, 2857.0], [59.9, 2857.0], [60.0, 2858.0], [60.1, 2859.0], [60.2, 2859.0], [60.3, 2860.0], [60.4, 2861.0], [60.5, 2861.0], [60.6, 2861.0], [60.7, 2862.0], [60.8, 2863.0], [60.9, 2863.0], [61.0, 2863.0], [61.1, 2864.0], [61.2, 2864.0], [61.3, 2865.0], [61.4, 2865.0], [61.5, 2867.0], [61.6, 2868.0], [61.7, 2870.0], [61.8, 2871.0], [61.9, 2871.0], [62.0, 2871.0], [62.1, 2873.0], [62.2, 2873.0], [62.3, 2875.0], [62.4, 2876.0], [62.5, 2876.0], [62.6, 2877.0], [62.7, 2877.0], [62.8, 2879.0], [62.9, 2880.0], [63.0, 2880.0], [63.1, 2881.0], [63.2, 2881.0], [63.3, 2884.0], [63.4, 2884.0], [63.5, 2886.0], [63.6, 2887.0], [63.7, 2887.0], [63.8, 2889.0], [63.9, 2892.0], [64.0, 2892.0], [64.1, 2893.0], [64.2, 2895.0], [64.3, 2901.0], [64.4, 2902.0], [64.5, 2902.0], [64.6, 2902.0], [64.7, 2904.0], [64.8, 2905.0], [64.9, 2905.0], [65.0, 2908.0], [65.1, 2909.0], [65.2, 2911.0], [65.3, 2914.0], [65.4, 2915.0], [65.5, 2917.0], [65.6, 2918.0], [65.7, 2920.0], [65.8, 2920.0], [65.9, 2922.0], [66.0, 2923.0], [66.1, 2924.0], [66.2, 2925.0], [66.3, 2925.0], [66.4, 2926.0], [66.5, 2927.0], [66.6, 2927.0], [66.7, 2927.0], [66.8, 2928.0], [66.9, 2930.0], [67.0, 2930.0], [67.1, 2932.0], [67.2, 2932.0], [67.3, 2933.0], [67.4, 2936.0], [67.5, 2936.0], [67.6, 2937.0], [67.7, 2937.0], [67.8, 2940.0], [67.9, 2940.0], [68.0, 2941.0], [68.1, 2942.0], [68.2, 2945.0], [68.3, 2947.0], [68.4, 2948.0], [68.5, 2952.0], [68.6, 2952.0], [68.7, 2952.0], [68.8, 2954.0], [68.9, 2955.0], [69.0, 2960.0], [69.1, 2961.0], [69.2, 2962.0], [69.3, 2963.0], [69.4, 2964.0], [69.5, 2965.0], [69.6, 2965.0], [69.7, 2968.0], [69.8, 2969.0], [69.9, 2969.0], [70.0, 2971.0], [70.1, 2971.0], [70.2, 2972.0], [70.3, 2973.0], [70.4, 2975.0], [70.5, 2979.0], [70.6, 2980.0], [70.7, 2983.0], [70.8, 2984.0], [70.9, 2986.0], [71.0, 2987.0], [71.1, 2988.0], [71.2, 2994.0], [71.3, 2995.0], [71.4, 2996.0], [71.5, 2996.0], [71.6, 2996.0], [71.7, 2997.0], [71.8, 2997.0], [71.9, 2999.0], [72.0, 2999.0], [72.1, 3000.0], [72.2, 3002.0], [72.3, 3004.0], [72.4, 3007.0], [72.5, 3008.0], [72.6, 3009.0], [72.7, 3010.0], [72.8, 3010.0], [72.9, 3014.0], [73.0, 3014.0], [73.1, 3016.0], [73.2, 3016.0], [73.3, 3018.0], [73.4, 3019.0], [73.5, 3019.0], [73.6, 3020.0], [73.7, 3022.0], [73.8, 3023.0], [73.9, 3025.0], [74.0, 3027.0], [74.1, 3028.0], [74.2, 3029.0], [74.3, 3031.0], [74.4, 3032.0], [74.5, 3032.0], [74.6, 3034.0], [74.7, 3035.0], [74.8, 3037.0], [74.9, 3037.0], [75.0, 3038.0], [75.1, 3040.0], [75.2, 3041.0], [75.3, 3045.0], [75.4, 3045.0], [75.5, 3048.0], [75.6, 3048.0], [75.7, 3050.0], [75.8, 3050.0], [75.9, 3052.0], [76.0, 3052.0], [76.1, 3053.0], [76.2, 3055.0], [76.3, 3055.0], [76.4, 3056.0], [76.5, 3058.0], [76.6, 3058.0], [76.7, 3061.0], [76.8, 3061.0], [76.9, 3062.0], [77.0, 3062.0], [77.1, 3064.0], [77.2, 3065.0], [77.3, 3067.0], [77.4, 3067.0], [77.5, 3068.0], [77.6, 3069.0], [77.7, 3070.0], [77.8, 3070.0], [77.9, 3072.0], [78.0, 3075.0], [78.1, 3075.0], [78.2, 3075.0], [78.3, 3076.0], [78.4, 3079.0], [78.5, 3080.0], [78.6, 3080.0], [78.7, 3081.0], [78.8, 3081.0], [78.9, 3084.0], [79.0, 3086.0], [79.1, 3086.0], [79.2, 3087.0], [79.3, 3087.0], [79.4, 3092.0], [79.5, 3092.0], [79.6, 3093.0], [79.7, 3095.0], [79.8, 3100.0], [79.9, 3101.0], [80.0, 3101.0], [80.1, 3102.0], [80.2, 3102.0], [80.3, 3103.0], [80.4, 3103.0], [80.5, 3103.0], [80.6, 3106.0], [80.7, 3108.0], [80.8, 3108.0], [80.9, 3110.0], [81.0, 3110.0], [81.1, 3112.0], [81.2, 3114.0], [81.3, 3116.0], [81.4, 3119.0], [81.5, 3120.0], [81.6, 3121.0], [81.7, 3121.0], [81.8, 3125.0], [81.9, 3125.0], [82.0, 3126.0], [82.1, 3127.0], [82.2, 3128.0], [82.3, 3129.0], [82.4, 3129.0], [82.5, 3130.0], [82.6, 3130.0], [82.7, 3133.0], [82.8, 3134.0], [82.9, 3135.0], [83.0, 3136.0], [83.1, 3137.0], [83.2, 3139.0], [83.3, 3140.0], [83.4, 3141.0], [83.5, 3142.0], [83.6, 3143.0], [83.7, 3147.0], [83.8, 3148.0], [83.9, 3150.0], [84.0, 3151.0], [84.1, 3152.0], [84.2, 3152.0], [84.3, 3153.0], [84.4, 3156.0], [84.5, 3157.0], [84.6, 3157.0], [84.7, 3159.0], [84.8, 3159.0], [84.9, 3163.0], [85.0, 3165.0], [85.1, 3169.0], [85.2, 3170.0], [85.3, 3171.0], [85.4, 3172.0], [85.5, 3173.0], [85.6, 3178.0], [85.7, 3179.0], [85.8, 3179.0], [85.9, 3182.0], [86.0, 3183.0], [86.1, 3190.0], [86.2, 3190.0], [86.3, 3191.0], [86.4, 3191.0], [86.5, 3192.0], [86.6, 3195.0], [86.7, 3196.0], [86.8, 3198.0], [86.9, 3198.0], [87.0, 3199.0], [87.1, 3199.0], [87.2, 3200.0], [87.3, 3200.0], [87.4, 3203.0], [87.5, 3204.0], [87.6, 3206.0], [87.7, 3206.0], [87.8, 3208.0], [87.9, 3209.0], [88.0, 3213.0], [88.1, 3216.0], [88.2, 3218.0], [88.3, 3219.0], [88.4, 3220.0], [88.5, 3224.0], [88.6, 3226.0], [88.7, 3227.0], [88.8, 3229.0], [88.9, 3230.0], [89.0, 3231.0], [89.1, 3231.0], [89.2, 3232.0], [89.3, 3234.0], [89.4, 3234.0], [89.5, 3238.0], [89.6, 3241.0], [89.7, 3243.0], [89.8, 3245.0], [89.9, 3245.0], [90.0, 3245.0], [90.1, 3245.0], [90.2, 3247.0], [90.3, 3250.0], [90.4, 3250.0], [90.5, 3252.0], [90.6, 3252.0], [90.7, 3253.0], [90.8, 3255.0], [90.9, 3256.0], [91.0, 3256.0], [91.1, 3259.0], [91.2, 3261.0], [91.3, 3264.0], [91.4, 3266.0], [91.5, 3268.0], [91.6, 3273.0], [91.7, 3275.0], [91.8, 3277.0], [91.9, 3279.0], [92.0, 3279.0], [92.1, 3280.0], [92.2, 3285.0], [92.3, 3287.0], [92.4, 3288.0], [92.5, 3289.0], [92.6, 3294.0], [92.7, 3294.0], [92.8, 3294.0], [92.9, 3295.0], [93.0, 3296.0], [93.1, 3298.0], [93.2, 3299.0], [93.3, 3300.0], [93.4, 3301.0], [93.5, 3301.0], [93.6, 3304.0], [93.7, 3306.0], [93.8, 3315.0], [93.9, 3315.0], [94.0, 3318.0], [94.1, 3324.0], [94.2, 3324.0], [94.3, 3328.0], [94.4, 3330.0], [94.5, 3330.0], [94.6, 3332.0], [94.7, 3332.0], [94.8, 3338.0], [94.9, 3339.0], [95.0, 3346.0], [95.1, 3346.0], [95.2, 3350.0], [95.3, 3350.0], [95.4, 3353.0], [95.5, 3357.0], [95.6, 3358.0], [95.7, 3362.0], [95.8, 3367.0], [95.9, 3369.0], [96.0, 3373.0], [96.1, 3380.0], [96.2, 3380.0], [96.3, 3384.0], [96.4, 3386.0], [96.5, 3388.0], [96.6, 3395.0], [96.7, 3395.0], [96.8, 3397.0], [96.9, 3398.0], [97.0, 3401.0], [97.1, 3403.0], [97.2, 3406.0], [97.3, 3408.0], [97.4, 3411.0], [97.5, 3412.0], [97.6, 3424.0], [97.7, 3425.0], [97.8, 3433.0], [97.9, 3442.0], [98.0, 3442.0], [98.1, 3469.0], [98.2, 3470.0], [98.3, 3472.0], [98.4, 3485.0], [98.5, 3485.0], [98.6, 3488.0], [98.7, 3498.0], [98.8, 3505.0], [98.9, 3512.0], [99.0, 3514.0], [99.1, 3601.0], [99.2, 3602.0], [99.3, 3628.0], [99.4, 3649.0], [99.5, 3658.0], [99.6, 8959.0], [99.7, 9186.0], [99.8, 9197.0], [99.9, 9292.0], [100.0, 9310.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 2792.0], [0.1, 3377.0], [0.2, 3410.0], [0.3, 3897.0], [0.4, 4199.0], [0.5, 4485.0], [0.6, 4802.0], [0.7, 5141.0], [0.8, 5142.0], [0.9, 5966.0], [1.0, 6194.0], [1.1, 6454.0], [1.2, 6488.0], [1.3, 6490.0], [1.4, 6501.0], [1.5, 6501.0], [1.6, 6527.0], [1.7, 6537.0], [1.8, 6541.0], [1.9, 6547.0], [2.0, 6549.0], [2.1, 6563.0], [2.2, 6579.0], [2.3, 6584.0], [2.4, 6585.0], [2.5, 6588.0], [2.6, 6590.0], [2.7, 6594.0], [2.8, 6595.0], [2.9, 6602.0], [3.0, 6607.0], [3.1, 6607.0], [3.2, 6615.0], [3.3, 6615.0], [3.4, 6619.0], [3.5, 6620.0], [3.6, 6623.0], [3.7, 6626.0], [3.8, 6628.0], [3.9, 6632.0], [4.0, 6642.0], [4.1, 6647.0], [4.2, 6649.0], [4.3, 6656.0], [4.4, 6657.0], [4.5, 6662.0], [4.6, 6668.0], [4.7, 6676.0], [4.8, 6683.0], [4.9, 6683.0], [5.0, 6688.0], [5.1, 6689.0], [5.2, 6691.0], [5.3, 6697.0], [5.4, 6703.0], [5.5, 6704.0], [5.6, 6705.0], [5.7, 6708.0], [5.8, 6713.0], [5.9, 6725.0], [6.0, 6725.0], [6.1, 6726.0], [6.2, 6726.0], [6.3, 6733.0], [6.4, 6733.0], [6.5, 6741.0], [6.6, 6747.0], [6.7, 6748.0], [6.8, 6756.0], [6.9, 6764.0], [7.0, 6769.0], [7.1, 6769.0], [7.2, 6771.0], [7.3, 6777.0], [7.4, 6778.0], [7.5, 6809.0], [7.6, 6810.0], [7.7, 6812.0], [7.8, 6812.0], [7.9, 6815.0], [8.0, 6815.0], [8.1, 6827.0], [8.2, 6827.0], [8.3, 6828.0], [8.4, 6833.0], [8.5, 6835.0], [8.6, 6837.0], [8.7, 6839.0], [8.8, 6849.0], [8.9, 6850.0], [9.0, 6853.0], [9.1, 6854.0], [9.2, 6858.0], [9.3, 6864.0], [9.4, 6865.0], [9.5, 6877.0], [9.6, 6878.0], [9.7, 6883.0], [9.8, 6884.0], [9.9, 6905.0], [10.0, 6909.0], [10.1, 6913.0], [10.2, 6917.0], [10.3, 6921.0], [10.4, 6923.0], [10.5, 6925.0], [10.6, 6928.0], [10.7, 6930.0], [10.8, 6933.0], [10.9, 6936.0], [11.0, 6938.0], [11.1, 6961.0], [11.2, 6961.0], [11.3, 6965.0], [11.4, 6973.0], [11.5, 6976.0], [11.6, 6976.0], [11.7, 6980.0], [11.8, 6983.0], [11.9, 6985.0], [12.0, 6996.0], [12.1, 6996.0], [12.2, 6998.0], [12.3, 7002.0], [12.4, 7007.0], [12.5, 7008.0], [12.6, 7015.0], [12.7, 7015.0], [12.8, 7016.0], [12.9, 7016.0], [13.0, 7018.0], [13.1, 7020.0], [13.2, 7020.0], [13.3, 7021.0], [13.4, 7022.0], [13.5, 7031.0], [13.6, 7032.0], [13.7, 7035.0], [13.8, 7037.0], [13.9, 7037.0], [14.0, 7049.0], [14.1, 7051.0], [14.2, 7051.0], [14.3, 7054.0], [14.4, 7060.0], [14.5, 7060.0], [14.6, 7061.0], [14.7, 7063.0], [14.8, 7063.0], [14.9, 7063.0], [15.0, 7066.0], [15.1, 7072.0], [15.2, 7072.0], [15.3, 7075.0], [15.4, 7075.0], [15.5, 7076.0], [15.6, 7080.0], [15.7, 7082.0], [15.8, 7084.0], [15.9, 7086.0], [16.0, 7088.0], [16.1, 7089.0], [16.2, 7093.0], [16.3, 7094.0], [16.4, 7094.0], [16.5, 7096.0], [16.6, 7096.0], [16.7, 7098.0], [16.8, 7098.0], [16.9, 7101.0], [17.0, 7103.0], [17.1, 7109.0], [17.2, 7112.0], [17.3, 7112.0], [17.4, 7116.0], [17.5, 7116.0], [17.6, 7120.0], [17.7, 7122.0], [17.8, 7123.0], [17.9, 7124.0], [18.0, 7130.0], [18.1, 7131.0], [18.2, 7132.0], [18.3, 7133.0], [18.4, 7134.0], [18.5, 7135.0], [18.6, 7137.0], [18.7, 7141.0], [18.8, 7141.0], [18.9, 7145.0], [19.0, 7145.0], [19.1, 7146.0], [19.2, 7154.0], [19.3, 7154.0], [19.4, 7159.0], [19.5, 7160.0], [19.6, 7160.0], [19.7, 7161.0], [19.8, 7164.0], [19.9, 7166.0], [20.0, 7166.0], [20.1, 7167.0], [20.2, 7167.0], [20.3, 7169.0], [20.4, 7169.0], [20.5, 7173.0], [20.6, 7173.0], [20.7, 7174.0], [20.8, 7174.0], [20.9, 7174.0], [21.0, 7175.0], [21.1, 7176.0], [21.2, 7176.0], [21.3, 7177.0], [21.4, 7179.0], [21.5, 7180.0], [21.6, 7184.0], [21.7, 7184.0], [21.8, 7188.0], [21.9, 7188.0], [22.0, 7190.0], [22.1, 7192.0], [22.2, 7192.0], [22.3, 7196.0], [22.4, 7196.0], [22.5, 7198.0], [22.6, 7200.0], [22.7, 7201.0], [22.8, 7201.0], [22.9, 7201.0], [23.0, 7202.0], [23.1, 7204.0], [23.2, 7204.0], [23.3, 7205.0], [23.4, 7206.0], [23.5, 7206.0], [23.6, 7209.0], [23.7, 7210.0], [23.8, 7210.0], [23.9, 7212.0], [24.0, 7213.0], [24.1, 7215.0], [24.2, 7216.0], [24.3, 7217.0], [24.4, 7220.0], [24.5, 7220.0], [24.6, 7221.0], [24.7, 7223.0], [24.8, 7225.0], [24.9, 7225.0], [25.0, 7227.0], [25.1, 7228.0], [25.2, 7230.0], [25.3, 7231.0], [25.4, 7234.0], [25.5, 7235.0], [25.6, 7237.0], [25.7, 7238.0], [25.8, 7239.0], [25.9, 7241.0], [26.0, 7241.0], [26.1, 7248.0], [26.2, 7249.0], [26.3, 7252.0], [26.4, 7252.0], [26.5, 7254.0], [26.6, 7256.0], [26.7, 7257.0], [26.8, 7260.0], [26.9, 7260.0], [27.0, 7261.0], [27.1, 7261.0], [27.2, 7265.0], [27.3, 7265.0], [27.4, 7265.0], [27.5, 7267.0], [27.6, 7270.0], [27.7, 7272.0], [27.8, 7274.0], [27.9, 7275.0], [28.0, 7278.0], [28.1, 7279.0], [28.2, 7281.0], [28.3, 7282.0], [28.4, 7284.0], [28.5, 7285.0], [28.6, 7286.0], [28.7, 7288.0], [28.8, 7291.0], [28.9, 7292.0], [29.0, 7294.0], [29.1, 7294.0], [29.2, 7295.0], [29.3, 7297.0], [29.4, 7298.0], [29.5, 7300.0], [29.6, 7302.0], [29.7, 7304.0], [29.8, 7305.0], [29.9, 7306.0], [30.0, 7306.0], [30.1, 7307.0], [30.2, 7309.0], [30.3, 7309.0], [30.4, 7311.0], [30.5, 7311.0], [30.6, 7313.0], [30.7, 7313.0], [30.8, 7315.0], [30.9, 7318.0], [31.0, 7318.0], [31.1, 7321.0], [31.2, 7324.0], [31.3, 7325.0], [31.4, 7327.0], [31.5, 7328.0], [31.6, 7329.0], [31.7, 7331.0], [31.8, 7332.0], [31.9, 7333.0], [32.0, 7338.0], [32.1, 7339.0], [32.2, 7339.0], [32.3, 7339.0], [32.4, 7342.0], [32.5, 7342.0], [32.6, 7343.0], [32.7, 7344.0], [32.8, 7346.0], [32.9, 7349.0], [33.0, 7349.0], [33.1, 7350.0], [33.2, 7350.0], [33.3, 7352.0], [33.4, 7354.0], [33.5, 7356.0], [33.6, 7356.0], [33.7, 7356.0], [33.8, 7359.0], [33.9, 7359.0], [34.0, 7360.0], [34.1, 7360.0], [34.2, 7361.0], [34.3, 7362.0], [34.4, 7363.0], [34.5, 7364.0], [34.6, 7364.0], [34.7, 7367.0], [34.8, 7367.0], [34.9, 7368.0], [35.0, 7369.0], [35.1, 7372.0], [35.2, 7372.0], [35.3, 7374.0], [35.4, 7375.0], [35.5, 7376.0], [35.6, 7377.0], [35.7, 7378.0], [35.8, 7380.0], [35.9, 7380.0], [36.0, 7386.0], [36.1, 7386.0], [36.2, 7386.0], [36.3, 7387.0], [36.4, 7388.0], [36.5, 7388.0], [36.6, 7389.0], [36.7, 7391.0], [36.8, 7391.0], [36.9, 7392.0], [37.0, 7395.0], [37.1, 7398.0], [37.2, 7403.0], [37.3, 7403.0], [37.4, 7404.0], [37.5, 7405.0], [37.6, 7408.0], [37.7, 7408.0], [37.8, 7409.0], [37.9, 7409.0], [38.0, 7410.0], [38.1, 7412.0], [38.2, 7412.0], [38.3, 7413.0], [38.4, 7414.0], [38.5, 7414.0], [38.6, 7414.0], [38.7, 7415.0], [38.8, 7416.0], [38.9, 7417.0], [39.0, 7418.0], [39.1, 7418.0], [39.2, 7419.0], [39.3, 7420.0], [39.4, 7421.0], [39.5, 7421.0], [39.6, 7423.0], [39.7, 7424.0], [39.8, 7425.0], [39.9, 7425.0], [40.0, 7427.0], [40.1, 7427.0], [40.2, 7428.0], [40.3, 7428.0], [40.4, 7429.0], [40.5, 7431.0], [40.6, 7431.0], [40.7, 7434.0], [40.8, 7435.0], [40.9, 7435.0], [41.0, 7436.0], [41.1, 7436.0], [41.2, 7436.0], [41.3, 7437.0], [41.4, 7439.0], [41.5, 7440.0], [41.6, 7440.0], [41.7, 7441.0], [41.8, 7442.0], [41.9, 7442.0], [42.0, 7443.0], [42.1, 7444.0], [42.2, 7444.0], [42.3, 7445.0], [42.4, 7446.0], [42.5, 7446.0], [42.6, 7448.0], [42.7, 7450.0], [42.8, 7450.0], [42.9, 7451.0], [43.0, 7452.0], [43.1, 7452.0], [43.2, 7453.0], [43.3, 7454.0], [43.4, 7454.0], [43.5, 7454.0], [43.6, 7455.0], [43.7, 7456.0], [43.8, 7456.0], [43.9, 7457.0], [44.0, 7459.0], [44.1, 7459.0], [44.2, 7460.0], [44.3, 7463.0], [44.4, 7463.0], [44.5, 7463.0], [44.6, 7464.0], [44.7, 7464.0], [44.8, 7467.0], [44.9, 7467.0], [45.0, 7468.0], [45.1, 7468.0], [45.2, 7470.0], [45.3, 7470.0], [45.4, 7471.0], [45.5, 7473.0], [45.6, 7474.0], [45.7, 7476.0], [45.8, 7477.0], [45.9, 7479.0], [46.0, 7480.0], [46.1, 7481.0], [46.2, 7482.0], [46.3, 7482.0], [46.4, 7483.0], [46.5, 7483.0], [46.6, 7484.0], [46.7, 7487.0], [46.8, 7489.0], [46.9, 7489.0], [47.0, 7489.0], [47.1, 7489.0], [47.2, 7490.0], [47.3, 7491.0], [47.4, 7491.0], [47.5, 7492.0], [47.6, 7493.0], [47.7, 7494.0], [47.8, 7494.0], [47.9, 7494.0], [48.0, 7495.0], [48.1, 7499.0], [48.2, 7500.0], [48.3, 7501.0], [48.4, 7504.0], [48.5, 7505.0], [48.6, 7506.0], [48.7, 7506.0], [48.8, 7507.0], [48.9, 7507.0], [49.0, 7508.0], [49.1, 7509.0], [49.2, 7511.0], [49.3, 7511.0], [49.4, 7511.0], [49.5, 7513.0], [49.6, 7514.0], [49.7, 7515.0], [49.8, 7516.0], [49.9, 7516.0], [50.0, 7518.0], [50.1, 7518.0], [50.2, 7519.0], [50.3, 7520.0], [50.4, 7521.0], [50.5, 7521.0], [50.6, 7521.0], [50.7, 7521.0], [50.8, 7523.0], [50.9, 7524.0], [51.0, 7526.0], [51.1, 7527.0], [51.2, 7527.0], [51.3, 7528.0], [51.4, 7528.0], [51.5, 7530.0], [51.6, 7531.0], [51.7, 7532.0], [51.8, 7532.0], [51.9, 7533.0], [52.0, 7534.0], [52.1, 7534.0], [52.2, 7534.0], [52.3, 7536.0], [52.4, 7537.0], [52.5, 7539.0], [52.6, 7539.0], [52.7, 7540.0], [52.8, 7540.0], [52.9, 7541.0], [53.0, 7541.0], [53.1, 7543.0], [53.2, 7543.0], [53.3, 7544.0], [53.4, 7545.0], [53.5, 7546.0], [53.6, 7547.0], [53.7, 7547.0], [53.8, 7549.0], [53.9, 7549.0], [54.0, 7551.0], [54.1, 7551.0], [54.2, 7551.0], [54.3, 7551.0], [54.4, 7553.0], [54.5, 7554.0], [54.6, 7554.0], [54.7, 7556.0], [54.8, 7558.0], [54.9, 7560.0], [55.0, 7560.0], [55.1, 7564.0], [55.2, 7564.0], [55.3, 7567.0], [55.4, 7568.0], [55.5, 7569.0], [55.6, 7569.0], [55.7, 7570.0], [55.8, 7574.0], [55.9, 7574.0], [56.0, 7577.0], [56.1, 7578.0], [56.2, 7580.0], [56.3, 7581.0], [56.4, 7581.0], [56.5, 7582.0], [56.6, 7584.0], [56.7, 7589.0], [56.8, 7589.0], [56.9, 7590.0], [57.0, 7590.0], [57.1, 7593.0], [57.2, 7593.0], [57.3, 7594.0], [57.4, 7596.0], [57.5, 7597.0], [57.6, 7600.0], [57.7, 7600.0], [57.8, 7602.0], [57.9, 7604.0], [58.0, 7605.0], [58.1, 7605.0], [58.2, 7605.0], [58.3, 7611.0], [58.4, 7612.0], [58.5, 7614.0], [58.6, 7615.0], [58.7, 7615.0], [58.8, 7616.0], [58.9, 7617.0], [59.0, 7617.0], [59.1, 7617.0], [59.2, 7619.0], [59.3, 7620.0], [59.4, 7622.0], [59.5, 7623.0], [59.6, 7625.0], [59.7, 7627.0], [59.8, 7627.0], [59.9, 7627.0], [60.0, 7627.0], [60.1, 7631.0], [60.2, 7634.0], [60.3, 7637.0], [60.4, 7637.0], [60.5, 7638.0], [60.6, 7639.0], [60.7, 7640.0], [60.8, 7640.0], [60.9, 7642.0], [61.0, 7642.0], [61.1, 7643.0], [61.2, 7645.0], [61.3, 7647.0], [61.4, 7647.0], [61.5, 7647.0], [61.6, 7649.0], [61.7, 7649.0], [61.8, 7650.0], [61.9, 7651.0], [62.0, 7651.0], [62.1, 7654.0], [62.2, 7654.0], [62.3, 7656.0], [62.4, 7658.0], [62.5, 7659.0], [62.6, 7660.0], [62.7, 7662.0], [62.8, 7662.0], [62.9, 7663.0], [63.0, 7665.0], [63.1, 7665.0], [63.2, 7669.0], [63.3, 7669.0], [63.4, 7673.0], [63.5, 7675.0], [63.6, 7678.0], [63.7, 7680.0], [63.8, 7681.0], [63.9, 7681.0], [64.0, 7682.0], [64.1, 7686.0], [64.2, 7686.0], [64.3, 7688.0], [64.4, 7688.0], [64.5, 7691.0], [64.6, 7692.0], [64.7, 7693.0], [64.8, 7694.0], [64.9, 7695.0], [65.0, 7697.0], [65.1, 7697.0], [65.2, 7698.0], [65.3, 7698.0], [65.4, 7699.0], [65.5, 7700.0], [65.6, 7700.0], [65.7, 7701.0], [65.8, 7702.0], [65.9, 7703.0], [66.0, 7703.0], [66.1, 7703.0], [66.2, 7704.0], [66.3, 7706.0], [66.4, 7707.0], [66.5, 7708.0], [66.6, 7709.0], [66.7, 7709.0], [66.8, 7714.0], [66.9, 7715.0], [67.0, 7716.0], [67.1, 7717.0], [67.2, 7720.0], [67.3, 7720.0], [67.4, 7721.0], [67.5, 7724.0], [67.6, 7724.0], [67.7, 7727.0], [67.8, 7727.0], [67.9, 7728.0], [68.0, 7729.0], [68.1, 7731.0], [68.2, 7731.0], [68.3, 7731.0], [68.4, 7731.0], [68.5, 7732.0], [68.6, 7733.0], [68.7, 7734.0], [68.8, 7735.0], [68.9, 7736.0], [69.0, 7736.0], [69.1, 7736.0], [69.2, 7737.0], [69.3, 7739.0], [69.4, 7739.0], [69.5, 7742.0], [69.6, 7742.0], [69.7, 7742.0], [69.8, 7743.0], [69.9, 7746.0], [70.0, 7746.0], [70.1, 7746.0], [70.2, 7748.0], [70.3, 7750.0], [70.4, 7750.0], [70.5, 7751.0], [70.6, 7752.0], [70.7, 7752.0], [70.8, 7754.0], [70.9, 7757.0], [71.0, 7758.0], [71.1, 7760.0], [71.2, 7761.0], [71.3, 7763.0], [71.4, 7764.0], [71.5, 7765.0], [71.6, 7765.0], [71.7, 7766.0], [71.8, 7766.0], [71.9, 7767.0], [72.0, 7769.0], [72.1, 7769.0], [72.2, 7771.0], [72.3, 7771.0], [72.4, 7771.0], [72.5, 7771.0], [72.6, 7774.0], [72.7, 7774.0], [72.8, 7774.0], [72.9, 7775.0], [73.0, 7775.0], [73.1, 7777.0], [73.2, 7778.0], [73.3, 7780.0], [73.4, 7781.0], [73.5, 7783.0], [73.6, 7785.0], [73.7, 7787.0], [73.8, 7788.0], [73.9, 7788.0], [74.0, 7791.0], [74.1, 7791.0], [74.2, 7792.0], [74.3, 7792.0], [74.4, 7792.0], [74.5, 7792.0], [74.6, 7793.0], [74.7, 7794.0], [74.8, 7794.0], [74.9, 7796.0], [75.0, 7796.0], [75.1, 7799.0], [75.2, 7800.0], [75.3, 7800.0], [75.4, 7801.0], [75.5, 7801.0], [75.6, 7801.0], [75.7, 7801.0], [75.8, 7803.0], [75.9, 7803.0], [76.0, 7804.0], [76.1, 7805.0], [76.2, 7807.0], [76.3, 7807.0], [76.4, 7808.0], [76.5, 7809.0], [76.6, 7809.0], [76.7, 7812.0], [76.8, 7812.0], [76.9, 7814.0], [77.0, 7814.0], [77.1, 7815.0], [77.2, 7815.0], [77.3, 7816.0], [77.4, 7818.0], [77.5, 7820.0], [77.6, 7824.0], [77.7, 7825.0], [77.8, 7826.0], [77.9, 7826.0], [78.0, 7827.0], [78.1, 7828.0], [78.2, 7829.0], [78.3, 7832.0], [78.4, 7832.0], [78.5, 7834.0], [78.6, 7836.0], [78.7, 7838.0], [78.8, 7839.0], [78.9, 7842.0], [79.0, 7842.0], [79.1, 7843.0], [79.2, 7844.0], [79.3, 7845.0], [79.4, 7849.0], [79.5, 7850.0], [79.6, 7852.0], [79.7, 7852.0], [79.8, 7853.0], [79.9, 7854.0], [80.0, 7856.0], [80.1, 7857.0], [80.2, 7859.0], [80.3, 7861.0], [80.4, 7862.0], [80.5, 7864.0], [80.6, 7864.0], [80.7, 7865.0], [80.8, 7865.0], [80.9, 7866.0], [81.0, 7866.0], [81.1, 7867.0], [81.2, 7868.0], [81.3, 7870.0], [81.4, 7871.0], [81.5, 7871.0], [81.6, 7873.0], [81.7, 7873.0], [81.8, 7876.0], [81.9, 7877.0], [82.0, 7877.0], [82.1, 7877.0], [82.2, 7878.0], [82.3, 7879.0], [82.4, 7880.0], [82.5, 7881.0], [82.6, 7881.0], [82.7, 7883.0], [82.8, 7885.0], [82.9, 7885.0], [83.0, 7888.0], [83.1, 7888.0], [83.2, 7890.0], [83.3, 7891.0], [83.4, 7891.0], [83.5, 7892.0], [83.6, 7894.0], [83.7, 7895.0], [83.8, 7895.0], [83.9, 7897.0], [84.0, 7897.0], [84.1, 7900.0], [84.2, 7900.0], [84.3, 7903.0], [84.4, 7903.0], [84.5, 7904.0], [84.6, 7905.0], [84.7, 7906.0], [84.8, 7907.0], [84.9, 7907.0], [85.0, 7908.0], [85.1, 7908.0], [85.2, 7909.0], [85.3, 7912.0], [85.4, 7913.0], [85.5, 7914.0], [85.6, 7915.0], [85.7, 7918.0], [85.8, 7919.0], [85.9, 7923.0], [86.0, 7923.0], [86.1, 7924.0], [86.2, 7925.0], [86.3, 7926.0], [86.4, 7926.0], [86.5, 7926.0], [86.6, 7928.0], [86.7, 7929.0], [86.8, 7930.0], [86.9, 7930.0], [87.0, 7932.0], [87.1, 7933.0], [87.2, 7938.0], [87.3, 7938.0], [87.4, 7938.0], [87.5, 7940.0], [87.6, 7940.0], [87.7, 7941.0], [87.8, 7942.0], [87.9, 7943.0], [88.0, 7945.0], [88.1, 7949.0], [88.2, 7950.0], [88.3, 7954.0], [88.4, 7955.0], [88.5, 7957.0], [88.6, 7958.0], [88.7, 7960.0], [88.8, 7966.0], [88.9, 7967.0], [89.0, 7971.0], [89.1, 7971.0], [89.2, 7973.0], [89.3, 7979.0], [89.4, 7979.0], [89.5, 7980.0], [89.6, 7980.0], [89.7, 7982.0], [89.8, 7983.0], [89.9, 7986.0], [90.0, 7986.0], [90.1, 7986.0], [90.2, 7992.0], [90.3, 7993.0], [90.4, 7998.0], [90.5, 8000.0], [90.6, 8004.0], [90.7, 8005.0], [90.8, 8007.0], [90.9, 8008.0], [91.0, 8009.0], [91.1, 8009.0], [91.2, 8010.0], [91.3, 8013.0], [91.4, 8013.0], [91.5, 8018.0], [91.6, 8019.0], [91.7, 8020.0], [91.8, 8020.0], [91.9, 8024.0], [92.0, 8028.0], [92.1, 8028.0], [92.2, 8036.0], [92.3, 8036.0], [92.4, 8051.0], [92.5, 8051.0], [92.6, 8056.0], [92.7, 8060.0], [92.8, 8061.0], [92.9, 8064.0], [93.0, 8065.0], [93.1, 8076.0], [93.2, 8079.0], [93.3, 8085.0], [93.4, 8086.0], [93.5, 8087.0], [93.6, 8092.0], [93.7, 8093.0], [93.8, 8097.0], [93.9, 8097.0], [94.0, 8107.0], [94.1, 8107.0], [94.2, 8118.0], [94.3, 8120.0], [94.4, 8132.0], [94.5, 8134.0], [94.6, 8136.0], [94.7, 8141.0], [94.8, 8143.0], [94.9, 8146.0], [95.0, 8147.0], [95.1, 8155.0], [95.2, 8161.0], [95.3, 8163.0], [95.4, 8164.0], [95.5, 8181.0], [95.6, 8188.0], [95.7, 8190.0], [95.8, 8197.0], [95.9, 8200.0], [96.0, 8204.0], [96.1, 8208.0], [96.2, 8214.0], [96.3, 8256.0], [96.4, 8256.0], [96.5, 8367.0], [96.6, 9909.0], [96.7, 9950.0], [96.8, 10381.0], [96.9, 10896.0], [97.0, 10997.0], [97.1, 11542.0], [97.2, 11565.0], [97.3, 11688.0], [97.4, 11809.0], [97.5, 11854.0], [97.6, 12049.0], [97.7, 12132.0], [97.8, 12179.0], [97.9, 12275.0], [98.0, 12462.0], [98.1, 12482.0], [98.2, 12550.0], [98.3, 12615.0], [98.4, 12636.0], [98.5, 12755.0], [98.6, 12822.0], [98.7, 13077.0], [98.8, 13140.0], [98.9, 13253.0], [99.0, 13274.0], [99.1, 13329.0], [99.2, 13421.0], [99.3, 13446.0], [99.4, 13506.0], [99.5, 13523.0], [99.6, 14032.0], [99.7, 14237.0], [99.8, 14673.0], [99.9, 14745.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2000.0, "maxY": 215.0, "series": [{"data": [[2700.0, 1.0], [3300.0, 1.0], [3400.0, 2.0], [3800.0, 1.0], [4300.0, 1.0], [4100.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [5100.0, 2.0], [4900.0, 1.0], [5500.0, 1.0], [6100.0, 1.0], [5900.0, 1.0], [6600.0, 1.0], [6500.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7400.0, 5.0], [7300.0, 1.0], [7500.0, 4.0], [9700.0, 35.0], [9600.0, 19.0], [9500.0, 3.0], [9900.0, 103.0], [10000.0, 115.0], [10100.0, 173.0], [9800.0, 64.0], [10200.0, 215.0], [10500.0, 145.0], [10400.0, 162.0], [10300.0, 187.0], [10700.0, 39.0], [10600.0, 68.0], [10900.0, 8.0], [10800.0, 19.0], [11200.0, 1.0], [11000.0, 3.0], [11100.0, 1.0], [13100.0, 1.0], [13300.0, 3.0], [13800.0, 1.0], [13700.0, 1.0], [13900.0, 1.0], [14200.0, 1.0], [14400.0, 1.0], [14800.0, 2.0], [14600.0, 1.0], [14700.0, 1.0], [15000.0, 1.0], [15200.0, 1.0], [15500.0, 3.0], [15600.0, 1.0], [15400.0, 1.0], [15800.0, 3.0], [15700.0, 2.0], [15900.0, 1.0], [16000.0, 2.0], [16100.0, 1.0], [16200.0, 2.0], [16300.0, 3.0], [16500.0, 5.0], [16700.0, 4.0], [16800.0, 2.0], [16400.0, 1.0], [16600.0, 1.0], [16900.0, 2.0], [17000.0, 2.0], [17200.0, 1.0], [17400.0, 1.0], [17300.0, 1.0], [17500.0, 1.0], [18800.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[2100.0, 5.0], [2200.0, 25.0], [2300.0, 51.0], [9100.0, 3.0], [9200.0, 1.0], [8900.0, 1.0], [2400.0, 118.0], [9300.0, 1.0], [2500.0, 168.0], [2600.0, 192.0], [2700.0, 196.0], [2800.0, 153.0], [2900.0, 110.0], [3000.0, 109.0], [3100.0, 105.0], [3200.0, 87.0], [3300.0, 52.0], [3400.0, 25.0], [3500.0, 5.0], [3600.0, 7.0], [2000.0, 2.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[2700.0, 1.0], [3300.0, 1.0], [3400.0, 2.0], [3800.0, 1.0], [4300.0, 1.0], [4100.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [5100.0, 2.0], [4900.0, 1.0], [5500.0, 1.0], [6100.0, 1.0], [5900.0, 1.0], [6400.0, 5.0], [6500.0, 21.0], [6600.0, 37.0], [6800.0, 36.0], [6900.0, 34.0], [6700.0, 29.0], [7100.0, 83.0], [7000.0, 66.0], [7200.0, 100.0], [7300.0, 111.0], [7400.0, 159.0], [7600.0, 114.0], [7500.0, 136.0], [7700.0, 140.0], [7800.0, 129.0], [7900.0, 92.0], [8000.0, 51.0], [8100.0, 27.0], [8200.0, 9.0], [8300.0, 1.0], [9900.0, 3.0], [10300.0, 1.0], [10800.0, 2.0], [10900.0, 1.0], [11000.0, 1.0], [11500.0, 2.0], [11600.0, 1.0], [11700.0, 1.0], [11800.0, 3.0], [12100.0, 3.0], [12000.0, 1.0], [12200.0, 2.0], [12600.0, 3.0], [12500.0, 2.0], [12400.0, 2.0], [12700.0, 1.0], [12800.0, 2.0], [13200.0, 3.0], [13300.0, 2.0], [13100.0, 1.0], [13000.0, 1.0], [13400.0, 3.0], [13600.0, 1.0], [13500.0, 2.0], [14200.0, 2.0], [14000.0, 1.0], [14600.0, 1.0], [14700.0, 1.0], [16400.0, 1.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2911.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2911.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2911.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 43.78680203045685, "minX": 1.61627994E12, "maxY": 50.0, "series": [{"data": [[1.61627994E12, 50.0], [1.61628024E12, 43.78680203045685], [1.61628012E12, 50.0], [1.61628018E12, 50.0], [1.61628E12, 50.0], [1.61628006E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61628024E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2081.0, "minX": 1.0, "maxY": 10503.589541547271, "series": [{"data": [[2.0, 3410.0], [3.0, 3377.0], [4.0, 3897.0], [5.0, 3496.0], [6.0, 4199.0], [7.0, 4348.0], [8.0, 4485.0], [9.0, 4802.0], [10.0, 4975.0], [11.0, 5141.0], [12.0, 5142.0], [13.0, 5597.0], [14.0, 5966.0], [15.0, 6195.0], [16.0, 6588.0], [17.0, 6643.0], [18.0, 9758.0], [19.0, 6767.0], [20.0, 9670.0], [21.0, 9596.0], [22.0, 7173.0], [23.0, 9734.0], [24.0, 9606.0], [25.0, 9635.0], [26.0, 9698.0], [27.0, 9958.0], [28.0, 7540.0], [29.0, 7427.0], [30.0, 9988.0], [33.0, 10371.0], [32.0, 7434.5], [35.0, 10238.0], [34.0, 9937.0], [37.0, 10347.0], [36.0, 10035.0], [39.0, 7494.0], [38.0, 10262.0], [41.0, 10136.0], [40.0, 7566.0], [43.0, 7388.0], [42.0, 10113.0], [45.0, 10191.0], [44.0, 10201.0], [47.0, 10344.0], [46.0, 7425.0], [49.0, 7540.0], [48.0, 7593.0], [50.0, 10503.589541547271], [1.0, 2792.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[49.152941176470584, 10403.227681660897]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[33.0, 2740.0], [35.0, 2700.0], [34.0, 2653.0], [37.0, 2764.0], [36.0, 2668.0], [38.0, 2734.0], [41.0, 2619.0], [42.0, 2593.0], [45.0, 2559.0], [44.0, 2622.0], [47.0, 2683.0], [50.0, 2843.2743553008577], [18.0, 2264.0], [20.0, 2081.0], [21.0, 2278.0], [23.0, 2348.0], [24.0, 2261.0], [25.0, 2276.0], [26.0, 2493.0], [27.0, 2709.0], [30.0, 2644.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[49.75000000000001, 2838.912429378529]], "isOverall": false, "label": "(POST) INSERT New User-Aggregated", "isController": false}, {"data": [[32.0, 7434.0], [2.0, 3410.0], [39.0, 7494.0], [40.0, 7566.0], [43.0, 7388.0], [46.0, 7425.0], [49.0, 7540.0], [48.0, 7593.0], [3.0, 3377.0], [50.0, 7657.415960451982], [4.0, 3897.0], [5.0, 3496.0], [6.0, 4199.0], [7.0, 4348.0], [8.0, 4485.0], [9.0, 4802.0], [10.0, 4975.0], [11.0, 5141.0], [12.0, 5142.0], [13.0, 5597.0], [14.0, 5966.0], [15.0, 6194.0], [16.0, 6588.0], [1.0, 2792.0], [17.0, 6642.0], [19.0, 6767.0], [22.0, 7173.0], [28.0, 7540.0], [29.0, 7427.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}, {"data": [[49.39792387543254, 7621.268512110729]], "isOverall": false, "label": "(GET) Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 934507.2666666667, "minX": 1.61627994E12, "maxY": 6614473.083333333, "series": [{"data": [[1.61627994E12, 5038321.333333333], [1.61628024E12, 3872908.85], [1.61628012E12, 6450743.466666667], [1.61628018E12, 6416956.933333334], [1.61628E12, 6614473.083333333], [1.61628006E12, 6517420.416666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61627994E12, 934507.2666666667], [1.61628024E12, 987134.9], [1.61628012E12, 1792191.4333333333], [1.61628018E12, 1792884.2], [1.61628E12, 1840216.7333333334], [1.61628006E12, 1805283.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61628024E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2715.108391608389, "minX": 1.61627994E12, "maxY": 11895.560000000001, "series": [{"data": [[1.61627994E12, 11895.560000000001], [1.61628024E12, 9435.837837837837], [1.61628012E12, 10440.978873239435], [1.61628018E12, 10366.61888111888], [1.61628E12, 10285.489726027392], [1.61628006E12, 10239.901754385966]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61627994E12, 3071.7666666666682], [1.61628024E12, 2722.8067226890757], [1.61628012E12, 2755.0316901408446], [1.61628018E12, 2715.108391608389], [1.61628E12, 2997.013698630139], [1.61628006E12, 2810.6771929824554]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61627994E12, 8823.793333333331], [1.61628024E12, 7203.496062992124], [1.61628012E12, 7660.4809688581345], [1.61628018E12, 7666.808362369334], [1.61628E12, 7298.251677852345], [1.61628006E12, 7432.61224489796]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61628024E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61627994E12, "maxY": 1698.8733333333337, "series": [{"data": [[1.61627994E12, 0.0], [1.61628024E12, 0.0], [1.61628012E12, 0.0], [1.61628018E12, 0.0], [1.61628E12, 0.0], [1.61628006E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61627994E12, 1698.8733333333337], [1.61628024E12, 1518.5126050420172], [1.61628012E12, 1544.3838028169025], [1.61628018E12, 1540.8811188811185], [1.61628E12, 1657.7328767123286], [1.61628006E12, 1584.687719298246]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61627994E12, 855.5333333333334], [1.61628024E12, 1081.5826771653549], [1.61628012E12, 1082.4083044982694], [1.61628018E12, 1083.3693379790943], [1.61628E12, 1136.2651006711412], [1.61628006E12, 1082.3775510204086]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61628024E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61627994E12, "maxY": 14.573333333333329, "series": [{"data": [[1.61627994E12, 0.0], [1.61628024E12, 0.0], [1.61628012E12, 0.0], [1.61628018E12, 0.0], [1.61628E12, 0.0], [1.61628006E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61627994E12, 14.573333333333329], [1.61628024E12, 3.210084033613445], [1.61628012E12, 4.535211267605634], [1.61628018E12, 3.7657342657342676], [1.61628E12, 4.342465753424659], [1.61628006E12, 4.371929824561404]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61627994E12, 6.520000000000008], [1.61628024E12, 3.141732283464567], [1.61628012E12, 4.747404844290656], [1.61628018E12, 4.034843205574915], [1.61628E12, 4.808724832214763], [1.61628006E12, 4.809523809523805]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61628024E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2081.0, "minX": 1.61627994E12, "maxY": 16478.0, "series": [{"data": [[1.61627994E12, 16478.0], [1.61628024E12, 10371.0], [1.61628012E12, 9197.0], [1.61628018E12, 9292.0], [1.61628E12, 8271.0], [1.61628006E12, 8161.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61627994E12, 2151.0], [1.61628024E12, 2081.0], [1.61628012E12, 2209.0], [1.61628018E12, 2135.0], [1.61628E12, 2193.0], [1.61628006E12, 2096.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61627994E12, 12282.2], [1.61628024E12, 7877.0], [1.61628012E12, 7867.0], [1.61628018E12, 7871.0], [1.61628E12, 7860.2], [1.61628006E12, 7809.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61627994E12, 14668.760000000004], [1.61628024E12, 12471.2], [1.61628012E12, 12828.08], [1.61628018E12, 12565.079999999987], [1.61628E12, 13507.53], [1.61628006E12, 13293.249999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61627994E12, 13272.949999999999], [1.61628024E12, 8027.299999999999], [1.61628012E12, 8053.4], [1.61628018E12, 8013.0], [1.61628E12, 10941.449999999993], [1.61628006E12, 8047.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61628024E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3897.0, "minX": 1000.0, "maxY": 7434.0, "series": [{"data": [[3000.0, 3897.0], [1000.0, 6571.0], [2000.0, 6361.0], [4000.0, 7434.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 490.5, "minX": 1000.0, "maxY": 1287.0, "series": [{"data": [[3000.0, 1118.0], [1000.0, 1287.0], [2000.0, 1054.0], [4000.0, 490.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.1, "minX": 1.61627994E12, "maxY": 9.833333333333334, "series": [{"data": [[1.61627994E12, 5.833333333333333], [1.61628024E12, 4.1], [1.61628012E12, 9.55], [1.61628018E12, 9.55], [1.61628E12, 9.833333333333334], [1.61628006E12, 9.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61628024E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.933333333333334, "minX": 1.61627994E12, "maxY": 9.833333333333334, "series": [{"data": [[1.61627994E12, 5.0], [1.61628024E12, 4.933333333333334], [1.61628012E12, 9.55], [1.61628018E12, 9.55], [1.61628E12, 9.833333333333334], [1.61628006E12, 9.65]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61628024E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.9833333333333334, "minX": 1.61627994E12, "maxY": 4.966666666666667, "series": [{"data": [[1.61627994E12, 2.5], [1.61628024E12, 2.466666666666667], [1.61628012E12, 4.733333333333333], [1.61628018E12, 4.766666666666667], [1.61628E12, 4.866666666666666], [1.61628006E12, 4.75]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.61627994E12, 2.5], [1.61628024E12, 2.1166666666666667], [1.61628012E12, 4.816666666666666], [1.61628018E12, 4.783333333333333], [1.61628E12, 4.966666666666667], [1.61628006E12, 4.9]], "isOverall": false, "label": "(GET) Registration Page-success", "isController": false}, {"data": [[1.61627994E12, 2.5], [1.61628024E12, 1.9833333333333334], [1.61628012E12, 4.733333333333333], [1.61628018E12, 4.766666666666667], [1.61628E12, 4.866666666666666], [1.61628006E12, 4.75]], "isOverall": false, "label": "(POST) INSERT New User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61628024E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.566666666666666, "minX": 1.61627994E12, "maxY": 14.7, "series": [{"data": [[1.61627994E12, 7.5], [1.61628024E12, 6.566666666666666], [1.61628012E12, 14.283333333333333], [1.61628018E12, 14.316666666666666], [1.61628E12, 14.7], [1.61628006E12, 14.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61628024E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

