/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5131.0, "minX": 0.0, "maxY": 37830.0, "series": [{"data": [[0.0, 10236.0], [0.1, 10236.0], [0.2, 16106.0], [0.3, 16106.0], [0.4, 16572.0], [0.5, 16578.0], [0.6, 16578.0], [0.7, 16682.0], [0.8, 16694.0], [0.9, 16694.0], [1.0, 16817.0], [1.1, 16905.0], [1.2, 16905.0], [1.3, 16965.0], [1.4, 16976.0], [1.5, 16976.0], [1.6, 17033.0], [1.7, 17256.0], [1.8, 17256.0], [1.9, 17313.0], [2.0, 17313.0], [2.1, 17357.0], [2.2, 17390.0], [2.3, 17390.0], [2.4, 17400.0], [2.5, 17427.0], [2.6, 17427.0], [2.7, 17453.0], [2.8, 17542.0], [2.9, 17542.0], [3.0, 17565.0], [3.1, 17654.0], [3.2, 17654.0], [3.3, 17693.0], [3.4, 20965.0], [3.5, 20965.0], [3.6, 21042.0], [3.7, 21044.0], [3.8, 21044.0], [3.9, 21353.0], [4.0, 21353.0], [4.1, 21374.0], [4.2, 21702.0], [4.3, 21702.0], [4.4, 21757.0], [4.5, 21806.0], [4.6, 21806.0], [4.7, 21894.0], [4.8, 21915.0], [4.9, 21915.0], [5.0, 21954.0], [5.1, 21986.0], [5.2, 21986.0], [5.3, 22054.0], [5.4, 22067.0], [5.5, 22067.0], [5.6, 22079.0], [5.7, 22079.0], [5.8, 22089.0], [5.9, 22106.0], [6.0, 22106.0], [6.1, 22136.0], [6.2, 22205.0], [6.3, 22205.0], [6.4, 22218.0], [6.5, 22228.0], [6.6, 22228.0], [6.7, 22246.0], [6.8, 22328.0], [6.9, 22328.0], [7.0, 22352.0], [7.1, 22383.0], [7.2, 22383.0], [7.3, 22417.0], [7.4, 22425.0], [7.5, 22425.0], [7.6, 22436.0], [7.7, 22436.0], [7.8, 22484.0], [7.9, 22514.0], [8.0, 22514.0], [8.1, 22539.0], [8.2, 22634.0], [8.3, 22634.0], [8.4, 22669.0], [8.5, 22758.0], [8.6, 22758.0], [8.7, 22762.0], [8.8, 22773.0], [8.9, 22773.0], [9.0, 22821.0], [9.1, 22841.0], [9.2, 22841.0], [9.3, 22859.0], [9.4, 22866.0], [9.5, 22866.0], [9.6, 22872.0], [9.7, 22872.0], [9.8, 22909.0], [9.9, 22911.0], [10.0, 22911.0], [10.1, 22928.0], [10.2, 22953.0], [10.3, 22953.0], [10.4, 23022.0], [10.5, 23030.0], [10.6, 23030.0], [10.7, 23040.0], [10.8, 23046.0], [10.9, 23046.0], [11.0, 23081.0], [11.1, 23092.0], [11.2, 23092.0], [11.3, 23101.0], [11.4, 23101.0], [11.5, 23108.0], [11.6, 23113.0], [11.7, 23113.0], [11.8, 23114.0], [11.9, 23115.0], [12.0, 23115.0], [12.1, 23135.0], [12.2, 23137.0], [12.3, 23137.0], [12.4, 23138.0], [12.5, 23146.0], [12.6, 23146.0], [12.7, 23154.0], [12.8, 23170.0], [12.9, 23170.0], [13.0, 23172.0], [13.1, 23172.0], [13.2, 23172.0], [13.3, 23173.0], [13.4, 23173.0], [13.5, 23183.0], [13.6, 23185.0], [13.7, 23185.0], [13.8, 23187.0], [13.9, 23191.0], [14.0, 23191.0], [14.1, 23213.0], [14.2, 23220.0], [14.3, 23220.0], [14.4, 23228.0], [14.5, 23231.0], [14.6, 23231.0], [14.7, 23232.0], [14.8, 23235.0], [14.9, 23235.0], [15.0, 23238.0], [15.1, 23238.0], [15.2, 23241.0], [15.3, 23254.0], [15.4, 23254.0], [15.5, 23257.0], [15.6, 23257.0], [15.7, 23257.0], [15.8, 23259.0], [15.9, 23262.0], [16.0, 23262.0], [16.1, 23271.0], [16.2, 23274.0], [16.3, 23274.0], [16.4, 23283.0], [16.5, 23285.0], [16.6, 23285.0], [16.7, 23286.0], [16.8, 23287.0], [16.9, 23287.0], [17.0, 23289.0], [17.1, 23289.0], [17.2, 23290.0], [17.3, 23290.0], [17.4, 23290.0], [17.5, 23301.0], [17.6, 23302.0], [17.7, 23302.0], [17.8, 23302.0], [17.9, 23304.0], [18.0, 23304.0], [18.1, 23304.0], [18.2, 23308.0], [18.3, 23308.0], [18.4, 23309.0], [18.5, 23314.0], [18.6, 23314.0], [18.7, 23317.0], [18.8, 23320.0], [18.9, 23320.0], [19.0, 23321.0], [19.1, 23321.0], [19.2, 23323.0], [19.3, 23325.0], [19.4, 23325.0], [19.5, 23326.0], [19.6, 23329.0], [19.7, 23329.0], [19.8, 23329.0], [19.9, 23331.0], [20.0, 23331.0], [20.1, 23334.0], [20.2, 23334.0], [20.3, 23334.0], [20.4, 23340.0], [20.5, 23345.0], [20.6, 23345.0], [20.7, 23346.0], [20.8, 23346.0], [20.9, 23346.0], [21.0, 23347.0], [21.1, 23347.0], [21.2, 23348.0], [21.3, 23351.0], [21.4, 23351.0], [21.5, 23354.0], [21.6, 23354.0], [21.7, 23354.0], [21.8, 23355.0], [21.9, 23356.0], [22.0, 23356.0], [22.1, 23357.0], [22.2, 23360.0], [22.3, 23360.0], [22.4, 23362.0], [22.5, 23364.0], [22.6, 23364.0], [22.7, 23365.0], [22.8, 23365.0], [22.9, 23366.0], [23.0, 23368.0], [23.1, 23368.0], [23.2, 23371.0], [23.3, 23371.0], [23.4, 23371.0], [23.5, 23373.0], [23.6, 23375.0], [23.7, 23375.0], [23.8, 23376.0], [23.9, 23376.0], [24.0, 23376.0], [24.1, 23376.0], [24.2, 23378.0], [24.3, 23378.0], [24.4, 23379.0], [24.5, 23380.0], [24.6, 23380.0], [24.7, 23380.0], [24.8, 23380.0], [24.9, 23382.0], [25.0, 23386.0], [25.1, 23386.0], [25.2, 23387.0], [25.3, 23388.0], [25.4, 23388.0], [25.5, 23389.0], [25.6, 23391.0], [25.7, 23391.0], [25.8, 23395.0], [25.9, 23397.0], [26.0, 23397.0], [26.1, 23397.0], [26.2, 23400.0], [26.3, 23400.0], [26.4, 23405.0], [26.5, 23405.0], [26.6, 23406.0], [26.7, 23409.0], [26.8, 23409.0], [26.9, 23410.0], [27.0, 23412.0], [27.1, 23412.0], [27.2, 23412.0], [27.3, 23412.0], [27.4, 23412.0], [27.5, 23418.0], [27.6, 23421.0], [27.7, 23421.0], [27.8, 23424.0], [27.9, 23428.0], [28.0, 23428.0], [28.1, 23432.0], [28.2, 23434.0], [28.3, 23434.0], [28.4, 23435.0], [28.5, 23435.0], [28.6, 23437.0], [28.7, 23437.0], [28.8, 23437.0], [28.9, 23438.0], [29.0, 23438.0], [29.1, 23438.0], [29.2, 23438.0], [29.3, 23442.0], [29.4, 23442.0], [29.5, 23447.0], [29.6, 23450.0], [29.7, 23450.0], [29.8, 23454.0], [29.9, 23454.0], [30.0, 23454.0], [30.1, 23456.0], [30.2, 23456.0], [30.3, 23464.0], [30.4, 23465.0], [30.5, 23465.0], [30.6, 23465.0], [30.7, 23471.0], [30.8, 23471.0], [30.9, 23471.0], [31.0, 23475.0], [31.1, 23475.0], [31.2, 23476.0], [31.3, 23478.0], [31.4, 23478.0], [31.5, 23482.0], [31.6, 23488.0], [31.7, 23488.0], [31.8, 23488.0], [31.9, 23488.0], [32.0, 23488.0], [32.1, 23489.0], [32.2, 23489.0], [32.3, 23490.0], [32.4, 23491.0], [32.5, 23491.0], [32.6, 23492.0], [32.7, 23492.0], [32.8, 23492.0], [32.9, 23495.0], [33.0, 23497.0], [33.1, 23497.0], [33.2, 23499.0], [33.3, 23499.0], [33.4, 23499.0], [33.5, 23500.0], [33.6, 23500.0], [33.7, 23500.0], [33.8, 23506.0], [33.9, 23506.0], [34.0, 23506.0], [34.1, 23506.0], [34.2, 23506.0], [34.3, 23508.0], [34.4, 23508.0], [34.5, 23508.0], [34.6, 23509.0], [34.7, 23512.0], [34.8, 23512.0], [34.9, 23513.0], [35.0, 23514.0], [35.1, 23514.0], [35.2, 23514.0], [35.3, 23517.0], [35.4, 23517.0], [35.5, 23518.0], [35.6, 23518.0], [35.7, 23518.0], [35.8, 23520.0], [35.9, 23520.0], [36.0, 23522.0], [36.1, 23523.0], [36.2, 23523.0], [36.3, 23523.0], [36.4, 23523.0], [36.5, 23523.0], [36.6, 23524.0], [36.7, 23528.0], [36.8, 23528.0], [36.9, 23531.0], [37.0, 23531.0], [37.1, 23531.0], [37.2, 23532.0], [37.3, 23532.0], [37.4, 23532.0], [37.5, 23532.0], [37.6, 23533.0], [37.7, 23533.0], [37.8, 23535.0], [37.9, 23535.0], [38.0, 23537.0], [38.1, 23538.0], [38.2, 23538.0], [38.3, 23538.0], [38.4, 23539.0], [38.5, 23539.0], [38.6, 23539.0], [38.7, 23541.0], [38.8, 23541.0], [38.9, 23542.0], [39.0, 23543.0], [39.1, 23543.0], [39.2, 23543.0], [39.3, 23543.0], [39.4, 23543.0], [39.5, 23544.0], [39.6, 23545.0], [39.7, 23545.0], [39.8, 23546.0], [39.9, 23546.0], [40.0, 23546.0], [40.1, 23547.0], [40.2, 23547.0], [40.3, 23547.0], [40.4, 23548.0], [40.5, 23548.0], [40.6, 23549.0], [40.7, 23549.0], [40.8, 23549.0], [40.9, 23551.0], [41.0, 23552.0], [41.1, 23552.0], [41.2, 23554.0], [41.3, 23556.0], [41.4, 23556.0], [41.5, 23557.0], [41.6, 23557.0], [41.7, 23559.0], [41.8, 23561.0], [41.9, 23561.0], [42.0, 23563.0], [42.1, 23564.0], [42.2, 23564.0], [42.3, 23565.0], [42.4, 23566.0], [42.5, 23566.0], [42.6, 23569.0], [42.7, 23571.0], [42.8, 23571.0], [42.9, 23572.0], [43.0, 23573.0], [43.1, 23573.0], [43.2, 23575.0], [43.3, 23575.0], [43.4, 23575.0], [43.5, 23578.0], [43.6, 23578.0], [43.7, 23579.0], [43.8, 23579.0], [43.9, 23579.0], [44.0, 23580.0], [44.1, 23582.0], [44.2, 23582.0], [44.3, 23582.0], [44.4, 23584.0], [44.5, 23584.0], [44.6, 23585.0], [44.7, 23585.0], [44.8, 23585.0], [44.9, 23586.0], [45.0, 23587.0], [45.1, 23587.0], [45.2, 23595.0], [45.3, 23595.0], [45.4, 23595.0], [45.5, 23598.0], [45.6, 23598.0], [45.7, 23600.0], [45.8, 23602.0], [45.9, 23602.0], [46.0, 23602.0], [46.1, 23602.0], [46.2, 23602.0], [46.3, 23603.0], [46.4, 23603.0], [46.5, 23603.0], [46.6, 23603.0], [46.7, 23604.0], [46.8, 23604.0], [46.9, 23608.0], [47.0, 23608.0], [47.1, 23608.0], [47.2, 23611.0], [47.3, 23611.0], [47.4, 23612.0], [47.5, 23612.0], [47.6, 23612.0], [47.7, 23614.0], [47.8, 23616.0], [47.9, 23616.0], [48.0, 23617.0], [48.1, 23619.0], [48.2, 23619.0], [48.3, 23621.0], [48.4, 23624.0], [48.5, 23624.0], [48.6, 23625.0], [48.7, 23625.0], [48.8, 23625.0], [48.9, 23625.0], [49.0, 23625.0], [49.1, 23625.0], [49.2, 23627.0], [49.3, 23627.0], [49.4, 23627.0], [49.5, 23629.0], [49.6, 23629.0], [49.7, 23630.0], [49.8, 23632.0], [49.9, 23632.0], [50.0, 23633.0], [50.1, 23633.0], [50.2, 23633.0], [50.3, 23634.0], [50.4, 23635.0], [50.5, 23635.0], [50.6, 23635.0], [50.7, 23636.0], [50.8, 23636.0], [50.9, 23637.0], [51.0, 23637.0], [51.1, 23639.0], [51.2, 23639.0], [51.3, 23639.0], [51.4, 23641.0], [51.5, 23641.0], [51.6, 23641.0], [51.7, 23642.0], [51.8, 23644.0], [51.9, 23644.0], [52.0, 23644.0], [52.1, 23644.0], [52.2, 23644.0], [52.3, 23644.0], [52.4, 23644.0], [52.5, 23644.0], [52.6, 23645.0], [52.7, 23645.0], [52.8, 23645.0], [52.9, 23645.0], [53.0, 23645.0], [53.1, 23648.0], [53.2, 23649.0], [53.3, 23649.0], [53.4, 23654.0], [53.5, 23655.0], [53.6, 23655.0], [53.7, 23655.0], [53.8, 23658.0], [53.9, 23658.0], [54.0, 23659.0], [54.1, 23659.0], [54.2, 23659.0], [54.3, 23660.0], [54.4, 23660.0], [54.5, 23660.0], [54.6, 23661.0], [54.7, 23661.0], [54.8, 23661.0], [54.9, 23662.0], [55.0, 23662.0], [55.1, 23663.0], [55.2, 23665.0], [55.3, 23665.0], [55.4, 23666.0], [55.5, 23667.0], [55.6, 23667.0], [55.7, 23667.0], [55.8, 23668.0], [55.9, 23668.0], [56.0, 23668.0], [56.1, 23671.0], [56.2, 23671.0], [56.3, 23671.0], [56.4, 23675.0], [56.5, 23675.0], [56.6, 23676.0], [56.7, 23676.0], [56.8, 23677.0], [56.9, 23677.0], [57.0, 23677.0], [57.1, 23678.0], [57.2, 23678.0], [57.3, 23678.0], [57.4, 23678.0], [57.5, 23679.0], [57.6, 23679.0], [57.7, 23679.0], [57.8, 23679.0], [57.9, 23679.0], [58.0, 23680.0], [58.1, 23680.0], [58.2, 23680.0], [58.3, 23683.0], [58.4, 23683.0], [58.5, 23683.0], [58.6, 23684.0], [58.7, 23684.0], [58.8, 23684.0], [58.9, 23686.0], [59.0, 23686.0], [59.1, 23686.0], [59.2, 23688.0], [59.3, 23688.0], [59.4, 23689.0], [59.5, 23690.0], [59.6, 23690.0], [59.7, 23690.0], [59.8, 23691.0], [59.9, 23691.0], [60.0, 23692.0], [60.1, 23693.0], [60.2, 23693.0], [60.3, 23694.0], [60.4, 23694.0], [60.5, 23695.0], [60.6, 23695.0], [60.7, 23695.0], [60.8, 23695.0], [60.9, 23698.0], [61.0, 23698.0], [61.1, 23699.0], [61.2, 23699.0], [61.3, 23699.0], [61.4, 23700.0], [61.5, 23702.0], [61.6, 23702.0], [61.7, 23703.0], [61.8, 23707.0], [61.9, 23707.0], [62.0, 23710.0], [62.1, 23711.0], [62.2, 23711.0], [62.3, 23711.0], [62.4, 23711.0], [62.5, 23712.0], [62.6, 23712.0], [62.7, 23712.0], [62.8, 23713.0], [62.9, 23713.0], [63.0, 23713.0], [63.1, 23713.0], [63.2, 23715.0], [63.3, 23715.0], [63.4, 23716.0], [63.5, 23716.0], [63.6, 23716.0], [63.7, 23717.0], [63.8, 23717.0], [63.9, 23717.0], [64.0, 23719.0], [64.1, 23719.0], [64.2, 23719.0], [64.3, 23719.0], [64.4, 23719.0], [64.5, 23720.0], [64.6, 23720.0], [64.7, 23720.0], [64.8, 23721.0], [64.9, 23721.0], [65.0, 23721.0], [65.1, 23721.0], [65.2, 23724.0], [65.3, 23724.0], [65.4, 23725.0], [65.5, 23725.0], [65.6, 23725.0], [65.7, 23727.0], [65.8, 23727.0], [65.9, 23727.0], [66.0, 23727.0], [66.1, 23727.0], [66.2, 23728.0], [66.3, 23729.0], [66.4, 23729.0], [66.5, 23729.0], [66.6, 23730.0], [66.7, 23730.0], [66.8, 23732.0], [66.9, 23734.0], [67.0, 23734.0], [67.1, 23734.0], [67.2, 23737.0], [67.3, 23737.0], [67.4, 23739.0], [67.5, 23740.0], [67.6, 23740.0], [67.7, 23742.0], [67.8, 23742.0], [67.9, 23742.0], [68.0, 23743.0], [68.1, 23743.0], [68.2, 23745.0], [68.3, 23745.0], [68.4, 23745.0], [68.5, 23746.0], [68.6, 23746.0], [68.7, 23746.0], [68.8, 23746.0], [68.9, 23746.0], [69.0, 23746.0], [69.1, 23747.0], [69.2, 23747.0], [69.3, 23747.0], [69.4, 23748.0], [69.5, 23748.0], [69.6, 23748.0], [69.7, 23749.0], [69.8, 23749.0], [69.9, 23749.0], [70.0, 23750.0], [70.1, 23750.0], [70.2, 23751.0], [70.3, 23751.0], [70.4, 23751.0], [70.5, 23752.0], [70.6, 23753.0], [70.7, 23753.0], [70.8, 23753.0], [70.9, 23756.0], [71.0, 23756.0], [71.1, 23756.0], [71.2, 23757.0], [71.3, 23757.0], [71.4, 23757.0], [71.5, 23758.0], [71.6, 23758.0], [71.7, 23760.0], [71.8, 23760.0], [71.9, 23760.0], [72.0, 23762.0], [72.1, 23762.0], [72.2, 23764.0], [72.3, 23765.0], [72.4, 23765.0], [72.5, 23766.0], [72.6, 23767.0], [72.7, 23767.0], [72.8, 23767.0], [72.9, 23768.0], [73.0, 23768.0], [73.1, 23768.0], [73.2, 23770.0], [73.3, 23770.0], [73.4, 23771.0], [73.5, 23771.0], [73.6, 23771.0], [73.7, 23774.0], [73.8, 23774.0], [73.9, 23777.0], [74.0, 23777.0], [74.1, 23777.0], [74.2, 23779.0], [74.3, 23781.0], [74.4, 23781.0], [74.5, 23781.0], [74.6, 23784.0], [74.7, 23784.0], [74.8, 23784.0], [74.9, 23786.0], [75.0, 23786.0], [75.1, 23788.0], [75.2, 23788.0], [75.3, 23788.0], [75.4, 23790.0], [75.5, 23790.0], [75.6, 23791.0], [75.7, 23792.0], [75.8, 23792.0], [75.9, 23795.0], [76.0, 23796.0], [76.1, 23796.0], [76.2, 23799.0], [76.3, 23799.0], [76.4, 23799.0], [76.5, 23799.0], [76.6, 23802.0], [76.7, 23802.0], [76.8, 23802.0], [76.9, 23808.0], [77.0, 23808.0], [77.1, 23808.0], [77.2, 23809.0], [77.3, 23809.0], [77.4, 23813.0], [77.5, 23813.0], [77.6, 23816.0], [77.7, 23816.0], [77.8, 23816.0], [77.9, 23817.0], [78.0, 23819.0], [78.1, 23819.0], [78.2, 23819.0], [78.3, 23819.0], [78.4, 23819.0], [78.5, 23821.0], [78.6, 23823.0], [78.7, 23823.0], [78.8, 23824.0], [78.9, 23825.0], [79.0, 23825.0], [79.1, 23827.0], [79.2, 23828.0], [79.3, 23828.0], [79.4, 23829.0], [79.5, 23829.0], [79.6, 23830.0], [79.7, 23830.0], [79.8, 23830.0], [79.9, 23830.0], [80.0, 23832.0], [80.1, 23832.0], [80.2, 23834.0], [80.3, 23834.0], [80.4, 23834.0], [80.5, 23836.0], [80.6, 23836.0], [80.7, 23836.0], [80.8, 23837.0], [80.9, 23837.0], [81.0, 23837.0], [81.1, 23837.0], [81.2, 23837.0], [81.3, 23838.0], [81.4, 23839.0], [81.5, 23839.0], [81.6, 23839.0], [81.7, 23841.0], [81.8, 23841.0], [81.9, 23842.0], [82.0, 23843.0], [82.1, 23843.0], [82.2, 23843.0], [82.3, 23843.0], [82.4, 23843.0], [82.5, 23846.0], [82.6, 23853.0], [82.7, 23853.0], [82.8, 23855.0], [82.9, 23859.0], [83.0, 23859.0], [83.1, 23862.0], [83.2, 23862.0], [83.3, 23864.0], [83.4, 23865.0], [83.5, 23865.0], [83.6, 23866.0], [83.7, 23867.0], [83.8, 23867.0], [83.9, 23870.0], [84.0, 23875.0], [84.1, 23875.0], [84.2, 23875.0], [84.3, 23878.0], [84.4, 23878.0], [84.5, 23880.0], [84.6, 23881.0], [84.7, 23881.0], [84.8, 23883.0], [84.9, 23884.0], [85.0, 23884.0], [85.1, 23884.0], [85.2, 23884.0], [85.3, 23886.0], [85.4, 23888.0], [85.5, 23888.0], [85.6, 23888.0], [85.7, 23888.0], [85.8, 23888.0], [85.9, 23889.0], [86.0, 23889.0], [86.1, 23889.0], [86.2, 23894.0], [86.3, 23896.0], [86.4, 23896.0], [86.5, 23896.0], [86.6, 23900.0], [86.7, 23900.0], [86.8, 23901.0], [86.9, 23901.0], [87.0, 23901.0], [87.1, 23904.0], [87.2, 23904.0], [87.3, 23912.0], [87.4, 23912.0], [87.5, 23912.0], [87.6, 23913.0], [87.7, 23913.0], [87.8, 23913.0], [87.9, 23916.0], [88.0, 23917.0], [88.1, 23917.0], [88.2, 23922.0], [88.3, 23923.0], [88.4, 23923.0], [88.5, 23924.0], [88.6, 23925.0], [88.7, 23925.0], [88.8, 23928.0], [88.9, 23928.0], [89.0, 23928.0], [89.1, 23933.0], [89.2, 23933.0], [89.3, 23937.0], [89.4, 23940.0], [89.5, 23940.0], [89.6, 23941.0], [89.7, 23943.0], [89.8, 23943.0], [89.9, 23944.0], [90.0, 23944.0], [90.1, 23944.0], [90.2, 23945.0], [90.3, 23959.0], [90.4, 23959.0], [90.5, 23960.0], [90.6, 23960.0], [90.7, 23966.0], [90.8, 23966.0], [90.9, 23966.0], [91.0, 23969.0], [91.1, 23971.0], [91.2, 23971.0], [91.3, 23977.0], [91.4, 23978.0], [91.5, 23978.0], [91.6, 23980.0], [91.7, 23981.0], [91.8, 23981.0], [91.9, 23983.0], [92.0, 23986.0], [92.1, 23986.0], [92.2, 23987.0], [92.3, 23991.0], [92.4, 23991.0], [92.5, 23992.0], [92.6, 23992.0], [92.7, 23994.0], [92.8, 23997.0], [92.9, 23997.0], [93.0, 23998.0], [93.1, 24001.0], [93.2, 24001.0], [93.3, 24002.0], [93.4, 24003.0], [93.5, 24003.0], [93.6, 24006.0], [93.7, 24009.0], [93.8, 24009.0], [93.9, 24013.0], [94.0, 24013.0], [94.1, 24013.0], [94.2, 24013.0], [94.3, 24015.0], [94.4, 24015.0], [94.5, 24016.0], [94.6, 24016.0], [94.7, 24016.0], [94.8, 24018.0], [94.9, 24018.0], [95.0, 24018.0], [95.1, 24023.0], [95.2, 24023.0], [95.3, 24025.0], [95.4, 24029.0], [95.5, 24029.0], [95.6, 24038.0], [95.7, 24043.0], [95.8, 24043.0], [95.9, 24046.0], [96.0, 24050.0], [96.1, 24050.0], [96.2, 24053.0], [96.3, 24053.0], [96.4, 24055.0], [96.5, 24065.0], [96.6, 24065.0], [96.7, 24068.0], [96.8, 24091.0], [96.9, 24091.0], [97.0, 24098.0], [97.1, 24108.0], [97.2, 24108.0], [97.3, 24113.0], [97.4, 24126.0], [97.5, 24126.0], [97.6, 24126.0], [97.7, 24132.0], [97.8, 24132.0], [97.9, 24142.0], [98.0, 24148.0], [98.1, 24148.0], [98.2, 24151.0], [98.3, 24151.0], [98.4, 24155.0], [98.5, 24162.0], [98.6, 24162.0], [98.7, 24375.0], [98.8, 24412.0], [98.9, 24412.0], [99.0, 24517.0], [99.1, 24669.0], [99.2, 24669.0], [99.3, 24848.0], [99.4, 24923.0], [99.5, 24923.0], [99.6, 25207.0], [99.7, 37533.0], [99.8, 37533.0], [99.9, 37830.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 5131.0], [0.1, 5131.0], [0.2, 5182.0], [0.3, 5182.0], [0.4, 5239.0], [0.5, 5271.0], [0.6, 5271.0], [0.7, 5272.0], [0.8, 5279.0], [0.9, 5279.0], [1.0, 5301.0], [1.1, 5301.0], [1.2, 5304.0], [1.3, 5305.0], [1.4, 5305.0], [1.5, 5359.0], [1.6, 5359.0], [1.7, 5359.0], [1.8, 5391.0], [1.9, 5391.0], [2.0, 5405.0], [2.1, 5423.0], [2.2, 5423.0], [2.3, 5442.0], [2.4, 5447.0], [2.5, 5447.0], [2.6, 5450.0], [2.7, 5450.0], [2.8, 5455.0], [2.9, 5464.0], [3.0, 5464.0], [3.1, 5466.0], [3.2, 5481.0], [3.3, 5481.0], [3.4, 5499.0], [3.5, 5499.0], [3.6, 5500.0], [3.7, 5518.0], [3.8, 5518.0], [3.9, 5536.0], [4.0, 5538.0], [4.1, 5538.0], [4.2, 5539.0], [4.3, 5539.0], [4.4, 5559.0], [4.5, 5562.0], [4.6, 5562.0], [4.7, 5570.0], [4.8, 5572.0], [4.9, 5572.0], [5.0, 5574.0], [5.1, 5574.0], [5.2, 5588.0], [5.3, 5614.0], [5.4, 5614.0], [5.5, 5618.0], [5.6, 5621.0], [5.7, 5621.0], [5.8, 5623.0], [5.9, 5623.0], [6.0, 5625.0], [6.1, 5629.0], [6.2, 5629.0], [6.3, 5633.0], [6.4, 5642.0], [6.5, 5642.0], [6.6, 5649.0], [6.7, 5653.0], [6.8, 5653.0], [6.9, 5655.0], [7.0, 5655.0], [7.1, 5668.0], [7.2, 5675.0], [7.3, 5675.0], [7.4, 5691.0], [7.5, 5703.0], [7.6, 5703.0], [7.7, 5710.0], [7.8, 5710.0], [7.9, 5733.0], [8.0, 5734.0], [8.1, 5734.0], [8.2, 5735.0], [8.3, 5737.0], [8.4, 5737.0], [8.5, 5757.0], [8.6, 5757.0], [8.7, 5766.0], [8.8, 5779.0], [8.9, 5779.0], [9.0, 5799.0], [9.1, 5801.0], [9.2, 5801.0], [9.3, 5802.0], [9.4, 5802.0], [9.5, 5802.0], [9.6, 5824.0], [9.7, 5824.0], [9.8, 5831.0], [9.9, 5840.0], [10.0, 5840.0], [10.1, 5840.0], [10.2, 5840.0], [10.3, 5847.0], [10.4, 5862.0], [10.5, 5862.0], [10.6, 5865.0], [10.7, 5873.0], [10.8, 5873.0], [10.9, 5874.0], [11.0, 5874.0], [11.1, 5877.0], [11.2, 5890.0], [11.3, 5890.0], [11.4, 5891.0], [11.5, 5896.0], [11.6, 5896.0], [11.7, 5900.0], [11.8, 5900.0], [11.9, 5902.0], [12.0, 5919.0], [12.1, 5919.0], [12.2, 5921.0], [12.3, 5921.0], [12.4, 5921.0], [12.5, 5922.0], [12.6, 5930.0], [12.7, 5930.0], [12.8, 5930.0], [12.9, 5930.0], [13.0, 5943.0], [13.1, 5954.0], [13.2, 5954.0], [13.3, 5959.0], [13.4, 5961.0], [13.5, 5961.0], [13.6, 5972.0], [13.7, 5972.0], [13.8, 5983.0], [13.9, 6003.0], [14.0, 6003.0], [14.1, 6004.0], [14.2, 6021.0], [14.3, 6021.0], [14.4, 6031.0], [14.5, 6031.0], [14.6, 6036.0], [14.7, 6045.0], [14.8, 6045.0], [14.9, 6067.0], [15.0, 6089.0], [15.1, 6089.0], [15.2, 6096.0], [15.3, 6096.0], [15.4, 6102.0], [15.5, 6113.0], [15.6, 6113.0], [15.7, 6126.0], [15.8, 6131.0], [15.9, 6131.0], [16.0, 6140.0], [16.1, 6140.0], [16.2, 6151.0], [16.3, 6152.0], [16.4, 6152.0], [16.5, 6188.0], [16.6, 6221.0], [16.7, 6221.0], [16.8, 6246.0], [16.9, 6246.0], [17.0, 6258.0], [17.1, 6259.0], [17.2, 6259.0], [17.3, 6270.0], [17.4, 6281.0], [17.5, 6281.0], [17.6, 6300.0], [17.7, 6300.0], [17.8, 6304.0], [17.9, 6337.0], [18.0, 6337.0], [18.1, 6351.0], [18.2, 6368.0], [18.3, 6368.0], [18.4, 6370.0], [18.5, 6370.0], [18.6, 6382.0], [18.7, 6388.0], [18.8, 6388.0], [18.9, 6391.0], [19.0, 6408.0], [19.1, 6408.0], [19.2, 6417.0], [19.3, 6422.0], [19.4, 6422.0], [19.5, 6429.0], [19.6, 6429.0], [19.7, 6440.0], [19.8, 6442.0], [19.9, 6442.0], [20.0, 6453.0], [20.1, 6457.0], [20.2, 6457.0], [20.3, 6459.0], [20.4, 6459.0], [20.5, 6462.0], [20.6, 6465.0], [20.7, 6465.0], [20.8, 6468.0], [20.9, 6471.0], [21.0, 6471.0], [21.1, 6483.0], [21.2, 6483.0], [21.3, 6485.0], [21.4, 6485.0], [21.5, 6485.0], [21.6, 6493.0], [21.7, 6498.0], [21.8, 6498.0], [21.9, 6504.0], [22.0, 6504.0], [22.1, 6507.0], [22.2, 6514.0], [22.3, 6514.0], [22.4, 6517.0], [22.5, 6531.0], [22.6, 6531.0], [22.7, 6533.0], [22.8, 6533.0], [22.9, 6535.0], [23.0, 6535.0], [23.1, 6535.0], [23.2, 6535.0], [23.3, 6541.0], [23.4, 6541.0], [23.5, 6545.0], [23.6, 6545.0], [23.7, 6549.0], [23.8, 6551.0], [23.9, 6551.0], [24.0, 6552.0], [24.1, 6556.0], [24.2, 6556.0], [24.3, 6565.0], [24.4, 6565.0], [24.5, 6576.0], [24.6, 6578.0], [24.7, 6578.0], [24.8, 6591.0], [24.9, 6594.0], [25.0, 6594.0], [25.1, 6596.0], [25.2, 6597.0], [25.3, 6597.0], [25.4, 6597.0], [25.5, 6597.0], [25.6, 6598.0], [25.7, 6614.0], [25.8, 6614.0], [25.9, 6618.0], [26.0, 6619.0], [26.1, 6619.0], [26.2, 6625.0], [26.3, 6625.0], [26.4, 6625.0], [26.5, 6638.0], [26.6, 6638.0], [26.7, 6643.0], [26.8, 6643.0], [26.9, 6643.0], [27.0, 6651.0], [27.1, 6651.0], [27.2, 6654.0], [27.3, 6662.0], [27.4, 6662.0], [27.5, 6662.0], [27.6, 6663.0], [27.7, 6663.0], [27.8, 6665.0], [27.9, 6665.0], [28.0, 6665.0], [28.1, 6666.0], [28.2, 6666.0], [28.3, 6674.0], [28.4, 6675.0], [28.5, 6675.0], [28.6, 6679.0], [28.7, 6679.0], [28.8, 6680.0], [28.9, 6681.0], [29.0, 6681.0], [29.1, 6681.0], [29.2, 6682.0], [29.3, 6682.0], [29.4, 6685.0], [29.5, 6685.0], [29.6, 6689.0], [29.7, 6690.0], [29.8, 6690.0], [29.9, 6702.0], [30.0, 6703.0], [30.1, 6703.0], [30.2, 6706.0], [30.3, 6706.0], [30.4, 6709.0], [30.5, 6709.0], [30.6, 6709.0], [30.7, 6713.0], [30.8, 6713.0], [30.9, 6713.0], [31.0, 6715.0], [31.1, 6715.0], [31.2, 6715.0], [31.3, 6716.0], [31.4, 6716.0], [31.5, 6719.0], [31.6, 6724.0], [31.7, 6724.0], [31.8, 6731.0], [31.9, 6732.0], [32.0, 6732.0], [32.1, 6733.0], [32.2, 6733.0], [32.3, 6740.0], [32.4, 6740.0], [32.5, 6740.0], [32.6, 6742.0], [32.7, 6743.0], [32.8, 6743.0], [32.9, 6744.0], [33.0, 6744.0], [33.1, 6744.0], [33.2, 6744.0], [33.3, 6744.0], [33.4, 6748.0], [33.5, 6750.0], [33.6, 6750.0], [33.7, 6751.0], [33.8, 6751.0], [33.9, 6756.0], [34.0, 6760.0], [34.1, 6760.0], [34.2, 6767.0], [34.3, 6769.0], [34.4, 6769.0], [34.5, 6771.0], [34.6, 6771.0], [34.7, 6772.0], [34.8, 6775.0], [34.9, 6775.0], [35.0, 6776.0], [35.1, 6787.0], [35.2, 6787.0], [35.3, 6789.0], [35.4, 6789.0], [35.5, 6789.0], [35.6, 6798.0], [35.7, 6798.0], [35.8, 6800.0], [35.9, 6800.0], [36.0, 6800.0], [36.1, 6803.0], [36.2, 6803.0], [36.3, 6805.0], [36.4, 6806.0], [36.5, 6806.0], [36.6, 6809.0], [36.7, 6812.0], [36.8, 6812.0], [36.9, 6812.0], [37.0, 6812.0], [37.1, 6814.0], [37.2, 6816.0], [37.3, 6816.0], [37.4, 6816.0], [37.5, 6816.0], [37.6, 6816.0], [37.7, 6816.0], [37.8, 6823.0], [37.9, 6823.0], [38.0, 6824.0], [38.1, 6824.0], [38.2, 6826.0], [38.3, 6828.0], [38.4, 6828.0], [38.5, 6831.0], [38.6, 6831.0], [38.7, 6831.0], [38.8, 6834.0], [38.9, 6834.0], [39.0, 6834.0], [39.1, 6836.0], [39.2, 6836.0], [39.3, 6838.0], [39.4, 6840.0], [39.5, 6840.0], [39.6, 6840.0], [39.7, 6840.0], [39.8, 6841.0], [39.9, 6844.0], [40.0, 6844.0], [40.1, 6846.0], [40.2, 6846.0], [40.3, 6846.0], [40.4, 6846.0], [40.5, 6846.0], [40.6, 6848.0], [40.7, 6849.0], [40.8, 6849.0], [40.9, 6851.0], [41.0, 6855.0], [41.1, 6855.0], [41.2, 6860.0], [41.3, 6860.0], [41.4, 6861.0], [41.5, 6861.0], [41.6, 6861.0], [41.7, 6863.0], [41.8, 6865.0], [41.9, 6865.0], [42.0, 6865.0], [42.1, 6865.0], [42.2, 6866.0], [42.3, 6867.0], [42.4, 6867.0], [42.5, 6868.0], [42.6, 6868.0], [42.7, 6868.0], [42.8, 6874.0], [42.9, 6874.0], [43.0, 6875.0], [43.1, 6875.0], [43.2, 6875.0], [43.3, 6876.0], [43.4, 6881.0], [43.5, 6881.0], [43.6, 6883.0], [43.7, 6883.0], [43.8, 6884.0], [43.9, 6886.0], [44.0, 6886.0], [44.1, 6887.0], [44.2, 6888.0], [44.3, 6888.0], [44.4, 6889.0], [44.5, 6893.0], [44.6, 6893.0], [44.7, 6895.0], [44.8, 6895.0], [44.9, 6895.0], [45.0, 6896.0], [45.1, 6896.0], [45.2, 6896.0], [45.3, 6899.0], [45.4, 6899.0], [45.5, 6900.0], [45.6, 6900.0], [45.7, 6902.0], [45.8, 6908.0], [45.9, 6908.0], [46.0, 6910.0], [46.1, 6912.0], [46.2, 6912.0], [46.3, 6914.0], [46.4, 6914.0], [46.5, 6915.0], [46.6, 6917.0], [46.7, 6917.0], [46.8, 6920.0], [46.9, 6920.0], [47.0, 6920.0], [47.1, 6921.0], [47.2, 6921.0], [47.3, 6923.0], [47.4, 6924.0], [47.5, 6924.0], [47.6, 6925.0], [47.7, 6926.0], [47.8, 6926.0], [47.9, 6927.0], [48.0, 6927.0], [48.1, 6929.0], [48.2, 6930.0], [48.3, 6930.0], [48.4, 6931.0], [48.5, 6933.0], [48.6, 6933.0], [48.7, 6934.0], [48.8, 6934.0], [48.9, 6940.0], [49.0, 6942.0], [49.1, 6942.0], [49.2, 6946.0], [49.3, 6947.0], [49.4, 6947.0], [49.5, 6955.0], [49.6, 6955.0], [49.7, 6959.0], [49.8, 6962.0], [49.9, 6962.0], [50.0, 6965.0], [50.1, 6967.0], [50.2, 6967.0], [50.3, 6968.0], [50.4, 6968.0], [50.5, 6968.0], [50.6, 6971.0], [50.7, 6971.0], [50.8, 6972.0], [50.9, 6973.0], [51.0, 6973.0], [51.1, 6973.0], [51.2, 6975.0], [51.3, 6975.0], [51.4, 6976.0], [51.5, 6976.0], [51.6, 6976.0], [51.7, 6978.0], [51.8, 6978.0], [51.9, 6978.0], [52.0, 6980.0], [52.1, 6980.0], [52.2, 6980.0], [52.3, 6980.0], [52.4, 6981.0], [52.5, 6984.0], [52.6, 6984.0], [52.7, 6988.0], [52.8, 6988.0], [52.9, 6988.0], [53.0, 6992.0], [53.1, 6992.0], [53.2, 6996.0], [53.3, 6998.0], [53.4, 6998.0], [53.5, 6998.0], [53.6, 6999.0], [53.7, 6999.0], [53.8, 7000.0], [53.9, 7000.0], [54.0, 7003.0], [54.1, 7003.0], [54.2, 7003.0], [54.3, 7003.0], [54.4, 7003.0], [54.5, 7003.0], [54.6, 7004.0], [54.7, 7004.0], [54.8, 7006.0], [54.9, 7008.0], [55.0, 7008.0], [55.1, 7008.0], [55.2, 7009.0], [55.3, 7009.0], [55.4, 7010.0], [55.5, 7010.0], [55.6, 7011.0], [55.7, 7011.0], [55.8, 7011.0], [55.9, 7012.0], [56.0, 7014.0], [56.1, 7014.0], [56.2, 7014.0], [56.3, 7015.0], [56.4, 7015.0], [56.5, 7016.0], [56.6, 7016.0], [56.7, 7016.0], [56.8, 7021.0], [56.9, 7021.0], [57.0, 7022.0], [57.1, 7025.0], [57.2, 7025.0], [57.3, 7026.0], [57.4, 7026.0], [57.5, 7028.0], [57.6, 7033.0], [57.7, 7033.0], [57.8, 7038.0], [57.9, 7038.0], [58.0, 7038.0], [58.1, 7042.0], [58.2, 7042.0], [58.3, 7043.0], [58.4, 7046.0], [58.5, 7046.0], [58.6, 7047.0], [58.7, 7049.0], [58.8, 7049.0], [58.9, 7049.0], [59.0, 7049.0], [59.1, 7053.0], [59.2, 7056.0], [59.3, 7056.0], [59.4, 7058.0], [59.5, 7058.0], [59.6, 7058.0], [59.7, 7059.0], [59.8, 7059.0], [59.9, 7060.0], [60.0, 7060.0], [60.1, 7060.0], [60.2, 7062.0], [60.3, 7065.0], [60.4, 7065.0], [60.5, 7065.0], [60.6, 7065.0], [60.7, 7068.0], [60.8, 7068.0], [60.9, 7068.0], [61.0, 7068.0], [61.1, 7069.0], [61.2, 7069.0], [61.3, 7070.0], [61.4, 7070.0], [61.5, 7072.0], [61.6, 7072.0], [61.7, 7072.0], [61.8, 7073.0], [61.9, 7074.0], [62.0, 7074.0], [62.1, 7074.0], [62.2, 7074.0], [62.3, 7075.0], [62.4, 7076.0], [62.5, 7076.0], [62.6, 7079.0], [62.7, 7080.0], [62.8, 7080.0], [62.9, 7080.0], [63.0, 7081.0], [63.1, 7081.0], [63.2, 7081.0], [63.3, 7081.0], [63.4, 7082.0], [63.5, 7083.0], [63.6, 7083.0], [63.7, 7084.0], [63.8, 7086.0], [63.9, 7086.0], [64.0, 7087.0], [64.1, 7087.0], [64.2, 7088.0], [64.3, 7088.0], [64.4, 7088.0], [64.5, 7089.0], [64.6, 7089.0], [64.7, 7089.0], [64.8, 7091.0], [64.9, 7091.0], [65.0, 7093.0], [65.1, 7093.0], [65.2, 7093.0], [65.3, 7093.0], [65.4, 7093.0], [65.5, 7093.0], [65.6, 7093.0], [65.7, 7093.0], [65.8, 7095.0], [65.9, 7096.0], [66.0, 7096.0], [66.1, 7098.0], [66.2, 7098.0], [66.3, 7098.0], [66.4, 7099.0], [66.5, 7099.0], [66.6, 7099.0], [66.7, 7100.0], [66.8, 7100.0], [66.9, 7100.0], [67.0, 7100.0], [67.1, 7100.0], [67.2, 7101.0], [67.3, 7101.0], [67.4, 7102.0], [67.5, 7104.0], [67.6, 7104.0], [67.7, 7105.0], [67.8, 7105.0], [67.9, 7105.0], [68.0, 7106.0], [68.1, 7106.0], [68.2, 7108.0], [68.3, 7112.0], [68.4, 7112.0], [68.5, 7112.0], [68.6, 7113.0], [68.7, 7113.0], [68.8, 7118.0], [68.9, 7118.0], [69.0, 7118.0], [69.1, 7118.0], [69.2, 7118.0], [69.3, 7119.0], [69.4, 7120.0], [69.5, 7120.0], [69.6, 7121.0], [69.7, 7124.0], [69.8, 7124.0], [69.9, 7124.0], [70.0, 7124.0], [70.1, 7127.0], [70.2, 7128.0], [70.3, 7128.0], [70.4, 7129.0], [70.5, 7130.0], [70.6, 7130.0], [70.7, 7132.0], [70.8, 7132.0], [70.9, 7132.0], [71.0, 7133.0], [71.1, 7133.0], [71.2, 7135.0], [71.3, 7138.0], [71.4, 7138.0], [71.5, 7138.0], [71.6, 7138.0], [71.7, 7139.0], [71.8, 7141.0], [71.9, 7141.0], [72.0, 7142.0], [72.1, 7142.0], [72.2, 7142.0], [72.3, 7143.0], [72.4, 7143.0], [72.5, 7145.0], [72.6, 7147.0], [72.7, 7147.0], [72.8, 7148.0], [72.9, 7148.0], [73.0, 7148.0], [73.1, 7154.0], [73.2, 7154.0], [73.3, 7156.0], [73.4, 7158.0], [73.5, 7158.0], [73.6, 7159.0], [73.7, 7160.0], [73.8, 7160.0], [73.9, 7161.0], [74.0, 7161.0], [74.1, 7163.0], [74.2, 7164.0], [74.3, 7164.0], [74.4, 7164.0], [74.5, 7165.0], [74.6, 7165.0], [74.7, 7167.0], [74.8, 7167.0], [74.9, 7167.0], [75.0, 7168.0], [75.1, 7168.0], [75.2, 7168.0], [75.3, 7168.0], [75.4, 7168.0], [75.5, 7172.0], [75.6, 7179.0], [75.7, 7179.0], [75.8, 7181.0], [75.9, 7181.0], [76.0, 7182.0], [76.1, 7183.0], [76.2, 7183.0], [76.3, 7183.0], [76.4, 7185.0], [76.5, 7185.0], [76.6, 7186.0], [76.7, 7186.0], [76.8, 7187.0], [76.9, 7187.0], [77.0, 7187.0], [77.1, 7187.0], [77.2, 7189.0], [77.3, 7189.0], [77.4, 7190.0], [77.5, 7190.0], [77.6, 7192.0], [77.7, 7193.0], [77.8, 7193.0], [77.9, 7202.0], [78.0, 7203.0], [78.1, 7203.0], [78.2, 7205.0], [78.3, 7205.0], [78.4, 7209.0], [78.5, 7213.0], [78.6, 7213.0], [78.7, 7214.0], [78.8, 7218.0], [78.9, 7218.0], [79.0, 7222.0], [79.1, 7222.0], [79.2, 7229.0], [79.3, 7231.0], [79.4, 7231.0], [79.5, 7232.0], [79.6, 7233.0], [79.7, 7233.0], [79.8, 7233.0], [79.9, 7233.0], [80.0, 7233.0], [80.1, 7235.0], [80.2, 7235.0], [80.3, 7237.0], [80.4, 7238.0], [80.5, 7238.0], [80.6, 7239.0], [80.7, 7239.0], [80.8, 7242.0], [80.9, 7243.0], [81.0, 7243.0], [81.1, 7244.0], [81.2, 7246.0], [81.3, 7246.0], [81.4, 7250.0], [81.5, 7250.0], [81.6, 7250.0], [81.7, 7252.0], [81.8, 7252.0], [81.9, 7254.0], [82.0, 7254.0], [82.1, 7254.0], [82.2, 7255.0], [82.3, 7256.0], [82.4, 7256.0], [82.5, 7260.0], [82.6, 7260.0], [82.7, 7262.0], [82.8, 7264.0], [82.9, 7264.0], [83.0, 7267.0], [83.1, 7271.0], [83.2, 7271.0], [83.3, 7273.0], [83.4, 7273.0], [83.5, 7274.0], [83.6, 7277.0], [83.7, 7277.0], [83.8, 7277.0], [83.9, 7280.0], [84.0, 7280.0], [84.1, 7283.0], [84.2, 7283.0], [84.3, 7285.0], [84.4, 7288.0], [84.5, 7288.0], [84.6, 7293.0], [84.7, 7300.0], [84.8, 7300.0], [84.9, 7301.0], [85.0, 7301.0], [85.1, 7303.0], [85.2, 7304.0], [85.3, 7304.0], [85.4, 7304.0], [85.5, 7305.0], [85.6, 7305.0], [85.7, 7307.0], [85.8, 7307.0], [85.9, 7310.0], [86.0, 7311.0], [86.1, 7311.0], [86.2, 7312.0], [86.3, 7312.0], [86.4, 7312.0], [86.5, 7313.0], [86.6, 7313.0], [86.7, 7318.0], [86.8, 7320.0], [86.9, 7320.0], [87.0, 7321.0], [87.1, 7322.0], [87.2, 7322.0], [87.3, 7323.0], [87.4, 7323.0], [87.5, 7323.0], [87.6, 7325.0], [87.7, 7325.0], [87.8, 7326.0], [87.9, 7328.0], [88.0, 7328.0], [88.1, 7331.0], [88.2, 7331.0], [88.3, 7331.0], [88.4, 7337.0], [88.5, 7337.0], [88.6, 7339.0], [88.7, 7348.0], [88.8, 7348.0], [88.9, 7349.0], [89.0, 7352.0], [89.1, 7352.0], [89.2, 7356.0], [89.3, 7356.0], [89.4, 7358.0], [89.5, 7358.0], [89.6, 7358.0], [89.7, 7359.0], [89.8, 7361.0], [89.9, 7361.0], [90.0, 7362.0], [90.1, 7362.0], [90.2, 7366.0], [90.3, 7369.0], [90.4, 7369.0], [90.5, 7378.0], [90.6, 7380.0], [90.7, 7380.0], [90.8, 7380.0], [90.9, 7380.0], [91.0, 7381.0], [91.1, 7386.0], [91.2, 7386.0], [91.3, 7386.0], [91.4, 7396.0], [91.5, 7396.0], [91.6, 7402.0], [91.7, 7402.0], [91.8, 7402.0], [91.9, 7408.0], [92.0, 7408.0], [92.1, 7409.0], [92.2, 7409.0], [92.3, 7409.0], [92.4, 7410.0], [92.5, 7410.0], [92.6, 7419.0], [92.7, 7419.0], [92.8, 7419.0], [92.9, 7423.0], [93.0, 7438.0], [93.1, 7438.0], [93.2, 7441.0], [93.3, 7441.0], [93.4, 7449.0], [93.5, 7452.0], [93.6, 7452.0], [93.7, 7456.0], [93.8, 7472.0], [93.9, 7472.0], [94.0, 7480.0], [94.1, 7494.0], [94.2, 7494.0], [94.3, 7500.0], [94.4, 7500.0], [94.5, 7508.0], [94.6, 7513.0], [94.7, 7513.0], [94.8, 7522.0], [94.9, 7530.0], [95.0, 7530.0], [95.1, 7572.0], [95.2, 7572.0], [95.3, 7576.0], [95.4, 7584.0], [95.5, 7584.0], [95.6, 7593.0], [95.7, 7601.0], [95.8, 7601.0], [95.9, 7621.0], [96.0, 7621.0], [96.1, 7621.0], [96.2, 7625.0], [96.3, 7625.0], [96.4, 7627.0], [96.5, 7627.0], [96.6, 7627.0], [96.7, 7629.0], [96.8, 7629.0], [96.9, 7632.0], [97.0, 7642.0], [97.1, 7642.0], [97.2, 7645.0], [97.3, 7653.0], [97.4, 7653.0], [97.5, 7656.0], [97.6, 7656.0], [97.7, 7664.0], [97.8, 7668.0], [97.9, 7668.0], [98.0, 7675.0], [98.1, 7685.0], [98.2, 7685.0], [98.3, 7687.0], [98.4, 7687.0], [98.5, 7708.0], [98.6, 7724.0], [98.7, 7724.0], [98.8, 7733.0], [98.9, 7813.0], [99.0, 7813.0], [99.1, 7825.0], [99.2, 7825.0], [99.3, 7831.0], [99.4, 7844.0], [99.5, 7844.0], [99.6, 7943.0], [99.7, 19859.0], [99.8, 19859.0], [99.9, 20804.0], [100.0, 20804.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 10236.0], [0.1, 10236.0], [0.2, 13460.0], [0.3, 13460.0], [0.4, 13726.0], [0.5, 13865.0], [0.6, 13865.0], [0.7, 14034.0], [0.8, 14244.0], [0.9, 14244.0], [1.0, 14245.0], [1.1, 14249.0], [1.2, 14249.0], [1.3, 14261.0], [1.4, 14284.0], [1.5, 14284.0], [1.6, 14333.0], [1.7, 14393.0], [1.8, 14393.0], [1.9, 14401.0], [2.0, 14401.0], [2.1, 14407.0], [2.2, 14586.0], [2.3, 14586.0], [2.4, 14607.0], [2.5, 14629.0], [2.6, 14629.0], [2.7, 14799.0], [2.8, 14822.0], [2.9, 14822.0], [3.0, 14967.0], [3.1, 15178.0], [3.2, 15178.0], [3.3, 15241.0], [3.4, 15251.0], [3.5, 15251.0], [3.6, 15272.0], [3.7, 15280.0], [3.8, 15280.0], [3.9, 15444.0], [4.0, 15444.0], [4.1, 15530.0], [4.2, 15545.0], [4.3, 15545.0], [4.4, 15582.0], [4.5, 15627.0], [4.6, 15627.0], [4.7, 15663.0], [4.8, 15730.0], [4.9, 15730.0], [5.0, 15791.0], [5.1, 15841.0], [5.2, 15841.0], [5.3, 15842.0], [5.4, 15879.0], [5.5, 15879.0], [5.6, 15896.0], [5.7, 15896.0], [5.8, 16004.0], [5.9, 16008.0], [6.0, 16008.0], [6.1, 16014.0], [6.2, 16031.0], [6.3, 16031.0], [6.4, 16034.0], [6.5, 16034.0], [6.6, 16034.0], [6.7, 16054.0], [6.8, 16060.0], [6.9, 16060.0], [7.0, 16063.0], [7.1, 16069.0], [7.2, 16069.0], [7.3, 16071.0], [7.4, 16075.0], [7.5, 16075.0], [7.6, 16078.0], [7.7, 16078.0], [7.8, 16081.0], [7.9, 16081.0], [8.0, 16081.0], [8.1, 16082.0], [8.2, 16092.0], [8.3, 16092.0], [8.4, 16095.0], [8.5, 16105.0], [8.6, 16105.0], [8.7, 16110.0], [8.8, 16115.0], [8.9, 16115.0], [9.0, 16116.0], [9.1, 16118.0], [9.2, 16118.0], [9.3, 16122.0], [9.4, 16127.0], [9.5, 16127.0], [9.6, 16129.0], [9.7, 16129.0], [9.8, 16131.0], [9.9, 16133.0], [10.0, 16133.0], [10.1, 16145.0], [10.2, 16147.0], [10.3, 16147.0], [10.4, 16157.0], [10.5, 16160.0], [10.6, 16160.0], [10.7, 16163.0], [10.8, 16176.0], [10.9, 16176.0], [11.0, 16179.0], [11.1, 16181.0], [11.2, 16181.0], [11.3, 16190.0], [11.4, 16190.0], [11.5, 16195.0], [11.6, 16201.0], [11.7, 16201.0], [11.8, 16202.0], [11.9, 16202.0], [12.0, 16202.0], [12.1, 16203.0], [12.2, 16204.0], [12.3, 16204.0], [12.4, 16220.0], [12.5, 16226.0], [12.6, 16226.0], [12.7, 16228.0], [12.8, 16233.0], [12.9, 16233.0], [13.0, 16233.0], [13.1, 16237.0], [13.2, 16237.0], [13.3, 16239.0], [13.4, 16239.0], [13.5, 16240.0], [13.6, 16242.0], [13.7, 16242.0], [13.8, 16244.0], [13.9, 16253.0], [14.0, 16253.0], [14.1, 16255.0], [14.2, 16257.0], [14.3, 16257.0], [14.4, 16261.0], [14.5, 16261.0], [14.6, 16261.0], [14.7, 16267.0], [14.8, 16269.0], [14.9, 16269.0], [15.0, 16269.0], [15.1, 16269.0], [15.2, 16274.0], [15.3, 16279.0], [15.4, 16279.0], [15.5, 16280.0], [15.6, 16283.0], [15.7, 16283.0], [15.8, 16286.0], [15.9, 16286.0], [16.0, 16286.0], [16.1, 16288.0], [16.2, 16289.0], [16.3, 16289.0], [16.4, 16290.0], [16.5, 16292.0], [16.6, 16292.0], [16.7, 16293.0], [16.8, 16297.0], [16.9, 16297.0], [17.0, 16298.0], [17.1, 16298.0], [17.2, 16298.0], [17.3, 16300.0], [17.4, 16300.0], [17.5, 16304.0], [17.6, 16311.0], [17.7, 16311.0], [17.8, 16312.0], [17.9, 16318.0], [18.0, 16318.0], [18.1, 16319.0], [18.2, 16319.0], [18.3, 16319.0], [18.4, 16319.0], [18.5, 16322.0], [18.6, 16322.0], [18.7, 16329.0], [18.8, 16329.0], [18.9, 16329.0], [19.0, 16330.0], [19.1, 16330.0], [19.2, 16337.0], [19.3, 16338.0], [19.4, 16338.0], [19.5, 16342.0], [19.6, 16345.0], [19.7, 16345.0], [19.8, 16349.0], [19.9, 16352.0], [20.0, 16352.0], [20.1, 16358.0], [20.2, 16358.0], [20.3, 16358.0], [20.4, 16365.0], [20.5, 16367.0], [20.6, 16367.0], [20.7, 16367.0], [20.8, 16367.0], [20.9, 16371.0], [21.0, 16372.0], [21.1, 16372.0], [21.2, 16372.0], [21.3, 16373.0], [21.4, 16373.0], [21.5, 16378.0], [21.6, 16380.0], [21.7, 16380.0], [21.8, 16380.0], [21.9, 16383.0], [22.0, 16383.0], [22.1, 16386.0], [22.2, 16389.0], [22.3, 16389.0], [22.4, 16389.0], [22.5, 16390.0], [22.6, 16390.0], [22.7, 16390.0], [22.8, 16390.0], [22.9, 16390.0], [23.0, 16391.0], [23.1, 16391.0], [23.2, 16394.0], [23.3, 16395.0], [23.4, 16395.0], [23.5, 16395.0], [23.6, 16398.0], [23.7, 16398.0], [23.8, 16401.0], [23.9, 16403.0], [24.0, 16403.0], [24.1, 16403.0], [24.2, 16403.0], [24.3, 16403.0], [24.4, 16406.0], [24.5, 16408.0], [24.6, 16408.0], [24.7, 16409.0], [24.8, 16409.0], [24.9, 16410.0], [25.0, 16411.0], [25.1, 16411.0], [25.2, 16414.0], [25.3, 16414.0], [25.4, 16414.0], [25.5, 16414.0], [25.6, 16415.0], [25.7, 16415.0], [25.8, 16415.0], [25.9, 16423.0], [26.0, 16423.0], [26.1, 16425.0], [26.2, 16427.0], [26.3, 16427.0], [26.4, 16431.0], [26.5, 16431.0], [26.6, 16432.0], [26.7, 16432.0], [26.8, 16432.0], [26.9, 16433.0], [27.0, 16435.0], [27.1, 16435.0], [27.2, 16435.0], [27.3, 16438.0], [27.4, 16438.0], [27.5, 16438.0], [27.6, 16440.0], [27.7, 16440.0], [27.8, 16440.0], [27.9, 16441.0], [28.0, 16441.0], [28.1, 16441.0], [28.2, 16445.0], [28.3, 16445.0], [28.4, 16448.0], [28.5, 16448.0], [28.6, 16448.0], [28.7, 16452.0], [28.8, 16452.0], [28.9, 16456.0], [29.0, 16457.0], [29.1, 16457.0], [29.2, 16457.0], [29.3, 16457.0], [29.4, 16457.0], [29.5, 16457.0], [29.6, 16459.0], [29.7, 16459.0], [29.8, 16460.0], [29.9, 16462.0], [30.0, 16462.0], [30.1, 16465.0], [30.2, 16465.0], [30.3, 16467.0], [30.4, 16468.0], [30.5, 16468.0], [30.6, 16468.0], [30.7, 16469.0], [30.8, 16469.0], [30.9, 16470.0], [31.0, 16470.0], [31.1, 16470.0], [31.2, 16473.0], [31.3, 16474.0], [31.4, 16474.0], [31.5, 16475.0], [31.6, 16476.0], [31.7, 16476.0], [31.8, 16476.0], [31.9, 16477.0], [32.0, 16477.0], [32.1, 16479.0], [32.2, 16479.0], [32.3, 16483.0], [32.4, 16486.0], [32.5, 16486.0], [32.6, 16488.0], [32.7, 16489.0], [32.8, 16489.0], [32.9, 16490.0], [33.0, 16492.0], [33.1, 16492.0], [33.2, 16493.0], [33.3, 16493.0], [33.4, 16493.0], [33.5, 16496.0], [33.6, 16496.0], [33.7, 16496.0], [33.8, 16497.0], [33.9, 16498.0], [34.0, 16498.0], [34.1, 16500.0], [34.2, 16500.0], [34.3, 16501.0], [34.4, 16501.0], [34.5, 16501.0], [34.6, 16503.0], [34.7, 16503.0], [34.8, 16503.0], [34.9, 16505.0], [35.0, 16507.0], [35.1, 16507.0], [35.2, 16509.0], [35.3, 16511.0], [35.4, 16511.0], [35.5, 16512.0], [35.6, 16513.0], [35.7, 16513.0], [35.8, 16516.0], [35.9, 16516.0], [36.0, 16516.0], [36.1, 16518.0], [36.2, 16518.0], [36.3, 16522.0], [36.4, 16525.0], [36.5, 16525.0], [36.6, 16527.0], [36.7, 16529.0], [36.8, 16529.0], [36.9, 16530.0], [37.0, 16537.0], [37.1, 16537.0], [37.2, 16537.0], [37.3, 16537.0], [37.4, 16537.0], [37.5, 16538.0], [37.6, 16541.0], [37.7, 16541.0], [37.8, 16541.0], [37.9, 16541.0], [38.0, 16543.0], [38.1, 16544.0], [38.2, 16544.0], [38.3, 16544.0], [38.4, 16546.0], [38.5, 16546.0], [38.6, 16546.0], [38.7, 16547.0], [38.8, 16547.0], [38.9, 16549.0], [39.0, 16549.0], [39.1, 16549.0], [39.2, 16550.0], [39.3, 16551.0], [39.4, 16551.0], [39.5, 16553.0], [39.6, 16556.0], [39.7, 16556.0], [39.8, 16557.0], [39.9, 16557.0], [40.0, 16558.0], [40.1, 16560.0], [40.2, 16560.0], [40.3, 16560.0], [40.4, 16561.0], [40.5, 16561.0], [40.6, 16565.0], [40.7, 16567.0], [40.8, 16567.0], [40.9, 16569.0], [41.0, 16571.0], [41.1, 16571.0], [41.2, 16572.0], [41.3, 16572.0], [41.4, 16572.0], [41.5, 16573.0], [41.6, 16573.0], [41.7, 16573.0], [41.8, 16574.0], [41.9, 16574.0], [42.0, 16575.0], [42.1, 16578.0], [42.2, 16578.0], [42.3, 16578.0], [42.4, 16581.0], [42.5, 16581.0], [42.6, 16581.0], [42.7, 16584.0], [42.8, 16584.0], [42.9, 16585.0], [43.0, 16586.0], [43.1, 16586.0], [43.2, 16586.0], [43.3, 16589.0], [43.4, 16589.0], [43.5, 16597.0], [43.6, 16597.0], [43.7, 16597.0], [43.8, 16598.0], [43.9, 16598.0], [44.0, 16599.0], [44.1, 16600.0], [44.2, 16600.0], [44.3, 16602.0], [44.4, 16602.0], [44.5, 16602.0], [44.6, 16603.0], [44.7, 16603.0], [44.8, 16603.0], [44.9, 16603.0], [45.0, 16604.0], [45.1, 16604.0], [45.2, 16606.0], [45.3, 16606.0], [45.4, 16606.0], [45.5, 16608.0], [45.6, 16608.0], [45.7, 16609.0], [45.8, 16610.0], [45.9, 16610.0], [46.0, 16612.0], [46.1, 16612.0], [46.2, 16612.0], [46.3, 16615.0], [46.4, 16615.0], [46.5, 16615.0], [46.6, 16622.0], [46.7, 16625.0], [46.8, 16625.0], [46.9, 16626.0], [47.0, 16631.0], [47.1, 16631.0], [47.2, 16631.0], [47.3, 16631.0], [47.4, 16632.0], [47.5, 16635.0], [47.6, 16635.0], [47.7, 16643.0], [47.8, 16645.0], [47.9, 16645.0], [48.0, 16651.0], [48.1, 16652.0], [48.2, 16652.0], [48.3, 16654.0], [48.4, 16654.0], [48.5, 16654.0], [48.6, 16656.0], [48.7, 16659.0], [48.8, 16659.0], [48.9, 16660.0], [49.0, 16666.0], [49.1, 16666.0], [49.2, 16667.0], [49.3, 16667.0], [49.4, 16668.0], [49.5, 16671.0], [49.6, 16671.0], [49.7, 16672.0], [49.8, 16680.0], [49.9, 16680.0], [50.0, 16680.0], [50.1, 16681.0], [50.2, 16681.0], [50.3, 16681.0], [50.4, 16682.0], [50.5, 16682.0], [50.6, 16688.0], [50.7, 16689.0], [50.8, 16689.0], [50.9, 16689.0], [51.0, 16689.0], [51.1, 16691.0], [51.2, 16691.0], [51.3, 16691.0], [51.4, 16692.0], [51.5, 16692.0], [51.6, 16692.0], [51.7, 16694.0], [51.8, 16697.0], [51.9, 16697.0], [52.0, 16697.0], [52.1, 16701.0], [52.2, 16701.0], [52.3, 16702.0], [52.4, 16705.0], [52.5, 16705.0], [52.6, 16713.0], [52.7, 16713.0], [52.8, 16713.0], [52.9, 16717.0], [53.0, 16717.0], [53.1, 16719.0], [53.2, 16721.0], [53.3, 16721.0], [53.4, 16725.0], [53.5, 16729.0], [53.6, 16729.0], [53.7, 16730.0], [53.8, 16731.0], [53.9, 16731.0], [54.0, 16733.0], [54.1, 16734.0], [54.2, 16734.0], [54.3, 16734.0], [54.4, 16735.0], [54.5, 16735.0], [54.6, 16735.0], [54.7, 16737.0], [54.8, 16737.0], [54.9, 16738.0], [55.0, 16738.0], [55.1, 16740.0], [55.2, 16749.0], [55.3, 16749.0], [55.4, 16750.0], [55.5, 16750.0], [55.6, 16750.0], [55.7, 16752.0], [55.8, 16756.0], [55.9, 16756.0], [56.0, 16757.0], [56.1, 16760.0], [56.2, 16760.0], [56.3, 16760.0], [56.4, 16760.0], [56.5, 16760.0], [56.6, 16762.0], [56.7, 16762.0], [56.8, 16764.0], [56.9, 16765.0], [57.0, 16765.0], [57.1, 16767.0], [57.2, 16769.0], [57.3, 16769.0], [57.4, 16770.0], [57.5, 16770.0], [57.6, 16770.0], [57.7, 16772.0], [57.8, 16773.0], [57.9, 16773.0], [58.0, 16776.0], [58.1, 16779.0], [58.2, 16779.0], [58.3, 16779.0], [58.4, 16780.0], [58.5, 16780.0], [58.6, 16785.0], [58.7, 16785.0], [58.8, 16786.0], [58.9, 16789.0], [59.0, 16789.0], [59.1, 16790.0], [59.2, 16793.0], [59.3, 16793.0], [59.4, 16795.0], [59.5, 16797.0], [59.6, 16797.0], [59.7, 16799.0], [59.8, 16801.0], [59.9, 16801.0], [60.0, 16804.0], [60.1, 16804.0], [60.2, 16804.0], [60.3, 16806.0], [60.4, 16806.0], [60.5, 16815.0], [60.6, 16816.0], [60.7, 16816.0], [60.8, 16817.0], [60.9, 16820.0], [61.0, 16820.0], [61.1, 16835.0], [61.2, 16835.0], [61.3, 16835.0], [61.4, 16837.0], [61.5, 16839.0], [61.6, 16839.0], [61.7, 16839.0], [61.8, 16843.0], [61.9, 16843.0], [62.0, 16845.0], [62.1, 16846.0], [62.2, 16846.0], [62.3, 16849.0], [62.4, 16849.0], [62.5, 16850.0], [62.6, 16852.0], [62.7, 16852.0], [62.8, 16859.0], [62.9, 16859.0], [63.0, 16859.0], [63.1, 16862.0], [63.2, 16862.0], [63.3, 16862.0], [63.4, 16864.0], [63.5, 16866.0], [63.6, 16866.0], [63.7, 16867.0], [63.8, 16869.0], [63.9, 16869.0], [64.0, 16870.0], [64.1, 16870.0], [64.2, 16870.0], [64.3, 16871.0], [64.4, 16871.0], [64.5, 16871.0], [64.6, 16873.0], [64.7, 16873.0], [64.8, 16873.0], [64.9, 16878.0], [65.0, 16878.0], [65.1, 16879.0], [65.2, 16879.0], [65.3, 16879.0], [65.4, 16880.0], [65.5, 16881.0], [65.6, 16881.0], [65.7, 16883.0], [65.8, 16884.0], [65.9, 16884.0], [66.0, 16886.0], [66.1, 16886.0], [66.2, 16886.0], [66.3, 16888.0], [66.4, 16888.0], [66.5, 16889.0], [66.6, 16893.0], [66.7, 16893.0], [66.8, 16894.0], [66.9, 16896.0], [67.0, 16896.0], [67.1, 16898.0], [67.2, 16898.0], [67.3, 16898.0], [67.4, 16898.0], [67.5, 16899.0], [67.6, 16899.0], [67.7, 16900.0], [67.8, 16903.0], [67.9, 16903.0], [68.0, 16905.0], [68.1, 16905.0], [68.2, 16909.0], [68.3, 16909.0], [68.4, 16909.0], [68.5, 16910.0], [68.6, 16913.0], [68.7, 16913.0], [68.8, 16913.0], [68.9, 16916.0], [69.0, 16916.0], [69.1, 16924.0], [69.2, 16931.0], [69.3, 16931.0], [69.4, 16934.0], [69.5, 16934.0], [69.6, 16934.0], [69.7, 16934.0], [69.8, 16938.0], [69.9, 16938.0], [70.0, 16938.0], [70.1, 16938.0], [70.2, 16943.0], [70.3, 16947.0], [70.4, 16947.0], [70.5, 16951.0], [70.6, 16952.0], [70.7, 16952.0], [70.8, 16952.0], [70.9, 16952.0], [71.0, 16952.0], [71.1, 16954.0], [71.2, 16954.0], [71.3, 16954.0], [71.4, 16957.0], [71.5, 16959.0], [71.6, 16959.0], [71.7, 16959.0], [71.8, 16959.0], [71.9, 16961.0], [72.0, 16963.0], [72.1, 16963.0], [72.2, 16964.0], [72.3, 16965.0], [72.4, 16965.0], [72.5, 16968.0], [72.6, 16969.0], [72.7, 16969.0], [72.8, 16970.0], [72.9, 16973.0], [73.0, 16973.0], [73.1, 16975.0], [73.2, 16975.0], [73.3, 16975.0], [73.4, 16981.0], [73.5, 16982.0], [73.6, 16982.0], [73.7, 16985.0], [73.8, 16985.0], [73.9, 16989.0], [74.0, 16991.0], [74.1, 16991.0], [74.2, 16993.0], [74.3, 16996.0], [74.4, 16996.0], [74.5, 16999.0], [74.6, 17004.0], [74.7, 17004.0], [74.8, 17004.0], [74.9, 17006.0], [75.0, 17006.0], [75.1, 17009.0], [75.2, 17011.0], [75.3, 17011.0], [75.4, 17012.0], [75.5, 17012.0], [75.6, 17013.0], [75.7, 17019.0], [75.8, 17019.0], [75.9, 17020.0], [76.0, 17032.0], [76.1, 17032.0], [76.2, 17040.0], [76.3, 17056.0], [76.4, 17056.0], [76.5, 17056.0], [76.6, 17059.0], [76.7, 17059.0], [76.8, 17080.0], [76.9, 17094.0], [77.0, 17094.0], [77.1, 17104.0], [77.2, 17108.0], [77.3, 17108.0], [77.4, 17111.0], [77.5, 17111.0], [77.6, 17113.0], [77.7, 17114.0], [77.8, 17114.0], [77.9, 17115.0], [78.0, 17123.0], [78.1, 17123.0], [78.2, 17128.0], [78.3, 17129.0], [78.4, 17129.0], [78.5, 17130.0], [78.6, 17137.0], [78.7, 17137.0], [78.8, 17137.0], [78.9, 17142.0], [79.0, 17142.0], [79.1, 17148.0], [79.2, 17158.0], [79.3, 17158.0], [79.4, 17160.0], [79.5, 17160.0], [79.6, 17162.0], [79.7, 17164.0], [79.8, 17164.0], [79.9, 17167.0], [80.0, 17168.0], [80.1, 17168.0], [80.2, 17168.0], [80.3, 17169.0], [80.4, 17169.0], [80.5, 17180.0], [80.6, 17185.0], [80.7, 17185.0], [80.8, 17202.0], [80.9, 17213.0], [81.0, 17213.0], [81.1, 17214.0], [81.2, 17214.0], [81.3, 17215.0], [81.4, 17215.0], [81.5, 17215.0], [81.6, 17236.0], [81.7, 17239.0], [81.8, 17239.0], [81.9, 17239.0], [82.0, 17256.0], [82.1, 17256.0], [82.2, 17270.0], [82.3, 17274.0], [82.4, 17274.0], [82.5, 17308.0], [82.6, 17313.0], [82.7, 17313.0], [82.8, 17332.0], [82.9, 17354.0], [83.0, 17354.0], [83.1, 17357.0], [83.2, 17357.0], [83.3, 17390.0], [83.4, 17400.0], [83.5, 17400.0], [83.6, 17401.0], [83.7, 17406.0], [83.8, 17406.0], [83.9, 17418.0], [84.0, 17427.0], [84.1, 17427.0], [84.2, 17438.0], [84.3, 17442.0], [84.4, 17442.0], [84.5, 17443.0], [84.6, 17449.0], [84.7, 17449.0], [84.8, 17453.0], [84.9, 17462.0], [85.0, 17462.0], [85.1, 17484.0], [85.2, 17484.0], [85.3, 17496.0], [85.4, 17502.0], [85.5, 17502.0], [85.6, 17503.0], [85.7, 17506.0], [85.8, 17506.0], [85.9, 17522.0], [86.0, 17538.0], [86.1, 17538.0], [86.2, 17541.0], [86.3, 17550.0], [86.4, 17550.0], [86.5, 17553.0], [86.6, 17559.0], [86.7, 17559.0], [86.8, 17564.0], [86.9, 17564.0], [87.0, 17595.0], [87.1, 17609.0], [87.2, 17609.0], [87.3, 17640.0], [87.4, 17641.0], [87.5, 17641.0], [87.6, 17654.0], [87.7, 17660.0], [87.8, 17660.0], [87.9, 17667.0], [88.0, 17668.0], [88.1, 17668.0], [88.2, 17692.0], [88.3, 17705.0], [88.4, 17705.0], [88.5, 17734.0], [88.6, 17741.0], [88.7, 17741.0], [88.8, 17751.0], [88.9, 17751.0], [89.0, 17753.0], [89.1, 17759.0], [89.2, 17759.0], [89.3, 17775.0], [89.4, 17777.0], [89.5, 17777.0], [89.6, 17787.0], [89.7, 17794.0], [89.8, 17794.0], [89.9, 17811.0], [90.0, 17833.0], [90.1, 17833.0], [90.2, 17839.0], [90.3, 17843.0], [90.4, 17843.0], [90.5, 17847.0], [90.6, 17847.0], [90.7, 17867.0], [90.8, 17885.0], [90.9, 17885.0], [91.0, 17906.0], [91.1, 17935.0], [91.2, 17935.0], [91.3, 17938.0], [91.4, 17956.0], [91.5, 17956.0], [91.6, 17964.0], [91.7, 17965.0], [91.8, 17965.0], [91.9, 17969.0], [92.0, 17985.0], [92.1, 17985.0], [92.2, 18001.0], [92.3, 18032.0], [92.4, 18032.0], [92.5, 18087.0], [92.6, 18087.0], [92.7, 18091.0], [92.8, 18102.0], [92.9, 18102.0], [93.0, 18118.0], [93.1, 18121.0], [93.2, 18121.0], [93.3, 18127.0], [93.4, 18141.0], [93.5, 18141.0], [93.6, 18178.0], [93.7, 18191.0], [93.8, 18191.0], [93.9, 18191.0], [94.0, 18210.0], [94.1, 18210.0], [94.2, 18211.0], [94.3, 18227.0], [94.4, 18227.0], [94.5, 18235.0], [94.6, 18235.0], [94.7, 18235.0], [94.8, 18241.0], [94.9, 18241.0], [95.0, 18243.0], [95.1, 18259.0], [95.2, 18259.0], [95.3, 18265.0], [95.4, 18274.0], [95.5, 18274.0], [95.6, 18284.0], [95.7, 18285.0], [95.8, 18285.0], [95.9, 18301.0], [96.0, 18321.0], [96.1, 18321.0], [96.2, 18335.0], [96.3, 18335.0], [96.4, 18337.0], [96.5, 18342.0], [96.6, 18342.0], [96.7, 18347.0], [96.8, 18365.0], [96.9, 18365.0], [97.0, 18372.0], [97.1, 18403.0], [97.2, 18403.0], [97.3, 18412.0], [97.4, 18458.0], [97.5, 18458.0], [97.6, 18462.0], [97.7, 18488.0], [97.8, 18488.0], [97.9, 18511.0], [98.0, 18514.0], [98.1, 18514.0], [98.2, 18524.0], [98.3, 18524.0], [98.4, 18547.0], [98.5, 18558.0], [98.6, 18558.0], [98.7, 18564.0], [98.8, 18585.0], [98.9, 18585.0], [99.0, 18596.0], [99.1, 18651.0], [99.2, 18651.0], [99.3, 18661.0], [99.4, 18873.0], [99.5, 18873.0], [99.6, 18957.0], [99.7, 19099.0], [99.8, 19099.0], [99.9, 19360.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 5100.0, "maxY": 102.0, "series": [{"data": [[10200.0, 1.0], [16100.0, 1.0], [16500.0, 2.0], [16900.0, 3.0], [16800.0, 1.0], [16600.0, 2.0], [17000.0, 1.0], [17200.0, 1.0], [17400.0, 3.0], [17300.0, 3.0], [17500.0, 2.0], [17600.0, 2.0], [21000.0, 2.0], [20900.0, 1.0], [21300.0, 2.0], [21700.0, 2.0], [22200.0, 4.0], [21900.0, 3.0], [22300.0, 3.0], [21800.0, 2.0], [22000.0, 4.0], [22500.0, 2.0], [22400.0, 4.0], [22100.0, 2.0], [23300.0, 57.0], [22800.0, 5.0], [22900.0, 4.0], [23200.0, 22.0], [23400.0, 47.0], [23500.0, 79.0], [23100.0, 18.0], [23000.0, 6.0], [22700.0, 3.0], [22600.0, 2.0], [23800.0, 65.0], [23700.0, 99.0], [23900.0, 42.0], [23600.0, 102.0], [24000.0, 26.0], [24300.0, 1.0], [24500.0, 1.0], [24100.0, 10.0], [24400.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [24900.0, 1.0], [25200.0, 1.0], [37500.0, 1.0], [37800.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[19800.0, 1.0], [20800.0, 1.0], [5100.0, 2.0], [5300.0, 6.0], [5200.0, 4.0], [5500.0, 11.0], [5600.0, 14.0], [5400.0, 10.0], [5800.0, 16.0], [5700.0, 10.0], [6000.0, 9.0], [5900.0, 14.0], [6100.0, 8.0], [6200.0, 6.0], [6300.0, 9.0], [6400.0, 18.0], [6600.0, 26.0], [6500.0, 24.0], [6800.0, 61.0], [6900.0, 52.0], [6700.0, 37.0], [7000.0, 81.0], [7100.0, 70.0], [7400.0, 17.0], [7200.0, 43.0], [7300.0, 43.0], [7600.0, 17.0], [7500.0, 9.0], [7700.0, 3.0], [7900.0, 1.0], [7800.0, 4.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[10200.0, 1.0], [13800.0, 1.0], [13700.0, 1.0], [13400.0, 1.0], [14000.0, 1.0], [14200.0, 5.0], [14300.0, 2.0], [14500.0, 1.0], [14400.0, 2.0], [14800.0, 1.0], [14600.0, 2.0], [14700.0, 1.0], [14900.0, 1.0], [15200.0, 4.0], [15100.0, 1.0], [15500.0, 3.0], [15700.0, 2.0], [15800.0, 4.0], [15600.0, 2.0], [15400.0, 1.0], [16300.0, 42.0], [16000.0, 18.0], [16200.0, 37.0], [16100.0, 20.0], [16600.0, 52.0], [17300.0, 6.0], [16800.0, 51.0], [16700.0, 50.0], [16400.0, 67.0], [17400.0, 13.0], [17200.0, 11.0], [16900.0, 45.0], [17100.0, 24.0], [17000.0, 16.0], [16500.0, 65.0], [18200.0, 12.0], [17500.0, 11.0], [17900.0, 8.0], [17600.0, 8.0], [17800.0, 7.0], [18100.0, 8.0], [18000.0, 4.0], [18400.0, 5.0], [18300.0, 8.0], [17700.0, 10.0], [18900.0, 1.0], [19000.0, 1.0], [19300.0, 1.0], [18800.0, 1.0], [18500.0, 8.0], [18600.0, 2.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 37800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1326.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1326.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1326.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 43.935643564356425, "minX": 1.61658462E12, "maxY": 50.0, "series": [{"data": [[1.61658474E12, 50.0], [1.61658462E12, 50.0], [1.6165848E12, 50.0], [1.61658468E12, 50.0], [1.61658486E12, 43.935643564356425]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61658486E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5538.0, "minX": 1.0, "maxY": 37830.0, "series": [{"data": [[2.0, 22228.0], [3.0, 22436.0], [4.0, 22089.0], [5.0, 16682.0], [6.0, 22106.0], [7.0, 16106.0], [8.0, 22136.0], [9.0, 16976.0], [10.0, 22383.0], [11.0, 22669.0], [12.0, 22328.0], [13.0, 22425.0], [14.0, 22067.0], [15.0, 22246.0], [16.0, 22514.0], [17.0, 22859.0], [18.0, 22762.0], [19.0, 22634.0], [20.0, 22821.0], [21.0, 22953.0], [22.0, 22417.0], [23.0, 17400.0], [24.0, 22758.0], [25.0, 22773.0], [26.0, 23172.0], [27.0, 23347.0], [28.0, 23326.0], [29.0, 23388.0], [30.0, 17357.0], [31.0, 23405.0], [33.0, 23371.0], [32.0, 23290.0], [35.0, 17427.0], [34.0, 17565.0], [37.0, 17693.0], [36.0, 17313.0], [39.0, 17542.0], [38.0, 17654.0], [41.0, 17453.0], [40.0, 17390.0], [43.0, 17033.0], [42.0, 17256.0], [45.0, 16694.0], [44.0, 16905.0], [47.0, 16578.0], [46.0, 16817.0], [49.0, 16965.0], [48.0, 37830.0], [50.0, 23602.566666666655], [1.0, 10236.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[48.112480739599384, 23367.203389830498]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[33.0, 6471.0], [32.0, 6351.0], [2.0, 5618.0], [48.0, 19859.0], [3.0, 5675.0], [50.0, 6866.40901502504], [4.0, 5538.0], [6.0, 5649.0], [8.0, 5703.0], [10.0, 5614.0], [11.0, 5802.0], [12.0, 5572.0], [13.0, 5691.0], [14.0, 5625.0], [15.0, 5831.0], [16.0, 5799.0], [17.0, 5972.0], [18.0, 5862.0], [19.0, 5840.0], [20.0, 5802.0], [21.0, 6151.0], [22.0, 5801.0], [24.0, 5921.0], [25.0, 6067.0], [26.0, 6004.0], [27.0, 6131.0], [28.0, 6113.0], [29.0, 6259.0], [31.0, 6300.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[48.61881977671453, 6845.29505582137]], "isOverall": false, "label": "(POST) INSERT New User-Aggregated", "isController": false}, {"data": [[35.0, 17427.0], [34.0, 17564.0], [37.0, 17692.0], [36.0, 17313.0], [9.0, 16975.0], [39.0, 17541.0], [38.0, 17654.0], [41.0, 17453.0], [40.0, 17390.0], [43.0, 17032.0], [42.0, 17256.0], [45.0, 16694.0], [44.0, 16905.0], [47.0, 16578.0], [46.0, 16817.0], [49.0, 16965.0], [50.0, 16751.982484076427], [1.0, 10236.0], [5.0, 16681.0], [23.0, 17400.0], [7.0, 16105.0], [30.0, 17357.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}, {"data": [[49.446841294298935, 16753.898305084742]], "isOverall": false, "label": "(GET) Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 641445.25, "minX": 1.61658462E12, "maxY": 4883478.616666666, "series": [{"data": [[1.61658474E12, 3322172.433333333], [1.61658462E12, 4883478.616666666], [1.6165848E12, 2664744.9], [1.61658468E12, 2237101.316666667], [1.61658486E12, 3930419.283333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61658474E12, 920613.1666666666], [1.61658462E12, 918876.8], [1.6165848E12, 705531.8833333333], [1.61658468E12, 641445.25], [1.61658486E12, 1040763.2333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61658486E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6515.401574803151, "minX": 1.61658462E12, "maxY": 23798.076190476175, "series": [{"data": [[1.61658474E12, 23605.951724137936], [1.61658462E12, 23394.862068965514], [1.6165848E12, 23748.380952380947], [1.61658468E12, 23798.076190476175], [1.61658486E12, 22535.697986577183]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61658474E12, 6792.199999999999], [1.61658462E12, 7207.813793103446], [1.6165848E12, 6692.542857142858], [1.61658468E12, 6969.7619047619055], [1.61658486E12, 6515.401574803151]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61658474E12, 16864.17333333332], [1.61658462E12, 16249.706666666667], [1.6165848E12, 16948.78512396694], [1.61658468E12, 16766.390000000007], [1.61658486E12, 17021.531250000007]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61658486E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61658462E12, "maxY": 3723.5310344827594, "series": [{"data": [[1.61658474E12, 0.0], [1.61658462E12, 0.0], [1.6165848E12, 0.0], [1.61658468E12, 0.0], [1.61658486E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61658474E12, 3485.593103448277], [1.61658462E12, 3723.5310344827594], [1.6165848E12, 3329.9523809523816], [1.61658468E12, 3597.6095238095254], [1.61658486E12, 3309.417322834646]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61658474E12, 2407.053333333334], [1.61658462E12, 1871.460000000001], [1.6165848E12, 2470.702479338843], [1.61658468E12, 2329.1499999999996], [1.61658486E12, 2452.3125]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61658486E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61658462E12, "maxY": 2.4827586206896552, "series": [{"data": [[1.61658474E12, 0.0], [1.61658462E12, 0.0], [1.6165848E12, 0.0], [1.61658468E12, 0.0], [1.61658486E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61658474E12, 2.1448275862068966], [1.61658462E12, 2.4827586206896552], [1.6165848E12, 1.6761904761904762], [1.61658468E12, 1.838095238095239], [1.61658486E12, 1.8740157480314956]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61658474E12, 1.4599999999999995], [1.61658462E12, 2.2733333333333348], [1.6165848E12, 1.2892561983471078], [1.61658468E12, 1.5], [1.61658486E12, 1.3671875000000007]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61658486E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5131.0, "minX": 1.61658462E12, "maxY": 37830.0, "series": [{"data": [[1.61658474E12, 18651.0], [1.61658462E12, 19360.0], [1.6165848E12, 20804.0], [1.61658468E12, 18873.0], [1.61658486E12, 37830.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61658474E12, 5131.0], [1.61658462E12, 5824.0], [1.6165848E12, 5239.0], [1.61658468E12, 5305.0], [1.61658486E12, 5182.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61658474E12, 16934.0], [1.61658462E12, 16760.8], [1.6165848E12, 17010.2], [1.61658468E12, 16794.2], [1.61658486E12, 17438.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61658474E12, 18561.04], [1.61658462E12, 18962.680000000004], [1.6165848E12, 18522.6], [1.61658468E12, 18667.359999999993], [1.61658486E12, 22762.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61658474E12, 17662.8], [1.61658462E12, 17465.0], [1.6165848E12, 17662.1], [1.61658468E12, 17256.249999999996], [1.61658486E12, 18191.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61658486E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14618.0, "minX": 1000.0, "maxY": 16935.0, "series": [{"data": [[1000.0, 14618.0], [2000.0, 16935.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2305.0, "minX": 1000.0, "maxY": 2677.5, "series": [{"data": [[1000.0, 2677.5], [2000.0, 2305.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.61658456E12, "maxY": 4.916666666666667, "series": [{"data": [[1.61658456E12, 0.8333333333333334], [1.61658474E12, 4.916666666666667], [1.61658462E12, 4.916666666666667], [1.6165848E12, 3.7666666666666666], [1.61658468E12, 3.4166666666666665], [1.61658486E12, 4.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61658486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.4166666666666665, "minX": 1.61658462E12, "maxY": 5.083333333333333, "series": [{"data": [[1.61658474E12, 4.916666666666667], [1.61658462E12, 4.916666666666667], [1.6165848E12, 3.7666666666666666], [1.61658468E12, 3.4166666666666665], [1.61658486E12, 5.083333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61658486E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.61658462E12, "maxY": 2.5, "series": [{"data": [[1.61658474E12, 2.4166666666666665], [1.61658462E12, 2.4166666666666665], [1.6165848E12, 1.75], [1.61658468E12, 1.75], [1.61658486E12, 2.4833333333333334]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.61658474E12, 2.5], [1.61658462E12, 2.5], [1.6165848E12, 2.0166666666666666], [1.61658468E12, 1.6666666666666667], [1.61658486E12, 2.1333333333333333]], "isOverall": false, "label": "(GET) Registration Page-success", "isController": false}, {"data": [[1.61658474E12, 2.4166666666666665], [1.61658462E12, 2.4166666666666665], [1.6165848E12, 1.75], [1.61658468E12, 1.75], [1.61658486E12, 2.1166666666666667]], "isOverall": false, "label": "(POST) INSERT New User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61658486E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.166666666666667, "minX": 1.61658462E12, "maxY": 7.333333333333333, "series": [{"data": [[1.61658474E12, 7.333333333333333], [1.61658462E12, 7.333333333333333], [1.6165848E12, 5.516666666666667], [1.61658468E12, 5.166666666666667], [1.61658486E12, 6.733333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61658486E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

