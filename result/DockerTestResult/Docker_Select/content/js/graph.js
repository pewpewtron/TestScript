/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2778.0, "minX": 0.0, "maxY": 60157.0, "series": [{"data": [[0.0, 9274.0], [0.1, 9274.0], [0.2, 9371.0], [0.3, 9669.0], [0.4, 9672.0], [0.5, 9672.0], [0.6, 10016.0], [0.7, 10143.0], [0.8, 10252.0], [0.9, 10252.0], [1.0, 10302.0], [1.1, 10392.0], [1.2, 10422.0], [1.3, 10422.0], [1.4, 10474.0], [1.5, 10501.0], [1.6, 10552.0], [1.7, 10552.0], [1.8, 10589.0], [1.9, 10625.0], [2.0, 10637.0], [2.1, 10637.0], [2.2, 10666.0], [2.3, 10671.0], [2.4, 10685.0], [2.5, 10685.0], [2.6, 10689.0], [2.7, 10704.0], [2.8, 10731.0], [2.9, 10731.0], [3.0, 10760.0], [3.1, 10849.0], [3.2, 10892.0], [3.3, 10892.0], [3.4, 10896.0], [3.5, 10905.0], [3.6, 10953.0], [3.7, 10953.0], [3.8, 10975.0], [3.9, 11015.0], [4.0, 11039.0], [4.1, 11039.0], [4.2, 11052.0], [4.3, 11055.0], [4.4, 11092.0], [4.5, 11092.0], [4.6, 11128.0], [4.7, 11150.0], [4.8, 11241.0], [4.9, 11241.0], [5.0, 11258.0], [5.1, 11280.0], [5.2, 11281.0], [5.3, 11281.0], [5.4, 11315.0], [5.5, 11346.0], [5.6, 11348.0], [5.7, 11348.0], [5.8, 11358.0], [5.9, 11566.0], [6.0, 11714.0], [6.1, 11714.0], [6.2, 11738.0], [6.3, 12099.0], [6.4, 12241.0], [6.5, 12241.0], [6.6, 13780.0], [6.7, 14136.0], [6.8, 14159.0], [6.9, 14159.0], [7.0, 14359.0], [7.1, 14771.0], [7.2, 15404.0], [7.3, 15404.0], [7.4, 15443.0], [7.5, 15918.0], [7.6, 15988.0], [7.7, 15988.0], [7.8, 16257.0], [7.9, 16275.0], [8.0, 16299.0], [8.1, 16299.0], [8.2, 16309.0], [8.3, 16379.0], [8.4, 16387.0], [8.5, 16388.0], [8.6, 16388.0], [8.7, 16622.0], [8.8, 16731.0], [8.9, 16735.0], [9.0, 16735.0], [9.1, 16743.0], [9.2, 16771.0], [9.3, 16824.0], [9.4, 16824.0], [9.5, 16860.0], [9.6, 16867.0], [9.7, 16924.0], [9.8, 16924.0], [9.9, 16944.0], [10.0, 16985.0], [10.1, 17012.0], [10.2, 17012.0], [10.3, 17023.0], [10.4, 17032.0], [10.5, 17068.0], [10.6, 17068.0], [10.7, 17100.0], [10.8, 17103.0], [10.9, 17113.0], [11.0, 17113.0], [11.1, 17124.0], [11.2, 17134.0], [11.3, 17134.0], [11.4, 17134.0], [11.5, 17137.0], [11.6, 17142.0], [11.7, 17143.0], [11.8, 17143.0], [11.9, 17148.0], [12.0, 17175.0], [12.1, 17189.0], [12.2, 17189.0], [12.3, 17192.0], [12.4, 17222.0], [12.5, 17243.0], [12.6, 17243.0], [12.7, 17252.0], [12.8, 17264.0], [12.9, 17272.0], [13.0, 17272.0], [13.1, 17282.0], [13.2, 17286.0], [13.3, 17292.0], [13.4, 17292.0], [13.5, 17293.0], [13.6, 17301.0], [13.7, 17313.0], [13.8, 17313.0], [13.9, 17317.0], [14.0, 17328.0], [14.1, 17339.0], [14.2, 17339.0], [14.3, 17347.0], [14.4, 17353.0], [14.5, 17360.0], [14.6, 17360.0], [14.7, 17388.0], [14.8, 17394.0], [14.9, 17397.0], [15.0, 17397.0], [15.1, 17400.0], [15.2, 17405.0], [15.3, 17424.0], [15.4, 17424.0], [15.5, 17426.0], [15.6, 17431.0], [15.7, 17431.0], [15.8, 17431.0], [15.9, 17448.0], [16.0, 17452.0], [16.1, 17454.0], [16.2, 17454.0], [16.3, 17461.0], [16.4, 17464.0], [16.5, 17464.0], [16.6, 17464.0], [16.7, 17469.0], [16.8, 17470.0], [16.9, 17497.0], [17.0, 17501.0], [17.1, 17501.0], [17.2, 17509.0], [17.3, 17513.0], [17.4, 17518.0], [17.5, 17518.0], [17.6, 17524.0], [17.7, 17531.0], [17.8, 17532.0], [17.9, 17532.0], [18.0, 17535.0], [18.1, 17542.0], [18.2, 17558.0], [18.3, 17558.0], [18.4, 17562.0], [18.5, 17574.0], [18.6, 17577.0], [18.7, 17577.0], [18.8, 17579.0], [18.9, 17579.0], [19.0, 17581.0], [19.1, 17581.0], [19.2, 17586.0], [19.3, 17594.0], [19.4, 17596.0], [19.5, 17596.0], [19.6, 17597.0], [19.7, 17610.0], [19.8, 17628.0], [19.9, 17628.0], [20.0, 17629.0], [20.1, 17630.0], [20.2, 17631.0], [20.3, 17631.0], [20.4, 17632.0], [20.5, 17653.0], [20.6, 17654.0], [20.7, 17654.0], [20.8, 17674.0], [20.9, 17676.0], [21.0, 17677.0], [21.1, 17677.0], [21.2, 17685.0], [21.3, 17687.0], [21.4, 17690.0], [21.5, 17690.0], [21.6, 17694.0], [21.7, 17698.0], [21.8, 17703.0], [21.9, 17703.0], [22.0, 17704.0], [22.1, 17711.0], [22.2, 17713.0], [22.3, 17713.0], [22.4, 17718.0], [22.5, 17726.0], [22.6, 17730.0], [22.7, 17730.0], [22.8, 17733.0], [22.9, 17734.0], [23.0, 17735.0], [23.1, 17735.0], [23.2, 17735.0], [23.3, 17742.0], [23.4, 17743.0], [23.5, 17743.0], [23.6, 17750.0], [23.7, 17752.0], [23.8, 17758.0], [23.9, 17758.0], [24.0, 17767.0], [24.1, 17771.0], [24.2, 17774.0], [24.3, 17774.0], [24.4, 17780.0], [24.5, 17783.0], [24.6, 17784.0], [24.7, 17784.0], [24.8, 17786.0], [24.9, 17790.0], [25.0, 17791.0], [25.1, 17792.0], [25.2, 17792.0], [25.3, 17795.0], [25.4, 17795.0], [25.5, 17799.0], [25.6, 17799.0], [25.7, 17803.0], [25.8, 17803.0], [25.9, 17810.0], [26.0, 17810.0], [26.1, 17818.0], [26.2, 17820.0], [26.3, 17822.0], [26.4, 17822.0], [26.5, 17825.0], [26.6, 17828.0], [26.7, 17836.0], [26.8, 17836.0], [26.9, 17838.0], [27.0, 17839.0], [27.1, 17842.0], [27.2, 17842.0], [27.3, 17844.0], [27.4, 17845.0], [27.5, 17846.0], [27.6, 17846.0], [27.7, 17850.0], [27.8, 17856.0], [27.9, 17858.0], [28.0, 17858.0], [28.1, 17859.0], [28.2, 17860.0], [28.3, 17860.0], [28.4, 17860.0], [28.5, 17863.0], [28.6, 17869.0], [28.7, 17877.0], [28.8, 17877.0], [28.9, 17882.0], [29.0, 17886.0], [29.1, 17886.0], [29.2, 17886.0], [29.3, 17895.0], [29.4, 17899.0], [29.5, 17901.0], [29.6, 17901.0], [29.7, 17909.0], [29.8, 17910.0], [29.9, 17910.0], [30.0, 17910.0], [30.1, 17911.0], [30.2, 17914.0], [30.3, 17916.0], [30.4, 17916.0], [30.5, 17918.0], [30.6, 17925.0], [30.7, 17932.0], [30.8, 17932.0], [30.9, 17940.0], [31.0, 17943.0], [31.1, 17943.0], [31.2, 17943.0], [31.3, 17944.0], [31.4, 17948.0], [31.5, 17949.0], [31.6, 17949.0], [31.7, 17951.0], [31.8, 17953.0], [31.9, 17954.0], [32.0, 17954.0], [32.1, 17955.0], [32.2, 17964.0], [32.3, 17967.0], [32.4, 17967.0], [32.5, 17968.0], [32.6, 17968.0], [32.7, 17971.0], [32.8, 17971.0], [32.9, 17972.0], [33.0, 17975.0], [33.1, 17975.0], [33.2, 17975.0], [33.3, 17976.0], [33.4, 17979.0], [33.5, 17980.0], [33.6, 17981.0], [33.7, 17981.0], [33.8, 17982.0], [33.9, 17987.0], [34.0, 17988.0], [34.1, 17988.0], [34.2, 17991.0], [34.3, 17997.0], [34.4, 18002.0], [34.5, 18002.0], [34.6, 18004.0], [34.7, 18004.0], [34.8, 18006.0], [34.9, 18006.0], [35.0, 18006.0], [35.1, 18007.0], [35.2, 18011.0], [35.3, 18011.0], [35.4, 18014.0], [35.5, 18016.0], [35.6, 18017.0], [35.7, 18017.0], [35.8, 18017.0], [35.9, 18018.0], [36.0, 18018.0], [36.1, 18018.0], [36.2, 18022.0], [36.3, 18030.0], [36.4, 18031.0], [36.5, 18031.0], [36.6, 18033.0], [36.7, 18034.0], [36.8, 18038.0], [36.9, 18038.0], [37.0, 18039.0], [37.1, 18040.0], [37.2, 18043.0], [37.3, 18043.0], [37.4, 18045.0], [37.5, 18045.0], [37.6, 18049.0], [37.7, 18049.0], [37.8, 18049.0], [37.9, 18055.0], [38.0, 18057.0], [38.1, 18057.0], [38.2, 18057.0], [38.3, 18057.0], [38.4, 18063.0], [38.5, 18063.0], [38.6, 18067.0], [38.7, 18068.0], [38.8, 18069.0], [38.9, 18069.0], [39.0, 18074.0], [39.1, 18076.0], [39.2, 18081.0], [39.3, 18081.0], [39.4, 18085.0], [39.5, 18087.0], [39.6, 18089.0], [39.7, 18089.0], [39.8, 18090.0], [39.9, 18094.0], [40.0, 18095.0], [40.1, 18095.0], [40.2, 18097.0], [40.3, 18102.0], [40.4, 18107.0], [40.5, 18107.0], [40.6, 18107.0], [40.7, 18108.0], [40.8, 18108.0], [40.9, 18108.0], [41.0, 18108.0], [41.1, 18112.0], [41.2, 18114.0], [41.3, 18114.0], [41.4, 18115.0], [41.5, 18118.0], [41.6, 18122.0], [41.7, 18124.0], [41.8, 18124.0], [41.9, 18125.0], [42.0, 18126.0], [42.1, 18141.0], [42.2, 18141.0], [42.3, 18142.0], [42.4, 18144.0], [42.5, 18150.0], [42.6, 18150.0], [42.7, 18152.0], [42.8, 18153.0], [42.9, 18162.0], [43.0, 18162.0], [43.1, 18163.0], [43.2, 18165.0], [43.3, 18172.0], [43.4, 18172.0], [43.5, 18177.0], [43.6, 18181.0], [43.7, 18182.0], [43.8, 18182.0], [43.9, 18183.0], [44.0, 18183.0], [44.1, 18184.0], [44.2, 18184.0], [44.3, 18185.0], [44.4, 18186.0], [44.5, 18190.0], [44.6, 18190.0], [44.7, 18190.0], [44.8, 18190.0], [44.9, 18192.0], [45.0, 18192.0], [45.1, 18196.0], [45.2, 18197.0], [45.3, 18198.0], [45.4, 18198.0], [45.5, 18202.0], [45.6, 18205.0], [45.7, 18207.0], [45.8, 18207.0], [45.9, 18210.0], [46.0, 18212.0], [46.1, 18213.0], [46.2, 18213.0], [46.3, 18214.0], [46.4, 18215.0], [46.5, 18215.0], [46.6, 18215.0], [46.7, 18215.0], [46.8, 18216.0], [46.9, 18218.0], [47.0, 18218.0], [47.1, 18220.0], [47.2, 18220.0], [47.3, 18224.0], [47.4, 18224.0], [47.5, 18226.0], [47.6, 18231.0], [47.7, 18232.0], [47.8, 18232.0], [47.9, 18234.0], [48.0, 18236.0], [48.1, 18236.0], [48.2, 18236.0], [48.3, 18241.0], [48.4, 18242.0], [48.5, 18243.0], [48.6, 18243.0], [48.7, 18248.0], [48.8, 18248.0], [48.9, 18256.0], [49.0, 18256.0], [49.1, 18259.0], [49.2, 18261.0], [49.3, 18264.0], [49.4, 18264.0], [49.5, 18266.0], [49.6, 18272.0], [49.7, 18272.0], [49.8, 18272.0], [49.9, 18273.0], [50.0, 18275.0], [50.1, 18276.0], [50.2, 18283.0], [50.3, 18283.0], [50.4, 18284.0], [50.5, 18286.0], [50.6, 18287.0], [50.7, 18287.0], [50.8, 18291.0], [50.9, 18291.0], [51.0, 18291.0], [51.1, 18291.0], [51.2, 18292.0], [51.3, 18292.0], [51.4, 18296.0], [51.5, 18296.0], [51.6, 18296.0], [51.7, 18297.0], [51.8, 18300.0], [51.9, 18300.0], [52.0, 18302.0], [52.1, 18302.0], [52.2, 18304.0], [52.3, 18304.0], [52.4, 18306.0], [52.5, 18310.0], [52.6, 18310.0], [52.7, 18310.0], [52.8, 18311.0], [52.9, 18313.0], [53.0, 18319.0], [53.1, 18319.0], [53.2, 18320.0], [53.3, 18321.0], [53.4, 18325.0], [53.5, 18325.0], [53.6, 18327.0], [53.7, 18328.0], [53.8, 18331.0], [53.9, 18331.0], [54.0, 18331.0], [54.1, 18331.0], [54.2, 18333.0], [54.3, 18333.0], [54.4, 18335.0], [54.5, 18338.0], [54.6, 18338.0], [54.7, 18338.0], [54.8, 18340.0], [54.9, 18341.0], [55.0, 18344.0], [55.1, 18344.0], [55.2, 18347.0], [55.3, 18350.0], [55.4, 18350.0], [55.5, 18350.0], [55.6, 18357.0], [55.7, 18365.0], [55.8, 18366.0], [55.9, 18366.0], [56.0, 18366.0], [56.1, 18369.0], [56.2, 18370.0], [56.3, 18370.0], [56.4, 18377.0], [56.5, 18377.0], [56.6, 18378.0], [56.7, 18378.0], [56.8, 18380.0], [56.9, 18383.0], [57.0, 18385.0], [57.1, 18385.0], [57.2, 18385.0], [57.3, 18389.0], [57.4, 18390.0], [57.5, 18390.0], [57.6, 18393.0], [57.7, 18396.0], [57.8, 18397.0], [57.9, 18397.0], [58.0, 18401.0], [58.1, 18402.0], [58.2, 18403.0], [58.3, 18403.0], [58.4, 18404.0], [58.5, 18405.0], [58.6, 18410.0], [58.7, 18413.0], [58.8, 18413.0], [58.9, 18413.0], [59.0, 18414.0], [59.1, 18415.0], [59.2, 18415.0], [59.3, 18415.0], [59.4, 18417.0], [59.5, 18417.0], [59.6, 18417.0], [59.7, 18419.0], [59.8, 18420.0], [59.9, 18424.0], [60.0, 18424.0], [60.1, 18426.0], [60.2, 18433.0], [60.3, 18435.0], [60.4, 18435.0], [60.5, 18435.0], [60.6, 18435.0], [60.7, 18436.0], [60.8, 18436.0], [60.9, 18439.0], [61.0, 18440.0], [61.1, 18442.0], [61.2, 18442.0], [61.3, 18444.0], [61.4, 18444.0], [61.5, 18450.0], [61.6, 18450.0], [61.7, 18456.0], [61.8, 18462.0], [61.9, 18463.0], [62.0, 18463.0], [62.1, 18466.0], [62.2, 18469.0], [62.3, 18469.0], [62.4, 18469.0], [62.5, 18470.0], [62.6, 18474.0], [62.7, 18476.0], [62.8, 18476.0], [62.9, 18478.0], [63.0, 18478.0], [63.1, 18478.0], [63.2, 18478.0], [63.3, 18479.0], [63.4, 18484.0], [63.5, 18488.0], [63.6, 18488.0], [63.7, 18488.0], [63.8, 18489.0], [63.9, 18497.0], [64.0, 18497.0], [64.1, 18497.0], [64.2, 18500.0], [64.3, 18503.0], [64.4, 18503.0], [64.5, 18503.0], [64.6, 18505.0], [64.7, 18506.0], [64.8, 18506.0], [64.9, 18506.0], [65.0, 18514.0], [65.1, 18519.0], [65.2, 18519.0], [65.3, 18521.0], [65.4, 18521.0], [65.5, 18522.0], [65.6, 18522.0], [65.7, 18529.0], [65.8, 18532.0], [65.9, 18533.0], [66.0, 18533.0], [66.1, 18535.0], [66.2, 18541.0], [66.3, 18542.0], [66.4, 18542.0], [66.5, 18542.0], [66.6, 18543.0], [66.7, 18544.0], [66.8, 18546.0], [66.9, 18546.0], [67.0, 18550.0], [67.1, 18551.0], [67.2, 18554.0], [67.3, 18554.0], [67.4, 18558.0], [67.5, 18559.0], [67.6, 18562.0], [67.7, 18562.0], [67.8, 18563.0], [67.9, 18563.0], [68.0, 18563.0], [68.1, 18563.0], [68.2, 18568.0], [68.3, 18569.0], [68.4, 18576.0], [68.5, 18576.0], [68.6, 18579.0], [68.7, 18579.0], [68.8, 18581.0], [68.9, 18581.0], [69.0, 18584.0], [69.1, 18585.0], [69.2, 18587.0], [69.3, 18587.0], [69.4, 18590.0], [69.5, 18591.0], [69.6, 18593.0], [69.7, 18593.0], [69.8, 18593.0], [69.9, 18594.0], [70.0, 18594.0], [70.1, 18594.0], [70.2, 18594.0], [70.3, 18595.0], [70.4, 18595.0], [70.5, 18595.0], [70.6, 18599.0], [70.7, 18601.0], [70.8, 18603.0], [70.9, 18603.0], [71.0, 18603.0], [71.1, 18604.0], [71.2, 18607.0], [71.3, 18607.0], [71.4, 18607.0], [71.5, 18608.0], [71.6, 18609.0], [71.7, 18609.0], [71.8, 18617.0], [71.9, 18617.0], [72.0, 18620.0], [72.1, 18620.0], [72.2, 18620.0], [72.3, 18620.0], [72.4, 18624.0], [72.5, 18624.0], [72.6, 18635.0], [72.7, 18636.0], [72.8, 18643.0], [72.9, 18643.0], [73.0, 18643.0], [73.1, 18650.0], [73.2, 18650.0], [73.3, 18650.0], [73.4, 18651.0], [73.5, 18654.0], [73.6, 18654.0], [73.7, 18654.0], [73.8, 18657.0], [73.9, 18658.0], [74.0, 18660.0], [74.1, 18660.0], [74.2, 18664.0], [74.3, 18665.0], [74.4, 18668.0], [74.5, 18668.0], [74.6, 18669.0], [74.7, 18671.0], [74.8, 18674.0], [74.9, 18674.0], [75.0, 18676.0], [75.1, 18676.0], [75.2, 18692.0], [75.3, 18693.0], [75.4, 18693.0], [75.5, 18696.0], [75.6, 18696.0], [75.7, 18697.0], [75.8, 18697.0], [75.9, 18705.0], [76.0, 18710.0], [76.1, 18715.0], [76.2, 18715.0], [76.3, 18716.0], [76.4, 18728.0], [76.5, 18729.0], [76.6, 18729.0], [76.7, 18729.0], [76.8, 18733.0], [76.9, 18735.0], [77.0, 18735.0], [77.1, 18743.0], [77.2, 18743.0], [77.3, 18743.0], [77.4, 18743.0], [77.5, 18745.0], [77.6, 18745.0], [77.7, 18747.0], [77.8, 18747.0], [77.9, 18749.0], [78.0, 18751.0], [78.1, 18754.0], [78.2, 18754.0], [78.3, 18755.0], [78.4, 18755.0], [78.5, 18756.0], [78.6, 18756.0], [78.7, 18756.0], [78.8, 18757.0], [78.9, 18757.0], [79.0, 18757.0], [79.1, 18758.0], [79.2, 18759.0], [79.3, 18762.0], [79.4, 18762.0], [79.5, 18766.0], [79.6, 18768.0], [79.7, 18773.0], [79.8, 18773.0], [79.9, 18775.0], [80.0, 18775.0], [80.1, 18776.0], [80.2, 18776.0], [80.3, 18779.0], [80.4, 18783.0], [80.5, 18783.0], [80.6, 18783.0], [80.7, 18790.0], [80.8, 18796.0], [80.9, 18799.0], [81.0, 18799.0], [81.1, 18803.0], [81.2, 18810.0], [81.3, 18821.0], [81.4, 18821.0], [81.5, 18822.0], [81.6, 18823.0], [81.7, 18833.0], [81.8, 18833.0], [81.9, 18839.0], [82.0, 18847.0], [82.1, 18849.0], [82.2, 18849.0], [82.3, 18850.0], [82.4, 18859.0], [82.5, 18863.0], [82.6, 18863.0], [82.7, 18867.0], [82.8, 18870.0], [82.9, 18871.0], [83.0, 18871.0], [83.1, 18871.0], [83.2, 18880.0], [83.3, 18882.0], [83.4, 18882.0], [83.5, 18882.0], [83.6, 18883.0], [83.7, 18886.0], [83.8, 18892.0], [83.9, 18892.0], [84.0, 18894.0], [84.1, 18898.0], [84.2, 18905.0], [84.3, 18905.0], [84.4, 18909.0], [84.5, 18916.0], [84.6, 18920.0], [84.7, 18920.0], [84.8, 18922.0], [84.9, 18925.0], [85.0, 18930.0], [85.1, 18930.0], [85.2, 18932.0], [85.3, 18945.0], [85.4, 18945.0], [85.5, 18945.0], [85.6, 18949.0], [85.7, 18950.0], [85.8, 18952.0], [85.9, 18952.0], [86.0, 18953.0], [86.1, 18961.0], [86.2, 18961.0], [86.3, 18961.0], [86.4, 18963.0], [86.5, 18963.0], [86.6, 18967.0], [86.7, 18967.0], [86.8, 18968.0], [86.9, 18973.0], [87.0, 18987.0], [87.1, 18987.0], [87.2, 18992.0], [87.3, 19005.0], [87.4, 19006.0], [87.5, 19006.0], [87.6, 19011.0], [87.7, 19012.0], [87.8, 19015.0], [87.9, 19015.0], [88.0, 19019.0], [88.1, 19020.0], [88.2, 19028.0], [88.3, 19028.0], [88.4, 19034.0], [88.5, 19037.0], [88.6, 19039.0], [88.7, 19039.0], [88.8, 19041.0], [88.9, 19048.0], [89.0, 19052.0], [89.1, 19052.0], [89.2, 19056.0], [89.3, 19065.0], [89.4, 19069.0], [89.5, 19069.0], [89.6, 19084.0], [89.7, 19085.0], [89.8, 19094.0], [89.9, 19094.0], [90.0, 19130.0], [90.1, 19131.0], [90.2, 19141.0], [90.3, 19141.0], [90.4, 19152.0], [90.5, 19158.0], [90.6, 19160.0], [90.7, 19160.0], [90.8, 19161.0], [90.9, 19162.0], [91.0, 19173.0], [91.1, 19173.0], [91.2, 19184.0], [91.3, 19185.0], [91.4, 19185.0], [91.5, 19185.0], [91.6, 19201.0], [91.7, 19201.0], [91.8, 19208.0], [91.9, 19212.0], [92.0, 19212.0], [92.1, 19229.0], [92.2, 19291.0], [92.3, 19347.0], [92.4, 19347.0], [92.5, 19463.0], [92.6, 19504.0], [92.7, 19535.0], [92.8, 19535.0], [92.9, 20651.0], [93.0, 22441.0], [93.1, 23897.0], [93.2, 23897.0], [93.3, 27041.0], [93.4, 30458.0], [93.5, 33841.0], [93.6, 33841.0], [93.7, 35072.0], [93.8, 40228.0], [93.9, 53723.0], [94.0, 53723.0], [94.1, 54315.0], [94.2, 54817.0], [94.3, 55805.0], [94.4, 55805.0], [94.5, 56195.0], [94.6, 56291.0], [94.7, 56472.0], [94.8, 56472.0], [94.9, 56484.0], [95.0, 56498.0], [95.1, 56543.0], [95.2, 56543.0], [95.3, 56578.0], [95.4, 56752.0], [95.5, 56765.0], [95.6, 56765.0], [95.7, 56858.0], [95.8, 57230.0], [95.9, 57268.0], [96.0, 57268.0], [96.1, 57303.0], [96.2, 57421.0], [96.3, 57468.0], [96.4, 57468.0], [96.5, 57502.0], [96.6, 57636.0], [96.7, 57800.0], [96.8, 57800.0], [96.9, 57810.0], [97.0, 57834.0], [97.1, 57898.0], [97.2, 57898.0], [97.3, 57917.0], [97.4, 58102.0], [97.5, 58208.0], [97.6, 58208.0], [97.7, 58664.0], [97.8, 58713.0], [97.9, 58823.0], [98.0, 58823.0], [98.1, 58840.0], [98.2, 58912.0], [98.3, 58939.0], [98.4, 58939.0], [98.5, 59043.0], [98.6, 59364.0], [98.7, 59377.0], [98.8, 59377.0], [98.9, 59512.0], [99.0, 59648.0], [99.1, 59753.0], [99.2, 59753.0], [99.3, 59754.0], [99.4, 59811.0], [99.5, 59861.0], [99.6, 59861.0], [99.7, 59980.0], [99.8, 59993.0], [99.9, 60157.0], [100.0, 60157.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[0.0, 6496.0], [0.1, 6496.0], [0.2, 6672.0], [0.3, 6753.0], [0.4, 6770.0], [0.5, 6770.0], [0.6, 6965.0], [0.7, 6995.0], [0.8, 7141.0], [0.9, 7141.0], [1.0, 7328.0], [1.1, 7497.0], [1.2, 7667.0], [1.3, 7667.0], [1.4, 7762.0], [1.5, 7832.0], [1.6, 7930.0], [1.7, 7930.0], [1.8, 7958.0], [1.9, 8125.0], [2.0, 8151.0], [2.1, 8151.0], [2.2, 8368.0], [2.3, 8422.0], [2.4, 8437.0], [2.5, 8437.0], [2.6, 8794.0], [2.7, 8819.0], [2.8, 8857.0], [2.9, 8857.0], [3.0, 8934.0], [3.1, 9006.0], [3.2, 9027.0], [3.3, 9027.0], [3.4, 9036.0], [3.5, 9041.0], [3.6, 9085.0], [3.7, 9085.0], [3.8, 9103.0], [3.9, 9178.0], [4.0, 9187.0], [4.1, 9187.0], [4.2, 9223.0], [4.3, 9224.0], [4.4, 9240.0], [4.5, 9240.0], [4.6, 9283.0], [4.7, 9370.0], [4.8, 9427.0], [4.9, 9427.0], [5.0, 9442.0], [5.1, 9520.0], [5.2, 9539.0], [5.3, 9539.0], [5.4, 9554.0], [5.5, 9559.0], [5.6, 9570.0], [5.7, 9570.0], [5.8, 9604.0], [5.9, 9609.0], [6.0, 9639.0], [6.1, 9639.0], [6.2, 9646.0], [6.3, 9653.0], [6.4, 9653.0], [6.5, 9653.0], [6.6, 9661.0], [6.7, 9667.0], [6.8, 9669.0], [6.9, 9669.0], [7.0, 9671.0], [7.1, 9675.0], [7.2, 9697.0], [7.3, 9697.0], [7.4, 9739.0], [7.5, 9759.0], [7.6, 9764.0], [7.7, 9764.0], [7.8, 9764.0], [7.9, 9779.0], [8.0, 9780.0], [8.1, 9780.0], [8.2, 9782.0], [8.3, 9784.0], [8.4, 9794.0], [8.5, 9795.0], [8.6, 9795.0], [8.7, 9803.0], [8.8, 9812.0], [8.9, 9816.0], [9.0, 9816.0], [9.1, 9818.0], [9.2, 9829.0], [9.3, 9837.0], [9.4, 9837.0], [9.5, 9843.0], [9.6, 9857.0], [9.7, 9863.0], [9.8, 9863.0], [9.9, 9865.0], [10.0, 9880.0], [10.1, 9886.0], [10.2, 9886.0], [10.3, 9890.0], [10.4, 9896.0], [10.5, 9901.0], [10.6, 9901.0], [10.7, 9905.0], [10.8, 9912.0], [10.9, 9916.0], [11.0, 9916.0], [11.1, 9925.0], [11.2, 9932.0], [11.3, 9946.0], [11.4, 9946.0], [11.5, 9946.0], [11.6, 9948.0], [11.7, 9958.0], [11.8, 9958.0], [11.9, 9962.0], [12.0, 9962.0], [12.1, 9964.0], [12.2, 9964.0], [12.3, 9968.0], [12.4, 9971.0], [12.5, 9975.0], [12.6, 9975.0], [12.7, 9979.0], [12.8, 9981.0], [12.9, 9986.0], [13.0, 9986.0], [13.1, 9989.0], [13.2, 9991.0], [13.3, 9997.0], [13.4, 9997.0], [13.5, 9998.0], [13.6, 10000.0], [13.7, 10000.0], [13.8, 10000.0], [13.9, 10003.0], [14.0, 10009.0], [14.1, 10010.0], [14.2, 10010.0], [14.3, 10012.0], [14.4, 10012.0], [14.5, 10014.0], [14.6, 10014.0], [14.7, 10016.0], [14.8, 10019.0], [14.9, 10022.0], [15.0, 10022.0], [15.1, 10023.0], [15.2, 10025.0], [15.3, 10027.0], [15.4, 10027.0], [15.5, 10027.0], [15.6, 10030.0], [15.7, 10031.0], [15.8, 10031.0], [15.9, 10035.0], [16.0, 10038.0], [16.1, 10042.0], [16.2, 10042.0], [16.3, 10043.0], [16.4, 10047.0], [16.5, 10048.0], [16.6, 10048.0], [16.7, 10050.0], [16.8, 10052.0], [16.9, 10055.0], [17.0, 10057.0], [17.1, 10057.0], [17.2, 10058.0], [17.3, 10059.0], [17.4, 10060.0], [17.5, 10060.0], [17.6, 10061.0], [17.7, 10064.0], [17.8, 10069.0], [17.9, 10069.0], [18.0, 10070.0], [18.1, 10073.0], [18.2, 10074.0], [18.3, 10074.0], [18.4, 10076.0], [18.5, 10079.0], [18.6, 10083.0], [18.7, 10083.0], [18.8, 10087.0], [18.9, 10089.0], [19.0, 10090.0], [19.1, 10090.0], [19.2, 10098.0], [19.3, 10101.0], [19.4, 10106.0], [19.5, 10106.0], [19.6, 10110.0], [19.7, 10118.0], [19.8, 10120.0], [19.9, 10120.0], [20.0, 10123.0], [20.1, 10126.0], [20.2, 10127.0], [20.3, 10127.0], [20.4, 10127.0], [20.5, 10128.0], [20.6, 10130.0], [20.7, 10130.0], [20.8, 10130.0], [20.9, 10133.0], [21.0, 10135.0], [21.1, 10135.0], [21.2, 10135.0], [21.3, 10138.0], [21.4, 10140.0], [21.5, 10140.0], [21.6, 10142.0], [21.7, 10147.0], [21.8, 10155.0], [21.9, 10155.0], [22.0, 10155.0], [22.1, 10155.0], [22.2, 10158.0], [22.3, 10158.0], [22.4, 10160.0], [22.5, 10163.0], [22.6, 10165.0], [22.7, 10165.0], [22.8, 10165.0], [22.9, 10168.0], [23.0, 10173.0], [23.1, 10173.0], [23.2, 10173.0], [23.3, 10180.0], [23.4, 10180.0], [23.5, 10180.0], [23.6, 10181.0], [23.7, 10185.0], [23.8, 10187.0], [23.9, 10187.0], [24.0, 10190.0], [24.1, 10190.0], [24.2, 10191.0], [24.3, 10191.0], [24.4, 10193.0], [24.5, 10195.0], [24.6, 10196.0], [24.7, 10196.0], [24.8, 10197.0], [24.9, 10200.0], [25.0, 10202.0], [25.1, 10202.0], [25.2, 10202.0], [25.3, 10206.0], [25.4, 10209.0], [25.5, 10209.0], [25.6, 10209.0], [25.7, 10213.0], [25.8, 10214.0], [25.9, 10215.0], [26.0, 10215.0], [26.1, 10217.0], [26.2, 10222.0], [26.3, 10222.0], [26.4, 10222.0], [26.5, 10224.0], [26.6, 10229.0], [26.7, 10229.0], [26.8, 10229.0], [26.9, 10239.0], [27.0, 10242.0], [27.1, 10243.0], [27.2, 10243.0], [27.3, 10245.0], [27.4, 10247.0], [27.5, 10251.0], [27.6, 10251.0], [27.7, 10253.0], [27.8, 10253.0], [27.9, 10258.0], [28.0, 10258.0], [28.1, 10259.0], [28.2, 10261.0], [28.3, 10262.0], [28.4, 10262.0], [28.5, 10264.0], [28.6, 10266.0], [28.7, 10267.0], [28.8, 10267.0], [28.9, 10271.0], [29.0, 10277.0], [29.1, 10282.0], [29.2, 10282.0], [29.3, 10284.0], [29.4, 10289.0], [29.5, 10290.0], [29.6, 10290.0], [29.7, 10291.0], [29.8, 10291.0], [29.9, 10292.0], [30.0, 10292.0], [30.1, 10294.0], [30.2, 10300.0], [30.3, 10300.0], [30.4, 10300.0], [30.5, 10300.0], [30.6, 10301.0], [30.7, 10305.0], [30.8, 10305.0], [30.9, 10310.0], [31.0, 10315.0], [31.1, 10322.0], [31.2, 10322.0], [31.3, 10323.0], [31.4, 10333.0], [31.5, 10338.0], [31.6, 10338.0], [31.7, 10339.0], [31.8, 10340.0], [31.9, 10341.0], [32.0, 10341.0], [32.1, 10350.0], [32.2, 10351.0], [32.3, 10352.0], [32.4, 10352.0], [32.5, 10355.0], [32.6, 10355.0], [32.7, 10357.0], [32.8, 10357.0], [32.9, 10358.0], [33.0, 10362.0], [33.1, 10363.0], [33.2, 10363.0], [33.3, 10364.0], [33.4, 10365.0], [33.5, 10368.0], [33.6, 10373.0], [33.7, 10373.0], [33.8, 10373.0], [33.9, 10374.0], [34.0, 10375.0], [34.1, 10375.0], [34.2, 10376.0], [34.3, 10379.0], [34.4, 10388.0], [34.5, 10388.0], [34.6, 10391.0], [34.7, 10392.0], [34.8, 10397.0], [34.9, 10397.0], [35.0, 10398.0], [35.1, 10399.0], [35.2, 10403.0], [35.3, 10403.0], [35.4, 10404.0], [35.5, 10405.0], [35.6, 10407.0], [35.7, 10407.0], [35.8, 10410.0], [35.9, 10413.0], [36.0, 10414.0], [36.1, 10414.0], [36.2, 10417.0], [36.3, 10417.0], [36.4, 10418.0], [36.5, 10418.0], [36.6, 10419.0], [36.7, 10419.0], [36.8, 10419.0], [36.9, 10419.0], [37.0, 10419.0], [37.1, 10422.0], [37.2, 10427.0], [37.3, 10427.0], [37.4, 10429.0], [37.5, 10429.0], [37.6, 10431.0], [37.7, 10431.0], [37.8, 10435.0], [37.9, 10435.0], [38.0, 10449.0], [38.1, 10449.0], [38.2, 10450.0], [38.3, 10454.0], [38.4, 10457.0], [38.5, 10457.0], [38.6, 10459.0], [38.7, 10460.0], [38.8, 10461.0], [38.9, 10461.0], [39.0, 10463.0], [39.1, 10463.0], [39.2, 10464.0], [39.3, 10464.0], [39.4, 10465.0], [39.5, 10466.0], [39.6, 10467.0], [39.7, 10467.0], [39.8, 10468.0], [39.9, 10469.0], [40.0, 10471.0], [40.1, 10471.0], [40.2, 10474.0], [40.3, 10475.0], [40.4, 10479.0], [40.5, 10479.0], [40.6, 10487.0], [40.7, 10493.0], [40.8, 10493.0], [40.9, 10493.0], [41.0, 10495.0], [41.1, 10496.0], [41.2, 10499.0], [41.3, 10499.0], [41.4, 10500.0], [41.5, 10501.0], [41.6, 10502.0], [41.7, 10505.0], [41.8, 10505.0], [41.9, 10506.0], [42.0, 10512.0], [42.1, 10513.0], [42.2, 10513.0], [42.3, 10514.0], [42.4, 10522.0], [42.5, 10522.0], [42.6, 10522.0], [42.7, 10523.0], [42.8, 10524.0], [42.9, 10524.0], [43.0, 10524.0], [43.1, 10524.0], [43.2, 10525.0], [43.3, 10526.0], [43.4, 10526.0], [43.5, 10535.0], [43.6, 10536.0], [43.7, 10538.0], [43.8, 10538.0], [43.9, 10540.0], [44.0, 10540.0], [44.1, 10542.0], [44.2, 10542.0], [44.3, 10542.0], [44.4, 10543.0], [44.5, 10544.0], [44.6, 10544.0], [44.7, 10546.0], [44.8, 10548.0], [44.9, 10549.0], [45.0, 10549.0], [45.1, 10549.0], [45.2, 10552.0], [45.3, 10553.0], [45.4, 10553.0], [45.5, 10553.0], [45.6, 10554.0], [45.7, 10556.0], [45.8, 10556.0], [45.9, 10558.0], [46.0, 10559.0], [46.1, 10561.0], [46.2, 10561.0], [46.3, 10573.0], [46.4, 10576.0], [46.5, 10578.0], [46.6, 10578.0], [46.7, 10579.0], [46.8, 10579.0], [46.9, 10582.0], [47.0, 10582.0], [47.1, 10583.0], [47.2, 10584.0], [47.3, 10587.0], [47.4, 10587.0], [47.5, 10587.0], [47.6, 10588.0], [47.7, 10589.0], [47.8, 10589.0], [47.9, 10593.0], [48.0, 10594.0], [48.1, 10595.0], [48.2, 10595.0], [48.3, 10598.0], [48.4, 10599.0], [48.5, 10600.0], [48.6, 10600.0], [48.7, 10602.0], [48.8, 10607.0], [48.9, 10614.0], [49.0, 10614.0], [49.1, 10617.0], [49.2, 10622.0], [49.3, 10623.0], [49.4, 10623.0], [49.5, 10624.0], [49.6, 10625.0], [49.7, 10625.0], [49.8, 10625.0], [49.9, 10626.0], [50.0, 10627.0], [50.1, 10627.0], [50.2, 10631.0], [50.3, 10631.0], [50.4, 10632.0], [50.5, 10635.0], [50.6, 10637.0], [50.7, 10637.0], [50.8, 10641.0], [50.9, 10641.0], [51.0, 10642.0], [51.1, 10642.0], [51.2, 10643.0], [51.3, 10645.0], [51.4, 10648.0], [51.5, 10648.0], [51.6, 10649.0], [51.7, 10649.0], [51.8, 10650.0], [51.9, 10650.0], [52.0, 10651.0], [52.1, 10656.0], [52.2, 10660.0], [52.3, 10660.0], [52.4, 10663.0], [52.5, 10663.0], [52.6, 10663.0], [52.7, 10663.0], [52.8, 10664.0], [52.9, 10666.0], [53.0, 10669.0], [53.1, 10669.0], [53.2, 10670.0], [53.3, 10671.0], [53.4, 10675.0], [53.5, 10675.0], [53.6, 10678.0], [53.7, 10678.0], [53.8, 10678.0], [53.9, 10678.0], [54.0, 10680.0], [54.1, 10680.0], [54.2, 10681.0], [54.3, 10681.0], [54.4, 10683.0], [54.5, 10685.0], [54.6, 10687.0], [54.7, 10687.0], [54.8, 10687.0], [54.9, 10689.0], [55.0, 10691.0], [55.1, 10691.0], [55.2, 10692.0], [55.3, 10695.0], [55.4, 10699.0], [55.5, 10699.0], [55.6, 10699.0], [55.7, 10702.0], [55.8, 10702.0], [55.9, 10702.0], [56.0, 10703.0], [56.1, 10704.0], [56.2, 10705.0], [56.3, 10705.0], [56.4, 10707.0], [56.5, 10708.0], [56.6, 10709.0], [56.7, 10709.0], [56.8, 10710.0], [56.9, 10712.0], [57.0, 10715.0], [57.1, 10715.0], [57.2, 10717.0], [57.3, 10718.0], [57.4, 10719.0], [57.5, 10719.0], [57.6, 10720.0], [57.7, 10721.0], [57.8, 10721.0], [57.9, 10721.0], [58.0, 10721.0], [58.1, 10722.0], [58.2, 10723.0], [58.3, 10723.0], [58.4, 10726.0], [58.5, 10728.0], [58.6, 10731.0], [58.7, 10733.0], [58.8, 10733.0], [58.9, 10735.0], [59.0, 10737.0], [59.1, 10738.0], [59.2, 10738.0], [59.3, 10740.0], [59.4, 10741.0], [59.5, 10745.0], [59.6, 10745.0], [59.7, 10748.0], [59.8, 10749.0], [59.9, 10750.0], [60.0, 10750.0], [60.1, 10752.0], [60.2, 10755.0], [60.3, 10757.0], [60.4, 10757.0], [60.5, 10758.0], [60.6, 10759.0], [60.7, 10760.0], [60.8, 10760.0], [60.9, 10761.0], [61.0, 10763.0], [61.1, 10767.0], [61.2, 10767.0], [61.3, 10770.0], [61.4, 10774.0], [61.5, 10776.0], [61.6, 10776.0], [61.7, 10776.0], [61.8, 10777.0], [61.9, 10778.0], [62.0, 10778.0], [62.1, 10784.0], [62.2, 10784.0], [62.3, 10785.0], [62.4, 10785.0], [62.5, 10787.0], [62.6, 10788.0], [62.7, 10789.0], [62.8, 10789.0], [62.9, 10791.0], [63.0, 10791.0], [63.1, 10794.0], [63.2, 10794.0], [63.3, 10794.0], [63.4, 10801.0], [63.5, 10802.0], [63.6, 10802.0], [63.7, 10811.0], [63.8, 10811.0], [63.9, 10812.0], [64.0, 10812.0], [64.1, 10813.0], [64.2, 10815.0], [64.3, 10816.0], [64.4, 10816.0], [64.5, 10819.0], [64.6, 10820.0], [64.7, 10820.0], [64.8, 10820.0], [64.9, 10825.0], [65.0, 10827.0], [65.1, 10829.0], [65.2, 10829.0], [65.3, 10842.0], [65.4, 10842.0], [65.5, 10848.0], [65.6, 10848.0], [65.7, 10849.0], [65.8, 10850.0], [65.9, 10853.0], [66.0, 10853.0], [66.1, 10853.0], [66.2, 10862.0], [66.3, 10873.0], [66.4, 10873.0], [66.5, 10873.0], [66.6, 10874.0], [66.7, 10875.0], [66.8, 10878.0], [66.9, 10878.0], [67.0, 10878.0], [67.1, 10881.0], [67.2, 10881.0], [67.3, 10881.0], [67.4, 10883.0], [67.5, 10884.0], [67.6, 10886.0], [67.7, 10886.0], [67.8, 10886.0], [67.9, 10887.0], [68.0, 10887.0], [68.1, 10887.0], [68.2, 10889.0], [68.3, 10890.0], [68.4, 10892.0], [68.5, 10892.0], [68.6, 10895.0], [68.7, 10897.0], [68.8, 10898.0], [68.9, 10898.0], [69.0, 10899.0], [69.1, 10901.0], [69.2, 10905.0], [69.3, 10905.0], [69.4, 10905.0], [69.5, 10911.0], [69.6, 10914.0], [69.7, 10914.0], [69.8, 10915.0], [69.9, 10917.0], [70.0, 10919.0], [70.1, 10919.0], [70.2, 10919.0], [70.3, 10930.0], [70.4, 10931.0], [70.5, 10931.0], [70.6, 10933.0], [70.7, 10940.0], [70.8, 10945.0], [70.9, 10945.0], [71.0, 10945.0], [71.1, 10946.0], [71.2, 10946.0], [71.3, 10946.0], [71.4, 10947.0], [71.5, 10950.0], [71.6, 10953.0], [71.7, 10953.0], [71.8, 10959.0], [71.9, 10970.0], [72.0, 10973.0], [72.1, 10973.0], [72.2, 10974.0], [72.3, 10977.0], [72.4, 10983.0], [72.5, 10983.0], [72.6, 10984.0], [72.7, 10988.0], [72.8, 10993.0], [72.9, 10993.0], [73.0, 10994.0], [73.1, 10994.0], [73.2, 11003.0], [73.3, 11003.0], [73.4, 11003.0], [73.5, 11009.0], [73.6, 11015.0], [73.7, 11015.0], [73.8, 11019.0], [73.9, 11026.0], [74.0, 11028.0], [74.1, 11028.0], [74.2, 11030.0], [74.3, 11030.0], [74.4, 11034.0], [74.5, 11034.0], [74.6, 11038.0], [74.7, 11039.0], [74.8, 11040.0], [74.9, 11040.0], [75.0, 11048.0], [75.1, 11050.0], [75.2, 11052.0], [75.3, 11055.0], [75.4, 11055.0], [75.5, 11057.0], [75.6, 11067.0], [75.7, 11072.0], [75.8, 11072.0], [75.9, 11078.0], [76.0, 11090.0], [76.1, 11090.0], [76.2, 11090.0], [76.3, 11092.0], [76.4, 11100.0], [76.5, 11102.0], [76.6, 11102.0], [76.7, 11107.0], [76.8, 11110.0], [76.9, 11111.0], [77.0, 11111.0], [77.1, 11115.0], [77.2, 11115.0], [77.3, 11128.0], [77.4, 11128.0], [77.5, 11148.0], [77.6, 11150.0], [77.7, 11156.0], [77.8, 11156.0], [77.9, 11160.0], [78.0, 11164.0], [78.1, 11172.0], [78.2, 11172.0], [78.3, 11186.0], [78.4, 11188.0], [78.5, 11197.0], [78.6, 11197.0], [78.7, 11201.0], [78.8, 11201.0], [78.9, 11205.0], [79.0, 11205.0], [79.1, 11205.0], [79.2, 11234.0], [79.3, 11241.0], [79.4, 11241.0], [79.5, 11247.0], [79.6, 11251.0], [79.7, 11258.0], [79.8, 11258.0], [79.9, 11259.0], [80.0, 11260.0], [80.1, 11275.0], [80.2, 11275.0], [80.3, 11279.0], [80.4, 11280.0], [80.5, 11281.0], [80.6, 11281.0], [80.7, 11286.0], [80.8, 11288.0], [80.9, 11299.0], [81.0, 11299.0], [81.1, 11315.0], [81.2, 11316.0], [81.3, 11331.0], [81.4, 11331.0], [81.5, 11335.0], [81.6, 11339.0], [81.7, 11345.0], [81.8, 11345.0], [81.9, 11351.0], [82.0, 11353.0], [82.1, 11358.0], [82.2, 11358.0], [82.3, 11361.0], [82.4, 11367.0], [82.5, 11367.0], [82.6, 11367.0], [82.7, 11370.0], [82.8, 11374.0], [82.9, 11390.0], [83.0, 11390.0], [83.1, 11400.0], [83.2, 11415.0], [83.3, 11415.0], [83.4, 11421.0], [83.5, 11421.0], [83.6, 11427.0], [83.7, 11428.0], [83.8, 11448.0], [83.9, 11448.0], [84.0, 11450.0], [84.1, 11450.0], [84.2, 11455.0], [84.3, 11455.0], [84.4, 11460.0], [84.5, 11461.0], [84.6, 11486.0], [84.7, 11486.0], [84.8, 11511.0], [84.9, 11528.0], [85.0, 11531.0], [85.1, 11531.0], [85.2, 11545.0], [85.3, 11560.0], [85.4, 11566.0], [85.5, 11566.0], [85.6, 11573.0], [85.7, 11589.0], [85.8, 11596.0], [85.9, 11596.0], [86.0, 11657.0], [86.1, 11689.0], [86.2, 11713.0], [86.3, 11713.0], [86.4, 11723.0], [86.5, 11738.0], [86.6, 11765.0], [86.7, 11765.0], [86.8, 11776.0], [86.9, 11788.0], [87.0, 11804.0], [87.1, 11804.0], [87.2, 11806.0], [87.3, 11813.0], [87.4, 11817.0], [87.5, 11817.0], [87.6, 11865.0], [87.7, 11931.0], [87.8, 12031.0], [87.9, 12031.0], [88.0, 12064.0], [88.1, 12065.0], [88.2, 12071.0], [88.3, 12071.0], [88.4, 12099.0], [88.5, 12188.0], [88.6, 12230.0], [88.7, 12230.0], [88.8, 12241.0], [88.9, 12241.0], [89.0, 12268.0], [89.1, 12268.0], [89.2, 12282.0], [89.3, 12595.0], [89.4, 12634.0], [89.5, 12634.0], [89.6, 13004.0], [89.7, 13039.0], [89.8, 13059.0], [89.9, 13059.0], [90.0, 13207.0], [90.1, 13535.0], [90.2, 13650.0], [90.3, 13650.0], [90.4, 13895.0], [90.5, 13947.0], [90.6, 14131.0], [90.7, 14131.0], [90.8, 14247.0], [90.9, 14318.0], [91.0, 14380.0], [91.1, 14380.0], [91.2, 14487.0], [91.3, 14502.0], [91.4, 14504.0], [91.5, 14504.0], [91.6, 14512.0], [91.7, 14517.0], [91.8, 14581.0], [91.9, 14613.0], [92.0, 14613.0], [92.1, 14677.0], [92.2, 14693.0], [92.3, 14780.0], [92.4, 14780.0], [92.5, 14872.0], [92.6, 14896.0], [92.7, 14975.0], [92.8, 14975.0], [92.9, 14978.0], [93.0, 15213.0], [93.1, 15435.0], [93.2, 15435.0], [93.3, 15530.0], [93.4, 17111.0], [93.5, 18642.0], [93.6, 18642.0], [93.7, 18669.0], [93.8, 21639.0], [93.9, 38147.0], [94.0, 38147.0], [94.1, 38564.0], [94.2, 40975.0], [94.3, 43842.0], [94.4, 43842.0], [94.5, 45796.0], [94.6, 46487.0], [94.7, 47459.0], [94.8, 47459.0], [94.9, 48168.0], [95.0, 49014.0], [95.1, 49035.0], [95.2, 49035.0], [95.3, 49350.0], [95.4, 49481.0], [95.5, 49964.0], [95.6, 49964.0], [95.7, 50419.0], [95.8, 50539.0], [95.9, 50590.0], [96.0, 50590.0], [96.1, 50680.0], [96.2, 51261.0], [96.3, 52366.0], [96.4, 52366.0], [96.5, 52459.0], [96.6, 52660.0], [96.7, 52729.0], [96.8, 52729.0], [96.9, 52778.0], [97.0, 53062.0], [97.1, 53080.0], [97.2, 53080.0], [97.3, 53092.0], [97.4, 53232.0], [97.5, 53278.0], [97.6, 53278.0], [97.7, 53378.0], [97.8, 53386.0], [97.9, 53487.0], [98.0, 53487.0], [98.1, 53493.0], [98.2, 53505.0], [98.3, 53554.0], [98.4, 53554.0], [98.5, 53566.0], [98.6, 53605.0], [98.7, 53683.0], [98.8, 53683.0], [98.9, 53820.0], [99.0, 53919.0], [99.1, 53936.0], [99.2, 53936.0], [99.3, 53956.0], [99.4, 54038.0], [99.5, 54065.0], [99.6, 54065.0], [99.7, 54115.0], [99.8, 54205.0], [99.9, 54358.0], [100.0, 54358.0]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[0.0, 2778.0], [0.1, 2778.0], [0.2, 3223.0], [0.3, 3455.0], [0.4, 3455.0], [0.5, 3514.0], [0.6, 3634.0], [0.7, 3634.0], [0.8, 3729.0], [0.9, 3731.0], [1.0, 3732.0], [1.1, 3732.0], [1.2, 3738.0], [1.3, 3748.0], [1.4, 3748.0], [1.5, 3761.0], [1.6, 3815.0], [1.7, 3832.0], [1.8, 3832.0], [1.9, 3881.0], [2.0, 3919.0], [2.1, 3919.0], [2.2, 3931.0], [2.3, 3947.0], [2.4, 3947.0], [2.5, 3989.0], [2.6, 3999.0], [2.7, 4013.0], [2.8, 4013.0], [2.9, 4019.0], [3.0, 4034.0], [3.1, 4034.0], [3.2, 4054.0], [3.3, 4086.0], [3.4, 4103.0], [3.5, 4103.0], [3.6, 4236.0], [3.7, 4254.0], [3.8, 4254.0], [3.9, 4278.0], [4.0, 4383.0], [4.1, 4383.0], [4.2, 4424.0], [4.3, 4440.0], [4.4, 4824.0], [4.5, 4824.0], [4.6, 4844.0], [4.7, 5056.0], [4.8, 5056.0], [4.9, 5116.0], [5.0, 5140.0], [5.1, 5188.0], [5.2, 5188.0], [5.3, 5228.0], [5.4, 5270.0], [5.5, 5270.0], [5.6, 5330.0], [5.7, 5335.0], [5.8, 5335.0], [5.9, 5335.0], [6.0, 5336.0], [6.1, 5346.0], [6.2, 5346.0], [6.3, 5446.0], [6.4, 5489.0], [6.5, 5489.0], [6.6, 5584.0], [6.7, 5673.0], [6.8, 5681.0], [6.9, 5681.0], [7.0, 5691.0], [7.1, 5692.0], [7.2, 5692.0], [7.3, 5709.0], [7.4, 5712.0], [7.5, 5712.0], [7.6, 5715.0], [7.7, 5752.0], [7.8, 5772.0], [7.9, 5772.0], [8.0, 5788.0], [8.1, 5796.0], [8.2, 5796.0], [8.3, 5799.0], [8.4, 5826.0], [8.5, 5835.0], [8.6, 5835.0], [8.7, 5855.0], [8.8, 5865.0], [8.9, 5865.0], [9.0, 5988.0], [9.1, 6007.0], [9.2, 6007.0], [9.3, 6065.0], [9.4, 6065.0], [9.5, 6093.0], [9.6, 6093.0], [9.7, 6165.0], [9.8, 6194.0], [9.9, 6194.0], [10.0, 6227.0], [10.1, 6245.0], [10.2, 6288.0], [10.3, 6288.0], [10.4, 6381.0], [10.5, 6391.0], [10.6, 6391.0], [10.7, 6436.0], [10.8, 6452.0], [10.9, 6452.0], [11.0, 6455.0], [11.1, 6481.0], [11.2, 6527.0], [11.3, 6527.0], [11.4, 6546.0], [11.5, 6551.0], [11.6, 6551.0], [11.7, 6562.0], [11.8, 6587.0], [11.9, 6605.0], [12.0, 6605.0], [12.1, 6630.0], [12.2, 6651.0], [12.3, 6651.0], [12.4, 6682.0], [12.5, 6713.0], [12.6, 6713.0], [12.7, 6720.0], [12.8, 6722.0], [12.9, 6741.0], [13.0, 6741.0], [13.1, 6747.0], [13.2, 6757.0], [13.3, 6757.0], [13.4, 6758.0], [13.5, 6800.0], [13.6, 6807.0], [13.7, 6807.0], [13.8, 6832.0], [13.9, 6834.0], [14.0, 6834.0], [14.1, 6837.0], [14.2, 6842.0], [14.3, 6842.0], [14.4, 6854.0], [14.5, 6874.0], [14.6, 6878.0], [14.7, 6878.0], [14.8, 6893.0], [14.9, 6902.0], [15.0, 6902.0], [15.1, 6909.0], [15.2, 6918.0], [15.3, 6921.0], [15.4, 6921.0], [15.5, 6921.0], [15.6, 6928.0], [15.7, 6928.0], [15.8, 6931.0], [15.9, 6938.0], [16.0, 6938.0], [16.1, 6943.0], [16.2, 6945.0], [16.3, 6949.0], [16.4, 6949.0], [16.5, 6949.0], [16.6, 6955.0], [16.7, 6955.0], [16.8, 6955.0], [16.9, 6956.0], [17.0, 6963.0], [17.1, 6963.0], [17.2, 6973.0], [17.3, 6982.0], [17.4, 6982.0], [17.5, 6982.0], [17.6, 6985.0], [17.7, 6985.0], [17.8, 6985.0], [17.9, 6986.0], [18.0, 6989.0], [18.1, 6989.0], [18.2, 6991.0], [18.3, 6992.0], [18.4, 6992.0], [18.5, 6995.0], [18.6, 6999.0], [18.7, 7000.0], [18.8, 7000.0], [18.9, 7007.0], [19.0, 7017.0], [19.1, 7017.0], [19.2, 7023.0], [19.3, 7025.0], [19.4, 7025.0], [19.5, 7033.0], [19.6, 7057.0], [19.7, 7062.0], [19.8, 7062.0], [19.9, 7069.0], [20.0, 7087.0], [20.1, 7087.0], [20.2, 7091.0], [20.3, 7096.0], [20.4, 7102.0], [20.5, 7102.0], [20.6, 7106.0], [20.7, 7107.0], [20.8, 7107.0], [20.9, 7108.0], [21.0, 7110.0], [21.1, 7110.0], [21.2, 7116.0], [21.3, 7116.0], [21.4, 7117.0], [21.5, 7117.0], [21.6, 7118.0], [21.7, 7122.0], [21.8, 7122.0], [21.9, 7124.0], [22.0, 7127.0], [22.1, 7131.0], [22.2, 7131.0], [22.3, 7134.0], [22.4, 7135.0], [22.5, 7135.0], [22.6, 7139.0], [22.7, 7140.0], [22.8, 7140.0], [22.9, 7162.0], [23.0, 7164.0], [23.1, 7167.0], [23.2, 7167.0], [23.3, 7167.0], [23.4, 7167.0], [23.5, 7167.0], [23.6, 7168.0], [23.7, 7168.0], [23.8, 7179.0], [23.9, 7179.0], [24.0, 7181.0], [24.1, 7184.0], [24.2, 7184.0], [24.3, 7190.0], [24.4, 7192.0], [24.5, 7192.0], [24.6, 7212.0], [24.7, 7212.0], [24.8, 7216.0], [24.9, 7216.0], [25.0, 7216.0], [25.1, 7218.0], [25.2, 7218.0], [25.3, 7219.0], [25.4, 7220.0], [25.5, 7221.0], [25.6, 7221.0], [25.7, 7225.0], [25.8, 7229.0], [25.9, 7229.0], [26.0, 7239.0], [26.1, 7240.0], [26.2, 7240.0], [26.3, 7242.0], [26.4, 7242.0], [26.5, 7246.0], [26.6, 7246.0], [26.7, 7253.0], [26.8, 7266.0], [26.9, 7266.0], [27.0, 7276.0], [27.1, 7276.0], [27.2, 7277.0], [27.3, 7277.0], [27.4, 7279.0], [27.5, 7279.0], [27.6, 7279.0], [27.7, 7295.0], [27.8, 7296.0], [27.9, 7296.0], [28.0, 7297.0], [28.1, 7303.0], [28.2, 7308.0], [28.3, 7308.0], [28.4, 7315.0], [28.5, 7316.0], [28.6, 7316.0], [28.7, 7317.0], [28.8, 7320.0], [28.9, 7321.0], [29.0, 7321.0], [29.1, 7322.0], [29.2, 7323.0], [29.3, 7323.0], [29.4, 7326.0], [29.5, 7329.0], [29.6, 7329.0], [29.7, 7332.0], [29.8, 7335.0], [29.9, 7336.0], [30.0, 7336.0], [30.1, 7346.0], [30.2, 7349.0], [30.3, 7349.0], [30.4, 7357.0], [30.5, 7369.0], [30.6, 7370.0], [30.7, 7370.0], [30.8, 7373.0], [30.9, 7374.0], [31.0, 7374.0], [31.1, 7375.0], [31.2, 7377.0], [31.3, 7377.0], [31.4, 7381.0], [31.5, 7381.0], [31.6, 7384.0], [31.7, 7384.0], [31.8, 7389.0], [31.9, 7391.0], [32.0, 7391.0], [32.1, 7398.0], [32.2, 7399.0], [32.3, 7403.0], [32.4, 7403.0], [32.5, 7408.0], [32.6, 7411.0], [32.7, 7411.0], [32.8, 7417.0], [32.9, 7418.0], [33.0, 7418.0], [33.1, 7419.0], [33.2, 7422.0], [33.3, 7423.0], [33.4, 7423.0], [33.5, 7429.0], [33.6, 7429.0], [33.7, 7429.0], [33.8, 7434.0], [33.9, 7439.0], [34.0, 7439.0], [34.1, 7439.0], [34.2, 7442.0], [34.3, 7448.0], [34.4, 7448.0], [34.5, 7450.0], [34.6, 7450.0], [34.7, 7450.0], [34.8, 7451.0], [34.9, 7451.0], [35.0, 7453.0], [35.1, 7453.0], [35.2, 7454.0], [35.3, 7455.0], [35.4, 7455.0], [35.5, 7458.0], [35.6, 7458.0], [35.7, 7460.0], [35.8, 7460.0], [35.9, 7462.0], [36.0, 7462.0], [36.1, 7462.0], [36.2, 7464.0], [36.3, 7464.0], [36.4, 7464.0], [36.5, 7464.0], [36.6, 7466.0], [36.7, 7471.0], [36.8, 7471.0], [36.9, 7472.0], [37.0, 7473.0], [37.1, 7473.0], [37.2, 7475.0], [37.3, 7479.0], [37.4, 7479.0], [37.5, 7479.0], [37.6, 7481.0], [37.7, 7483.0], [37.8, 7483.0], [37.9, 7489.0], [38.0, 7495.0], [38.1, 7495.0], [38.2, 7496.0], [38.3, 7497.0], [38.4, 7502.0], [38.5, 7502.0], [38.6, 7510.0], [38.7, 7510.0], [38.8, 7510.0], [38.9, 7516.0], [39.0, 7518.0], [39.1, 7522.0], [39.2, 7522.0], [39.3, 7524.0], [39.4, 7527.0], [39.5, 7527.0], [39.6, 7529.0], [39.7, 7532.0], [39.8, 7532.0], [39.9, 7535.0], [40.0, 7536.0], [40.1, 7536.0], [40.2, 7536.0], [40.3, 7537.0], [40.4, 7538.0], [40.5, 7538.0], [40.6, 7541.0], [40.7, 7544.0], [40.8, 7554.0], [40.9, 7554.0], [41.0, 7555.0], [41.1, 7557.0], [41.2, 7557.0], [41.3, 7557.0], [41.4, 7557.0], [41.5, 7557.0], [41.6, 7563.0], [41.7, 7567.0], [41.8, 7568.0], [41.9, 7568.0], [42.0, 7568.0], [42.1, 7570.0], [42.2, 7570.0], [42.3, 7572.0], [42.4, 7573.0], [42.5, 7574.0], [42.6, 7574.0], [42.7, 7575.0], [42.8, 7576.0], [42.9, 7576.0], [43.0, 7576.0], [43.1, 7577.0], [43.2, 7577.0], [43.3, 7578.0], [43.4, 7582.0], [43.5, 7589.0], [43.6, 7589.0], [43.7, 7593.0], [43.8, 7593.0], [43.9, 7593.0], [44.0, 7596.0], [44.1, 7603.0], [44.2, 7604.0], [44.3, 7604.0], [44.4, 7606.0], [44.5, 7606.0], [44.6, 7606.0], [44.7, 7608.0], [44.8, 7614.0], [44.9, 7614.0], [45.0, 7618.0], [45.1, 7618.0], [45.2, 7619.0], [45.3, 7619.0], [45.4, 7620.0], [45.5, 7622.0], [45.6, 7622.0], [45.7, 7622.0], [45.8, 7623.0], [45.9, 7624.0], [46.0, 7624.0], [46.1, 7632.0], [46.2, 7632.0], [46.3, 7632.0], [46.4, 7633.0], [46.5, 7636.0], [46.6, 7636.0], [46.7, 7636.0], [46.8, 7640.0], [46.9, 7641.0], [47.0, 7641.0], [47.1, 7645.0], [47.2, 7646.0], [47.3, 7646.0], [47.4, 7646.0], [47.5, 7648.0], [47.6, 7652.0], [47.7, 7652.0], [47.8, 7652.0], [47.9, 7656.0], [48.0, 7656.0], [48.1, 7657.0], [48.2, 7657.0], [48.3, 7657.0], [48.4, 7659.0], [48.5, 7666.0], [48.6, 7667.0], [48.7, 7667.0], [48.8, 7668.0], [48.9, 7669.0], [49.0, 7669.0], [49.1, 7670.0], [49.2, 7670.0], [49.3, 7671.0], [49.4, 7671.0], [49.5, 7672.0], [49.6, 7672.0], [49.7, 7672.0], [49.8, 7673.0], [49.9, 7675.0], [50.0, 7675.0], [50.1, 7682.0], [50.2, 7686.0], [50.3, 7687.0], [50.4, 7687.0], [50.5, 7689.0], [50.6, 7695.0], [50.7, 7695.0], [50.8, 7696.0], [50.9, 7700.0], [51.0, 7700.0], [51.1, 7700.0], [51.2, 7700.0], [51.3, 7701.0], [51.4, 7701.0], [51.5, 7701.0], [51.6, 7703.0], [51.7, 7703.0], [51.8, 7703.0], [51.9, 7704.0], [52.0, 7704.0], [52.1, 7704.0], [52.2, 7705.0], [52.3, 7707.0], [52.4, 7707.0], [52.5, 7707.0], [52.6, 7709.0], [52.7, 7711.0], [52.8, 7711.0], [52.9, 7711.0], [53.0, 7712.0], [53.1, 7712.0], [53.2, 7712.0], [53.3, 7719.0], [53.4, 7719.0], [53.5, 7719.0], [53.6, 7719.0], [53.7, 7723.0], [53.8, 7723.0], [53.9, 7728.0], [54.0, 7728.0], [54.1, 7728.0], [54.2, 7728.0], [54.3, 7729.0], [54.4, 7730.0], [54.5, 7730.0], [54.6, 7732.0], [54.7, 7735.0], [54.8, 7735.0], [54.9, 7736.0], [55.0, 7738.0], [55.1, 7744.0], [55.2, 7744.0], [55.3, 7744.0], [55.4, 7745.0], [55.5, 7745.0], [55.6, 7745.0], [55.7, 7745.0], [55.8, 7745.0], [55.9, 7748.0], [56.0, 7748.0], [56.1, 7749.0], [56.2, 7749.0], [56.3, 7751.0], [56.4, 7751.0], [56.5, 7751.0], [56.6, 7753.0], [56.7, 7753.0], [56.8, 7754.0], [56.9, 7754.0], [57.0, 7755.0], [57.1, 7761.0], [57.2, 7761.0], [57.3, 7761.0], [57.4, 7769.0], [57.5, 7769.0], [57.6, 7772.0], [57.7, 7774.0], [57.8, 7776.0], [57.9, 7776.0], [58.0, 7777.0], [58.1, 7779.0], [58.2, 7779.0], [58.3, 7783.0], [58.4, 7785.0], [58.5, 7793.0], [58.6, 7793.0], [58.7, 7797.0], [58.8, 7799.0], [58.9, 7799.0], [59.0, 7799.0], [59.1, 7803.0], [59.2, 7803.0], [59.3, 7805.0], [59.4, 7807.0], [59.5, 7808.0], [59.6, 7808.0], [59.7, 7811.0], [59.8, 7812.0], [59.9, 7812.0], [60.0, 7812.0], [60.1, 7814.0], [60.2, 7815.0], [60.3, 7815.0], [60.4, 7815.0], [60.5, 7817.0], [60.6, 7817.0], [60.7, 7817.0], [60.8, 7818.0], [60.9, 7818.0], [61.0, 7822.0], [61.1, 7825.0], [61.2, 7825.0], [61.3, 7825.0], [61.4, 7826.0], [61.5, 7826.0], [61.6, 7826.0], [61.7, 7828.0], [61.8, 7829.0], [61.9, 7830.0], [62.0, 7830.0], [62.1, 7834.0], [62.2, 7834.0], [62.3, 7834.0], [62.4, 7834.0], [62.5, 7836.0], [62.6, 7836.0], [62.7, 7837.0], [62.8, 7839.0], [62.9, 7842.0], [63.0, 7842.0], [63.1, 7845.0], [63.2, 7847.0], [63.3, 7847.0], [63.4, 7849.0], [63.5, 7850.0], [63.6, 7851.0], [63.7, 7851.0], [63.8, 7852.0], [63.9, 7853.0], [64.0, 7853.0], [64.1, 7855.0], [64.2, 7858.0], [64.3, 7858.0], [64.4, 7861.0], [64.5, 7867.0], [64.6, 7874.0], [64.7, 7874.0], [64.8, 7877.0], [64.9, 7877.0], [65.0, 7877.0], [65.1, 7878.0], [65.2, 7879.0], [65.3, 7880.0], [65.4, 7880.0], [65.5, 7880.0], [65.6, 7880.0], [65.7, 7880.0], [65.8, 7886.0], [65.9, 7887.0], [66.0, 7887.0], [66.1, 7895.0], [66.2, 7896.0], [66.3, 7897.0], [66.4, 7897.0], [66.5, 7900.0], [66.6, 7902.0], [66.7, 7902.0], [66.8, 7903.0], [66.9, 7905.0], [67.0, 7910.0], [67.1, 7910.0], [67.2, 7912.0], [67.3, 7912.0], [67.4, 7912.0], [67.5, 7914.0], [67.6, 7915.0], [67.7, 7915.0], [67.8, 7916.0], [67.9, 7918.0], [68.0, 7921.0], [68.1, 7921.0], [68.2, 7924.0], [68.3, 7927.0], [68.4, 7927.0], [68.5, 7928.0], [68.6, 7929.0], [68.7, 7929.0], [68.8, 7929.0], [68.9, 7934.0], [69.0, 7936.0], [69.1, 7936.0], [69.2, 7941.0], [69.3, 7942.0], [69.4, 7942.0], [69.5, 7943.0], [69.6, 7946.0], [69.7, 7948.0], [69.8, 7948.0], [69.9, 7950.0], [70.0, 7951.0], [70.1, 7951.0], [70.2, 7965.0], [70.3, 7980.0], [70.4, 7981.0], [70.5, 7981.0], [70.6, 7986.0], [70.7, 7988.0], [70.8, 7988.0], [70.9, 7988.0], [71.0, 7989.0], [71.1, 7989.0], [71.2, 7990.0], [71.3, 7990.0], [71.4, 7992.0], [71.5, 7992.0], [71.6, 7993.0], [71.7, 7995.0], [71.8, 7995.0], [71.9, 7995.0], [72.0, 7997.0], [72.1, 7997.0], [72.2, 7997.0], [72.3, 7998.0], [72.4, 8002.0], [72.5, 8002.0], [72.6, 8003.0], [72.7, 8003.0], [72.8, 8003.0], [72.9, 8004.0], [73.0, 8005.0], [73.1, 8008.0], [73.2, 8008.0], [73.3, 8008.0], [73.4, 8010.0], [73.5, 8010.0], [73.6, 8011.0], [73.7, 8016.0], [73.8, 8019.0], [73.9, 8019.0], [74.0, 8020.0], [74.1, 8024.0], [74.2, 8024.0], [74.3, 8029.0], [74.4, 8030.0], [74.5, 8030.0], [74.6, 8030.0], [74.7, 8032.0], [74.8, 8032.0], [74.9, 8032.0], [75.0, 8033.0], [75.1, 8034.0], [75.2, 8034.0], [75.3, 8040.0], [75.4, 8040.0], [75.5, 8042.0], [75.6, 8042.0], [75.7, 8044.0], [75.8, 8045.0], [75.9, 8045.0], [76.0, 8050.0], [76.1, 8052.0], [76.2, 8052.0], [76.3, 8053.0], [76.4, 8054.0], [76.5, 8055.0], [76.6, 8055.0], [76.7, 8058.0], [76.8, 8058.0], [76.9, 8058.0], [77.0, 8062.0], [77.1, 8066.0], [77.2, 8068.0], [77.3, 8068.0], [77.4, 8071.0], [77.5, 8073.0], [77.6, 8073.0], [77.7, 8074.0], [77.8, 8076.0], [77.9, 8076.0], [78.0, 8077.0], [78.1, 8085.0], [78.2, 8086.0], [78.3, 8086.0], [78.4, 8088.0], [78.5, 8090.0], [78.6, 8090.0], [78.7, 8094.0], [78.8, 8097.0], [78.9, 8100.0], [79.0, 8100.0], [79.1, 8100.0], [79.2, 8102.0], [79.3, 8102.0], [79.4, 8104.0], [79.5, 8106.0], [79.6, 8106.0], [79.7, 8108.0], [79.8, 8110.0], [79.9, 8111.0], [80.0, 8111.0], [80.1, 8112.0], [80.2, 8116.0], [80.3, 8116.0], [80.4, 8117.0], [80.5, 8119.0], [80.6, 8125.0], [80.7, 8125.0], [80.8, 8126.0], [80.9, 8126.0], [81.0, 8126.0], [81.1, 8131.0], [81.2, 8132.0], [81.3, 8132.0], [81.4, 8137.0], [81.5, 8140.0], [81.6, 8143.0], [81.7, 8143.0], [81.8, 8144.0], [81.9, 8147.0], [82.0, 8147.0], [82.1, 8151.0], [82.2, 8153.0], [82.3, 8157.0], [82.4, 8157.0], [82.5, 8163.0], [82.6, 8165.0], [82.7, 8165.0], [82.8, 8168.0], [82.9, 8169.0], [83.0, 8169.0], [83.1, 8172.0], [83.2, 8172.0], [83.3, 8173.0], [83.4, 8173.0], [83.5, 8175.0], [83.6, 8175.0], [83.7, 8175.0], [83.8, 8175.0], [83.9, 8179.0], [84.0, 8179.0], [84.1, 8179.0], [84.2, 8179.0], [84.3, 8183.0], [84.4, 8183.0], [84.5, 8185.0], [84.6, 8187.0], [84.7, 8187.0], [84.8, 8188.0], [84.9, 8191.0], [85.0, 8194.0], [85.1, 8194.0], [85.2, 8199.0], [85.3, 8203.0], [85.4, 8203.0], [85.5, 8205.0], [85.6, 8211.0], [85.7, 8215.0], [85.8, 8215.0], [85.9, 8215.0], [86.0, 8217.0], [86.1, 8217.0], [86.2, 8222.0], [86.3, 8222.0], [86.4, 8222.0], [86.5, 8225.0], [86.6, 8232.0], [86.7, 8233.0], [86.8, 8233.0], [86.9, 8235.0], [87.0, 8245.0], [87.1, 8245.0], [87.2, 8249.0], [87.3, 8255.0], [87.4, 8255.0], [87.5, 8255.0], [87.6, 8262.0], [87.7, 8263.0], [87.8, 8263.0], [87.9, 8265.0], [88.0, 8268.0], [88.1, 8268.0], [88.2, 8271.0], [88.3, 8278.0], [88.4, 8282.0], [88.5, 8282.0], [88.6, 8285.0], [88.7, 8285.0], [88.8, 8285.0], [88.9, 8287.0], [89.0, 8289.0], [89.1, 8291.0], [89.2, 8291.0], [89.3, 8295.0], [89.4, 8298.0], [89.5, 8298.0], [89.6, 8316.0], [89.7, 8316.0], [89.8, 8316.0], [89.9, 8317.0], [90.0, 8320.0], [90.1, 8327.0], [90.2, 8327.0], [90.3, 8328.0], [90.4, 8335.0], [90.5, 8335.0], [90.6, 8341.0], [90.7, 8350.0], [90.8, 8353.0], [90.9, 8353.0], [91.0, 8379.0], [91.1, 8396.0], [91.2, 8396.0], [91.3, 8399.0], [91.4, 8402.0], [91.5, 8402.0], [91.6, 8406.0], [91.7, 8411.0], [91.8, 8414.0], [91.9, 8414.0], [92.0, 8418.0], [92.1, 8430.0], [92.2, 8430.0], [92.3, 8434.0], [92.4, 8437.0], [92.5, 8437.0], [92.6, 8437.0], [92.7, 8442.0], [92.8, 8449.0], [92.9, 8449.0], [93.0, 8449.0], [93.1, 8460.0], [93.2, 8460.0], [93.3, 8462.0], [93.4, 8467.0], [93.5, 8470.0], [93.6, 8470.0], [93.7, 8474.0], [93.8, 8491.0], [93.9, 8491.0], [94.0, 8494.0], [94.1, 8495.0], [94.2, 8503.0], [94.3, 8503.0], [94.4, 8506.0], [94.5, 8525.0], [94.6, 8525.0], [94.7, 8534.0], [94.8, 8542.0], [94.9, 8542.0], [95.0, 8547.0], [95.1, 8551.0], [95.2, 8556.0], [95.3, 8556.0], [95.4, 8576.0], [95.5, 8577.0], [95.6, 8577.0], [95.7, 8604.0], [95.8, 8630.0], [95.9, 8632.0], [96.0, 8632.0], [96.1, 8634.0], [96.2, 8636.0], [96.3, 8636.0], [96.4, 8649.0], [96.5, 8652.0], [96.6, 8652.0], [96.7, 8653.0], [96.8, 8684.0], [96.9, 8700.0], [97.0, 8700.0], [97.1, 8725.0], [97.2, 8726.0], [97.3, 8726.0], [97.4, 8731.0], [97.5, 8733.0], [97.6, 8734.0], [97.7, 8734.0], [97.8, 8741.0], [97.9, 8746.0], [98.0, 8746.0], [98.1, 8754.0], [98.2, 8777.0], [98.3, 8777.0], [98.4, 8799.0], [98.5, 9039.0], [98.6, 10056.0], [98.7, 10056.0], [98.8, 10399.0], [98.9, 11963.0], [99.0, 11963.0], [99.1, 13842.0], [99.2, 15159.0], [99.3, 16168.0], [99.4, 16168.0], [99.5, 18589.0], [99.6, 22626.0], [99.7, 22626.0], [99.8, 24558.0], [99.9, 25411.0]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2700.0, "maxY": 58.0, "series": [{"data": [[53700.0, 1.0], [54300.0, 1.0], [56100.0, 1.0], [56500.0, 2.0], [56700.0, 2.0], [57300.0, 1.0], [58900.0, 2.0], [59300.0, 2.0], [57500.0, 1.0], [57900.0, 1.0], [58100.0, 1.0], [58700.0, 1.0], [59500.0, 1.0], [59700.0, 2.0], [59900.0, 2.0], [60100.0, 1.0], [9200.0, 1.0], [9300.0, 1.0], [9600.0, 2.0], [10200.0, 1.0], [10000.0, 1.0], [10100.0, 1.0], [10400.0, 2.0], [10600.0, 6.0], [10300.0, 2.0], [10500.0, 3.0], [10700.0, 3.0], [10900.0, 3.0], [11200.0, 4.0], [10800.0, 3.0], [11100.0, 2.0], [11000.0, 5.0], [11300.0, 4.0], [11700.0, 2.0], [11500.0, 1.0], [12200.0, 1.0], [12000.0, 1.0], [13700.0, 1.0], [14100.0, 2.0], [14300.0, 1.0], [14700.0, 1.0], [15400.0, 2.0], [15900.0, 2.0], [16300.0, 4.0], [16200.0, 3.0], [17300.0, 11.0], [16700.0, 4.0], [16800.0, 3.0], [16900.0, 3.0], [17100.0, 13.0], [17200.0, 9.0], [17400.0, 15.0], [17000.0, 4.0], [16600.0, 1.0], [17500.0, 20.0], [17600.0, 16.0], [18200.0, 48.0], [17700.0, 29.0], [17900.0, 37.0], [17800.0, 29.0], [18000.0, 44.0], [18300.0, 46.0], [18400.0, 47.0], [18100.0, 39.0], [19200.0, 6.0], [18500.0, 49.0], [18700.0, 39.0], [19000.0, 20.0], [18800.0, 24.0], [18600.0, 39.0], [18900.0, 23.0], [19100.0, 12.0], [19300.0, 1.0], [19400.0, 1.0], [19500.0, 2.0], [20600.0, 1.0], [22400.0, 1.0], [23800.0, 1.0], [27000.0, 1.0], [30400.0, 1.0], [33800.0, 1.0], [35000.0, 1.0], [40200.0, 1.0], [54800.0, 1.0], [55800.0, 1.0], [56200.0, 1.0], [56400.0, 3.0], [56800.0, 1.0], [57200.0, 2.0], [57600.0, 1.0], [57400.0, 2.0], [57800.0, 4.0], [59000.0, 1.0], [58200.0, 1.0], [58800.0, 2.0], [58600.0, 1.0], [59800.0, 2.0], [59600.0, 1.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[38500.0, 1.0], [38100.0, 1.0], [40900.0, 1.0], [45700.0, 1.0], [48100.0, 1.0], [50500.0, 2.0], [49300.0, 1.0], [49900.0, 1.0], [52300.0, 1.0], [52700.0, 2.0], [53300.0, 2.0], [53500.0, 3.0], [54300.0, 1.0], [53900.0, 3.0], [54100.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [6900.0, 2.0], [6700.0, 2.0], [7100.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7600.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [7700.0, 1.0], [8100.0, 2.0], [8400.0, 2.0], [8300.0, 1.0], [8700.0, 1.0], [9200.0, 4.0], [8900.0, 1.0], [9000.0, 5.0], [8800.0, 2.0], [9100.0, 3.0], [9600.0, 12.0], [9500.0, 5.0], [9400.0, 2.0], [9700.0, 10.0], [9300.0, 1.0], [9900.0, 23.0], [10100.0, 42.0], [10000.0, 43.0], [10200.0, 40.0], [9800.0, 14.0], [10300.0, 38.0], [10400.0, 46.0], [10500.0, 54.0], [10700.0, 58.0], [10600.0, 54.0], [10900.0, 31.0], [10800.0, 43.0], [11100.0, 17.0], [11200.0, 18.0], [11000.0, 24.0], [11300.0, 15.0], [11400.0, 13.0], [11600.0, 2.0], [11500.0, 9.0], [11700.0, 6.0], [12200.0, 5.0], [12000.0, 5.0], [11800.0, 5.0], [11900.0, 1.0], [12100.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [13000.0, 3.0], [13200.0, 1.0], [13600.0, 1.0], [13500.0, 1.0], [13800.0, 1.0], [14200.0, 1.0], [14100.0, 1.0], [14300.0, 2.0], [13900.0, 1.0], [14500.0, 5.0], [14600.0, 3.0], [14800.0, 2.0], [14700.0, 1.0], [14400.0, 1.0], [14900.0, 2.0], [15200.0, 1.0], [15500.0, 1.0], [15400.0, 1.0], [17100.0, 1.0], [18600.0, 2.0], [21600.0, 1.0], [43800.0, 1.0], [46400.0, 1.0], [47400.0, 1.0], [49000.0, 2.0], [49400.0, 1.0], [50600.0, 1.0], [50400.0, 1.0], [51200.0, 1.0], [52400.0, 1.0], [53200.0, 2.0], [53000.0, 3.0], [52600.0, 1.0], [53400.0, 2.0], [53600.0, 2.0], [53800.0, 1.0], [54000.0, 2.0], [54200.0, 1.0]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[2700.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 6.0], [3600.0, 1.0], [3800.0, 3.0], [3900.0, 5.0], [4000.0, 5.0], [4200.0, 3.0], [4300.0, 1.0], [4100.0, 1.0], [4400.0, 2.0], [4800.0, 2.0], [5000.0, 1.0], [5100.0, 3.0], [5300.0, 5.0], [5200.0, 2.0], [5500.0, 1.0], [5400.0, 2.0], [5600.0, 4.0], [5700.0, 8.0], [5800.0, 4.0], [5900.0, 1.0], [6000.0, 4.0], [6100.0, 2.0], [6300.0, 2.0], [6200.0, 3.0], [6400.0, 4.0], [6600.0, 4.0], [6500.0, 5.0], [6700.0, 7.0], [6900.0, 27.0], [6800.0, 10.0], [7100.0, 29.0], [7000.0, 12.0], [7300.0, 30.0], [7200.0, 25.0], [7400.0, 43.0], [7600.0, 48.0], [7500.0, 40.0], [7700.0, 58.0], [7900.0, 42.0], [7800.0, 52.0], [8100.0, 45.0], [8000.0, 46.0], [8300.0, 13.0], [8200.0, 30.0], [8500.0, 10.0], [8600.0, 9.0], [8700.0, 11.0], [8400.0, 20.0], [9000.0, 1.0], [10000.0, 1.0], [10300.0, 1.0], [11900.0, 1.0], [13800.0, 1.0], [15100.0, 1.0], [16100.0, 1.0], [18500.0, 1.0], [22600.0, 1.0], [24500.0, 1.0], [25400.0, 1.0]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1509.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1509.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1509.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 40.27777777777777, "minX": 1.6165857E12, "maxY": 50.0, "series": [{"data": [[1.61658582E12, 50.0], [1.61658594E12, 50.0], [1.61658576E12, 50.0], [1.61658588E12, 50.0], [1.6165857E12, 50.0], [1.616586E12, 40.27777777777777]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616586E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3931.0, "minX": 1.0, "maxY": 20865.001420454526, "series": [{"data": [[2.0, 9672.0], [3.0, 10143.0], [4.0, 9371.0], [5.0, 10422.0], [6.0, 10392.0], [7.0, 10731.0], [8.0, 11015.0], [9.0, 10953.0], [10.0, 11150.0], [11.0, 11055.0], [12.0, 11280.0], [13.0, 11281.0], [14.0, 11566.0], [15.0, 10704.0], [16.0, 11039.0], [17.0, 11092.0], [18.0, 11241.0], [19.0, 10666.0], [20.0, 10685.0], [21.0, 10905.0], [22.0, 10849.0], [23.0, 10501.0], [24.0, 11052.0], [25.0, 10016.0], [26.0, 10589.0], [27.0, 10625.0], [28.0, 10252.0], [29.0, 11128.0], [30.0, 10760.0], [31.0, 11346.0], [33.0, 10552.0], [32.0, 10671.0], [35.0, 10637.0], [34.0, 10892.0], [37.0, 10302.0], [36.0, 10896.0], [39.0, 18799.0], [38.0, 10689.0], [41.0, 11258.0], [40.0, 11358.0], [43.0, 10975.0], [42.0, 10474.0], [45.0, 18546.0], [44.0, 11315.0], [47.0, 11714.0], [46.0, 11738.0], [49.0, 12241.0], [48.0, 12099.0], [50.0, 20865.001420454526], [1.0, 9669.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[48.37317397078352, 20234.086321381135]], "isOverall": false, "label": "SELECT Test-Aggregated", "isController": true}, {"data": [[33.0, 10552.0], [32.0, 10671.0], [2.0, 9671.0], [35.0, 10637.0], [34.0, 10892.0], [37.0, 10301.0], [36.0, 10895.0], [38.0, 10689.0], [41.0, 11258.0], [40.0, 11358.0], [43.0, 10974.0], [42.0, 10474.0], [44.0, 11315.0], [47.0, 11713.0], [46.0, 11738.0], [49.0, 12241.0], [48.0, 12099.0], [3.0, 10142.0], [50.0, 13306.269121813028], [4.0, 9370.0], [5.0, 10422.0], [6.0, 10392.0], [7.0, 10731.0], [8.0, 11015.0], [9.0, 10953.0], [10.0, 11150.0], [11.0, 11055.0], [12.0, 11280.0], [13.0, 11281.0], [14.0, 11566.0], [15.0, 10704.0], [16.0, 11038.0], [1.0, 9669.0], [17.0, 11092.0], [18.0, 11241.0], [19.0, 10666.0], [20.0, 10685.0], [21.0, 10905.0], [22.0, 10849.0], [23.0, 10501.0], [24.0, 11052.0], [25.0, 10016.0], [26.0, 10589.0], [27.0, 10625.0], [28.0, 10251.0], [29.0, 11128.0], [30.0, 10760.0], [31.0, 11345.0]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[48.39442231075696, 13152.957503320045]], "isOverall": false, "label": "(POST) Admin Login-Aggregated", "isController": false}, {"data": [[39.0, 4103.0], [45.0, 3931.0], [50.0, 7562.555397727274]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}, {"data": [[49.977337110481585, 7552.511331444761]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 110889.96666666666, "minX": 1.6165857E12, "maxY": 8.649755526666667E7, "series": [{"data": [[1.61658582E12, 9891064.766666668], [1.61658594E12, 1.000957375E7], [1.61658576E12, 8.649755526666667E7], [1.61658588E12, 9711133.183333334], [1.6165857E12, 1.0843050366666667E7], [1.616586E12, 6096476.283333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61658582E12, 3844785.1666666665], [1.61658594E12, 3890622.966666667], [1.61658576E12, 3525835.7666666666], [1.61658588E12, 3774757.2666666666], [1.6165857E12, 110889.96666666666], [1.616586E12, 2369512.2333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616586E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7291.185430463577, "minX": 1.6165857E12, "maxY": 34899.75, "series": [{"data": [[1.61658582E12, 18125.264900662245], [1.61658594E12, 18101.005494505498], [1.61658576E12, 29852.17880794702], [1.61658588E12, 18631.414634146357], [1.6165857E12, 34899.75], [1.616586E12, 14872.663366336634]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.61658582E12, 10667.999999999996], [1.61658594E12, 10768.69934640523], [1.61658576E12, 21864.153846153844], [1.61658588E12, 10955.987577639757], [1.6165857E12, 20854.333333333332], [1.616586E12, 10685.340206185565]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[1.61658582E12, 7361.529801324504], [1.61658594E12, 7379.626373626373], [1.61658576E12, 7291.185430463577], [1.61658588E12, 7743.274390243904], [1.6165857E12, 22796.0], [1.616586E12, 7691.481481481482]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616586E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6165857E12, "maxY": 7303.347560975606, "series": [{"data": [[1.61658582E12, 0.0], [1.61658594E12, 0.0], [1.61658576E12, 0.0], [1.61658588E12, 0.0], [1.6165857E12, 0.0], [1.616586E12, 0.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.61658582E12, 5160.305555555555], [1.61658594E12, 5074.9607843137255], [1.61658576E12, 4707.660256410257], [1.61658588E12, 5027.2484472049655], [1.6165857E12, 977.1666666666667], [1.616586E12, 5103.649484536081]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[1.61658582E12, 6997.1986754966865], [1.61658594E12, 6980.159340659341], [1.61658576E12, 5311.913907284769], [1.61658588E12, 7303.347560975606], [1.6165857E12, 4945.25], [1.616586E12, 7297.814814814814]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616586E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6165857E12, "maxY": 38.5, "series": [{"data": [[1.61658582E12, 0.0], [1.61658594E12, 0.0], [1.61658576E12, 0.0], [1.61658588E12, 0.0], [1.6165857E12, 0.0], [1.616586E12, 0.0]], "isOverall": false, "label": "SELECT Test", "isController": true}, {"data": [[1.61658582E12, 1.93888888888889], [1.61658594E12, 1.2156862745098043], [1.61658576E12, 6.570512820512821], [1.61658588E12, 1.3291925465838514], [1.6165857E12, 18.666666666666668], [1.616586E12, 1.3092783505154642]], "isOverall": false, "label": "(POST) Admin Login", "isController": false}, {"data": [[1.61658582E12, 0.0], [1.61658594E12, 0.0], [1.61658576E12, 16.993377483443723], [1.61658588E12, 0.0], [1.6165857E12, 38.5], [1.616586E12, 0.0]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616586E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2778.0, "minX": 1.6165857E12, "maxY": 54358.0, "series": [{"data": [[1.61658582E12, 15530.0], [1.61658594E12, 14896.0], [1.61658576E12, 54358.0], [1.61658588E12, 14975.0], [1.6165857E12, 38564.0], [1.616586E12, 18867.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61658582E12, 3455.0], [1.61658594E12, 3634.0], [1.61658576E12, 2778.0], [1.61658588E12, 3731.0], [1.6165857E12, 7832.0], [1.616586E12, 3931.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61658582E12, 14073.200000000019], [1.61658594E12, 11372.0], [1.61658576E12, 50554.3], [1.61658588E12, 11454.0], [1.6165857E12, 38522.3], [1.616586E12, 11360.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61658582E12, 53947.6], [1.61658594E12, 53561.8], [1.61658576E12, 54106.5], [1.61658588E12, 53776.159999999996], [1.6165857E12, 38564.0], [1.616586E12, 53501.04]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61658582E12, 50527.0], [1.61658594E12, 14878.0], [1.61658576E12, 53487.9], [1.61658588E12, 24899.19999999998], [1.6165857E12, 38564.0], [1.616586E12, 14513.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616586E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8725.0, "minX": 1000.0, "maxY": 10800.0, "series": [{"data": [[1000.0, 8725.0], [2000.0, 10800.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3758.5, "minX": 1000.0, "maxY": 6630.0, "series": [{"data": [[1000.0, 6630.0], [2000.0, 3758.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6165857E12, "maxY": 5.583333333333333, "series": [{"data": [[1.61658582E12, 5.516666666666667], [1.61658594E12, 5.583333333333333], [1.61658576E12, 5.116666666666666], [1.61658588E12, 5.416666666666667], [1.6165857E12, 1.0], [1.616586E12, 2.5166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616586E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6165857E12, "maxY": 5.583333333333333, "series": [{"data": [[1.61658582E12, 5.516666666666667], [1.61658594E12, 5.583333333333333], [1.61658576E12, 5.116666666666666], [1.61658588E12, 5.416666666666667], [1.6165857E12, 0.16666666666666666], [1.616586E12, 3.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.616586E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6165857E12, "maxY": 3.033333333333333, "series": [{"data": [[1.61658582E12, 2.5166666666666666], [1.61658594E12, 3.033333333333333], [1.61658576E12, 2.5166666666666666], [1.61658588E12, 2.7333333333333334], [1.6165857E12, 0.06666666666666667], [1.616586E12, 0.9]], "isOverall": false, "label": "(GET) SELECT Admin Dashboard-success", "isController": false}, {"data": [[1.61658582E12, 2.5166666666666666], [1.61658594E12, 3.033333333333333], [1.61658576E12, 2.5166666666666666], [1.61658588E12, 2.7333333333333334], [1.6165857E12, 0.06666666666666667], [1.616586E12, 1.6833333333333333]], "isOverall": false, "label": "SELECT Test-success", "isController": true}, {"data": [[1.61658582E12, 3.0], [1.61658594E12, 2.55], [1.61658576E12, 2.6], [1.61658588E12, 2.683333333333333], [1.6165857E12, 0.1], [1.616586E12, 1.6166666666666667]], "isOverall": false, "label": "(POST) Admin Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616586E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.6165857E12, "maxY": 8.616666666666667, "series": [{"data": [[1.61658582E12, 8.033333333333333], [1.61658594E12, 8.616666666666667], [1.61658576E12, 7.633333333333334], [1.61658588E12, 8.15], [1.6165857E12, 0.23333333333333334], [1.616586E12, 4.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.616586E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

