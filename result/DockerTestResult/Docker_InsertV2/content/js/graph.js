/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6642.0, "minX": 0.0, "maxY": 53574.0, "series": [{"data": [[0.0, 19146.0], [0.1, 19146.0], [0.2, 19146.0], [0.3, 20110.0], [0.4, 20110.0], [0.5, 20191.0], [0.6, 20191.0], [0.7, 20218.0], [0.8, 20218.0], [0.9, 20780.0], [1.0, 20780.0], [1.1, 21256.0], [1.2, 21256.0], [1.3, 21591.0], [1.4, 21591.0], [1.5, 21598.0], [1.6, 21598.0], [1.7, 21624.0], [1.8, 21624.0], [1.9, 21734.0], [2.0, 21734.0], [2.1, 21765.0], [2.2, 21765.0], [2.3, 21832.0], [2.4, 21832.0], [2.5, 21925.0], [2.6, 21925.0], [2.7, 21931.0], [2.8, 21931.0], [2.9, 21967.0], [3.0, 21967.0], [3.1, 22006.0], [3.2, 22006.0], [3.3, 22062.0], [3.4, 22062.0], [3.5, 22073.0], [3.6, 22073.0], [3.7, 22091.0], [3.8, 22091.0], [3.9, 22094.0], [4.0, 22094.0], [4.1, 22111.0], [4.2, 22111.0], [4.3, 22131.0], [4.4, 22131.0], [4.5, 22234.0], [4.6, 22234.0], [4.7, 22373.0], [4.8, 22373.0], [4.9, 22442.0], [5.0, 22442.0], [5.1, 22456.0], [5.2, 22456.0], [5.3, 22535.0], [5.4, 22535.0], [5.5, 22545.0], [5.6, 22545.0], [5.7, 22566.0], [5.8, 22566.0], [5.9, 22569.0], [6.0, 22569.0], [6.1, 22626.0], [6.2, 22626.0], [6.3, 22632.0], [6.4, 22632.0], [6.5, 22670.0], [6.6, 22670.0], [6.7, 22818.0], [6.8, 22818.0], [6.9, 22830.0], [7.0, 22830.0], [7.1, 22838.0], [7.2, 22838.0], [7.3, 22879.0], [7.4, 22879.0], [7.5, 22883.0], [7.6, 22883.0], [7.7, 22958.0], [7.8, 22958.0], [7.9, 23031.0], [8.0, 23031.0], [8.1, 23238.0], [8.2, 23238.0], [8.3, 23263.0], [8.4, 23263.0], [8.5, 23390.0], [8.6, 23390.0], [8.7, 23941.0], [8.8, 23941.0], [8.9, 24079.0], [9.0, 24079.0], [9.1, 24238.0], [9.2, 24238.0], [9.3, 24320.0], [9.4, 24320.0], [9.5, 24502.0], [9.6, 24502.0], [9.7, 24526.0], [9.8, 24526.0], [9.9, 24780.0], [10.0, 24780.0], [10.1, 25279.0], [10.2, 25279.0], [10.3, 25942.0], [10.4, 25942.0], [10.5, 26772.0], [10.6, 26772.0], [10.7, 26900.0], [10.8, 26900.0], [10.9, 27688.0], [11.0, 27688.0], [11.1, 27805.0], [11.2, 27805.0], [11.3, 28144.0], [11.4, 28144.0], [11.5, 29121.0], [11.6, 29121.0], [11.7, 29274.0], [11.8, 29274.0], [11.9, 29319.0], [12.0, 29319.0], [12.1, 29478.0], [12.2, 29478.0], [12.3, 29578.0], [12.4, 29578.0], [12.5, 30302.0], [12.6, 30302.0], [12.7, 30484.0], [12.8, 30484.0], [12.9, 30614.0], [13.0, 30614.0], [13.1, 30720.0], [13.2, 30720.0], [13.3, 30875.0], [13.4, 30875.0], [13.5, 30900.0], [13.6, 30900.0], [13.7, 30973.0], [13.8, 30973.0], [13.9, 31030.0], [14.0, 31030.0], [14.1, 31078.0], [14.2, 31078.0], [14.3, 31105.0], [14.4, 31105.0], [14.5, 31121.0], [14.6, 31121.0], [14.7, 31175.0], [14.8, 31175.0], [14.9, 31190.0], [15.0, 31190.0], [15.1, 31230.0], [15.2, 31230.0], [15.3, 31248.0], [15.4, 31248.0], [15.5, 31257.0], [15.6, 31257.0], [15.7, 31258.0], [15.8, 31258.0], [15.9, 31273.0], [16.0, 31273.0], [16.1, 31277.0], [16.2, 31277.0], [16.3, 31292.0], [16.4, 31292.0], [16.5, 31306.0], [16.6, 31306.0], [16.7, 31306.0], [16.8, 31319.0], [16.9, 31319.0], [17.0, 31321.0], [17.1, 31321.0], [17.2, 31339.0], [17.3, 31339.0], [17.4, 31345.0], [17.5, 31345.0], [17.6, 31358.0], [17.7, 31358.0], [17.8, 31366.0], [17.9, 31366.0], [18.0, 31373.0], [18.1, 31373.0], [18.2, 31381.0], [18.3, 31381.0], [18.4, 31388.0], [18.5, 31388.0], [18.6, 31390.0], [18.7, 31390.0], [18.8, 31412.0], [18.9, 31412.0], [19.0, 31435.0], [19.1, 31435.0], [19.2, 31448.0], [19.3, 31448.0], [19.4, 31454.0], [19.5, 31454.0], [19.6, 31462.0], [19.7, 31462.0], [19.8, 31469.0], [19.9, 31469.0], [20.0, 31486.0], [20.1, 31486.0], [20.2, 31496.0], [20.3, 31496.0], [20.4, 31497.0], [20.5, 31497.0], [20.6, 31498.0], [20.7, 31498.0], [20.8, 31505.0], [20.9, 31505.0], [21.0, 31506.0], [21.1, 31506.0], [21.2, 31506.0], [21.3, 31506.0], [21.4, 31510.0], [21.5, 31510.0], [21.6, 31513.0], [21.7, 31513.0], [21.8, 31533.0], [21.9, 31533.0], [22.0, 31540.0], [22.1, 31540.0], [22.2, 31544.0], [22.3, 31544.0], [22.4, 31551.0], [22.5, 31551.0], [22.6, 31559.0], [22.7, 31559.0], [22.8, 31563.0], [22.9, 31563.0], [23.0, 31567.0], [23.1, 31567.0], [23.2, 31580.0], [23.3, 31580.0], [23.4, 31582.0], [23.5, 31582.0], [23.6, 31588.0], [23.7, 31588.0], [23.8, 31591.0], [23.9, 31591.0], [24.0, 31596.0], [24.1, 31596.0], [24.2, 31601.0], [24.3, 31601.0], [24.4, 31603.0], [24.5, 31603.0], [24.6, 31609.0], [24.7, 31609.0], [24.8, 31613.0], [24.9, 31613.0], [25.0, 31618.0], [25.1, 31618.0], [25.2, 31622.0], [25.3, 31622.0], [25.4, 31624.0], [25.5, 31624.0], [25.6, 31627.0], [25.7, 31627.0], [25.8, 31630.0], [25.9, 31630.0], [26.0, 31636.0], [26.1, 31636.0], [26.2, 31639.0], [26.3, 31639.0], [26.4, 31647.0], [26.5, 31647.0], [26.6, 31656.0], [26.7, 31656.0], [26.8, 31658.0], [26.9, 31658.0], [27.0, 31667.0], [27.1, 31667.0], [27.2, 31675.0], [27.3, 31675.0], [27.4, 31676.0], [27.5, 31676.0], [27.6, 31690.0], [27.7, 31690.0], [27.8, 31694.0], [27.9, 31694.0], [28.0, 31695.0], [28.1, 31695.0], [28.2, 31697.0], [28.3, 31697.0], [28.4, 31700.0], [28.5, 31700.0], [28.6, 31701.0], [28.7, 31701.0], [28.8, 31710.0], [28.9, 31710.0], [29.0, 31713.0], [29.1, 31713.0], [29.2, 31715.0], [29.3, 31715.0], [29.4, 31721.0], [29.5, 31721.0], [29.6, 31739.0], [29.7, 31739.0], [29.8, 31746.0], [29.9, 31746.0], [30.0, 31748.0], [30.1, 31748.0], [30.2, 31754.0], [30.3, 31754.0], [30.4, 31760.0], [30.5, 31760.0], [30.6, 31767.0], [30.7, 31767.0], [30.8, 31767.0], [30.9, 31767.0], [31.0, 31772.0], [31.1, 31772.0], [31.2, 31781.0], [31.3, 31781.0], [31.4, 31787.0], [31.5, 31787.0], [31.6, 31788.0], [31.7, 31788.0], [31.8, 31790.0], [31.9, 31790.0], [32.0, 31791.0], [32.1, 31791.0], [32.2, 31794.0], [32.3, 31794.0], [32.4, 31795.0], [32.5, 31795.0], [32.6, 31803.0], [32.7, 31803.0], [32.8, 31803.0], [32.9, 31803.0], [33.0, 31808.0], [33.1, 31808.0], [33.2, 31821.0], [33.3, 31821.0], [33.4, 31821.0], [33.5, 31821.0], [33.6, 31821.0], [33.7, 31824.0], [33.8, 31824.0], [33.9, 31828.0], [34.0, 31828.0], [34.1, 31829.0], [34.2, 31829.0], [34.3, 31831.0], [34.4, 31831.0], [34.5, 31833.0], [34.6, 31833.0], [34.7, 31834.0], [34.8, 31834.0], [34.9, 31851.0], [35.0, 31851.0], [35.1, 31856.0], [35.2, 31856.0], [35.3, 31858.0], [35.4, 31858.0], [35.5, 31859.0], [35.6, 31859.0], [35.7, 31860.0], [35.8, 31860.0], [35.9, 31861.0], [36.0, 31861.0], [36.1, 31862.0], [36.2, 31862.0], [36.3, 31864.0], [36.4, 31864.0], [36.5, 31869.0], [36.6, 31869.0], [36.7, 31874.0], [36.8, 31874.0], [36.9, 31875.0], [37.0, 31875.0], [37.1, 31880.0], [37.2, 31880.0], [37.3, 31881.0], [37.4, 31881.0], [37.5, 31891.0], [37.6, 31891.0], [37.7, 31891.0], [37.8, 31891.0], [37.9, 31892.0], [38.0, 31892.0], [38.1, 31902.0], [38.2, 31902.0], [38.3, 31911.0], [38.4, 31911.0], [38.5, 31914.0], [38.6, 31914.0], [38.7, 31919.0], [38.8, 31919.0], [38.9, 31919.0], [39.0, 31919.0], [39.1, 31919.0], [39.2, 31919.0], [39.3, 31926.0], [39.4, 31926.0], [39.5, 31929.0], [39.6, 31929.0], [39.7, 31930.0], [39.8, 31930.0], [39.9, 31931.0], [40.0, 31931.0], [40.1, 31932.0], [40.2, 31932.0], [40.3, 31933.0], [40.4, 31933.0], [40.5, 31945.0], [40.6, 31945.0], [40.7, 31945.0], [40.8, 31945.0], [40.9, 31945.0], [41.0, 31945.0], [41.1, 31950.0], [41.2, 31950.0], [41.3, 31954.0], [41.4, 31954.0], [41.5, 31957.0], [41.6, 31957.0], [41.7, 31958.0], [41.8, 31958.0], [41.9, 31960.0], [42.0, 31960.0], [42.1, 31963.0], [42.2, 31963.0], [42.3, 31964.0], [42.4, 31964.0], [42.5, 31964.0], [42.6, 31964.0], [42.7, 31965.0], [42.8, 31965.0], [42.9, 31967.0], [43.0, 31967.0], [43.1, 31976.0], [43.2, 31976.0], [43.3, 31976.0], [43.4, 31976.0], [43.5, 31980.0], [43.6, 31980.0], [43.7, 31982.0], [43.8, 31982.0], [43.9, 31982.0], [44.0, 31982.0], [44.1, 31988.0], [44.2, 31988.0], [44.3, 31993.0], [44.4, 31993.0], [44.5, 31994.0], [44.6, 31994.0], [44.7, 31996.0], [44.8, 31996.0], [44.9, 32000.0], [45.0, 32000.0], [45.1, 32006.0], [45.2, 32006.0], [45.3, 32013.0], [45.4, 32013.0], [45.5, 32028.0], [45.6, 32028.0], [45.7, 32049.0], [45.8, 32049.0], [45.9, 32051.0], [46.0, 32051.0], [46.1, 32055.0], [46.2, 32055.0], [46.3, 32058.0], [46.4, 32058.0], [46.5, 32059.0], [46.6, 32059.0], [46.7, 32061.0], [46.8, 32061.0], [46.9, 32063.0], [47.0, 32063.0], [47.1, 32071.0], [47.2, 32071.0], [47.3, 32083.0], [47.4, 32083.0], [47.5, 32087.0], [47.6, 32087.0], [47.7, 32088.0], [47.8, 32088.0], [47.9, 32092.0], [48.0, 32092.0], [48.1, 32096.0], [48.2, 32096.0], [48.3, 32096.0], [48.4, 32096.0], [48.5, 32100.0], [48.6, 32100.0], [48.7, 32100.0], [48.8, 32100.0], [48.9, 32114.0], [49.0, 32114.0], [49.1, 32114.0], [49.2, 32114.0], [49.3, 32121.0], [49.4, 32121.0], [49.5, 32123.0], [49.6, 32123.0], [49.7, 32124.0], [49.8, 32124.0], [49.9, 32127.0], [50.0, 32127.0], [50.1, 32127.0], [50.2, 32127.0], [50.3, 32127.0], [50.4, 32128.0], [50.5, 32128.0], [50.6, 32130.0], [50.7, 32130.0], [50.8, 32131.0], [50.9, 32131.0], [51.0, 32132.0], [51.1, 32132.0], [51.2, 32135.0], [51.3, 32135.0], [51.4, 32137.0], [51.5, 32137.0], [51.6, 32139.0], [51.7, 32139.0], [51.8, 32140.0], [51.9, 32140.0], [52.0, 32140.0], [52.1, 32140.0], [52.2, 32145.0], [52.3, 32145.0], [52.4, 32145.0], [52.5, 32145.0], [52.6, 32154.0], [52.7, 32154.0], [52.8, 32156.0], [52.9, 32156.0], [53.0, 32157.0], [53.1, 32157.0], [53.2, 32165.0], [53.3, 32165.0], [53.4, 32167.0], [53.5, 32167.0], [53.6, 32177.0], [53.7, 32177.0], [53.8, 32180.0], [53.9, 32180.0], [54.0, 32187.0], [54.1, 32187.0], [54.2, 32188.0], [54.3, 32188.0], [54.4, 32190.0], [54.5, 32190.0], [54.6, 32196.0], [54.7, 32196.0], [54.8, 32199.0], [54.9, 32199.0], [55.0, 32203.0], [55.1, 32203.0], [55.2, 32204.0], [55.3, 32204.0], [55.4, 32208.0], [55.5, 32208.0], [55.6, 32211.0], [55.7, 32211.0], [55.8, 32218.0], [55.9, 32218.0], [56.0, 32219.0], [56.1, 32219.0], [56.2, 32220.0], [56.3, 32220.0], [56.4, 32222.0], [56.5, 32222.0], [56.6, 32228.0], [56.7, 32228.0], [56.8, 32228.0], [56.9, 32228.0], [57.0, 32231.0], [57.1, 32231.0], [57.2, 32234.0], [57.3, 32234.0], [57.4, 32236.0], [57.5, 32236.0], [57.6, 32242.0], [57.7, 32242.0], [57.8, 32251.0], [57.9, 32251.0], [58.0, 32257.0], [58.1, 32257.0], [58.2, 32258.0], [58.3, 32258.0], [58.4, 32263.0], [58.5, 32263.0], [58.6, 32263.0], [58.7, 32263.0], [58.8, 32263.0], [58.9, 32263.0], [59.0, 32269.0], [59.1, 32269.0], [59.2, 32272.0], [59.3, 32272.0], [59.4, 32272.0], [59.5, 32272.0], [59.6, 32275.0], [59.7, 32275.0], [59.8, 32276.0], [59.9, 32276.0], [60.0, 32278.0], [60.1, 32278.0], [60.2, 32283.0], [60.3, 32283.0], [60.4, 32284.0], [60.5, 32284.0], [60.6, 32285.0], [60.7, 32285.0], [60.8, 32288.0], [60.9, 32288.0], [61.0, 32291.0], [61.1, 32291.0], [61.2, 32294.0], [61.3, 32294.0], [61.4, 32297.0], [61.5, 32297.0], [61.6, 32304.0], [61.7, 32304.0], [61.8, 32304.0], [61.9, 32304.0], [62.0, 32305.0], [62.1, 32305.0], [62.2, 32307.0], [62.3, 32307.0], [62.4, 32309.0], [62.5, 32309.0], [62.6, 32311.0], [62.7, 32311.0], [62.8, 32316.0], [62.9, 32316.0], [63.0, 32323.0], [63.1, 32323.0], [63.2, 32328.0], [63.3, 32328.0], [63.4, 32331.0], [63.5, 32331.0], [63.6, 32333.0], [63.7, 32333.0], [63.8, 32336.0], [63.9, 32336.0], [64.0, 32348.0], [64.1, 32348.0], [64.2, 32348.0], [64.3, 32348.0], [64.4, 32349.0], [64.5, 32349.0], [64.6, 32357.0], [64.7, 32357.0], [64.8, 32358.0], [64.9, 32358.0], [65.0, 32364.0], [65.1, 32364.0], [65.2, 32369.0], [65.3, 32369.0], [65.4, 32370.0], [65.5, 32370.0], [65.6, 32373.0], [65.7, 32373.0], [65.8, 32379.0], [65.9, 32379.0], [66.0, 32382.0], [66.1, 32382.0], [66.2, 32384.0], [66.3, 32384.0], [66.4, 32384.0], [66.5, 32384.0], [66.6, 32390.0], [66.7, 32390.0], [66.8, 32390.0], [66.9, 32391.0], [67.0, 32391.0], [67.1, 32392.0], [67.2, 32392.0], [67.3, 32398.0], [67.4, 32398.0], [67.5, 32400.0], [67.6, 32400.0], [67.7, 32403.0], [67.8, 32403.0], [67.9, 32403.0], [68.0, 32403.0], [68.1, 32411.0], [68.2, 32411.0], [68.3, 32417.0], [68.4, 32417.0], [68.5, 32429.0], [68.6, 32429.0], [68.7, 32438.0], [68.8, 32438.0], [68.9, 32439.0], [69.0, 32439.0], [69.1, 32440.0], [69.2, 32440.0], [69.3, 32445.0], [69.4, 32445.0], [69.5, 32450.0], [69.6, 32450.0], [69.7, 32450.0], [69.8, 32450.0], [69.9, 32453.0], [70.0, 32453.0], [70.1, 32458.0], [70.2, 32458.0], [70.3, 32469.0], [70.4, 32469.0], [70.5, 32485.0], [70.6, 32485.0], [70.7, 32487.0], [70.8, 32487.0], [70.9, 32492.0], [71.0, 32492.0], [71.1, 32493.0], [71.2, 32493.0], [71.3, 32496.0], [71.4, 32496.0], [71.5, 32502.0], [71.6, 32502.0], [71.7, 32507.0], [71.8, 32507.0], [71.9, 32509.0], [72.0, 32509.0], [72.1, 32512.0], [72.2, 32512.0], [72.3, 32517.0], [72.4, 32517.0], [72.5, 32518.0], [72.6, 32518.0], [72.7, 32525.0], [72.8, 32525.0], [72.9, 32531.0], [73.0, 32531.0], [73.1, 32531.0], [73.2, 32531.0], [73.3, 32546.0], [73.4, 32546.0], [73.5, 32549.0], [73.6, 32549.0], [73.7, 32551.0], [73.8, 32551.0], [73.9, 32551.0], [74.0, 32551.0], [74.1, 32551.0], [74.2, 32551.0], [74.3, 32552.0], [74.4, 32552.0], [74.5, 32554.0], [74.6, 32554.0], [74.7, 32557.0], [74.8, 32557.0], [74.9, 32564.0], [75.0, 32564.0], [75.1, 32572.0], [75.2, 32572.0], [75.3, 32573.0], [75.4, 32573.0], [75.5, 32574.0], [75.6, 32574.0], [75.7, 32575.0], [75.8, 32575.0], [75.9, 32579.0], [76.0, 32579.0], [76.1, 32589.0], [76.2, 32589.0], [76.3, 32595.0], [76.4, 32595.0], [76.5, 32596.0], [76.6, 32596.0], [76.7, 32599.0], [76.8, 32599.0], [76.9, 32600.0], [77.0, 32600.0], [77.1, 32601.0], [77.2, 32601.0], [77.3, 32602.0], [77.4, 32602.0], [77.5, 32610.0], [77.6, 32610.0], [77.7, 32616.0], [77.8, 32616.0], [77.9, 32633.0], [78.0, 32633.0], [78.1, 32634.0], [78.2, 32634.0], [78.3, 32635.0], [78.4, 32635.0], [78.5, 32641.0], [78.6, 32641.0], [78.7, 32642.0], [78.8, 32642.0], [78.9, 32645.0], [79.0, 32645.0], [79.1, 32648.0], [79.2, 32648.0], [79.3, 32652.0], [79.4, 32652.0], [79.5, 32658.0], [79.6, 32658.0], [79.7, 32658.0], [79.8, 32658.0], [79.9, 32662.0], [80.0, 32662.0], [80.1, 32662.0], [80.2, 32662.0], [80.3, 32663.0], [80.4, 32663.0], [80.5, 32669.0], [80.6, 32669.0], [80.7, 32670.0], [80.8, 32670.0], [80.9, 32680.0], [81.0, 32680.0], [81.1, 32680.0], [81.2, 32680.0], [81.3, 32681.0], [81.4, 32681.0], [81.5, 32682.0], [81.6, 32682.0], [81.7, 32684.0], [81.8, 32684.0], [81.9, 32685.0], [82.0, 32685.0], [82.1, 32690.0], [82.2, 32690.0], [82.3, 32692.0], [82.4, 32692.0], [82.5, 32696.0], [82.6, 32696.0], [82.7, 32716.0], [82.8, 32716.0], [82.9, 32722.0], [83.0, 32722.0], [83.1, 32724.0], [83.2, 32724.0], [83.3, 32727.0], [83.4, 32727.0], [83.5, 32727.0], [83.6, 32731.0], [83.7, 32731.0], [83.8, 32733.0], [83.9, 32733.0], [84.0, 32737.0], [84.1, 32737.0], [84.2, 32741.0], [84.3, 32741.0], [84.4, 32741.0], [84.5, 32741.0], [84.6, 32741.0], [84.7, 32741.0], [84.8, 32746.0], [84.9, 32746.0], [85.0, 32746.0], [85.1, 32746.0], [85.2, 32768.0], [85.3, 32768.0], [85.4, 32779.0], [85.5, 32779.0], [85.6, 32784.0], [85.7, 32784.0], [85.8, 32788.0], [85.9, 32788.0], [86.0, 32789.0], [86.1, 32789.0], [86.2, 32790.0], [86.3, 32790.0], [86.4, 32791.0], [86.5, 32791.0], [86.6, 32798.0], [86.7, 32798.0], [86.8, 32799.0], [86.9, 32799.0], [87.0, 32800.0], [87.1, 32800.0], [87.2, 32801.0], [87.3, 32801.0], [87.4, 32804.0], [87.5, 32804.0], [87.6, 32806.0], [87.7, 32806.0], [87.8, 32816.0], [87.9, 32816.0], [88.0, 32826.0], [88.1, 32826.0], [88.2, 32833.0], [88.3, 32833.0], [88.4, 32834.0], [88.5, 32834.0], [88.6, 32838.0], [88.7, 32838.0], [88.8, 32846.0], [88.9, 32846.0], [89.0, 32846.0], [89.1, 32846.0], [89.2, 32851.0], [89.3, 32851.0], [89.4, 32866.0], [89.5, 32866.0], [89.6, 32871.0], [89.7, 32871.0], [89.8, 32875.0], [89.9, 32875.0], [90.0, 32875.0], [90.1, 32875.0], [90.2, 32876.0], [90.3, 32876.0], [90.4, 32878.0], [90.5, 32878.0], [90.6, 32881.0], [90.7, 32881.0], [90.8, 32887.0], [90.9, 32887.0], [91.0, 32891.0], [91.1, 32891.0], [91.2, 32892.0], [91.3, 32892.0], [91.4, 32915.0], [91.5, 32915.0], [91.6, 32917.0], [91.7, 32917.0], [91.8, 32924.0], [91.9, 32924.0], [92.0, 32926.0], [92.1, 32926.0], [92.2, 32939.0], [92.3, 32939.0], [92.4, 32944.0], [92.5, 32944.0], [92.6, 32957.0], [92.7, 32957.0], [92.8, 32966.0], [92.9, 32966.0], [93.0, 32966.0], [93.1, 32966.0], [93.2, 32978.0], [93.3, 32978.0], [93.4, 32980.0], [93.5, 32980.0], [93.6, 32988.0], [93.7, 32988.0], [93.8, 33002.0], [93.9, 33002.0], [94.0, 33004.0], [94.1, 33004.0], [94.2, 33044.0], [94.3, 33044.0], [94.4, 33061.0], [94.5, 33061.0], [94.6, 33073.0], [94.7, 33073.0], [94.8, 33079.0], [94.9, 33079.0], [95.0, 33102.0], [95.1, 33102.0], [95.2, 33109.0], [95.3, 33109.0], [95.4, 33112.0], [95.5, 33112.0], [95.6, 33117.0], [95.7, 33117.0], [95.8, 33117.0], [95.9, 33117.0], [96.0, 33134.0], [96.1, 33134.0], [96.2, 33135.0], [96.3, 33135.0], [96.4, 33149.0], [96.5, 33149.0], [96.6, 33174.0], [96.7, 33174.0], [96.8, 33207.0], [96.9, 33207.0], [97.0, 33216.0], [97.1, 33216.0], [97.2, 33219.0], [97.3, 33219.0], [97.4, 33231.0], [97.5, 33231.0], [97.6, 33249.0], [97.7, 33249.0], [97.8, 33266.0], [97.9, 33266.0], [98.0, 33298.0], [98.1, 33298.0], [98.2, 33309.0], [98.3, 33309.0], [98.4, 33323.0], [98.5, 33323.0], [98.6, 33517.0], [98.7, 33517.0], [98.8, 33733.0], [98.9, 33733.0], [99.0, 33760.0], [99.1, 33760.0], [99.2, 33917.0], [99.3, 33917.0], [99.4, 51320.0], [99.5, 51320.0], [99.6, 53013.0], [99.7, 53013.0], [99.8, 53574.0], [99.9, 53574.0], [100.0, 53574.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 6642.0], [0.1, 6642.0], [0.2, 6642.0], [0.3, 6729.0], [0.4, 6729.0], [0.5, 6741.0], [0.6, 6741.0], [0.7, 6871.0], [0.8, 6871.0], [0.9, 6892.0], [1.0, 6892.0], [1.1, 6892.0], [1.2, 6990.0], [1.3, 6990.0], [1.4, 6993.0], [1.5, 6993.0], [1.6, 7017.0], [1.7, 7017.0], [1.8, 7031.0], [1.9, 7031.0], [2.0, 7031.0], [2.1, 7041.0], [2.2, 7041.0], [2.3, 7074.0], [2.4, 7074.0], [2.5, 7083.0], [2.6, 7083.0], [2.7, 7103.0], [2.8, 7103.0], [2.9, 7119.0], [3.0, 7119.0], [3.1, 7119.0], [3.2, 7156.0], [3.3, 7156.0], [3.4, 7196.0], [3.5, 7196.0], [3.6, 7206.0], [3.7, 7206.0], [3.8, 7244.0], [3.9, 7244.0], [4.0, 7244.0], [4.1, 7270.0], [4.2, 7270.0], [4.3, 7318.0], [4.4, 7318.0], [4.5, 7328.0], [4.6, 7328.0], [4.7, 7334.0], [4.8, 7334.0], [4.9, 7350.0], [5.0, 7350.0], [5.1, 7350.0], [5.2, 7359.0], [5.3, 7359.0], [5.4, 7370.0], [5.5, 7370.0], [5.6, 7389.0], [5.7, 7389.0], [5.8, 7417.0], [5.9, 7417.0], [6.0, 7417.0], [6.1, 7418.0], [6.2, 7418.0], [6.3, 7472.0], [6.4, 7472.0], [6.5, 7564.0], [6.6, 7564.0], [6.7, 7590.0], [6.8, 7590.0], [6.9, 7590.0], [7.0, 7662.0], [7.1, 7662.0], [7.2, 7689.0], [7.3, 7689.0], [7.4, 7691.0], [7.5, 7691.0], [7.6, 7691.0], [7.7, 7691.0], [7.8, 7717.0], [7.9, 7717.0], [8.0, 7717.0], [8.1, 7789.0], [8.2, 7789.0], [8.3, 7803.0], [8.4, 7803.0], [8.5, 7815.0], [8.6, 7815.0], [8.7, 7842.0], [8.8, 7842.0], [8.9, 7842.0], [9.0, 7850.0], [9.1, 7850.0], [9.2, 7861.0], [9.3, 7861.0], [9.4, 7883.0], [9.5, 7883.0], [9.6, 7912.0], [9.7, 7912.0], [9.8, 7938.0], [9.9, 7938.0], [10.0, 7938.0], [10.1, 7953.0], [10.2, 7953.0], [10.3, 8001.0], [10.4, 8001.0], [10.5, 8027.0], [10.6, 8027.0], [10.7, 8037.0], [10.8, 8037.0], [10.9, 8037.0], [11.0, 8045.0], [11.1, 8045.0], [11.2, 8053.0], [11.3, 8053.0], [11.4, 8059.0], [11.5, 8059.0], [11.6, 8062.0], [11.7, 8062.0], [11.8, 8062.0], [11.9, 8078.0], [12.0, 8078.0], [12.1, 8082.0], [12.2, 8082.0], [12.3, 8088.0], [12.4, 8088.0], [12.5, 8088.0], [12.6, 8088.0], [12.7, 8090.0], [12.8, 8090.0], [12.9, 8090.0], [13.0, 8091.0], [13.1, 8091.0], [13.2, 8103.0], [13.3, 8103.0], [13.4, 8107.0], [13.5, 8107.0], [13.6, 8121.0], [13.7, 8121.0], [13.8, 8121.0], [13.9, 8129.0], [14.0, 8129.0], [14.1, 8143.0], [14.2, 8143.0], [14.3, 8147.0], [14.4, 8147.0], [14.5, 8156.0], [14.6, 8156.0], [14.7, 8163.0], [14.8, 8163.0], [14.9, 8163.0], [15.0, 8178.0], [15.1, 8178.0], [15.2, 8180.0], [15.3, 8180.0], [15.4, 8182.0], [15.5, 8182.0], [15.6, 8187.0], [15.7, 8187.0], [15.8, 8187.0], [15.9, 8189.0], [16.0, 8189.0], [16.1, 8190.0], [16.2, 8190.0], [16.3, 8191.0], [16.4, 8191.0], [16.5, 8192.0], [16.6, 8192.0], [16.7, 8192.0], [16.8, 8197.0], [16.9, 8197.0], [17.0, 8198.0], [17.1, 8198.0], [17.2, 8207.0], [17.3, 8207.0], [17.4, 8212.0], [17.5, 8212.0], [17.6, 8213.0], [17.7, 8213.0], [17.8, 8213.0], [17.9, 8219.0], [18.0, 8219.0], [18.1, 8237.0], [18.2, 8237.0], [18.3, 8251.0], [18.4, 8251.0], [18.5, 8252.0], [18.6, 8252.0], [18.7, 8252.0], [18.8, 8262.0], [18.9, 8262.0], [19.0, 8268.0], [19.1, 8268.0], [19.2, 8280.0], [19.3, 8280.0], [19.4, 8283.0], [19.5, 8283.0], [19.6, 8289.0], [19.7, 8289.0], [19.8, 8289.0], [19.9, 8291.0], [20.0, 8291.0], [20.1, 8291.0], [20.2, 8291.0], [20.3, 8293.0], [20.4, 8293.0], [20.5, 8300.0], [20.6, 8300.0], [20.7, 8300.0], [20.8, 8302.0], [20.9, 8302.0], [21.0, 8310.0], [21.1, 8310.0], [21.2, 8312.0], [21.3, 8312.0], [21.4, 8316.0], [21.5, 8316.0], [21.6, 8316.0], [21.7, 8317.0], [21.8, 8317.0], [21.9, 8320.0], [22.0, 8320.0], [22.1, 8322.0], [22.2, 8322.0], [22.3, 8331.0], [22.4, 8331.0], [22.5, 8334.0], [22.6, 8334.0], [22.7, 8334.0], [22.8, 8334.0], [22.9, 8334.0], [23.0, 8341.0], [23.1, 8341.0], [23.2, 8343.0], [23.3, 8343.0], [23.4, 8350.0], [23.5, 8350.0], [23.6, 8350.0], [23.7, 8358.0], [23.8, 8358.0], [23.9, 8360.0], [24.0, 8360.0], [24.1, 8361.0], [24.2, 8361.0], [24.3, 8363.0], [24.4, 8363.0], [24.5, 8364.0], [24.6, 8364.0], [24.7, 8364.0], [24.8, 8366.0], [24.9, 8366.0], [25.0, 8367.0], [25.1, 8367.0], [25.2, 8368.0], [25.3, 8368.0], [25.4, 8371.0], [25.5, 8371.0], [25.6, 8371.0], [25.7, 8374.0], [25.8, 8374.0], [25.9, 8374.0], [26.0, 8374.0], [26.1, 8375.0], [26.2, 8375.0], [26.3, 8376.0], [26.4, 8376.0], [26.5, 8376.0], [26.6, 8378.0], [26.7, 8378.0], [26.8, 8378.0], [26.9, 8378.0], [27.0, 8380.0], [27.1, 8380.0], [27.2, 8380.0], [27.3, 8380.0], [27.4, 8382.0], [27.5, 8382.0], [27.6, 8382.0], [27.7, 8382.0], [27.8, 8382.0], [27.9, 8383.0], [28.0, 8383.0], [28.1, 8386.0], [28.2, 8386.0], [28.3, 8386.0], [28.4, 8386.0], [28.5, 8386.0], [28.6, 8389.0], [28.7, 8389.0], [28.8, 8389.0], [28.9, 8389.0], [29.0, 8391.0], [29.1, 8391.0], [29.2, 8394.0], [29.3, 8394.0], [29.4, 8399.0], [29.5, 8399.0], [29.6, 8399.0], [29.7, 8402.0], [29.8, 8402.0], [29.9, 8404.0], [30.0, 8404.0], [30.1, 8406.0], [30.2, 8406.0], [30.3, 8409.0], [30.4, 8409.0], [30.5, 8409.0], [30.6, 8409.0], [30.7, 8409.0], [30.8, 8410.0], [30.9, 8410.0], [31.0, 8411.0], [31.1, 8411.0], [31.2, 8412.0], [31.3, 8412.0], [31.4, 8412.0], [31.5, 8412.0], [31.6, 8412.0], [31.7, 8412.0], [31.8, 8412.0], [31.9, 8416.0], [32.0, 8416.0], [32.1, 8418.0], [32.2, 8418.0], [32.3, 8420.0], [32.4, 8420.0], [32.5, 8420.0], [32.6, 8420.0], [32.7, 8420.0], [32.8, 8427.0], [32.9, 8427.0], [33.0, 8428.0], [33.1, 8428.0], [33.2, 8432.0], [33.3, 8432.0], [33.4, 8432.0], [33.5, 8432.0], [33.6, 8432.0], [33.7, 8435.0], [33.8, 8435.0], [33.9, 8439.0], [34.0, 8439.0], [34.1, 8442.0], [34.2, 8442.0], [34.3, 8443.0], [34.4, 8443.0], [34.5, 8443.0], [34.6, 8443.0], [34.7, 8443.0], [34.8, 8448.0], [34.9, 8448.0], [35.0, 8452.0], [35.1, 8452.0], [35.2, 8453.0], [35.3, 8453.0], [35.4, 8453.0], [35.5, 8454.0], [35.6, 8454.0], [35.7, 8457.0], [35.8, 8457.0], [35.9, 8460.0], [36.0, 8460.0], [36.1, 8460.0], [36.2, 8460.0], [36.3, 8460.0], [36.4, 8467.0], [36.5, 8467.0], [36.6, 8469.0], [36.7, 8469.0], [36.8, 8477.0], [36.9, 8477.0], [37.0, 8477.0], [37.1, 8477.0], [37.2, 8482.0], [37.3, 8482.0], [37.4, 8482.0], [37.5, 8482.0], [37.6, 8482.0], [37.7, 8482.0], [37.8, 8482.0], [37.9, 8483.0], [38.0, 8483.0], [38.1, 8483.0], [38.2, 8483.0], [38.3, 8483.0], [38.4, 8484.0], [38.5, 8484.0], [38.6, 8487.0], [38.7, 8487.0], [38.8, 8488.0], [38.9, 8488.0], [39.0, 8488.0], [39.1, 8488.0], [39.2, 8491.0], [39.3, 8491.0], [39.4, 8491.0], [39.5, 8492.0], [39.6, 8492.0], [39.7, 8493.0], [39.8, 8493.0], [39.9, 8496.0], [40.0, 8496.0], [40.1, 8496.0], [40.2, 8496.0], [40.3, 8496.0], [40.4, 8499.0], [40.5, 8499.0], [40.6, 8500.0], [40.7, 8500.0], [40.8, 8501.0], [40.9, 8501.0], [41.0, 8504.0], [41.1, 8504.0], [41.2, 8504.0], [41.3, 8506.0], [41.4, 8506.0], [41.5, 8507.0], [41.6, 8507.0], [41.7, 8508.0], [41.8, 8508.0], [41.9, 8509.0], [42.0, 8509.0], [42.1, 8512.0], [42.2, 8512.0], [42.3, 8512.0], [42.4, 8514.0], [42.5, 8514.0], [42.6, 8518.0], [42.7, 8518.0], [42.8, 8519.0], [42.9, 8519.0], [43.0, 8522.0], [43.1, 8522.0], [43.2, 8522.0], [43.3, 8524.0], [43.4, 8524.0], [43.5, 8526.0], [43.6, 8526.0], [43.7, 8527.0], [43.8, 8527.0], [43.9, 8529.0], [44.0, 8529.0], [44.1, 8530.0], [44.2, 8530.0], [44.3, 8530.0], [44.4, 8532.0], [44.5, 8532.0], [44.6, 8533.0], [44.7, 8533.0], [44.8, 8534.0], [44.9, 8534.0], [45.0, 8539.0], [45.1, 8539.0], [45.2, 8539.0], [45.3, 8545.0], [45.4, 8545.0], [45.5, 8546.0], [45.6, 8546.0], [45.7, 8548.0], [45.8, 8548.0], [45.9, 8548.0], [46.0, 8548.0], [46.1, 8548.0], [46.2, 8549.0], [46.3, 8549.0], [46.4, 8557.0], [46.5, 8557.0], [46.6, 8557.0], [46.7, 8557.0], [46.8, 8560.0], [46.9, 8560.0], [47.0, 8561.0], [47.1, 8561.0], [47.2, 8561.0], [47.3, 8562.0], [47.4, 8562.0], [47.5, 8566.0], [47.6, 8566.0], [47.7, 8570.0], [47.8, 8570.0], [47.9, 8577.0], [48.0, 8577.0], [48.1, 8577.0], [48.2, 8577.0], [48.3, 8577.0], [48.4, 8581.0], [48.5, 8581.0], [48.6, 8589.0], [48.7, 8589.0], [48.8, 8590.0], [48.9, 8590.0], [49.0, 8592.0], [49.1, 8592.0], [49.2, 8592.0], [49.3, 8592.0], [49.4, 8592.0], [49.5, 8595.0], [49.6, 8595.0], [49.7, 8598.0], [49.8, 8598.0], [49.9, 8601.0], [50.0, 8601.0], [50.1, 8601.0], [50.2, 8605.0], [50.3, 8605.0], [50.4, 8606.0], [50.5, 8606.0], [50.6, 8608.0], [50.7, 8608.0], [50.8, 8610.0], [50.9, 8610.0], [51.0, 8610.0], [51.1, 8611.0], [51.2, 8611.0], [51.3, 8611.0], [51.4, 8611.0], [51.5, 8612.0], [51.6, 8612.0], [51.7, 8614.0], [51.8, 8614.0], [51.9, 8616.0], [52.0, 8616.0], [52.1, 8616.0], [52.2, 8616.0], [52.3, 8616.0], [52.4, 8616.0], [52.5, 8616.0], [52.6, 8621.0], [52.7, 8621.0], [52.8, 8622.0], [52.9, 8622.0], [53.0, 8622.0], [53.1, 8622.0], [53.2, 8622.0], [53.3, 8627.0], [53.4, 8627.0], [53.5, 8629.0], [53.6, 8629.0], [53.7, 8630.0], [53.8, 8630.0], [53.9, 8636.0], [54.0, 8636.0], [54.1, 8636.0], [54.2, 8645.0], [54.3, 8645.0], [54.4, 8650.0], [54.5, 8650.0], [54.6, 8653.0], [54.7, 8653.0], [54.8, 8654.0], [54.9, 8654.0], [55.0, 8654.0], [55.1, 8658.0], [55.2, 8658.0], [55.3, 8660.0], [55.4, 8660.0], [55.5, 8668.0], [55.6, 8668.0], [55.7, 8671.0], [55.8, 8671.0], [55.9, 8671.0], [56.0, 8672.0], [56.1, 8672.0], [56.2, 8675.0], [56.3, 8675.0], [56.4, 8676.0], [56.5, 8676.0], [56.6, 8677.0], [56.7, 8677.0], [56.8, 8678.0], [56.9, 8678.0], [57.0, 8678.0], [57.1, 8682.0], [57.2, 8682.0], [57.3, 8688.0], [57.4, 8688.0], [57.5, 8688.0], [57.6, 8688.0], [57.7, 8689.0], [57.8, 8689.0], [57.9, 8689.0], [58.0, 8694.0], [58.1, 8694.0], [58.2, 8694.0], [58.3, 8694.0], [58.4, 8694.0], [58.5, 8694.0], [58.6, 8699.0], [58.7, 8699.0], [58.8, 8700.0], [58.9, 8700.0], [59.0, 8700.0], [59.1, 8705.0], [59.2, 8705.0], [59.3, 8706.0], [59.4, 8706.0], [59.5, 8707.0], [59.6, 8707.0], [59.7, 8719.0], [59.8, 8719.0], [59.9, 8719.0], [60.0, 8721.0], [60.1, 8721.0], [60.2, 8721.0], [60.3, 8721.0], [60.4, 8721.0], [60.5, 8721.0], [60.6, 8726.0], [60.7, 8726.0], [60.8, 8726.0], [60.9, 8730.0], [61.0, 8730.0], [61.1, 8735.0], [61.2, 8735.0], [61.3, 8736.0], [61.4, 8736.0], [61.5, 8738.0], [61.6, 8738.0], [61.7, 8744.0], [61.8, 8744.0], [61.9, 8744.0], [62.0, 8787.0], [62.1, 8787.0], [62.2, 8790.0], [62.3, 8790.0], [62.4, 8821.0], [62.5, 8821.0], [62.6, 8824.0], [62.7, 8824.0], [62.8, 8824.0], [62.9, 8833.0], [63.0, 8833.0], [63.1, 8836.0], [63.2, 8836.0], [63.3, 8837.0], [63.4, 8837.0], [63.5, 8850.0], [63.6, 8850.0], [63.7, 8856.0], [63.8, 8856.0], [63.9, 8856.0], [64.0, 8864.0], [64.1, 8864.0], [64.2, 8869.0], [64.3, 8869.0], [64.4, 8870.0], [64.5, 8870.0], [64.6, 8885.0], [64.7, 8885.0], [64.8, 8885.0], [64.9, 8921.0], [65.0, 8921.0], [65.1, 8927.0], [65.2, 8927.0], [65.3, 8932.0], [65.4, 8932.0], [65.5, 8932.0], [65.6, 8932.0], [65.7, 8932.0], [65.8, 8943.0], [65.9, 8943.0], [66.0, 8951.0], [66.1, 8951.0], [66.2, 8963.0], [66.3, 8963.0], [66.4, 8968.0], [66.5, 8968.0], [66.6, 8994.0], [66.7, 8994.0], [66.8, 8994.0], [66.9, 8995.0], [67.0, 8995.0], [67.1, 9000.0], [67.2, 9000.0], [67.3, 9011.0], [67.4, 9011.0], [67.5, 9015.0], [67.6, 9015.0], [67.7, 9015.0], [67.8, 9025.0], [67.9, 9025.0], [68.0, 9026.0], [68.1, 9026.0], [68.2, 9039.0], [68.3, 9039.0], [68.4, 9054.0], [68.5, 9054.0], [68.6, 9057.0], [68.7, 9057.0], [68.8, 9057.0], [68.9, 9077.0], [69.0, 9077.0], [69.1, 9084.0], [69.2, 9084.0], [69.3, 9085.0], [69.4, 9085.0], [69.5, 9087.0], [69.6, 9087.0], [69.7, 9087.0], [69.8, 9093.0], [69.9, 9093.0], [70.0, 9093.0], [70.1, 9093.0], [70.2, 9098.0], [70.3, 9098.0], [70.4, 9115.0], [70.5, 9115.0], [70.6, 9115.0], [70.7, 9117.0], [70.8, 9117.0], [70.9, 9134.0], [71.0, 9134.0], [71.1, 9136.0], [71.2, 9136.0], [71.3, 9171.0], [71.4, 9171.0], [71.5, 9179.0], [71.6, 9179.0], [71.7, 9179.0], [71.8, 9179.0], [71.9, 9179.0], [72.0, 9180.0], [72.1, 9180.0], [72.2, 9185.0], [72.3, 9185.0], [72.4, 9202.0], [72.5, 9202.0], [72.6, 9202.0], [72.7, 9205.0], [72.8, 9205.0], [72.9, 9214.0], [73.0, 9214.0], [73.1, 9218.0], [73.2, 9218.0], [73.3, 9222.0], [73.4, 9222.0], [73.5, 9223.0], [73.6, 9223.0], [73.7, 9223.0], [73.8, 9225.0], [73.9, 9225.0], [74.0, 9230.0], [74.1, 9230.0], [74.2, 9231.0], [74.3, 9231.0], [74.4, 9234.0], [74.5, 9234.0], [74.6, 9234.0], [74.7, 9237.0], [74.8, 9237.0], [74.9, 9252.0], [75.0, 9252.0], [75.1, 9254.0], [75.2, 9254.0], [75.3, 9257.0], [75.4, 9257.0], [75.5, 9257.0], [75.6, 9258.0], [75.7, 9258.0], [75.8, 9261.0], [75.9, 9261.0], [76.0, 9274.0], [76.1, 9274.0], [76.2, 9282.0], [76.3, 9282.0], [76.4, 9282.0], [76.5, 9282.0], [76.6, 9282.0], [76.7, 9282.0], [76.8, 9282.0], [76.9, 9284.0], [77.0, 9284.0], [77.1, 9286.0], [77.2, 9286.0], [77.3, 9288.0], [77.4, 9288.0], [77.5, 9288.0], [77.6, 9290.0], [77.7, 9290.0], [77.8, 9292.0], [77.9, 9292.0], [78.0, 9294.0], [78.1, 9294.0], [78.2, 9295.0], [78.3, 9295.0], [78.4, 9299.0], [78.5, 9299.0], [78.6, 9299.0], [78.7, 9316.0], [78.8, 9316.0], [78.9, 9319.0], [79.0, 9319.0], [79.1, 9319.0], [79.2, 9319.0], [79.3, 9321.0], [79.4, 9321.0], [79.5, 9321.0], [79.6, 9322.0], [79.7, 9322.0], [79.8, 9326.0], [79.9, 9326.0], [80.0, 9327.0], [80.1, 9327.0], [80.2, 9337.0], [80.3, 9337.0], [80.4, 9337.0], [80.5, 9337.0], [80.6, 9337.0], [80.7, 9338.0], [80.8, 9338.0], [80.9, 9339.0], [81.0, 9339.0], [81.1, 9341.0], [81.2, 9341.0], [81.3, 9342.0], [81.4, 9342.0], [81.5, 9342.0], [81.6, 9343.0], [81.7, 9343.0], [81.8, 9344.0], [81.9, 9344.0], [82.0, 9349.0], [82.1, 9349.0], [82.2, 9353.0], [82.3, 9353.0], [82.4, 9353.0], [82.5, 9359.0], [82.6, 9359.0], [82.7, 9361.0], [82.8, 9361.0], [82.9, 9363.0], [83.0, 9363.0], [83.1, 9372.0], [83.2, 9372.0], [83.3, 9374.0], [83.4, 9374.0], [83.5, 9374.0], [83.6, 9376.0], [83.7, 9376.0], [83.8, 9380.0], [83.9, 9380.0], [84.0, 9386.0], [84.1, 9386.0], [84.2, 9390.0], [84.3, 9390.0], [84.4, 9390.0], [84.5, 9391.0], [84.6, 9391.0], [84.7, 9393.0], [84.8, 9393.0], [84.9, 9397.0], [85.0, 9397.0], [85.1, 9398.0], [85.2, 9398.0], [85.3, 9398.0], [85.4, 9398.0], [85.5, 9398.0], [85.6, 9400.0], [85.7, 9400.0], [85.8, 9408.0], [85.9, 9408.0], [86.0, 9409.0], [86.1, 9409.0], [86.2, 9412.0], [86.3, 9412.0], [86.4, 9412.0], [86.5, 9413.0], [86.6, 9413.0], [86.7, 9415.0], [86.8, 9415.0], [86.9, 9416.0], [87.0, 9416.0], [87.1, 9419.0], [87.2, 9419.0], [87.3, 9419.0], [87.4, 9419.0], [87.5, 9419.0], [87.6, 9421.0], [87.7, 9421.0], [87.8, 9424.0], [87.9, 9424.0], [88.0, 9425.0], [88.1, 9425.0], [88.2, 9431.0], [88.3, 9431.0], [88.4, 9431.0], [88.5, 9435.0], [88.6, 9435.0], [88.7, 9439.0], [88.8, 9439.0], [88.9, 9446.0], [89.0, 9446.0], [89.1, 9446.0], [89.2, 9446.0], [89.3, 9446.0], [89.4, 9452.0], [89.5, 9452.0], [89.6, 9469.0], [89.7, 9469.0], [89.8, 9493.0], [89.9, 9493.0], [90.0, 9500.0], [90.1, 9500.0], [90.2, 9500.0], [90.3, 9527.0], [90.4, 9527.0], [90.5, 9537.0], [90.6, 9537.0], [90.7, 9543.0], [90.8, 9543.0], [90.9, 9552.0], [91.0, 9552.0], [91.1, 9559.0], [91.2, 9559.0], [91.3, 9559.0], [91.4, 9559.0], [91.5, 9559.0], [91.6, 9562.0], [91.7, 9562.0], [91.8, 9584.0], [91.9, 9584.0], [92.0, 9586.0], [92.1, 9586.0], [92.2, 9586.0], [92.3, 9631.0], [92.4, 9631.0], [92.5, 9652.0], [92.6, 9652.0], [92.7, 9667.0], [92.8, 9667.0], [92.9, 9669.0], [93.0, 9669.0], [93.1, 9670.0], [93.2, 9670.0], [93.3, 9670.0], [93.4, 9678.0], [93.5, 9678.0], [93.6, 9694.0], [93.7, 9694.0], [93.8, 9710.0], [93.9, 9710.0], [94.0, 9727.0], [94.1, 9727.0], [94.2, 9727.0], [94.3, 9739.0], [94.4, 9739.0], [94.5, 9747.0], [94.6, 9747.0], [94.7, 9748.0], [94.8, 9748.0], [94.9, 9764.0], [95.0, 9764.0], [95.1, 9764.0], [95.2, 9775.0], [95.3, 9775.0], [95.4, 9806.0], [95.5, 9806.0], [95.6, 9813.0], [95.7, 9813.0], [95.8, 9831.0], [95.9, 9831.0], [96.0, 9832.0], [96.1, 9832.0], [96.2, 9832.0], [96.3, 9846.0], [96.4, 9846.0], [96.5, 9855.0], [96.6, 9855.0], [96.7, 9862.0], [96.8, 9862.0], [96.9, 9876.0], [97.0, 9876.0], [97.1, 9876.0], [97.2, 9913.0], [97.3, 9913.0], [97.4, 9915.0], [97.5, 9915.0], [97.6, 9929.0], [97.7, 9929.0], [97.8, 9978.0], [97.9, 9978.0], [98.0, 9995.0], [98.1, 9995.0], [98.2, 9995.0], [98.3, 9998.0], [98.4, 9998.0], [98.5, 10004.0], [98.6, 10004.0], [98.7, 10038.0], [98.8, 10038.0], [98.9, 10056.0], [99.0, 10056.0], [99.1, 10056.0], [99.2, 10072.0], [99.3, 10072.0], [99.4, 28482.0], [99.5, 28482.0], [99.6, 29018.0], [99.7, 29018.0], [99.8, 29245.0], [99.9, 29245.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 16986.0], [0.1, 16986.0], [0.2, 16986.0], [0.3, 17761.0], [0.4, 17761.0], [0.5, 18550.0], [0.6, 18550.0], [0.7, 18823.0], [0.8, 18823.0], [0.9, 19145.0], [1.0, 19145.0], [1.1, 19208.0], [1.2, 19208.0], [1.3, 19482.0], [1.4, 19482.0], [1.5, 19944.0], [1.6, 19944.0], [1.7, 20026.0], [1.8, 20026.0], [1.9, 20085.0], [2.0, 20085.0], [2.1, 20109.0], [2.2, 20109.0], [2.3, 20190.0], [2.4, 20190.0], [2.5, 20217.0], [2.6, 20217.0], [2.7, 20652.0], [2.8, 20652.0], [2.9, 20779.0], [3.0, 20779.0], [3.1, 20933.0], [3.2, 20933.0], [3.3, 20974.0], [3.4, 20974.0], [3.5, 21184.0], [3.6, 21184.0], [3.7, 21210.0], [3.8, 21210.0], [3.9, 21255.0], [4.0, 21255.0], [4.1, 21465.0], [4.2, 21465.0], [4.3, 21590.0], [4.4, 21590.0], [4.5, 21597.0], [4.6, 21597.0], [4.7, 21620.0], [4.8, 21620.0], [4.9, 21624.0], [5.0, 21624.0], [5.1, 21734.0], [5.2, 21734.0], [5.3, 21742.0], [5.4, 21742.0], [5.5, 21765.0], [5.6, 21765.0], [5.7, 21785.0], [5.8, 21785.0], [5.9, 21788.0], [6.0, 21788.0], [6.1, 21794.0], [6.2, 21794.0], [6.3, 21832.0], [6.4, 21832.0], [6.5, 21924.0], [6.6, 21924.0], [6.7, 21930.0], [6.8, 21930.0], [6.9, 21967.0], [7.0, 21967.0], [7.1, 21990.0], [7.2, 21990.0], [7.3, 21998.0], [7.4, 21998.0], [7.5, 22006.0], [7.6, 22006.0], [7.7, 22034.0], [7.8, 22034.0], [7.9, 22046.0], [8.0, 22046.0], [8.1, 22061.0], [8.2, 22061.0], [8.3, 22073.0], [8.4, 22073.0], [8.5, 22090.0], [8.6, 22090.0], [8.7, 22093.0], [8.8, 22093.0], [8.9, 22111.0], [9.0, 22111.0], [9.1, 22130.0], [9.2, 22130.0], [9.3, 22153.0], [9.4, 22153.0], [9.5, 22234.0], [9.6, 22234.0], [9.7, 22279.0], [9.8, 22279.0], [9.9, 22297.0], [10.0, 22297.0], [10.1, 22372.0], [10.2, 22372.0], [10.3, 22374.0], [10.4, 22374.0], [10.5, 22400.0], [10.6, 22400.0], [10.7, 22440.0], [10.8, 22440.0], [10.9, 22442.0], [11.0, 22442.0], [11.1, 22456.0], [11.2, 22456.0], [11.3, 22472.0], [11.4, 22472.0], [11.5, 22500.0], [11.6, 22500.0], [11.7, 22519.0], [11.8, 22519.0], [11.9, 22520.0], [12.0, 22520.0], [12.1, 22529.0], [12.2, 22529.0], [12.3, 22534.0], [12.4, 22534.0], [12.5, 22538.0], [12.6, 22538.0], [12.7, 22545.0], [12.8, 22545.0], [12.9, 22545.0], [13.0, 22545.0], [13.1, 22565.0], [13.2, 22565.0], [13.3, 22568.0], [13.4, 22568.0], [13.5, 22572.0], [13.6, 22572.0], [13.7, 22579.0], [13.8, 22579.0], [13.9, 22579.0], [14.0, 22579.0], [14.1, 22599.0], [14.2, 22599.0], [14.3, 22611.0], [14.4, 22611.0], [14.5, 22624.0], [14.6, 22624.0], [14.7, 22626.0], [14.8, 22626.0], [14.9, 22627.0], [15.0, 22627.0], [15.1, 22629.0], [15.2, 22629.0], [15.3, 22631.0], [15.4, 22631.0], [15.5, 22633.0], [15.6, 22633.0], [15.7, 22637.0], [15.8, 22637.0], [15.9, 22641.0], [16.0, 22641.0], [16.1, 22642.0], [16.2, 22642.0], [16.3, 22670.0], [16.4, 22670.0], [16.5, 22678.0], [16.6, 22678.0], [16.7, 22678.0], [16.8, 22681.0], [16.9, 22681.0], [17.0, 22684.0], [17.1, 22684.0], [17.2, 22687.0], [17.3, 22687.0], [17.4, 22699.0], [17.5, 22699.0], [17.6, 22700.0], [17.7, 22700.0], [17.8, 22700.0], [17.9, 22700.0], [18.0, 22715.0], [18.1, 22715.0], [18.2, 22716.0], [18.3, 22716.0], [18.4, 22718.0], [18.5, 22718.0], [18.6, 22719.0], [18.7, 22719.0], [18.8, 22726.0], [18.9, 22726.0], [19.0, 22730.0], [19.1, 22730.0], [19.2, 22732.0], [19.3, 22732.0], [19.4, 22732.0], [19.5, 22732.0], [19.6, 22734.0], [19.7, 22734.0], [19.8, 22741.0], [19.9, 22741.0], [20.0, 22742.0], [20.1, 22742.0], [20.2, 22743.0], [20.3, 22743.0], [20.4, 22768.0], [20.5, 22768.0], [20.6, 22775.0], [20.7, 22775.0], [20.8, 22776.0], [20.9, 22776.0], [21.0, 22791.0], [21.1, 22791.0], [21.2, 22799.0], [21.3, 22799.0], [21.4, 22804.0], [21.5, 22804.0], [21.6, 22804.0], [21.7, 22804.0], [21.8, 22816.0], [21.9, 22816.0], [22.0, 22817.0], [22.1, 22817.0], [22.2, 22819.0], [22.3, 22819.0], [22.4, 22823.0], [22.5, 22823.0], [22.6, 22825.0], [22.7, 22825.0], [22.8, 22830.0], [22.9, 22830.0], [23.0, 22831.0], [23.1, 22831.0], [23.2, 22835.0], [23.3, 22835.0], [23.4, 22837.0], [23.5, 22837.0], [23.6, 22838.0], [23.7, 22838.0], [23.8, 22838.0], [23.9, 22838.0], [24.0, 22840.0], [24.1, 22840.0], [24.2, 22841.0], [24.3, 22841.0], [24.4, 22845.0], [24.5, 22845.0], [24.6, 22846.0], [24.7, 22846.0], [24.8, 22846.0], [24.9, 22846.0], [25.0, 22848.0], [25.1, 22848.0], [25.2, 22855.0], [25.3, 22855.0], [25.4, 22863.0], [25.5, 22863.0], [25.6, 22864.0], [25.7, 22864.0], [25.8, 22865.0], [25.9, 22865.0], [26.0, 22866.0], [26.1, 22866.0], [26.2, 22872.0], [26.3, 22872.0], [26.4, 22872.0], [26.5, 22872.0], [26.6, 22873.0], [26.7, 22873.0], [26.8, 22879.0], [26.9, 22879.0], [27.0, 22879.0], [27.1, 22879.0], [27.2, 22880.0], [27.3, 22880.0], [27.4, 22881.0], [27.5, 22881.0], [27.6, 22882.0], [27.7, 22882.0], [27.8, 22891.0], [27.9, 22891.0], [28.0, 22893.0], [28.1, 22893.0], [28.2, 22893.0], [28.3, 22893.0], [28.4, 22894.0], [28.5, 22894.0], [28.6, 22896.0], [28.7, 22896.0], [28.8, 22897.0], [28.9, 22897.0], [29.0, 22908.0], [29.1, 22908.0], [29.2, 22916.0], [29.3, 22916.0], [29.4, 22919.0], [29.5, 22919.0], [29.6, 22919.0], [29.7, 22919.0], [29.8, 22922.0], [29.9, 22922.0], [30.0, 22922.0], [30.1, 22922.0], [30.2, 22929.0], [30.3, 22929.0], [30.4, 22930.0], [30.5, 22930.0], [30.6, 22932.0], [30.7, 22932.0], [30.8, 22937.0], [30.9, 22937.0], [31.0, 22937.0], [31.1, 22937.0], [31.2, 22941.0], [31.3, 22941.0], [31.4, 22945.0], [31.5, 22945.0], [31.6, 22949.0], [31.7, 22949.0], [31.8, 22953.0], [31.9, 22953.0], [32.0, 22953.0], [32.1, 22953.0], [32.2, 22958.0], [32.3, 22958.0], [32.4, 22959.0], [32.5, 22959.0], [32.6, 22966.0], [32.7, 22966.0], [32.8, 22966.0], [32.9, 22966.0], [33.0, 22972.0], [33.1, 22972.0], [33.2, 22979.0], [33.3, 22979.0], [33.4, 22979.0], [33.5, 22985.0], [33.6, 22985.0], [33.7, 22992.0], [33.8, 22992.0], [33.9, 22992.0], [34.0, 22992.0], [34.1, 22994.0], [34.2, 22994.0], [34.3, 22995.0], [34.4, 22995.0], [34.5, 22996.0], [34.6, 22996.0], [34.7, 23005.0], [34.8, 23005.0], [34.9, 23005.0], [35.0, 23005.0], [35.1, 23013.0], [35.2, 23013.0], [35.3, 23015.0], [35.4, 23015.0], [35.5, 23021.0], [35.6, 23021.0], [35.7, 23030.0], [35.8, 23030.0], [35.9, 23032.0], [36.0, 23032.0], [36.1, 23033.0], [36.2, 23033.0], [36.3, 23039.0], [36.4, 23039.0], [36.5, 23039.0], [36.6, 23039.0], [36.7, 23043.0], [36.8, 23043.0], [36.9, 23045.0], [37.0, 23045.0], [37.1, 23045.0], [37.2, 23045.0], [37.3, 23050.0], [37.4, 23050.0], [37.5, 23059.0], [37.6, 23059.0], [37.7, 23070.0], [37.8, 23070.0], [37.9, 23072.0], [38.0, 23072.0], [38.1, 23074.0], [38.2, 23074.0], [38.3, 23074.0], [38.4, 23074.0], [38.5, 23079.0], [38.6, 23079.0], [38.7, 23086.0], [38.8, 23086.0], [38.9, 23093.0], [39.0, 23093.0], [39.1, 23094.0], [39.2, 23094.0], [39.3, 23102.0], [39.4, 23102.0], [39.5, 23104.0], [39.6, 23104.0], [39.7, 23108.0], [39.8, 23108.0], [39.9, 23114.0], [40.0, 23114.0], [40.1, 23117.0], [40.2, 23117.0], [40.3, 23118.0], [40.4, 23118.0], [40.5, 23125.0], [40.6, 23125.0], [40.7, 23127.0], [40.8, 23127.0], [40.9, 23144.0], [41.0, 23144.0], [41.1, 23145.0], [41.2, 23145.0], [41.3, 23148.0], [41.4, 23148.0], [41.5, 23153.0], [41.6, 23153.0], [41.7, 23156.0], [41.8, 23156.0], [41.9, 23158.0], [42.0, 23158.0], [42.1, 23164.0], [42.2, 23164.0], [42.3, 23164.0], [42.4, 23164.0], [42.5, 23168.0], [42.6, 23168.0], [42.7, 23172.0], [42.8, 23172.0], [42.9, 23175.0], [43.0, 23175.0], [43.1, 23176.0], [43.2, 23176.0], [43.3, 23179.0], [43.4, 23179.0], [43.5, 23179.0], [43.6, 23179.0], [43.7, 23186.0], [43.8, 23186.0], [43.9, 23203.0], [44.0, 23203.0], [44.1, 23222.0], [44.2, 23222.0], [44.3, 23232.0], [44.4, 23232.0], [44.5, 23238.0], [44.6, 23238.0], [44.7, 23238.0], [44.8, 23238.0], [44.9, 23241.0], [45.0, 23241.0], [45.1, 23241.0], [45.2, 23241.0], [45.3, 23253.0], [45.4, 23253.0], [45.5, 23257.0], [45.6, 23257.0], [45.7, 23258.0], [45.8, 23258.0], [45.9, 23260.0], [46.0, 23260.0], [46.1, 23263.0], [46.2, 23263.0], [46.3, 23275.0], [46.4, 23275.0], [46.5, 23284.0], [46.6, 23284.0], [46.7, 23284.0], [46.8, 23284.0], [46.9, 23285.0], [47.0, 23285.0], [47.1, 23288.0], [47.2, 23288.0], [47.3, 23292.0], [47.4, 23292.0], [47.5, 23299.0], [47.6, 23299.0], [47.7, 23301.0], [47.8, 23301.0], [47.9, 23304.0], [48.0, 23304.0], [48.1, 23305.0], [48.2, 23305.0], [48.3, 23305.0], [48.4, 23305.0], [48.5, 23307.0], [48.6, 23307.0], [48.7, 23312.0], [48.8, 23312.0], [48.9, 23314.0], [49.0, 23314.0], [49.1, 23320.0], [49.2, 23320.0], [49.3, 23320.0], [49.4, 23320.0], [49.5, 23321.0], [49.6, 23321.0], [49.7, 23321.0], [49.8, 23321.0], [49.9, 23324.0], [50.0, 23324.0], [50.1, 23324.0], [50.2, 23340.0], [50.3, 23340.0], [50.4, 23344.0], [50.5, 23344.0], [50.6, 23346.0], [50.7, 23346.0], [50.8, 23348.0], [50.9, 23348.0], [51.0, 23350.0], [51.1, 23350.0], [51.2, 23350.0], [51.3, 23350.0], [51.4, 23356.0], [51.5, 23356.0], [51.6, 23364.0], [51.7, 23364.0], [51.8, 23369.0], [51.9, 23369.0], [52.0, 23374.0], [52.1, 23374.0], [52.2, 23374.0], [52.3, 23374.0], [52.4, 23381.0], [52.5, 23381.0], [52.6, 23382.0], [52.7, 23382.0], [52.8, 23384.0], [52.9, 23384.0], [53.0, 23386.0], [53.1, 23386.0], [53.2, 23387.0], [53.3, 23387.0], [53.4, 23389.0], [53.5, 23389.0], [53.6, 23392.0], [53.7, 23392.0], [53.8, 23394.0], [53.9, 23394.0], [54.0, 23419.0], [54.1, 23419.0], [54.2, 23424.0], [54.3, 23424.0], [54.4, 23428.0], [54.5, 23428.0], [54.6, 23430.0], [54.7, 23430.0], [54.8, 23436.0], [54.9, 23436.0], [55.0, 23440.0], [55.1, 23440.0], [55.2, 23442.0], [55.3, 23442.0], [55.4, 23446.0], [55.5, 23446.0], [55.6, 23446.0], [55.7, 23446.0], [55.8, 23450.0], [55.9, 23450.0], [56.0, 23453.0], [56.1, 23453.0], [56.2, 23471.0], [56.3, 23471.0], [56.4, 23475.0], [56.5, 23475.0], [56.6, 23476.0], [56.7, 23476.0], [56.8, 23478.0], [56.9, 23478.0], [57.0, 23478.0], [57.1, 23478.0], [57.2, 23484.0], [57.3, 23484.0], [57.4, 23490.0], [57.5, 23490.0], [57.6, 23494.0], [57.7, 23494.0], [57.8, 23496.0], [57.9, 23496.0], [58.0, 23499.0], [58.1, 23499.0], [58.2, 23500.0], [58.3, 23500.0], [58.4, 23504.0], [58.5, 23504.0], [58.6, 23504.0], [58.7, 23504.0], [58.8, 23505.0], [58.9, 23505.0], [59.0, 23505.0], [59.1, 23505.0], [59.2, 23508.0], [59.3, 23508.0], [59.4, 23509.0], [59.5, 23509.0], [59.6, 23509.0], [59.7, 23509.0], [59.8, 23509.0], [59.9, 23509.0], [60.0, 23513.0], [60.1, 23513.0], [60.2, 23514.0], [60.3, 23514.0], [60.4, 23518.0], [60.5, 23518.0], [60.6, 23529.0], [60.7, 23529.0], [60.8, 23533.0], [60.9, 23533.0], [61.0, 23535.0], [61.1, 23535.0], [61.2, 23538.0], [61.3, 23538.0], [61.4, 23545.0], [61.5, 23545.0], [61.6, 23546.0], [61.7, 23546.0], [61.8, 23547.0], [61.9, 23547.0], [62.0, 23561.0], [62.1, 23561.0], [62.2, 23562.0], [62.3, 23562.0], [62.4, 23563.0], [62.5, 23563.0], [62.6, 23563.0], [62.7, 23563.0], [62.8, 23570.0], [62.9, 23570.0], [63.0, 23572.0], [63.1, 23572.0], [63.2, 23574.0], [63.3, 23574.0], [63.4, 23580.0], [63.5, 23580.0], [63.6, 23582.0], [63.7, 23582.0], [63.8, 23583.0], [63.9, 23583.0], [64.0, 23588.0], [64.1, 23588.0], [64.2, 23590.0], [64.3, 23590.0], [64.4, 23591.0], [64.5, 23591.0], [64.6, 23599.0], [64.7, 23599.0], [64.8, 23599.0], [64.9, 23599.0], [65.0, 23605.0], [65.1, 23605.0], [65.2, 23608.0], [65.3, 23608.0], [65.4, 23612.0], [65.5, 23612.0], [65.6, 23613.0], [65.7, 23613.0], [65.8, 23617.0], [65.9, 23617.0], [66.0, 23622.0], [66.1, 23622.0], [66.2, 23623.0], [66.3, 23623.0], [66.4, 23628.0], [66.5, 23628.0], [66.6, 23631.0], [66.7, 23631.0], [66.8, 23631.0], [66.9, 23635.0], [67.0, 23635.0], [67.1, 23639.0], [67.2, 23639.0], [67.3, 23642.0], [67.4, 23642.0], [67.5, 23651.0], [67.6, 23651.0], [67.7, 23655.0], [67.8, 23655.0], [67.9, 23658.0], [68.0, 23658.0], [68.1, 23677.0], [68.2, 23677.0], [68.3, 23680.0], [68.4, 23680.0], [68.5, 23683.0], [68.6, 23683.0], [68.7, 23686.0], [68.8, 23686.0], [68.9, 23693.0], [69.0, 23693.0], [69.1, 23694.0], [69.2, 23694.0], [69.3, 23701.0], [69.4, 23701.0], [69.5, 23714.0], [69.6, 23714.0], [69.7, 23716.0], [69.8, 23716.0], [69.9, 23725.0], [70.0, 23725.0], [70.1, 23735.0], [70.2, 23735.0], [70.3, 23743.0], [70.4, 23743.0], [70.5, 23745.0], [70.6, 23745.0], [70.7, 23753.0], [70.8, 23753.0], [70.9, 23759.0], [71.0, 23759.0], [71.1, 23767.0], [71.2, 23767.0], [71.3, 23768.0], [71.4, 23768.0], [71.5, 23768.0], [71.6, 23768.0], [71.7, 23771.0], [71.8, 23771.0], [71.9, 23775.0], [72.0, 23775.0], [72.1, 23786.0], [72.2, 23786.0], [72.3, 23790.0], [72.4, 23790.0], [72.5, 23815.0], [72.6, 23815.0], [72.7, 23831.0], [72.8, 23831.0], [72.9, 23840.0], [73.0, 23840.0], [73.1, 23841.0], [73.2, 23841.0], [73.3, 23842.0], [73.4, 23842.0], [73.5, 23852.0], [73.6, 23852.0], [73.7, 23872.0], [73.8, 23872.0], [73.9, 23876.0], [74.0, 23876.0], [74.1, 23879.0], [74.2, 23879.0], [74.3, 23883.0], [74.4, 23883.0], [74.5, 23886.0], [74.6, 23886.0], [74.7, 23891.0], [74.8, 23891.0], [74.9, 23893.0], [75.0, 23893.0], [75.1, 23902.0], [75.2, 23902.0], [75.3, 23905.0], [75.4, 23905.0], [75.5, 23922.0], [75.6, 23922.0], [75.7, 23931.0], [75.8, 23931.0], [75.9, 23940.0], [76.0, 23940.0], [76.1, 23941.0], [76.2, 23941.0], [76.3, 23942.0], [76.4, 23942.0], [76.5, 23945.0], [76.6, 23945.0], [76.7, 23952.0], [76.8, 23952.0], [76.9, 23960.0], [77.0, 23960.0], [77.1, 23967.0], [77.2, 23967.0], [77.3, 23970.0], [77.4, 23970.0], [77.5, 23974.0], [77.6, 23974.0], [77.7, 23975.0], [77.8, 23975.0], [77.9, 23978.0], [78.0, 23978.0], [78.1, 23986.0], [78.2, 23986.0], [78.3, 23995.0], [78.4, 23995.0], [78.5, 23995.0], [78.6, 23995.0], [78.7, 24002.0], [78.8, 24002.0], [78.9, 24002.0], [79.0, 24002.0], [79.1, 24020.0], [79.2, 24020.0], [79.3, 24027.0], [79.4, 24027.0], [79.5, 24039.0], [79.6, 24039.0], [79.7, 24041.0], [79.8, 24041.0], [79.9, 24043.0], [80.0, 24043.0], [80.1, 24050.0], [80.2, 24050.0], [80.3, 24058.0], [80.4, 24058.0], [80.5, 24063.0], [80.6, 24063.0], [80.7, 24064.0], [80.8, 24064.0], [80.9, 24064.0], [81.0, 24064.0], [81.1, 24070.0], [81.2, 24070.0], [81.3, 24073.0], [81.4, 24073.0], [81.5, 24078.0], [81.6, 24078.0], [81.7, 24101.0], [81.8, 24101.0], [81.9, 24102.0], [82.0, 24102.0], [82.1, 24105.0], [82.2, 24105.0], [82.3, 24109.0], [82.4, 24109.0], [82.5, 24127.0], [82.6, 24127.0], [82.7, 24136.0], [82.8, 24136.0], [82.9, 24143.0], [83.0, 24143.0], [83.1, 24145.0], [83.2, 24145.0], [83.3, 24153.0], [83.4, 24153.0], [83.5, 24153.0], [83.6, 24154.0], [83.7, 24154.0], [83.8, 24165.0], [83.9, 24165.0], [84.0, 24166.0], [84.1, 24166.0], [84.2, 24170.0], [84.3, 24170.0], [84.4, 24175.0], [84.5, 24175.0], [84.6, 24181.0], [84.7, 24181.0], [84.8, 24182.0], [84.9, 24182.0], [85.0, 24189.0], [85.1, 24189.0], [85.2, 24202.0], [85.3, 24202.0], [85.4, 24222.0], [85.5, 24222.0], [85.6, 24237.0], [85.7, 24237.0], [85.8, 24237.0], [85.9, 24237.0], [86.0, 24242.0], [86.1, 24242.0], [86.2, 24255.0], [86.3, 24255.0], [86.4, 24260.0], [86.5, 24260.0], [86.6, 24271.0], [86.7, 24271.0], [86.8, 24273.0], [86.9, 24273.0], [87.0, 24279.0], [87.1, 24279.0], [87.2, 24284.0], [87.3, 24284.0], [87.4, 24300.0], [87.5, 24300.0], [87.6, 24312.0], [87.7, 24312.0], [87.8, 24318.0], [87.9, 24318.0], [88.0, 24320.0], [88.1, 24320.0], [88.2, 24323.0], [88.3, 24323.0], [88.4, 24332.0], [88.5, 24332.0], [88.6, 24336.0], [88.7, 24336.0], [88.8, 24352.0], [88.9, 24352.0], [89.0, 24360.0], [89.1, 24360.0], [89.2, 24379.0], [89.3, 24379.0], [89.4, 24383.0], [89.5, 24383.0], [89.6, 24384.0], [89.7, 24384.0], [89.8, 24396.0], [89.9, 24396.0], [90.0, 24396.0], [90.1, 24396.0], [90.2, 24420.0], [90.3, 24420.0], [90.4, 24427.0], [90.5, 24427.0], [90.6, 24432.0], [90.7, 24432.0], [90.8, 24453.0], [90.9, 24453.0], [91.0, 24489.0], [91.1, 24489.0], [91.2, 24501.0], [91.3, 24501.0], [91.4, 24508.0], [91.5, 24508.0], [91.6, 24525.0], [91.7, 24525.0], [91.8, 24527.0], [91.9, 24527.0], [92.0, 24529.0], [92.1, 24529.0], [92.2, 24544.0], [92.3, 24544.0], [92.4, 24546.0], [92.5, 24546.0], [92.6, 24556.0], [92.7, 24556.0], [92.8, 24575.0], [92.9, 24575.0], [93.0, 24607.0], [93.1, 24607.0], [93.2, 24635.0], [93.3, 24635.0], [93.4, 24641.0], [93.5, 24641.0], [93.6, 24641.0], [93.7, 24641.0], [93.8, 24649.0], [93.9, 24649.0], [94.0, 24663.0], [94.1, 24663.0], [94.2, 24664.0], [94.3, 24664.0], [94.4, 24702.0], [94.5, 24702.0], [94.6, 24728.0], [94.7, 24728.0], [94.8, 24735.0], [94.9, 24735.0], [95.0, 24735.0], [95.1, 24735.0], [95.2, 24752.0], [95.3, 24752.0], [95.4, 24752.0], [95.5, 24752.0], [95.6, 24779.0], [95.7, 24779.0], [95.8, 24808.0], [95.9, 24808.0], [96.0, 24871.0], [96.1, 24871.0], [96.2, 24871.0], [96.3, 24871.0], [96.4, 24879.0], [96.5, 24879.0], [96.6, 24903.0], [96.7, 24903.0], [96.8, 25018.0], [96.9, 25018.0], [97.0, 25086.0], [97.1, 25086.0], [97.2, 25097.0], [97.3, 25097.0], [97.4, 25098.0], [97.5, 25098.0], [97.6, 25195.0], [97.7, 25195.0], [97.8, 25250.0], [97.9, 25250.0], [98.0, 25276.0], [98.1, 25276.0], [98.2, 25296.0], [98.3, 25296.0], [98.4, 25329.0], [98.5, 25329.0], [98.6, 25444.0], [98.7, 25444.0], [98.8, 25532.0], [98.9, 25532.0], [99.0, 25562.0], [99.1, 25562.0], [99.2, 25575.0], [99.3, 25575.0], [99.4, 25743.0], [99.5, 25743.0], [99.6, 26053.0], [99.7, 26053.0], [99.8, 26104.0], [99.9, 26104.0], [100.0, 26104.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6600.0, "maxY": 49.0, "series": [{"data": [[19100.0, 1.0], [20100.0, 2.0], [20200.0, 1.0], [21500.0, 2.0], [21200.0, 1.0], [20700.0, 1.0], [21700.0, 2.0], [22400.0, 2.0], [22300.0, 1.0], [22500.0, 4.0], [22100.0, 2.0], [21900.0, 3.0], [21800.0, 1.0], [22200.0, 1.0], [22000.0, 5.0], [21600.0, 1.0], [23000.0, 1.0], [23200.0, 2.0], [23300.0, 1.0], [22600.0, 3.0], [22800.0, 5.0], [22900.0, 1.0], [24300.0, 1.0], [24500.0, 2.0], [24200.0, 1.0], [23900.0, 1.0], [24000.0, 1.0], [25200.0, 1.0], [24700.0, 1.0], [25900.0, 1.0], [26900.0, 1.0], [26700.0, 1.0], [27600.0, 1.0], [27800.0, 1.0], [28100.0, 1.0], [29100.0, 1.0], [29200.0, 1.0], [29500.0, 1.0], [29400.0, 1.0], [29300.0, 1.0], [30600.0, 1.0], [30400.0, 1.0], [30300.0, 1.0], [30700.0, 1.0], [30800.0, 1.0], [31100.0, 4.0], [31300.0, 11.0], [31400.0, 10.0], [30900.0, 2.0], [31600.0, 21.0], [31200.0, 7.0], [31000.0, 2.0], [31700.0, 21.0], [31500.0, 17.0], [31900.0, 34.0], [32100.0, 32.0], [32400.0, 20.0], [32300.0, 29.0], [31800.0, 27.0], [32500.0, 27.0], [32200.0, 33.0], [32600.0, 29.0], [32700.0, 21.0], [32000.0, 18.0], [32900.0, 12.0], [33200.0, 7.0], [33700.0, 2.0], [33500.0, 1.0], [33300.0, 2.0], [33900.0, 1.0], [33100.0, 9.0], [32800.0, 22.0], [33000.0, 6.0], [53000.0, 1.0], [51300.0, 1.0], [53500.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[8600.0, 40.0], [8300.0, 41.0], [8200.0, 15.0], [8700.0, 16.0], [8500.0, 42.0], [8400.0, 49.0], [8800.0, 11.0], [8900.0, 10.0], [9000.0, 15.0], [9100.0, 9.0], [9200.0, 28.0], [9300.0, 31.0], [9400.0, 20.0], [9500.0, 10.0], [9700.0, 7.0], [9600.0, 7.0], [9800.0, 8.0], [9900.0, 6.0], [10000.0, 4.0], [28400.0, 1.0], [29200.0, 1.0], [29000.0, 1.0], [6600.0, 1.0], [6700.0, 2.0], [6900.0, 2.0], [6800.0, 2.0], [7100.0, 4.0], [7000.0, 5.0], [7300.0, 7.0], [7400.0, 3.0], [7200.0, 3.0], [7500.0, 2.0], [7600.0, 4.0], [7800.0, 6.0], [7900.0, 3.0], [7700.0, 2.0], [8000.0, 13.0], [8100.0, 18.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[16900.0, 1.0], [17700.0, 1.0], [18500.0, 1.0], [18800.0, 1.0], [19400.0, 1.0], [19200.0, 1.0], [19100.0, 1.0], [20000.0, 2.0], [19900.0, 1.0], [20100.0, 2.0], [20200.0, 1.0], [20900.0, 2.0], [20600.0, 1.0], [21100.0, 1.0], [21200.0, 2.0], [21400.0, 1.0], [21500.0, 2.0], [20700.0, 1.0], [22300.0, 2.0], [21900.0, 5.0], [21600.0, 2.0], [21700.0, 6.0], [22000.0, 7.0], [22200.0, 3.0], [22100.0, 3.0], [22400.0, 5.0], [22500.0, 14.0], [21800.0, 1.0], [23400.0, 21.0], [22600.0, 16.0], [23100.0, 23.0], [22900.0, 28.0], [23200.0, 19.0], [23000.0, 23.0], [23500.0, 34.0], [23300.0, 31.0], [22700.0, 19.0], [22800.0, 38.0], [23600.0, 21.0], [23700.0, 16.0], [24000.0, 15.0], [24300.0, 14.0], [24500.0, 9.0], [24200.0, 11.0], [24100.0, 17.0], [23900.0, 18.0], [24400.0, 5.0], [23800.0, 13.0], [25400.0, 1.0], [24600.0, 7.0], [25500.0, 3.0], [25200.0, 3.0], [24700.0, 7.0], [25000.0, 4.0], [24900.0, 1.0], [24800.0, 4.0], [25100.0, 1.0], [25300.0, 1.0], [26000.0, 1.0], [25700.0, 1.0], [26100.0, 1.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 996.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 996.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 996.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 36.97872340425532, "minX": 1.6355076E12, "maxY": 50.0, "series": [{"data": [[1.63550778E12, 50.0], [1.6355076E12, 50.0], [1.63550766E12, 50.0], [1.63550784E12, 50.0], [1.6355079E12, 36.97872340425532], [1.63550772E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355079E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8766.424107142862, "minX": 1.0, "maxY": 37699.5, "series": [{"data": [[2.0, 20110.0], [3.0, 20780.0], [4.0, 20218.0], [5.0, 20191.0], [6.0, 21256.0], [7.0, 21624.0], [8.0, 21591.0], [9.0, 21734.0], [10.0, 21765.0], [11.0, 21925.0], [12.0, 21598.0], [13.0, 22094.0], [14.0, 22091.0], [15.0, 22006.0], [16.0, 22131.0], [17.0, 21967.0], [18.0, 22062.0], [19.0, 22073.0], [20.0, 22234.0], [21.0, 21832.0], [22.0, 21931.0], [23.0, 22626.0], [24.0, 22566.0], [25.0, 22569.0], [26.0, 22456.0], [27.0, 22111.0], [28.0, 22545.0], [29.0, 22632.0], [30.0, 22442.0], [31.0, 22535.0], [33.0, 22883.0], [32.0, 22830.0], [35.0, 22838.0], [34.0, 22958.0], [37.0, 22879.0], [36.0, 22818.0], [39.0, 22670.0], [38.0, 22373.0], [41.0, 23263.0], [40.0, 23390.0], [43.0, 23031.0], [42.0, 23238.0], [45.0, 37699.5], [47.0, 24780.0], [46.0, 23941.0], [49.0, 24238.0], [48.0, 24526.0], [50.0, 32152.613839285706], [1.0, 19146.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[47.537223340040235, 31241.985915492944]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[45.0, 28482.0], [50.0, 8766.424107142862]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[49.98886414253897, 8810.334075723837]], "isOverall": false, "label": "(POST) INSERT New User-Aggregated", "isController": false}, {"data": [[2.0, 20109.0], [3.0, 20779.0], [4.0, 20217.0], [5.0, 20190.0], [6.0, 21255.0], [7.0, 21624.0], [8.0, 21590.0], [9.0, 21734.0], [10.0, 21765.0], [11.0, 21924.0], [12.0, 21597.0], [13.0, 22093.0], [14.0, 22090.0], [15.0, 22006.0], [16.0, 22130.0], [17.0, 21967.0], [18.0, 22061.0], [19.0, 22073.0], [20.0, 22234.0], [21.0, 21832.0], [22.0, 21930.0], [23.0, 22626.0], [24.0, 22565.0], [25.0, 22568.0], [26.0, 22456.0], [27.0, 22111.0], [28.0, 22545.0], [29.0, 22631.0], [30.0, 22442.0], [31.0, 22534.0], [33.0, 22882.0], [32.0, 22830.0], [35.0, 22838.0], [34.0, 22958.0], [37.0, 22879.0], [36.0, 22817.0], [39.0, 22670.0], [38.0, 22372.0], [41.0, 23263.0], [40.0, 23389.0], [43.0, 23030.0], [42.0, 23238.0], [45.0, 24078.0], [47.0, 24779.0], [46.0, 23940.0], [49.0, 24237.0], [48.0, 24525.0], [50.0, 23384.962138084626], [1.0, 19145.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}, {"data": [[47.54728370221328, 23282.48692152917]], "isOverall": false, "label": "(GET) Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 310640.43333333335, "minX": 1.6355076E12, "maxY": 2937813.966666667, "series": [{"data": [[1.63550778E12, 2571103.75], [1.6355076E12, 2937813.966666667], [1.63550766E12, 2612258.6166666667], [1.63550784E12, 2491176.566666667], [1.6355079E12, 2487340.3833333333], [1.63550772E12, 2612506.0166666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63550778E12, 578095.5833333334], [1.6355076E12, 310640.43333333335], [1.63550766E12, 621122.55], [1.63550784E12, 518349.35], [1.6355079E12, 453692.7833333333], [1.63550772E12, 624068.4166666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355079E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8302.755813953494, "minX": 1.6355076E12, "maxY": 32660.391304347835, "series": [{"data": [[1.63550778E12, 32133.895348837217], [1.6355076E12, 30748.74], [1.63550766E12, 32557.09090909091], [1.63550784E12, 32660.391304347835], [1.6355079E12, 27028.70967741936], [1.63550772E12, 32359.26]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.63550778E12, 8302.755813953494], [1.6355076E12, 8772.199999999997], [1.63550766E12, 8925.13131313131], [1.63550784E12, 9073.463768115944], [1.6355079E12, 8946.11111111111], [1.63550772E12, 8909.609999999999]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.63550778E12, 23890.879999999994], [1.6355076E12, 21976.540000000008], [1.63550766E12, 23633.320000000007], [1.63550784E12, 23241.1224489796], [1.6355079E12, 22426.440000000006], [1.63550772E12, 23446.434343434343]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355079E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6355076E12, "maxY": 4674.868686868686, "series": [{"data": [[1.63550778E12, 0.0], [1.6355076E12, 0.0], [1.63550766E12, 0.0], [1.63550784E12, 0.0], [1.6355079E12, 0.0], [1.63550772E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.63550778E12, 4188.511627906976], [1.6355076E12, 4188.139999999999], [1.63550766E12, 4674.868686868686], [1.63550784E12, 4506.449275362321], [1.6355079E12, 4429.444444444445], [1.63550772E12, 4549.130000000003]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.63550778E12, 3325.209999999999], [1.6355076E12, 1404.9599999999998], [1.63550766E12, 3215.93], [1.63550784E12, 3207.3877551020414], [1.6355079E12, 3168.8799999999997], [1.63550772E12, 3369.1414141414143]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355079E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6355076E12, "maxY": 42.88, "series": [{"data": [[1.63550778E12, 0.0], [1.6355076E12, 0.0], [1.63550766E12, 0.0], [1.63550784E12, 0.0], [1.6355079E12, 0.0], [1.63550772E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.63550778E12, 35.860465116279066], [1.6355076E12, 36.51999999999999], [1.63550766E12, 35.464646464646464], [1.63550784E12, 35.23188405797101], [1.6355079E12, 35.64444444444444], [1.63550772E12, 35.69999999999999]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.63550778E12, 35.410000000000004], [1.6355076E12, 42.88], [1.63550766E12, 35.22999999999999], [1.63550784E12, 34.86734693877551], [1.6355079E12, 35.36], [1.63550772E12, 35.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355079E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6642.0, "minX": 1.6355076E12, "maxY": 51320.0, "series": [{"data": [[1.63550778E12, 26104.0], [1.6355076E12, 24649.0], [1.63550766E12, 26053.0], [1.63550784E12, 29018.0], [1.6355079E12, 51320.0], [1.63550772E12, 29245.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63550778E12, 6892.0], [1.6355076E12, 6729.0], [1.63550766E12, 7041.0], [1.63550784E12, 6871.0], [1.6355079E12, 7074.0], [1.63550772E12, 6642.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63550778E12, 24159.5], [1.6355076E12, 23455.5], [1.63550766E12, 23995.0], [1.63550784E12, 24050.8], [1.6355079E12, 24064.0], [1.63550772E12, 23975.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63550778E12, 25461.699999999997], [1.6355076E12, 24648.86], [1.63550766E12, 25575.0], [1.63550784E12, 25497.68], [1.6355079E12, 25569.54], [1.63550772E12, 25562.13]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63550778E12, 24528.5], [1.6355076E12, 24269.899999999998], [1.63550766E12, 24649.0], [1.63550784E12, 24427.25], [1.6355079E12, 24499.8], [1.63550772E12, 24577.999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355079E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 20110.0, "minX": 1000.0, "maxY": 24079.0, "series": [{"data": [[3000.0, 24079.0], [1000.0, 20110.0], [2000.0, 22407.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 3000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2812.5, "minX": 1000.0, "maxY": 4083.0, "series": [{"data": [[3000.0, 4083.0], [1000.0, 3677.0], [2000.0, 2812.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 3000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.6355076E12, "maxY": 3.316666666666667, "series": [{"data": [[1.63550778E12, 3.1], [1.6355076E12, 2.5], [1.63550766E12, 3.316666666666667], [1.63550784E12, 2.9], [1.6355079E12, 1.4666666666666666], [1.63550772E12, 3.316666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355079E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.6355076E12, "maxY": 3.316666666666667, "series": [{"data": [[1.63550778E12, 3.1], [1.6355076E12, 1.6666666666666667], [1.63550766E12, 3.316666666666667], [1.63550784E12, 2.783333333333333], [1.6355079E12, 2.4166666666666665], [1.63550772E12, 3.316666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6355079E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.75, "minX": 1.6355076E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.63550778E12, 1.4333333333333333], [1.6355076E12, 0.8333333333333334], [1.63550766E12, 1.65], [1.63550784E12, 1.15], [1.6355079E12, 1.55], [1.63550772E12, 1.6666666666666667]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.63550778E12, 1.6666666666666667], [1.6355076E12, 0.8333333333333334], [1.63550766E12, 1.6666666666666667], [1.63550784E12, 1.6333333333333333], [1.6355079E12, 0.8333333333333334], [1.63550772E12, 1.65]], "isOverall": false, "label": "(GET) Registration Page-success", "isController": false}, {"data": [[1.63550778E12, 1.4333333333333333], [1.6355076E12, 0.8333333333333334], [1.63550766E12, 1.65], [1.63550784E12, 1.15], [1.6355079E12, 0.75], [1.63550772E12, 1.6666666666666667]], "isOverall": false, "label": "(POST) INSERT New User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355079E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.6355076E12, "maxY": 4.983333333333333, "series": [{"data": [[1.63550778E12, 4.533333333333333], [1.6355076E12, 2.5], [1.63550766E12, 4.966666666666667], [1.63550784E12, 3.933333333333333], [1.6355079E12, 3.1333333333333333], [1.63550772E12, 4.983333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6355079E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

