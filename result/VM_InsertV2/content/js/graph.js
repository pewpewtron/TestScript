/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 16952.0, "series": [{"data": [[0.0, 12.0], [0.1, 13.0], [0.2, 13.0], [0.3, 13.0], [0.4, 13.0], [0.5, 14.0], [0.6, 14.0], [0.7, 15.0], [0.8, 15.0], [0.9, 16.0], [1.0, 16.0], [1.1, 16.0], [1.2, 16.0], [1.3, 17.0], [1.4, 17.0], [1.5, 17.0], [1.6, 17.0], [1.7, 18.0], [1.8, 18.0], [1.9, 18.0], [2.0, 19.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 21.0], [2.5, 21.0], [2.6, 22.0], [2.7, 22.0], [2.8, 24.0], [2.9, 25.0], [3.0, 26.0], [3.1, 26.0], [3.2, 27.0], [3.3, 27.0], [3.4, 28.0], [3.5, 29.0], [3.6, 29.0], [3.7, 30.0], [3.8, 30.0], [3.9, 32.0], [4.0, 35.0], [4.1, 35.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 37.0], [4.6, 37.0], [4.7, 38.0], [4.8, 39.0], [4.9, 39.0], [5.0, 40.0], [5.1, 41.0], [5.2, 42.0], [5.3, 43.0], [5.4, 43.0], [5.5, 44.0], [5.6, 45.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 49.0], [6.1, 49.0], [6.2, 50.0], [6.3, 51.0], [6.4, 55.0], [6.5, 56.0], [6.6, 58.0], [6.7, 65.0], [6.8, 68.0], [6.9, 70.0], [7.0, 74.0], [7.1, 79.0], [7.2, 81.0], [7.3, 87.0], [7.4, 89.0], [7.5, 93.0], [7.6, 95.0], [7.7, 100.0], [7.8, 107.0], [7.9, 122.0], [8.0, 126.0], [8.1, 133.0], [8.2, 140.0], [8.3, 149.0], [8.4, 157.0], [8.5, 175.0], [8.6, 181.0], [8.7, 209.0], [8.8, 230.0], [8.9, 234.0], [9.0, 244.0], [9.1, 271.0], [9.2, 296.0], [9.3, 336.0], [9.4, 344.0], [9.5, 392.0], [9.6, 462.0], [9.7, 661.0], [9.8, 1910.0], [9.9, 1933.0], [10.0, 2008.0], [10.1, 2108.0], [10.2, 2209.0], [10.3, 2211.0], [10.4, 2231.0], [10.5, 2281.0], [10.6, 2310.0], [10.7, 2345.0], [10.8, 2349.0], [10.9, 2355.0], [11.0, 2370.0], [11.1, 2380.0], [11.2, 2384.0], [11.3, 2394.0], [11.4, 2417.0], [11.5, 2453.0], [11.6, 2461.0], [11.7, 2470.0], [11.8, 2491.0], [11.9, 2498.0], [12.0, 2503.0], [12.1, 2507.0], [12.2, 2508.0], [12.3, 2540.0], [12.4, 2549.0], [12.5, 2559.0], [12.6, 2566.0], [12.7, 2581.0], [12.8, 2631.0], [12.9, 2658.0], [13.0, 2687.0], [13.1, 2691.0], [13.2, 2722.0], [13.3, 2742.0], [13.4, 2765.0], [13.5, 2797.0], [13.6, 2828.0], [13.7, 2884.0], [13.8, 2969.0], [13.9, 3071.0], [14.0, 3143.0], [14.1, 3205.0], [14.2, 3255.0], [14.3, 3282.0], [14.4, 3322.0], [14.5, 3351.0], [14.6, 3370.0], [14.7, 3395.0], [14.8, 3410.0], [14.9, 3479.0], [15.0, 3494.0], [15.1, 3507.0], [15.2, 3514.0], [15.3, 3571.0], [15.4, 3600.0], [15.5, 3657.0], [15.6, 3759.0], [15.7, 3805.0], [15.8, 3821.0], [15.9, 3846.0], [16.0, 3904.0], [16.1, 3940.0], [16.2, 4093.0], [16.3, 4115.0], [16.4, 4123.0], [16.5, 4196.0], [16.6, 4242.0], [16.7, 4252.0], [16.8, 4285.0], [16.9, 4380.0], [17.0, 4424.0], [17.1, 4521.0], [17.2, 4606.0], [17.3, 4663.0], [17.4, 4733.0], [17.5, 4800.0], [17.6, 4923.0], [17.7, 4993.0], [17.8, 5035.0], [17.9, 5077.0], [18.0, 5121.0], [18.1, 5144.0], [18.2, 5220.0], [18.3, 5243.0], [18.4, 5251.0], [18.5, 5296.0], [18.6, 5333.0], [18.7, 5352.0], [18.8, 5378.0], [18.9, 5387.0], [19.0, 5395.0], [19.1, 5425.0], [19.2, 5442.0], [19.3, 5467.0], [19.4, 5523.0], [19.5, 5544.0], [19.6, 5576.0], [19.7, 5583.0], [19.8, 5624.0], [19.9, 5646.0], [20.0, 5673.0], [20.1, 5696.0], [20.2, 5722.0], [20.3, 5729.0], [20.4, 5751.0], [20.5, 5754.0], [20.6, 5764.0], [20.7, 5780.0], [20.8, 5806.0], [20.9, 5820.0], [21.0, 5824.0], [21.1, 5829.0], [21.2, 5859.0], [21.3, 5890.0], [21.4, 5918.0], [21.5, 5932.0], [21.6, 5943.0], [21.7, 5952.0], [21.8, 5955.0], [21.9, 5959.0], [22.0, 6003.0], [22.1, 6070.0], [22.2, 6084.0], [22.3, 6100.0], [22.4, 6116.0], [22.5, 6140.0], [22.6, 6156.0], [22.7, 6173.0], [22.8, 6185.0], [22.9, 6200.0], [23.0, 6210.0], [23.1, 6221.0], [23.2, 6239.0], [23.3, 6261.0], [23.4, 6278.0], [23.5, 6293.0], [23.6, 6375.0], [23.7, 6424.0], [23.8, 6459.0], [23.9, 6484.0], [24.0, 6526.0], [24.1, 6600.0], [24.2, 6668.0], [24.3, 6687.0], [24.4, 6706.0], [24.5, 6723.0], [24.6, 6769.0], [24.7, 6793.0], [24.8, 6820.0], [24.9, 6850.0], [25.0, 6871.0], [25.1, 6893.0], [25.2, 6909.0], [25.3, 6988.0], [25.4, 7027.0], [25.5, 7074.0], [25.6, 7084.0], [25.7, 7121.0], [25.8, 7158.0], [25.9, 7186.0], [26.0, 7207.0], [26.1, 7228.0], [26.2, 7254.0], [26.3, 7293.0], [26.4, 7314.0], [26.5, 7331.0], [26.6, 7344.0], [26.7, 7363.0], [26.8, 7376.0], [26.9, 7387.0], [27.0, 7410.0], [27.1, 7411.0], [27.2, 7428.0], [27.3, 7451.0], [27.4, 7466.0], [27.5, 7479.0], [27.6, 7505.0], [27.7, 7515.0], [27.8, 7538.0], [27.9, 7571.0], [28.0, 7575.0], [28.1, 7586.0], [28.2, 7589.0], [28.3, 7609.0], [28.4, 7621.0], [28.5, 7625.0], [28.6, 7627.0], [28.7, 7632.0], [28.8, 7637.0], [28.9, 7655.0], [29.0, 7660.0], [29.1, 7670.0], [29.2, 7687.0], [29.3, 7689.0], [29.4, 7695.0], [29.5, 7713.0], [29.6, 7718.0], [29.7, 7725.0], [29.8, 7727.0], [29.9, 7740.0], [30.0, 7744.0], [30.1, 7747.0], [30.2, 7756.0], [30.3, 7762.0], [30.4, 7771.0], [30.5, 7777.0], [30.6, 7780.0], [30.7, 7783.0], [30.8, 7788.0], [30.9, 7790.0], [31.0, 7791.0], [31.1, 7792.0], [31.2, 7797.0], [31.3, 7805.0], [31.4, 7809.0], [31.5, 7815.0], [31.6, 7817.0], [31.7, 7824.0], [31.8, 7825.0], [31.9, 7828.0], [32.0, 7829.0], [32.1, 7842.0], [32.2, 7842.0], [32.3, 7845.0], [32.4, 7848.0], [32.5, 7851.0], [32.6, 7855.0], [32.7, 7859.0], [32.8, 7868.0], [32.9, 7869.0], [33.0, 7870.0], [33.1, 7872.0], [33.2, 7874.0], [33.3, 7875.0], [33.4, 7886.0], [33.5, 7888.0], [33.6, 7890.0], [33.7, 7893.0], [33.8, 7894.0], [33.9, 7895.0], [34.0, 7897.0], [34.1, 7898.0], [34.2, 7900.0], [34.3, 7900.0], [34.4, 7901.0], [34.5, 7902.0], [34.6, 7902.0], [34.7, 7910.0], [34.8, 7914.0], [34.9, 7914.0], [35.0, 7917.0], [35.1, 7919.0], [35.2, 7920.0], [35.3, 7923.0], [35.4, 7925.0], [35.5, 7926.0], [35.6, 7930.0], [35.7, 7932.0], [35.8, 7933.0], [35.9, 7936.0], [36.0, 7937.0], [36.1, 7940.0], [36.2, 7941.0], [36.3, 7942.0], [36.4, 7944.0], [36.5, 7954.0], [36.6, 7956.0], [36.7, 7957.0], [36.8, 7959.0], [36.9, 7963.0], [37.0, 7963.0], [37.1, 7965.0], [37.2, 7967.0], [37.3, 7971.0], [37.4, 7973.0], [37.5, 7974.0], [37.6, 7976.0], [37.7, 7977.0], [37.8, 7980.0], [37.9, 7981.0], [38.0, 7982.0], [38.1, 7984.0], [38.2, 7988.0], [38.3, 7990.0], [38.4, 7993.0], [38.5, 7995.0], [38.6, 7997.0], [38.7, 7997.0], [38.8, 7998.0], [38.9, 7999.0], [39.0, 8001.0], [39.1, 8002.0], [39.2, 8004.0], [39.3, 8005.0], [39.4, 8005.0], [39.5, 8009.0], [39.6, 8009.0], [39.7, 8010.0], [39.8, 8011.0], [39.9, 8012.0], [40.0, 8012.0], [40.1, 8013.0], [40.2, 8015.0], [40.3, 8016.0], [40.4, 8017.0], [40.5, 8018.0], [40.6, 8020.0], [40.7, 8023.0], [40.8, 8023.0], [40.9, 8026.0], [41.0, 8028.0], [41.1, 8030.0], [41.2, 8031.0], [41.3, 8033.0], [41.4, 8034.0], [41.5, 8035.0], [41.6, 8038.0], [41.7, 8038.0], [41.8, 8040.0], [41.9, 8040.0], [42.0, 8041.0], [42.1, 8043.0], [42.2, 8045.0], [42.3, 8047.0], [42.4, 8048.0], [42.5, 8049.0], [42.6, 8050.0], [42.7, 8052.0], [42.8, 8054.0], [42.9, 8055.0], [43.0, 8057.0], [43.1, 8059.0], [43.2, 8061.0], [43.3, 8066.0], [43.4, 8068.0], [43.5, 8068.0], [43.6, 8069.0], [43.7, 8072.0], [43.8, 8074.0], [43.9, 8075.0], [44.0, 8075.0], [44.1, 8079.0], [44.2, 8079.0], [44.3, 8081.0], [44.4, 8082.0], [44.5, 8083.0], [44.6, 8085.0], [44.7, 8087.0], [44.8, 8088.0], [44.9, 8090.0], [45.0, 8091.0], [45.1, 8092.0], [45.2, 8093.0], [45.3, 8093.0], [45.4, 8095.0], [45.5, 8097.0], [45.6, 8098.0], [45.7, 8099.0], [45.8, 8101.0], [45.9, 8101.0], [46.0, 8102.0], [46.1, 8104.0], [46.2, 8106.0], [46.3, 8107.0], [46.4, 8109.0], [46.5, 8110.0], [46.6, 8110.0], [46.7, 8112.0], [46.8, 8114.0], [46.9, 8115.0], [47.0, 8119.0], [47.1, 8119.0], [47.2, 8119.0], [47.3, 8121.0], [47.4, 8122.0], [47.5, 8125.0], [47.6, 8125.0], [47.7, 8126.0], [47.8, 8127.0], [47.9, 8127.0], [48.0, 8128.0], [48.1, 8128.0], [48.2, 8130.0], [48.3, 8133.0], [48.4, 8135.0], [48.5, 8136.0], [48.6, 8138.0], [48.7, 8139.0], [48.8, 8141.0], [48.9, 8142.0], [49.0, 8143.0], [49.1, 8144.0], [49.2, 8146.0], [49.3, 8146.0], [49.4, 8147.0], [49.5, 8148.0], [49.6, 8149.0], [49.7, 8150.0], [49.8, 8151.0], [49.9, 8152.0], [50.0, 8153.0], [50.1, 8155.0], [50.2, 8156.0], [50.3, 8158.0], [50.4, 8159.0], [50.5, 8160.0], [50.6, 8160.0], [50.7, 8161.0], [50.8, 8161.0], [50.9, 8162.0], [51.0, 8163.0], [51.1, 8164.0], [51.2, 8164.0], [51.3, 8166.0], [51.4, 8166.0], [51.5, 8167.0], [51.6, 8168.0], [51.7, 8169.0], [51.8, 8171.0], [51.9, 8172.0], [52.0, 8172.0], [52.1, 8174.0], [52.2, 8175.0], [52.3, 8175.0], [52.4, 8176.0], [52.5, 8177.0], [52.6, 8178.0], [52.7, 8181.0], [52.8, 8181.0], [52.9, 8182.0], [53.0, 8183.0], [53.1, 8184.0], [53.2, 8184.0], [53.3, 8186.0], [53.4, 8187.0], [53.5, 8189.0], [53.6, 8191.0], [53.7, 8192.0], [53.8, 8193.0], [53.9, 8193.0], [54.0, 8195.0], [54.1, 8195.0], [54.2, 8196.0], [54.3, 8197.0], [54.4, 8197.0], [54.5, 8199.0], [54.6, 8199.0], [54.7, 8200.0], [54.8, 8201.0], [54.9, 8201.0], [55.0, 8201.0], [55.1, 8202.0], [55.2, 8202.0], [55.3, 8203.0], [55.4, 8204.0], [55.5, 8205.0], [55.6, 8206.0], [55.7, 8207.0], [55.8, 8208.0], [55.9, 8208.0], [56.0, 8209.0], [56.1, 8210.0], [56.2, 8213.0], [56.3, 8213.0], [56.4, 8214.0], [56.5, 8215.0], [56.6, 8215.0], [56.7, 8216.0], [56.8, 8217.0], [56.9, 8217.0], [57.0, 8218.0], [57.1, 8220.0], [57.2, 8221.0], [57.3, 8222.0], [57.4, 8223.0], [57.5, 8224.0], [57.6, 8226.0], [57.7, 8227.0], [57.8, 8228.0], [57.9, 8229.0], [58.0, 8229.0], [58.1, 8229.0], [58.2, 8230.0], [58.3, 8231.0], [58.4, 8231.0], [58.5, 8232.0], [58.6, 8233.0], [58.7, 8234.0], [58.8, 8235.0], [58.9, 8236.0], [59.0, 8238.0], [59.1, 8239.0], [59.2, 8239.0], [59.3, 8240.0], [59.4, 8242.0], [59.5, 8243.0], [59.6, 8245.0], [59.7, 8245.0], [59.8, 8246.0], [59.9, 8247.0], [60.0, 8247.0], [60.1, 8249.0], [60.2, 8251.0], [60.3, 8252.0], [60.4, 8253.0], [60.5, 8253.0], [60.6, 8254.0], [60.7, 8254.0], [60.8, 8255.0], [60.9, 8256.0], [61.0, 8257.0], [61.1, 8259.0], [61.2, 8261.0], [61.3, 8262.0], [61.4, 8264.0], [61.5, 8264.0], [61.6, 8265.0], [61.7, 8268.0], [61.8, 8268.0], [61.9, 8269.0], [62.0, 8270.0], [62.1, 8272.0], [62.2, 8272.0], [62.3, 8273.0], [62.4, 8274.0], [62.5, 8275.0], [62.6, 8276.0], [62.7, 8276.0], [62.8, 8278.0], [62.9, 8279.0], [63.0, 8280.0], [63.1, 8281.0], [63.2, 8282.0], [63.3, 8282.0], [63.4, 8283.0], [63.5, 8283.0], [63.6, 8285.0], [63.7, 8286.0], [63.8, 8286.0], [63.9, 8286.0], [64.0, 8286.0], [64.1, 8287.0], [64.2, 8289.0], [64.3, 8290.0], [64.4, 8291.0], [64.5, 8294.0], [64.6, 8296.0], [64.7, 8296.0], [64.8, 8298.0], [64.9, 8299.0], [65.0, 8299.0], [65.1, 8299.0], [65.2, 8300.0], [65.3, 8300.0], [65.4, 8302.0], [65.5, 8303.0], [65.6, 8307.0], [65.7, 8307.0], [65.8, 8309.0], [65.9, 8312.0], [66.0, 8314.0], [66.1, 8314.0], [66.2, 8316.0], [66.3, 8317.0], [66.4, 8318.0], [66.5, 8320.0], [66.6, 8322.0], [66.7, 8324.0], [66.8, 8326.0], [66.9, 8326.0], [67.0, 8329.0], [67.1, 8329.0], [67.2, 8329.0], [67.3, 8330.0], [67.4, 8331.0], [67.5, 8332.0], [67.6, 8333.0], [67.7, 8333.0], [67.8, 8334.0], [67.9, 8336.0], [68.0, 8336.0], [68.1, 8337.0], [68.2, 8337.0], [68.3, 8338.0], [68.4, 8339.0], [68.5, 8340.0], [68.6, 8341.0], [68.7, 8342.0], [68.8, 8343.0], [68.9, 8343.0], [69.0, 8345.0], [69.1, 8346.0], [69.2, 8348.0], [69.3, 8348.0], [69.4, 8348.0], [69.5, 8350.0], [69.6, 8350.0], [69.7, 8351.0], [69.8, 8353.0], [69.9, 8354.0], [70.0, 8355.0], [70.1, 8355.0], [70.2, 8357.0], [70.3, 8357.0], [70.4, 8359.0], [70.5, 8360.0], [70.6, 8361.0], [70.7, 8361.0], [70.8, 8362.0], [70.9, 8363.0], [71.0, 8364.0], [71.1, 8365.0], [71.2, 8368.0], [71.3, 8368.0], [71.4, 8369.0], [71.5, 8369.0], [71.6, 8370.0], [71.7, 8371.0], [71.8, 8373.0], [71.9, 8373.0], [72.0, 8375.0], [72.1, 8376.0], [72.2, 8377.0], [72.3, 8378.0], [72.4, 8378.0], [72.5, 8379.0], [72.6, 8380.0], [72.7, 8382.0], [72.8, 8383.0], [72.9, 8384.0], [73.0, 8385.0], [73.1, 8386.0], [73.2, 8387.0], [73.3, 8387.0], [73.4, 8388.0], [73.5, 8388.0], [73.6, 8390.0], [73.7, 8392.0], [73.8, 8392.0], [73.9, 8393.0], [74.0, 8394.0], [74.1, 8396.0], [74.2, 8396.0], [74.3, 8398.0], [74.4, 8399.0], [74.5, 8399.0], [74.6, 8400.0], [74.7, 8400.0], [74.8, 8401.0], [74.9, 8402.0], [75.0, 8405.0], [75.1, 8406.0], [75.2, 8407.0], [75.3, 8408.0], [75.4, 8408.0], [75.5, 8409.0], [75.6, 8410.0], [75.7, 8411.0], [75.8, 8411.0], [75.9, 8412.0], [76.0, 8413.0], [76.1, 8414.0], [76.2, 8415.0], [76.3, 8415.0], [76.4, 8417.0], [76.5, 8418.0], [76.6, 8419.0], [76.7, 8422.0], [76.8, 8423.0], [76.9, 8425.0], [77.0, 8426.0], [77.1, 8429.0], [77.2, 8430.0], [77.3, 8431.0], [77.4, 8435.0], [77.5, 8436.0], [77.6, 8436.0], [77.7, 8437.0], [77.8, 8438.0], [77.9, 8439.0], [78.0, 8440.0], [78.1, 8441.0], [78.2, 8441.0], [78.3, 8443.0], [78.4, 8444.0], [78.5, 8444.0], [78.6, 8447.0], [78.7, 8448.0], [78.8, 8450.0], [78.9, 8452.0], [79.0, 8454.0], [79.1, 8458.0], [79.2, 8458.0], [79.3, 8460.0], [79.4, 8462.0], [79.5, 8464.0], [79.6, 8465.0], [79.7, 8466.0], [79.8, 8466.0], [79.9, 8467.0], [80.0, 8467.0], [80.1, 8468.0], [80.2, 8470.0], [80.3, 8471.0], [80.4, 8473.0], [80.5, 8475.0], [80.6, 8477.0], [80.7, 8479.0], [80.8, 8479.0], [80.9, 8481.0], [81.0, 8483.0], [81.1, 8484.0], [81.2, 8485.0], [81.3, 8485.0], [81.4, 8487.0], [81.5, 8489.0], [81.6, 8490.0], [81.7, 8493.0], [81.8, 8495.0], [81.9, 8496.0], [82.0, 8497.0], [82.1, 8498.0], [82.2, 8501.0], [82.3, 8502.0], [82.4, 8503.0], [82.5, 8506.0], [82.6, 8507.0], [82.7, 8508.0], [82.8, 8509.0], [82.9, 8511.0], [83.0, 8513.0], [83.1, 8519.0], [83.2, 8521.0], [83.3, 8522.0], [83.4, 8522.0], [83.5, 8522.0], [83.6, 8527.0], [83.7, 8529.0], [83.8, 8531.0], [83.9, 8536.0], [84.0, 8537.0], [84.1, 8538.0], [84.2, 8539.0], [84.3, 8539.0], [84.4, 8541.0], [84.5, 8541.0], [84.6, 8545.0], [84.7, 8547.0], [84.8, 8551.0], [84.9, 8558.0], [85.0, 8559.0], [85.1, 8560.0], [85.2, 8562.0], [85.3, 8566.0], [85.4, 8566.0], [85.5, 8570.0], [85.6, 8576.0], [85.7, 8578.0], [85.8, 8579.0], [85.9, 8580.0], [86.0, 8582.0], [86.1, 8584.0], [86.2, 8585.0], [86.3, 8585.0], [86.4, 8588.0], [86.5, 8592.0], [86.6, 8595.0], [86.7, 8595.0], [86.8, 8601.0], [86.9, 8603.0], [87.0, 8606.0], [87.1, 8609.0], [87.2, 8613.0], [87.3, 8615.0], [87.4, 8616.0], [87.5, 8616.0], [87.6, 8617.0], [87.7, 8620.0], [87.8, 8620.0], [87.9, 8623.0], [88.0, 8636.0], [88.1, 8639.0], [88.2, 8642.0], [88.3, 8645.0], [88.4, 8652.0], [88.5, 8653.0], [88.6, 8658.0], [88.7, 8660.0], [88.8, 8660.0], [88.9, 8669.0], [89.0, 8671.0], [89.1, 8674.0], [89.2, 8682.0], [89.3, 8685.0], [89.4, 8688.0], [89.5, 8693.0], [89.6, 8694.0], [89.7, 8696.0], [89.8, 8697.0], [89.9, 8709.0], [90.0, 8717.0], [90.1, 8722.0], [90.2, 8730.0], [90.3, 8739.0], [90.4, 8743.0], [90.5, 8748.0], [90.6, 8752.0], [90.7, 8754.0], [90.8, 8761.0], [90.9, 8763.0], [91.0, 8768.0], [91.1, 8774.0], [91.2, 8780.0], [91.3, 8786.0], [91.4, 8789.0], [91.5, 8794.0], [91.6, 8799.0], [91.7, 8801.0], [91.8, 8805.0], [91.9, 8806.0], [92.0, 8816.0], [92.1, 8824.0], [92.2, 8834.0], [92.3, 8838.0], [92.4, 8840.0], [92.5, 8850.0], [92.6, 8853.0], [92.7, 8853.0], [92.8, 8855.0], [92.9, 8866.0], [93.0, 8883.0], [93.1, 8888.0], [93.2, 8891.0], [93.3, 8910.0], [93.4, 8919.0], [93.5, 8927.0], [93.6, 8929.0], [93.7, 8942.0], [93.8, 8945.0], [93.9, 8955.0], [94.0, 8968.0], [94.1, 8976.0], [94.2, 8979.0], [94.3, 8983.0], [94.4, 8990.0], [94.5, 9004.0], [94.6, 9010.0], [94.7, 9021.0], [94.8, 9037.0], [94.9, 9076.0], [95.0, 9088.0], [95.1, 9096.0], [95.2, 9114.0], [95.3, 9123.0], [95.4, 9125.0], [95.5, 9152.0], [95.6, 9176.0], [95.7, 9198.0], [95.8, 9238.0], [95.9, 9256.0], [96.0, 9270.0], [96.1, 9288.0], [96.2, 9297.0], [96.3, 9324.0], [96.4, 9356.0], [96.5, 9388.0], [96.6, 9425.0], [96.7, 9453.0], [96.8, 9478.0], [96.9, 9758.0], [97.0, 9843.0], [97.1, 10041.0], [97.2, 10332.0], [97.3, 11951.0], [97.4, 12378.0], [97.5, 12673.0], [97.6, 13115.0], [97.7, 15158.0], [97.8, 15202.0], [97.9, 15364.0], [98.0, 15401.0], [98.1, 15522.0], [98.2, 15613.0], [98.3, 15708.0], [98.4, 15762.0], [98.5, 15782.0], [98.6, 15813.0], [98.7, 15872.0], [98.8, 15936.0], [98.9, 15964.0], [99.0, 16003.0], [99.1, 16079.0], [99.2, 16117.0], [99.3, 16205.0], [99.4, 16268.0], [99.5, 16336.0], [99.6, 16433.0], [99.7, 16580.0], [99.8, 16649.0], [99.9, 16747.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 7.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 7.0], [2.0, 7.0], [2.1, 7.0], [2.2, 7.0], [2.3, 7.0], [2.4, 7.0], [2.5, 7.0], [2.6, 7.0], [2.7, 7.0], [2.8, 7.0], [2.9, 7.0], [3.0, 8.0], [3.1, 8.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 9.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 11.0], [5.5, 11.0], [5.6, 11.0], [5.7, 11.0], [5.8, 11.0], [5.9, 12.0], [6.0, 12.0], [6.1, 13.0], [6.2, 13.0], [6.3, 13.0], [6.4, 14.0], [6.5, 14.0], [6.6, 14.0], [6.7, 16.0], [6.8, 16.0], [6.9, 16.0], [7.0, 17.0], [7.1, 17.0], [7.2, 18.0], [7.3, 18.0], [7.4, 18.0], [7.5, 19.0], [7.6, 19.0], [7.7, 20.0], [7.8, 21.0], [7.9, 21.0], [8.0, 22.0], [8.1, 23.0], [8.2, 23.0], [8.3, 24.0], [8.4, 25.0], [8.5, 25.0], [8.6, 26.0], [8.7, 28.0], [8.8, 28.0], [8.9, 29.0], [9.0, 30.0], [9.1, 30.0], [9.2, 31.0], [9.3, 31.0], [9.4, 31.0], [9.5, 33.0], [9.6, 33.0], [9.7, 34.0], [9.8, 34.0], [9.9, 35.0], [10.0, 36.0], [10.1, 37.0], [10.2, 38.0], [10.3, 39.0], [10.4, 41.0], [10.5, 48.0], [10.6, 50.0], [10.7, 53.0], [10.8, 56.0], [10.9, 57.0], [11.0, 61.0], [11.1, 67.0], [11.2, 69.0], [11.3, 74.0], [11.4, 77.0], [11.5, 79.0], [11.6, 82.0], [11.7, 86.0], [11.8, 91.0], [11.9, 94.0], [12.0, 105.0], [12.1, 110.0], [12.2, 121.0], [12.3, 133.0], [12.4, 138.0], [12.5, 143.0], [12.6, 150.0], [12.7, 166.0], [12.8, 205.0], [12.9, 237.0], [13.0, 300.0], [13.1, 319.0], [13.2, 401.0], [13.3, 422.0], [13.4, 937.0], [13.5, 995.0], [13.6, 1140.0], [13.7, 1205.0], [13.8, 1220.0], [13.9, 1288.0], [14.0, 1331.0], [14.1, 1367.0], [14.2, 1505.0], [14.3, 1545.0], [14.4, 1592.0], [14.5, 1616.0], [14.6, 1626.0], [14.7, 1657.0], [14.8, 1680.0], [14.9, 1709.0], [15.0, 1738.0], [15.1, 1757.0], [15.2, 1790.0], [15.3, 1796.0], [15.4, 1797.0], [15.5, 1802.0], [15.6, 1807.0], [15.7, 1820.0], [15.8, 1823.0], [15.9, 1824.0], [16.0, 1828.0], [16.1, 1830.0], [16.2, 1838.0], [16.3, 1842.0], [16.4, 1846.0], [16.5, 1859.0], [16.6, 1864.0], [16.7, 1868.0], [16.8, 1869.0], [16.9, 1879.0], [17.0, 1882.0], [17.1, 1885.0], [17.2, 1887.0], [17.3, 1892.0], [17.4, 1901.0], [17.5, 1917.0], [17.6, 1918.0], [17.7, 1925.0], [17.8, 1926.0], [17.9, 1933.0], [18.0, 1941.0], [18.1, 1949.0], [18.2, 1949.0], [18.3, 1954.0], [18.4, 1961.0], [18.5, 1963.0], [18.6, 1965.0], [18.7, 1975.0], [18.8, 1976.0], [18.9, 1977.0], [19.0, 1978.0], [19.1, 1982.0], [19.2, 1986.0], [19.3, 1988.0], [19.4, 1989.0], [19.5, 1990.0], [19.6, 1997.0], [19.7, 2003.0], [19.8, 2003.0], [19.9, 2004.0], [20.0, 2007.0], [20.1, 2009.0], [20.2, 2012.0], [20.3, 2014.0], [20.4, 2017.0], [20.5, 2017.0], [20.6, 2020.0], [20.7, 2024.0], [20.8, 2028.0], [20.9, 2029.0], [21.0, 2032.0], [21.1, 2035.0], [21.2, 2035.0], [21.3, 2037.0], [21.4, 2038.0], [21.5, 2039.0], [21.6, 2041.0], [21.7, 2042.0], [21.8, 2046.0], [21.9, 2047.0], [22.0, 2049.0], [22.1, 2051.0], [22.2, 2054.0], [22.3, 2057.0], [22.4, 2058.0], [22.5, 2060.0], [22.6, 2062.0], [22.7, 2064.0], [22.8, 2065.0], [22.9, 2066.0], [23.0, 2066.0], [23.1, 2067.0], [23.2, 2068.0], [23.3, 2069.0], [23.4, 2071.0], [23.5, 2073.0], [23.6, 2074.0], [23.7, 2074.0], [23.8, 2075.0], [23.9, 2076.0], [24.0, 2079.0], [24.1, 2080.0], [24.2, 2081.0], [24.3, 2081.0], [24.4, 2082.0], [24.5, 2085.0], [24.6, 2087.0], [24.7, 2088.0], [24.8, 2088.0], [24.9, 2090.0], [25.0, 2091.0], [25.1, 2092.0], [25.2, 2093.0], [25.3, 2094.0], [25.4, 2095.0], [25.5, 2096.0], [25.6, 2098.0], [25.7, 2098.0], [25.8, 2098.0], [25.9, 2100.0], [26.0, 2101.0], [26.1, 2102.0], [26.2, 2103.0], [26.3, 2104.0], [26.4, 2106.0], [26.5, 2107.0], [26.6, 2109.0], [26.7, 2109.0], [26.8, 2111.0], [26.9, 2112.0], [27.0, 2113.0], [27.1, 2114.0], [27.2, 2115.0], [27.3, 2115.0], [27.4, 2116.0], [27.5, 2118.0], [27.6, 2118.0], [27.7, 2121.0], [27.8, 2121.0], [27.9, 2122.0], [28.0, 2123.0], [28.1, 2125.0], [28.2, 2125.0], [28.3, 2126.0], [28.4, 2126.0], [28.5, 2127.0], [28.6, 2129.0], [28.7, 2131.0], [28.8, 2131.0], [28.9, 2133.0], [29.0, 2134.0], [29.1, 2137.0], [29.2, 2138.0], [29.3, 2138.0], [29.4, 2138.0], [29.5, 2139.0], [29.6, 2140.0], [29.7, 2140.0], [29.8, 2143.0], [29.9, 2144.0], [30.0, 2144.0], [30.1, 2145.0], [30.2, 2147.0], [30.3, 2148.0], [30.4, 2149.0], [30.5, 2150.0], [30.6, 2151.0], [30.7, 2152.0], [30.8, 2152.0], [30.9, 2153.0], [31.0, 2154.0], [31.1, 2155.0], [31.2, 2156.0], [31.3, 2158.0], [31.4, 2159.0], [31.5, 2160.0], [31.6, 2161.0], [31.7, 2164.0], [31.8, 2164.0], [31.9, 2165.0], [32.0, 2165.0], [32.1, 2165.0], [32.2, 2166.0], [32.3, 2167.0], [32.4, 2169.0], [32.5, 2170.0], [32.6, 2171.0], [32.7, 2171.0], [32.8, 2172.0], [32.9, 2173.0], [33.0, 2174.0], [33.1, 2174.0], [33.2, 2175.0], [33.3, 2177.0], [33.4, 2178.0], [33.5, 2178.0], [33.6, 2178.0], [33.7, 2180.0], [33.8, 2181.0], [33.9, 2182.0], [34.0, 2184.0], [34.1, 2185.0], [34.2, 2186.0], [34.3, 2187.0], [34.4, 2187.0], [34.5, 2187.0], [34.6, 2188.0], [34.7, 2189.0], [34.8, 2190.0], [34.9, 2191.0], [35.0, 2191.0], [35.1, 2192.0], [35.2, 2192.0], [35.3, 2193.0], [35.4, 2193.0], [35.5, 2194.0], [35.6, 2194.0], [35.7, 2194.0], [35.8, 2195.0], [35.9, 2196.0], [36.0, 2198.0], [36.1, 2199.0], [36.2, 2200.0], [36.3, 2201.0], [36.4, 2202.0], [36.5, 2202.0], [36.6, 2203.0], [36.7, 2204.0], [36.8, 2204.0], [36.9, 2205.0], [37.0, 2205.0], [37.1, 2207.0], [37.2, 2207.0], [37.3, 2208.0], [37.4, 2209.0], [37.5, 2210.0], [37.6, 2211.0], [37.7, 2211.0], [37.8, 2212.0], [37.9, 2213.0], [38.0, 2214.0], [38.1, 2214.0], [38.2, 2214.0], [38.3, 2215.0], [38.4, 2216.0], [38.5, 2217.0], [38.6, 2218.0], [38.7, 2218.0], [38.8, 2218.0], [38.9, 2219.0], [39.0, 2220.0], [39.1, 2220.0], [39.2, 2221.0], [39.3, 2221.0], [39.4, 2221.0], [39.5, 2221.0], [39.6, 2223.0], [39.7, 2224.0], [39.8, 2226.0], [39.9, 2226.0], [40.0, 2227.0], [40.1, 2227.0], [40.2, 2227.0], [40.3, 2228.0], [40.4, 2229.0], [40.5, 2230.0], [40.6, 2230.0], [40.7, 2231.0], [40.8, 2233.0], [40.9, 2235.0], [41.0, 2236.0], [41.1, 2237.0], [41.2, 2238.0], [41.3, 2239.0], [41.4, 2239.0], [41.5, 2240.0], [41.6, 2241.0], [41.7, 2242.0], [41.8, 2242.0], [41.9, 2243.0], [42.0, 2244.0], [42.1, 2244.0], [42.2, 2245.0], [42.3, 2246.0], [42.4, 2247.0], [42.5, 2247.0], [42.6, 2248.0], [42.7, 2248.0], [42.8, 2249.0], [42.9, 2250.0], [43.0, 2251.0], [43.1, 2252.0], [43.2, 2252.0], [43.3, 2253.0], [43.4, 2253.0], [43.5, 2254.0], [43.6, 2254.0], [43.7, 2254.0], [43.8, 2256.0], [43.9, 2256.0], [44.0, 2256.0], [44.1, 2256.0], [44.2, 2257.0], [44.3, 2257.0], [44.4, 2258.0], [44.5, 2258.0], [44.6, 2259.0], [44.7, 2259.0], [44.8, 2259.0], [44.9, 2260.0], [45.0, 2260.0], [45.1, 2261.0], [45.2, 2262.0], [45.3, 2262.0], [45.4, 2263.0], [45.5, 2263.0], [45.6, 2264.0], [45.7, 2265.0], [45.8, 2265.0], [45.9, 2266.0], [46.0, 2267.0], [46.1, 2267.0], [46.2, 2268.0], [46.3, 2268.0], [46.4, 2269.0], [46.5, 2270.0], [46.6, 2273.0], [46.7, 2275.0], [46.8, 2276.0], [46.9, 2276.0], [47.0, 2277.0], [47.1, 2278.0], [47.2, 2280.0], [47.3, 2280.0], [47.4, 2281.0], [47.5, 2281.0], [47.6, 2281.0], [47.7, 2282.0], [47.8, 2282.0], [47.9, 2284.0], [48.0, 2285.0], [48.1, 2286.0], [48.2, 2287.0], [48.3, 2288.0], [48.4, 2289.0], [48.5, 2290.0], [48.6, 2290.0], [48.7, 2291.0], [48.8, 2292.0], [48.9, 2294.0], [49.0, 2296.0], [49.1, 2298.0], [49.2, 2298.0], [49.3, 2300.0], [49.4, 2300.0], [49.5, 2300.0], [49.6, 2301.0], [49.7, 2301.0], [49.8, 2302.0], [49.9, 2304.0], [50.0, 2305.0], [50.1, 2306.0], [50.2, 2309.0], [50.3, 2309.0], [50.4, 2310.0], [50.5, 2312.0], [50.6, 2313.0], [50.7, 2314.0], [50.8, 2314.0], [50.9, 2316.0], [51.0, 2317.0], [51.1, 2317.0], [51.2, 2319.0], [51.3, 2319.0], [51.4, 2320.0], [51.5, 2321.0], [51.6, 2322.0], [51.7, 2323.0], [51.8, 2323.0], [51.9, 2323.0], [52.0, 2324.0], [52.1, 2325.0], [52.2, 2326.0], [52.3, 2326.0], [52.4, 2328.0], [52.5, 2329.0], [52.6, 2329.0], [52.7, 2329.0], [52.8, 2330.0], [52.9, 2331.0], [53.0, 2332.0], [53.1, 2333.0], [53.2, 2334.0], [53.3, 2336.0], [53.4, 2336.0], [53.5, 2337.0], [53.6, 2339.0], [53.7, 2340.0], [53.8, 2341.0], [53.9, 2342.0], [54.0, 2343.0], [54.1, 2343.0], [54.2, 2344.0], [54.3, 2345.0], [54.4, 2345.0], [54.5, 2347.0], [54.6, 2349.0], [54.7, 2350.0], [54.8, 2351.0], [54.9, 2351.0], [55.0, 2352.0], [55.1, 2353.0], [55.2, 2354.0], [55.3, 2356.0], [55.4, 2357.0], [55.5, 2358.0], [55.6, 2359.0], [55.7, 2359.0], [55.8, 2359.0], [55.9, 2361.0], [56.0, 2362.0], [56.1, 2363.0], [56.2, 2364.0], [56.3, 2365.0], [56.4, 2365.0], [56.5, 2366.0], [56.6, 2367.0], [56.7, 2367.0], [56.8, 2368.0], [56.9, 2369.0], [57.0, 2370.0], [57.1, 2371.0], [57.2, 2372.0], [57.3, 2372.0], [57.4, 2373.0], [57.5, 2373.0], [57.6, 2374.0], [57.7, 2375.0], [57.8, 2376.0], [57.9, 2376.0], [58.0, 2378.0], [58.1, 2379.0], [58.2, 2379.0], [58.3, 2380.0], [58.4, 2382.0], [58.5, 2384.0], [58.6, 2385.0], [58.7, 2385.0], [58.8, 2385.0], [58.9, 2385.0], [59.0, 2386.0], [59.1, 2386.0], [59.2, 2387.0], [59.3, 2387.0], [59.4, 2388.0], [59.5, 2389.0], [59.6, 2389.0], [59.7, 2390.0], [59.8, 2392.0], [59.9, 2392.0], [60.0, 2393.0], [60.1, 2395.0], [60.2, 2396.0], [60.3, 2397.0], [60.4, 2398.0], [60.5, 2399.0], [60.6, 2400.0], [60.7, 2402.0], [60.8, 2403.0], [60.9, 2404.0], [61.0, 2405.0], [61.1, 2405.0], [61.2, 2406.0], [61.3, 2406.0], [61.4, 2407.0], [61.5, 2409.0], [61.6, 2409.0], [61.7, 2411.0], [61.8, 2412.0], [61.9, 2412.0], [62.0, 2413.0], [62.1, 2413.0], [62.2, 2414.0], [62.3, 2415.0], [62.4, 2415.0], [62.5, 2416.0], [62.6, 2417.0], [62.7, 2417.0], [62.8, 2418.0], [62.9, 2419.0], [63.0, 2419.0], [63.1, 2420.0], [63.2, 2421.0], [63.3, 2421.0], [63.4, 2422.0], [63.5, 2425.0], [63.6, 2425.0], [63.7, 2425.0], [63.8, 2426.0], [63.9, 2426.0], [64.0, 2426.0], [64.1, 2427.0], [64.2, 2427.0], [64.3, 2427.0], [64.4, 2429.0], [64.5, 2431.0], [64.6, 2432.0], [64.7, 2435.0], [64.8, 2436.0], [64.9, 2437.0], [65.0, 2438.0], [65.1, 2439.0], [65.2, 2441.0], [65.3, 2442.0], [65.4, 2444.0], [65.5, 2446.0], [65.6, 2448.0], [65.7, 2450.0], [65.8, 2452.0], [65.9, 2452.0], [66.0, 2453.0], [66.1, 2454.0], [66.2, 2455.0], [66.3, 2456.0], [66.4, 2456.0], [66.5, 2457.0], [66.6, 2457.0], [66.7, 2458.0], [66.8, 2458.0], [66.9, 2458.0], [67.0, 2460.0], [67.1, 2461.0], [67.2, 2461.0], [67.3, 2463.0], [67.4, 2463.0], [67.5, 2465.0], [67.6, 2466.0], [67.7, 2469.0], [67.8, 2469.0], [67.9, 2471.0], [68.0, 2473.0], [68.1, 2475.0], [68.2, 2476.0], [68.3, 2476.0], [68.4, 2478.0], [68.5, 2480.0], [68.6, 2480.0], [68.7, 2482.0], [68.8, 2483.0], [68.9, 2483.0], [69.0, 2485.0], [69.1, 2485.0], [69.2, 2486.0], [69.3, 2486.0], [69.4, 2487.0], [69.5, 2488.0], [69.6, 2488.0], [69.7, 2490.0], [69.8, 2492.0], [69.9, 2493.0], [70.0, 2493.0], [70.1, 2494.0], [70.2, 2495.0], [70.3, 2496.0], [70.4, 2496.0], [70.5, 2497.0], [70.6, 2497.0], [70.7, 2498.0], [70.8, 2499.0], [70.9, 2501.0], [71.0, 2501.0], [71.1, 2502.0], [71.2, 2503.0], [71.3, 2503.0], [71.4, 2504.0], [71.5, 2505.0], [71.6, 2505.0], [71.7, 2508.0], [71.8, 2509.0], [71.9, 2509.0], [72.0, 2511.0], [72.1, 2512.0], [72.2, 2512.0], [72.3, 2514.0], [72.4, 2515.0], [72.5, 2516.0], [72.6, 2517.0], [72.7, 2518.0], [72.8, 2519.0], [72.9, 2519.0], [73.0, 2520.0], [73.1, 2521.0], [73.2, 2521.0], [73.3, 2523.0], [73.4, 2524.0], [73.5, 2524.0], [73.6, 2524.0], [73.7, 2525.0], [73.8, 2525.0], [73.9, 2526.0], [74.0, 2527.0], [74.1, 2531.0], [74.2, 2533.0], [74.3, 2534.0], [74.4, 2537.0], [74.5, 2538.0], [74.6, 2538.0], [74.7, 2539.0], [74.8, 2539.0], [74.9, 2541.0], [75.0, 2541.0], [75.1, 2543.0], [75.2, 2543.0], [75.3, 2545.0], [75.4, 2546.0], [75.5, 2547.0], [75.6, 2550.0], [75.7, 2552.0], [75.8, 2553.0], [75.9, 2554.0], [76.0, 2557.0], [76.1, 2560.0], [76.2, 2560.0], [76.3, 2560.0], [76.4, 2561.0], [76.5, 2563.0], [76.6, 2563.0], [76.7, 2564.0], [76.8, 2567.0], [76.9, 2570.0], [77.0, 2570.0], [77.1, 2572.0], [77.2, 2573.0], [77.3, 2575.0], [77.4, 2575.0], [77.5, 2577.0], [77.6, 2582.0], [77.7, 2583.0], [77.8, 2585.0], [77.9, 2587.0], [78.0, 2589.0], [78.1, 2590.0], [78.2, 2591.0], [78.3, 2592.0], [78.4, 2592.0], [78.5, 2593.0], [78.6, 2593.0], [78.7, 2594.0], [78.8, 2594.0], [78.9, 2595.0], [79.0, 2596.0], [79.1, 2598.0], [79.2, 2600.0], [79.3, 2601.0], [79.4, 2602.0], [79.5, 2604.0], [79.6, 2604.0], [79.7, 2605.0], [79.8, 2607.0], [79.9, 2608.0], [80.0, 2609.0], [80.1, 2609.0], [80.2, 2610.0], [80.3, 2611.0], [80.4, 2612.0], [80.5, 2614.0], [80.6, 2617.0], [80.7, 2618.0], [80.8, 2620.0], [80.9, 2622.0], [81.0, 2623.0], [81.1, 2624.0], [81.2, 2624.0], [81.3, 2624.0], [81.4, 2625.0], [81.5, 2626.0], [81.6, 2626.0], [81.7, 2627.0], [81.8, 2628.0], [81.9, 2629.0], [82.0, 2630.0], [82.1, 2630.0], [82.2, 2631.0], [82.3, 2632.0], [82.4, 2632.0], [82.5, 2634.0], [82.6, 2635.0], [82.7, 2636.0], [82.8, 2637.0], [82.9, 2639.0], [83.0, 2640.0], [83.1, 2643.0], [83.2, 2645.0], [83.3, 2648.0], [83.4, 2649.0], [83.5, 2651.0], [83.6, 2651.0], [83.7, 2654.0], [83.8, 2655.0], [83.9, 2657.0], [84.0, 2657.0], [84.1, 2658.0], [84.2, 2660.0], [84.3, 2661.0], [84.4, 2661.0], [84.5, 2662.0], [84.6, 2663.0], [84.7, 2664.0], [84.8, 2665.0], [84.9, 2668.0], [85.0, 2669.0], [85.1, 2670.0], [85.2, 2670.0], [85.3, 2672.0], [85.4, 2672.0], [85.5, 2672.0], [85.6, 2673.0], [85.7, 2673.0], [85.8, 2675.0], [85.9, 2677.0], [86.0, 2678.0], [86.1, 2680.0], [86.2, 2682.0], [86.3, 2683.0], [86.4, 2684.0], [86.5, 2686.0], [86.6, 2686.0], [86.7, 2689.0], [86.8, 2689.0], [86.9, 2690.0], [87.0, 2691.0], [87.1, 2693.0], [87.2, 2694.0], [87.3, 2695.0], [87.4, 2696.0], [87.5, 2700.0], [87.6, 2701.0], [87.7, 2703.0], [87.8, 2704.0], [87.9, 2705.0], [88.0, 2710.0], [88.1, 2710.0], [88.2, 2711.0], [88.3, 2712.0], [88.4, 2715.0], [88.5, 2717.0], [88.6, 2718.0], [88.7, 2724.0], [88.8, 2724.0], [88.9, 2726.0], [89.0, 2730.0], [89.1, 2730.0], [89.2, 2732.0], [89.3, 2732.0], [89.4, 2735.0], [89.5, 2739.0], [89.6, 2740.0], [89.7, 2742.0], [89.8, 2743.0], [89.9, 2747.0], [90.0, 2748.0], [90.1, 2750.0], [90.2, 2755.0], [90.3, 2758.0], [90.4, 2762.0], [90.5, 2765.0], [90.6, 2766.0], [90.7, 2767.0], [90.8, 2770.0], [90.9, 2772.0], [91.0, 2777.0], [91.1, 2778.0], [91.2, 2781.0], [91.3, 2784.0], [91.4, 2785.0], [91.5, 2787.0], [91.6, 2789.0], [91.7, 2792.0], [91.8, 2797.0], [91.9, 2800.0], [92.0, 2803.0], [92.1, 2804.0], [92.2, 2805.0], [92.3, 2805.0], [92.4, 2807.0], [92.5, 2813.0], [92.6, 2816.0], [92.7, 2818.0], [92.8, 2819.0], [92.9, 2825.0], [93.0, 2827.0], [93.1, 2833.0], [93.2, 2836.0], [93.3, 2837.0], [93.4, 2838.0], [93.5, 2841.0], [93.6, 2847.0], [93.7, 2852.0], [93.8, 2854.0], [93.9, 2855.0], [94.0, 2858.0], [94.1, 2859.0], [94.2, 2867.0], [94.3, 2869.0], [94.4, 2869.0], [94.5, 2871.0], [94.6, 2873.0], [94.7, 2874.0], [94.8, 2875.0], [94.9, 2883.0], [95.0, 2885.0], [95.1, 2887.0], [95.2, 2893.0], [95.3, 2900.0], [95.4, 2921.0], [95.5, 2925.0], [95.6, 2933.0], [95.7, 2939.0], [95.8, 2945.0], [95.9, 2955.0], [96.0, 2964.0], [96.1, 2980.0], [96.2, 3004.0], [96.3, 3007.0], [96.4, 3021.0], [96.5, 3108.0], [96.6, 3147.0], [96.7, 3197.0], [96.8, 3259.0], [96.9, 3345.0], [97.0, 3443.0], [97.1, 3487.0], [97.2, 3524.0], [97.3, 3552.0], [97.4, 3596.0], [97.5, 3612.0], [97.6, 3688.0], [97.7, 3741.0], [97.8, 3782.0], [97.9, 3815.0], [98.0, 3903.0], [98.1, 3970.0], [98.2, 4022.0], [98.3, 4036.0], [98.4, 4075.0], [98.5, 4097.0], [98.6, 4138.0], [98.7, 4141.0], [98.8, 4200.0], [98.9, 4227.0], [99.0, 4344.0], [99.1, 4352.0], [99.2, 4373.0], [99.3, 4395.0], [99.4, 4507.0], [99.5, 4579.0], [99.6, 6777.0], [99.7, 6941.0], [99.8, 7071.0], [99.9, 7101.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 6.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 7.0], [1.5, 7.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 7.0], [2.0, 7.0], [2.1, 7.0], [2.2, 7.0], [2.3, 7.0], [2.4, 7.0], [2.5, 7.0], [2.6, 7.0], [2.7, 8.0], [2.8, 8.0], [2.9, 8.0], [3.0, 8.0], [3.1, 8.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 8.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 9.0], [4.6, 9.0], [4.7, 9.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 11.0], [5.3, 11.0], [5.4, 11.0], [5.5, 11.0], [5.6, 11.0], [5.7, 12.0], [5.8, 12.0], [5.9, 12.0], [6.0, 12.0], [6.1, 13.0], [6.2, 13.0], [6.3, 13.0], [6.4, 13.0], [6.5, 13.0], [6.6, 14.0], [6.7, 14.0], [6.8, 14.0], [6.9, 14.0], [7.0, 15.0], [7.1, 16.0], [7.2, 16.0], [7.3, 16.0], [7.4, 17.0], [7.5, 17.0], [7.6, 18.0], [7.7, 19.0], [7.8, 20.0], [7.9, 20.0], [8.0, 21.0], [8.1, 22.0], [8.2, 23.0], [8.3, 24.0], [8.4, 24.0], [8.5, 25.0], [8.6, 26.0], [8.7, 27.0], [8.8, 27.0], [8.9, 29.0], [9.0, 31.0], [9.1, 31.0], [9.2, 32.0], [9.3, 32.0], [9.4, 33.0], [9.5, 34.0], [9.6, 35.0], [9.7, 36.0], [9.8, 37.0], [9.9, 38.0], [10.0, 40.0], [10.1, 42.0], [10.2, 44.0], [10.3, 47.0], [10.4, 49.0], [10.5, 50.0], [10.6, 55.0], [10.7, 60.0], [10.8, 61.0], [10.9, 64.0], [11.0, 65.0], [11.1, 68.0], [11.2, 77.0], [11.3, 80.0], [11.4, 83.0], [11.5, 89.0], [11.6, 93.0], [11.7, 97.0], [11.8, 108.0], [11.9, 117.0], [12.0, 120.0], [12.1, 132.0], [12.2, 137.0], [12.3, 145.0], [12.4, 149.0], [12.5, 169.0], [12.6, 173.0], [12.7, 187.0], [12.8, 209.0], [12.9, 211.0], [13.0, 228.0], [13.1, 236.0], [13.2, 239.0], [13.3, 283.0], [13.4, 418.0], [13.5, 437.0], [13.6, 750.0], [13.7, 911.0], [13.8, 1038.0], [13.9, 1148.0], [14.0, 1212.0], [14.1, 1237.0], [14.2, 1337.0], [14.3, 1418.0], [14.4, 1535.0], [14.5, 1636.0], [14.6, 1705.0], [14.7, 1790.0], [14.8, 1838.0], [14.9, 1912.0], [15.0, 1937.0], [15.1, 1984.0], [15.2, 2029.0], [15.3, 2097.0], [15.4, 2132.0], [15.5, 2188.0], [15.6, 2233.0], [15.7, 2261.0], [15.8, 2292.0], [15.9, 2506.0], [16.0, 2659.0], [16.1, 2806.0], [16.2, 2884.0], [16.3, 2890.0], [16.4, 2944.0], [16.5, 2999.0], [16.6, 3105.0], [16.7, 3149.0], [16.8, 3157.0], [16.9, 3188.0], [17.0, 3245.0], [17.1, 3258.0], [17.2, 3278.0], [17.3, 3321.0], [17.4, 3351.0], [17.5, 3365.0], [17.6, 3378.0], [17.7, 3400.0], [17.8, 3423.0], [17.9, 3434.0], [18.0, 3479.0], [18.1, 3492.0], [18.2, 3495.0], [18.3, 3501.0], [18.4, 3522.0], [18.5, 3540.0], [18.6, 3591.0], [18.7, 3601.0], [18.8, 3650.0], [18.9, 3730.0], [19.0, 3777.0], [19.1, 3820.0], [19.2, 3859.0], [19.3, 3892.0], [19.4, 3901.0], [19.5, 3939.0], [19.6, 3959.0], [19.7, 4015.0], [19.8, 4056.0], [19.9, 4082.0], [20.0, 4087.0], [20.1, 4098.0], [20.2, 4124.0], [20.3, 4134.0], [20.4, 4158.0], [20.5, 4215.0], [20.6, 4247.0], [20.7, 4254.0], [20.8, 4269.0], [20.9, 4310.0], [21.0, 4317.0], [21.1, 4333.0], [21.2, 4384.0], [21.3, 4407.0], [21.4, 4429.0], [21.5, 4455.0], [21.6, 4500.0], [21.7, 4507.0], [21.8, 4520.0], [21.9, 4598.0], [22.0, 4631.0], [22.1, 4704.0], [22.2, 4747.0], [22.3, 4785.0], [22.4, 4796.0], [22.5, 4824.0], [22.6, 4845.0], [22.7, 4867.0], [22.8, 4922.0], [22.9, 4979.0], [23.0, 4985.0], [23.1, 5003.0], [23.2, 5017.0], [23.3, 5026.0], [23.4, 5029.0], [23.5, 5040.0], [23.6, 5052.0], [23.7, 5098.0], [23.8, 5109.0], [23.9, 5112.0], [24.0, 5131.0], [24.1, 5138.0], [24.2, 5147.0], [24.3, 5150.0], [24.4, 5167.0], [24.5, 5187.0], [24.6, 5191.0], [24.7, 5212.0], [24.8, 5221.0], [24.9, 5225.0], [25.0, 5229.0], [25.1, 5235.0], [25.2, 5242.0], [25.3, 5246.0], [25.4, 5249.0], [25.5, 5250.0], [25.6, 5252.0], [25.7, 5257.0], [25.8, 5258.0], [25.9, 5262.0], [26.0, 5265.0], [26.1, 5270.0], [26.2, 5272.0], [26.3, 5276.0], [26.4, 5283.0], [26.5, 5285.0], [26.6, 5292.0], [26.7, 5295.0], [26.8, 5298.0], [26.9, 5302.0], [27.0, 5308.0], [27.1, 5312.0], [27.2, 5315.0], [27.3, 5318.0], [27.4, 5321.0], [27.5, 5322.0], [27.6, 5324.0], [27.7, 5327.0], [27.8, 5328.0], [27.9, 5330.0], [28.0, 5340.0], [28.1, 5341.0], [28.2, 5344.0], [28.3, 5347.0], [28.4, 5348.0], [28.5, 5350.0], [28.6, 5351.0], [28.7, 5354.0], [28.8, 5357.0], [28.9, 5361.0], [29.0, 5366.0], [29.1, 5369.0], [29.2, 5375.0], [29.3, 5378.0], [29.4, 5381.0], [29.5, 5383.0], [29.6, 5385.0], [29.7, 5394.0], [29.8, 5395.0], [29.9, 5402.0], [30.0, 5405.0], [30.1, 5406.0], [30.2, 5407.0], [30.3, 5410.0], [30.4, 5411.0], [30.5, 5415.0], [30.6, 5421.0], [30.7, 5424.0], [30.8, 5425.0], [30.9, 5431.0], [31.0, 5434.0], [31.1, 5438.0], [31.2, 5443.0], [31.3, 5446.0], [31.4, 5456.0], [31.5, 5461.0], [31.6, 5461.0], [31.7, 5462.0], [31.8, 5464.0], [31.9, 5465.0], [32.0, 5468.0], [32.1, 5468.0], [32.2, 5469.0], [32.3, 5474.0], [32.4, 5475.0], [32.5, 5479.0], [32.6, 5480.0], [32.7, 5485.0], [32.8, 5486.0], [32.9, 5486.0], [33.0, 5488.0], [33.1, 5493.0], [33.2, 5493.0], [33.3, 5497.0], [33.4, 5498.0], [33.5, 5501.0], [33.6, 5503.0], [33.7, 5504.0], [33.8, 5512.0], [33.9, 5519.0], [34.0, 5520.0], [34.1, 5521.0], [34.2, 5523.0], [34.3, 5524.0], [34.4, 5528.0], [34.5, 5532.0], [34.6, 5533.0], [34.7, 5535.0], [34.8, 5537.0], [34.9, 5542.0], [35.0, 5543.0], [35.1, 5544.0], [35.2, 5545.0], [35.3, 5548.0], [35.4, 5553.0], [35.5, 5555.0], [35.6, 5557.0], [35.7, 5558.0], [35.8, 5559.0], [35.9, 5560.0], [36.0, 5562.0], [36.1, 5566.0], [36.2, 5566.0], [36.3, 5568.0], [36.4, 5569.0], [36.5, 5572.0], [36.6, 5572.0], [36.7, 5574.0], [36.8, 5575.0], [36.9, 5580.0], [37.0, 5582.0], [37.1, 5587.0], [37.2, 5587.0], [37.3, 5588.0], [37.4, 5591.0], [37.5, 5594.0], [37.6, 5597.0], [37.7, 5599.0], [37.8, 5599.0], [37.9, 5600.0], [38.0, 5601.0], [38.1, 5604.0], [38.2, 5606.0], [38.3, 5609.0], [38.4, 5612.0], [38.5, 5613.0], [38.6, 5615.0], [38.7, 5616.0], [38.8, 5619.0], [38.9, 5620.0], [39.0, 5621.0], [39.1, 5623.0], [39.2, 5623.0], [39.3, 5627.0], [39.4, 5627.0], [39.5, 5630.0], [39.6, 5632.0], [39.7, 5637.0], [39.8, 5638.0], [39.9, 5638.0], [40.0, 5640.0], [40.1, 5640.0], [40.2, 5642.0], [40.3, 5646.0], [40.4, 5648.0], [40.5, 5649.0], [40.6, 5654.0], [40.7, 5655.0], [40.8, 5656.0], [40.9, 5657.0], [41.0, 5658.0], [41.1, 5660.0], [41.2, 5662.0], [41.3, 5662.0], [41.4, 5663.0], [41.5, 5665.0], [41.6, 5668.0], [41.7, 5669.0], [41.8, 5669.0], [41.9, 5670.0], [42.0, 5671.0], [42.1, 5671.0], [42.2, 5672.0], [42.3, 5673.0], [42.4, 5677.0], [42.5, 5677.0], [42.6, 5678.0], [42.7, 5679.0], [42.8, 5680.0], [42.9, 5680.0], [43.0, 5681.0], [43.1, 5682.0], [43.2, 5683.0], [43.3, 5686.0], [43.4, 5686.0], [43.5, 5686.0], [43.6, 5687.0], [43.7, 5688.0], [43.8, 5688.0], [43.9, 5690.0], [44.0, 5693.0], [44.1, 5694.0], [44.2, 5695.0], [44.3, 5696.0], [44.4, 5697.0], [44.5, 5698.0], [44.6, 5699.0], [44.7, 5699.0], [44.8, 5699.0], [44.9, 5700.0], [45.0, 5701.0], [45.1, 5703.0], [45.2, 5704.0], [45.3, 5705.0], [45.4, 5706.0], [45.5, 5707.0], [45.6, 5707.0], [45.7, 5709.0], [45.8, 5710.0], [45.9, 5714.0], [46.0, 5715.0], [46.1, 5716.0], [46.2, 5718.0], [46.3, 5718.0], [46.4, 5719.0], [46.5, 5720.0], [46.6, 5722.0], [46.7, 5722.0], [46.8, 5724.0], [46.9, 5725.0], [47.0, 5725.0], [47.1, 5726.0], [47.2, 5727.0], [47.3, 5728.0], [47.4, 5730.0], [47.5, 5732.0], [47.6, 5733.0], [47.7, 5736.0], [47.8, 5736.0], [47.9, 5738.0], [48.0, 5740.0], [48.1, 5740.0], [48.2, 5741.0], [48.3, 5742.0], [48.4, 5743.0], [48.5, 5744.0], [48.6, 5745.0], [48.7, 5746.0], [48.8, 5749.0], [48.9, 5750.0], [49.0, 5750.0], [49.1, 5751.0], [49.2, 5751.0], [49.3, 5752.0], [49.4, 5754.0], [49.5, 5754.0], [49.6, 5757.0], [49.7, 5757.0], [49.8, 5758.0], [49.9, 5758.0], [50.0, 5759.0], [50.1, 5760.0], [50.2, 5761.0], [50.3, 5764.0], [50.4, 5764.0], [50.5, 5766.0], [50.6, 5766.0], [50.7, 5767.0], [50.8, 5768.0], [50.9, 5769.0], [51.0, 5770.0], [51.1, 5771.0], [51.2, 5772.0], [51.3, 5773.0], [51.4, 5773.0], [51.5, 5775.0], [51.6, 5777.0], [51.7, 5781.0], [51.8, 5782.0], [51.9, 5782.0], [52.0, 5783.0], [52.1, 5784.0], [52.2, 5784.0], [52.3, 5785.0], [52.4, 5786.0], [52.5, 5786.0], [52.6, 5789.0], [52.7, 5790.0], [52.8, 5791.0], [52.9, 5792.0], [53.0, 5793.0], [53.1, 5796.0], [53.2, 5796.0], [53.3, 5797.0], [53.4, 5799.0], [53.5, 5801.0], [53.6, 5802.0], [53.7, 5803.0], [53.8, 5803.0], [53.9, 5803.0], [54.0, 5805.0], [54.1, 5805.0], [54.2, 5806.0], [54.3, 5808.0], [54.4, 5809.0], [54.5, 5811.0], [54.6, 5812.0], [54.7, 5812.0], [54.8, 5813.0], [54.9, 5814.0], [55.0, 5815.0], [55.1, 5817.0], [55.2, 5817.0], [55.3, 5818.0], [55.4, 5819.0], [55.5, 5820.0], [55.6, 5822.0], [55.7, 5824.0], [55.8, 5824.0], [55.9, 5825.0], [56.0, 5826.0], [56.1, 5826.0], [56.2, 5828.0], [56.3, 5830.0], [56.4, 5831.0], [56.5, 5833.0], [56.6, 5834.0], [56.7, 5834.0], [56.8, 5835.0], [56.9, 5836.0], [57.0, 5838.0], [57.1, 5838.0], [57.2, 5841.0], [57.3, 5841.0], [57.4, 5841.0], [57.5, 5843.0], [57.6, 5845.0], [57.7, 5846.0], [57.8, 5847.0], [57.9, 5848.0], [58.0, 5851.0], [58.1, 5852.0], [58.2, 5853.0], [58.3, 5853.0], [58.4, 5854.0], [58.5, 5854.0], [58.6, 5855.0], [58.7, 5856.0], [58.8, 5856.0], [58.9, 5857.0], [59.0, 5858.0], [59.1, 5862.0], [59.2, 5862.0], [59.3, 5865.0], [59.4, 5866.0], [59.5, 5867.0], [59.6, 5868.0], [59.7, 5869.0], [59.8, 5870.0], [59.9, 5871.0], [60.0, 5873.0], [60.1, 5874.0], [60.2, 5876.0], [60.3, 5878.0], [60.4, 5878.0], [60.5, 5878.0], [60.6, 5879.0], [60.7, 5882.0], [60.8, 5884.0], [60.9, 5885.0], [61.0, 5886.0], [61.1, 5886.0], [61.2, 5888.0], [61.3, 5890.0], [61.4, 5891.0], [61.5, 5891.0], [61.6, 5892.0], [61.7, 5894.0], [61.8, 5894.0], [61.9, 5895.0], [62.0, 5897.0], [62.1, 5898.0], [62.2, 5900.0], [62.3, 5901.0], [62.4, 5904.0], [62.5, 5907.0], [62.6, 5909.0], [62.7, 5911.0], [62.8, 5912.0], [62.9, 5913.0], [63.0, 5913.0], [63.1, 5915.0], [63.2, 5916.0], [63.3, 5917.0], [63.4, 5917.0], [63.5, 5919.0], [63.6, 5920.0], [63.7, 5922.0], [63.8, 5924.0], [63.9, 5925.0], [64.0, 5926.0], [64.1, 5927.0], [64.2, 5928.0], [64.3, 5931.0], [64.4, 5932.0], [64.5, 5935.0], [64.6, 5936.0], [64.7, 5937.0], [64.8, 5937.0], [64.9, 5939.0], [65.0, 5939.0], [65.1, 5941.0], [65.2, 5941.0], [65.3, 5942.0], [65.4, 5943.0], [65.5, 5944.0], [65.6, 5947.0], [65.7, 5950.0], [65.8, 5951.0], [65.9, 5951.0], [66.0, 5952.0], [66.1, 5953.0], [66.2, 5953.0], [66.3, 5955.0], [66.4, 5955.0], [66.5, 5957.0], [66.6, 5959.0], [66.7, 5960.0], [66.8, 5960.0], [66.9, 5962.0], [67.0, 5965.0], [67.1, 5966.0], [67.2, 5968.0], [67.3, 5968.0], [67.4, 5970.0], [67.5, 5972.0], [67.6, 5975.0], [67.7, 5977.0], [67.8, 5978.0], [67.9, 5979.0], [68.0, 5980.0], [68.1, 5981.0], [68.2, 5984.0], [68.3, 5985.0], [68.4, 5985.0], [68.5, 5987.0], [68.6, 5987.0], [68.7, 5991.0], [68.8, 5992.0], [68.9, 5995.0], [69.0, 5996.0], [69.1, 5997.0], [69.2, 5998.0], [69.3, 5999.0], [69.4, 5999.0], [69.5, 6001.0], [69.6, 6004.0], [69.7, 6005.0], [69.8, 6006.0], [69.9, 6007.0], [70.0, 6013.0], [70.1, 6013.0], [70.2, 6013.0], [70.3, 6014.0], [70.4, 6015.0], [70.5, 6016.0], [70.6, 6018.0], [70.7, 6019.0], [70.8, 6019.0], [70.9, 6024.0], [71.0, 6028.0], [71.1, 6029.0], [71.2, 6030.0], [71.3, 6032.0], [71.4, 6032.0], [71.5, 6034.0], [71.6, 6035.0], [71.7, 6035.0], [71.8, 6036.0], [71.9, 6038.0], [72.0, 6040.0], [72.1, 6042.0], [72.2, 6042.0], [72.3, 6043.0], [72.4, 6043.0], [72.5, 6044.0], [72.6, 6044.0], [72.7, 6046.0], [72.8, 6048.0], [72.9, 6049.0], [73.0, 6050.0], [73.1, 6050.0], [73.2, 6051.0], [73.3, 6054.0], [73.4, 6055.0], [73.5, 6056.0], [73.6, 6057.0], [73.7, 6058.0], [73.8, 6059.0], [73.9, 6060.0], [74.0, 6061.0], [74.1, 6063.0], [74.2, 6065.0], [74.3, 6066.0], [74.4, 6068.0], [74.5, 6069.0], [74.6, 6071.0], [74.7, 6072.0], [74.8, 6074.0], [74.9, 6077.0], [75.0, 6078.0], [75.1, 6078.0], [75.2, 6081.0], [75.3, 6083.0], [75.4, 6083.0], [75.5, 6085.0], [75.6, 6088.0], [75.7, 6089.0], [75.8, 6089.0], [75.9, 6090.0], [76.0, 6091.0], [76.1, 6093.0], [76.2, 6094.0], [76.3, 6096.0], [76.4, 6102.0], [76.5, 6103.0], [76.6, 6104.0], [76.7, 6107.0], [76.8, 6108.0], [76.9, 6108.0], [77.0, 6109.0], [77.1, 6110.0], [77.2, 6112.0], [77.3, 6112.0], [77.4, 6112.0], [77.5, 6112.0], [77.6, 6114.0], [77.7, 6115.0], [77.8, 6118.0], [77.9, 6119.0], [78.0, 6120.0], [78.1, 6121.0], [78.2, 6122.0], [78.3, 6123.0], [78.4, 6124.0], [78.5, 6124.0], [78.6, 6125.0], [78.7, 6125.0], [78.8, 6127.0], [78.9, 6128.0], [79.0, 6129.0], [79.1, 6131.0], [79.2, 6132.0], [79.3, 6135.0], [79.4, 6137.0], [79.5, 6139.0], [79.6, 6140.0], [79.7, 6142.0], [79.8, 6144.0], [79.9, 6145.0], [80.0, 6147.0], [80.1, 6149.0], [80.2, 6153.0], [80.3, 6154.0], [80.4, 6156.0], [80.5, 6157.0], [80.6, 6158.0], [80.7, 6159.0], [80.8, 6160.0], [80.9, 6163.0], [81.0, 6164.0], [81.1, 6166.0], [81.2, 6171.0], [81.3, 6173.0], [81.4, 6174.0], [81.5, 6175.0], [81.6, 6176.0], [81.7, 6178.0], [81.8, 6179.0], [81.9, 6179.0], [82.0, 6179.0], [82.1, 6181.0], [82.2, 6182.0], [82.3, 6185.0], [82.4, 6188.0], [82.5, 6190.0], [82.6, 6194.0], [82.7, 6194.0], [82.8, 6196.0], [82.9, 6197.0], [83.0, 6197.0], [83.1, 6198.0], [83.2, 6198.0], [83.3, 6200.0], [83.4, 6204.0], [83.5, 6207.0], [83.6, 6208.0], [83.7, 6209.0], [83.8, 6209.0], [83.9, 6211.0], [84.0, 6212.0], [84.1, 6215.0], [84.2, 6215.0], [84.3, 6217.0], [84.4, 6219.0], [84.5, 6221.0], [84.6, 6224.0], [84.7, 6225.0], [84.8, 6227.0], [84.9, 6228.0], [85.0, 6229.0], [85.1, 6231.0], [85.2, 6232.0], [85.3, 6232.0], [85.4, 6233.0], [85.5, 6234.0], [85.6, 6238.0], [85.7, 6240.0], [85.8, 6241.0], [85.9, 6241.0], [86.0, 6242.0], [86.1, 6243.0], [86.2, 6244.0], [86.3, 6246.0], [86.4, 6248.0], [86.5, 6249.0], [86.6, 6251.0], [86.7, 6252.0], [86.8, 6253.0], [86.9, 6254.0], [87.0, 6255.0], [87.1, 6257.0], [87.2, 6258.0], [87.3, 6262.0], [87.4, 6262.0], [87.5, 6264.0], [87.6, 6266.0], [87.7, 6268.0], [87.8, 6271.0], [87.9, 6272.0], [88.0, 6275.0], [88.1, 6276.0], [88.2, 6278.0], [88.3, 6281.0], [88.4, 6283.0], [88.5, 6287.0], [88.6, 6289.0], [88.7, 6292.0], [88.8, 6296.0], [88.9, 6297.0], [89.0, 6301.0], [89.1, 6306.0], [89.2, 6307.0], [89.3, 6308.0], [89.4, 6309.0], [89.5, 6310.0], [89.6, 6313.0], [89.7, 6317.0], [89.8, 6319.0], [89.9, 6322.0], [90.0, 6324.0], [90.1, 6327.0], [90.2, 6329.0], [90.3, 6332.0], [90.4, 6333.0], [90.5, 6339.0], [90.6, 6340.0], [90.7, 6343.0], [90.8, 6344.0], [90.9, 6347.0], [91.0, 6352.0], [91.1, 6352.0], [91.2, 6363.0], [91.3, 6364.0], [91.4, 6370.0], [91.5, 6372.0], [91.6, 6376.0], [91.7, 6378.0], [91.8, 6384.0], [91.9, 6388.0], [92.0, 6390.0], [92.1, 6393.0], [92.2, 6394.0], [92.3, 6395.0], [92.4, 6402.0], [92.5, 6408.0], [92.6, 6415.0], [92.7, 6417.0], [92.8, 6420.0], [92.9, 6425.0], [93.0, 6432.0], [93.1, 6438.0], [93.2, 6445.0], [93.3, 6453.0], [93.4, 6463.0], [93.5, 6466.0], [93.6, 6468.0], [93.7, 6469.0], [93.8, 6486.0], [93.9, 6488.0], [94.0, 6501.0], [94.1, 6512.0], [94.2, 6527.0], [94.3, 6535.0], [94.4, 6554.0], [94.5, 6576.0], [94.6, 6584.0], [94.7, 6595.0], [94.8, 6605.0], [94.9, 6624.0], [95.0, 6640.0], [95.1, 6657.0], [95.2, 6662.0], [95.3, 6675.0], [95.4, 6689.0], [95.5, 6722.0], [95.6, 6727.0], [95.7, 6772.0], [95.8, 6780.0], [95.9, 6787.0], [96.0, 6809.0], [96.1, 6841.0], [96.2, 6849.0], [96.3, 6870.0], [96.4, 6891.0], [96.5, 6912.0], [96.6, 6985.0], [96.7, 7022.0], [96.8, 7042.0], [96.9, 7075.0], [97.0, 7110.0], [97.1, 7192.0], [97.2, 7218.0], [97.3, 7233.0], [97.4, 7292.0], [97.5, 7515.0], [97.6, 7636.0], [97.7, 11531.0], [97.8, 11571.0], [97.9, 11583.0], [98.0, 11596.0], [98.1, 11603.0], [98.2, 11613.0], [98.3, 11634.0], [98.4, 11651.0], [98.5, 11742.0], [98.6, 11849.0], [98.7, 11862.0], [98.8, 11909.0], [98.9, 11955.0], [99.0, 12001.0], [99.1, 12130.0], [99.2, 12176.0], [99.3, 12221.0], [99.4, 12251.0], [99.5, 12273.0], [99.6, 12289.0], [99.7, 12354.0], [99.8, 12387.0], [99.9, 12422.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 273.0, "series": [{"data": [[0.0, 163.0], [100.0, 20.0], [200.0, 12.0], [300.0, 7.0], [400.0, 2.0], [500.0, 1.0], [600.0, 1.0], [1800.0, 1.0], [1900.0, 4.0], [2000.0, 2.0], [2100.0, 3.0], [2300.0, 17.0], [2200.0, 7.0], [2400.0, 13.0], [2500.0, 16.0], [2600.0, 9.0], [2800.0, 6.0], [2700.0, 8.0], [2900.0, 1.0], [3000.0, 3.0], [3100.0, 2.0], [3300.0, 10.0], [3200.0, 5.0], [3400.0, 5.0], [3500.0, 8.0], [3600.0, 3.0], [3700.0, 3.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 1.0], [4100.0, 7.0], [4200.0, 6.0], [4300.0, 3.0], [4500.0, 3.0], [4600.0, 3.0], [4400.0, 1.0], [4800.0, 2.0], [4700.0, 3.0], [4900.0, 3.0], [5000.0, 5.0], [5100.0, 5.0], [5300.0, 11.0], [5200.0, 7.0], [5400.0, 7.0], [5500.0, 8.0], [5600.0, 9.0], [5700.0, 13.0], [5800.0, 13.0], [6100.0, 13.0], [5900.0, 12.0], [6000.0, 7.0], [6200.0, 13.0], [6300.0, 3.0], [6400.0, 6.0], [6500.0, 3.0], [6600.0, 5.0], [6700.0, 10.0], [6800.0, 7.0], [6900.0, 4.0], [7100.0, 6.0], [7000.0, 8.0], [7300.0, 13.0], [7400.0, 13.0], [7200.0, 8.0], [7600.0, 25.0], [7500.0, 15.0], [7900.0, 100.0], [7800.0, 62.0], [7700.0, 38.0], [8000.0, 145.0], [8100.0, 189.0], [8200.0, 222.0], [8300.0, 198.0], [8500.0, 99.0], [8400.0, 161.0], [8700.0, 38.0], [8600.0, 65.0], [8800.0, 33.0], [9000.0, 14.0], [9100.0, 12.0], [8900.0, 27.0], [9200.0, 11.0], [9400.0, 6.0], [9300.0, 7.0], [9500.0, 1.0], [9700.0, 2.0], [10000.0, 3.0], [9800.0, 1.0], [10300.0, 1.0], [11600.0, 1.0], [12200.0, 1.0], [11900.0, 1.0], [12600.0, 2.0], [12300.0, 1.0], [12700.0, 1.0], [12500.0, 1.0], [13100.0, 1.0], [15100.0, 3.0], [15300.0, 2.0], [15200.0, 2.0], [15700.0, 6.0], [15800.0, 5.0], [15400.0, 1.0], [15500.0, 3.0], [15600.0, 2.0], [15900.0, 4.0], [16100.0, 3.0], [16000.0, 4.0], [16200.0, 3.0], [16300.0, 3.0], [16400.0, 1.0], [16600.0, 2.0], [16700.0, 3.0], [16500.0, 2.0], [16900.0, 1.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[0.0, 249.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 2.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 1.0], [1500.0, 5.0], [1600.0, 9.0], [1700.0, 13.0], [1800.0, 39.0], [1900.0, 47.0], [2000.0, 130.0], [2100.0, 216.0], [2200.0, 273.0], [2300.0, 235.0], [2400.0, 214.0], [2500.0, 175.0], [2600.0, 173.0], [2700.0, 92.0], [2800.0, 69.0], [2900.0, 19.0], [3000.0, 7.0], [3100.0, 6.0], [3200.0, 3.0], [3300.0, 1.0], [3400.0, 4.0], [3500.0, 7.0], [3600.0, 3.0], [3700.0, 6.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 7.0], [4100.0, 5.0], [4200.0, 5.0], [4300.0, 7.0], [4400.0, 1.0], [4500.0, 3.0], [6900.0, 1.0], [6700.0, 2.0], [6800.0, 1.0], [7000.0, 2.0], [7100.0, 2.0], [7200.0, 1.0], [7900.0, 1.0], [100.0, 18.0], [200.0, 4.0], [300.0, 4.0], [400.0, 4.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[0.0, 248.0], [600.0, 1.0], [700.0, 1.0], [800.0, 1.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 4.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 3.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 4.0], [2200.0, 6.0], [2300.0, 1.0], [2500.0, 1.0], [2600.0, 3.0], [2800.0, 7.0], [2900.0, 3.0], [3000.0, 1.0], [3100.0, 7.0], [3300.0, 9.0], [3200.0, 7.0], [3400.0, 12.0], [3500.0, 10.0], [3700.0, 3.0], [3600.0, 4.0], [3800.0, 7.0], [3900.0, 7.0], [4000.0, 9.0], [4100.0, 8.0], [4200.0, 8.0], [4300.0, 8.0], [4600.0, 4.0], [4500.0, 7.0], [4400.0, 7.0], [4800.0, 7.0], [4700.0, 7.0], [5000.0, 13.0], [4900.0, 7.0], [5100.0, 20.0], [5200.0, 46.0], [5300.0, 64.0], [5400.0, 77.0], [5500.0, 92.0], [5600.0, 148.0], [5700.0, 183.0], [5800.0, 184.0], [5900.0, 154.0], [6000.0, 147.0], [6100.0, 147.0], [6300.0, 73.0], [6200.0, 120.0], [6600.0, 15.0], [6400.0, 33.0], [6500.0, 17.0], [6700.0, 11.0], [6900.0, 3.0], [6800.0, 10.0], [7100.0, 4.0], [7000.0, 8.0], [7200.0, 6.0], [7400.0, 1.0], [7600.0, 1.0], [7500.0, 2.0], [11600.0, 10.0], [11700.0, 1.0], [11500.0, 7.0], [11400.0, 1.0], [12200.0, 7.0], [11900.0, 4.0], [12100.0, 5.0], [11800.0, 5.0], [12000.0, 2.0], [12300.0, 5.0], [12400.0, 3.0], [100.0, 23.0], [200.0, 11.0], [300.0, 1.0], [400.0, 4.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2721.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2721.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1529.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 46.87100893997444, "minX": 1.6164915E12, "maxY": 50.0, "series": [{"data": [[1.61649168E12, 50.0], [1.61649156E12, 50.0], [1.61649174E12, 50.0], [1.61649162E12, 50.0], [1.6164918E12, 46.87100893997444], [1.6164915E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164918E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1879.0, "minX": 1.0, "maxY": 8487.0, "series": [{"data": [[2.0, 2884.0], [3.0, 3351.0], [4.0, 2887.0], [5.0, 3375.0], [6.0, 3255.0], [7.0, 3507.0], [8.0, 3500.0], [9.0, 3494.0], [10.0, 3353.0], [11.0, 3479.0], [12.0, 3422.0], [13.0, 3946.0], [14.0, 4252.0], [15.0, 4716.0], [16.0, 4747.0], [17.0, 5243.0], [18.0, 7364.0], [19.0, 4521.0], [20.0, 4800.0], [21.0, 5523.0], [22.0, 8487.0], [23.0, 5728.0], [24.0, 7918.0], [25.0, 5221.0], [26.0, 7850.0], [27.0, 8400.0], [28.0, 8318.0], [29.0, 8256.0], [30.0, 4199.0], [31.0, 6484.0], [33.0, 2969.0], [32.0, 5535.0], [35.0, 6283.0], [34.0, 2489.0], [37.0, 6189.0], [36.0, 6083.0], [39.0, 6179.0], [38.0, 5670.0], [41.0, 6262.0], [40.0, 6293.0], [43.0, 7747.0], [42.0, 5959.0], [45.0, 7725.0], [44.0, 7793.0], [47.0, 7870.0], [46.0, 5121.0], [49.0, 7784.0], [48.0, 5624.0], [50.0, 7130.128081198639], [1.0, 2807.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[49.42162417374882, 7090.225212464581]], "isOverall": false, "label": "INSERT Test-Aggregated", "isController": true}, {"data": [[33.0, 2508.0], [34.0, 2343.0], [43.0, 1919.0], [45.0, 2035.0], [44.0, 2081.0], [47.0, 2080.0], [46.0, 2074.0], [49.0, 1926.0], [50.0, 2114.521507974871], [18.0, 1879.0], [22.0, 2066.0], [24.0, 2032.0], [26.0, 1975.0], [27.0, 1949.0], [28.0, 2007.0], [29.0, 2316.0], [30.0, 2376.0], [31.0, 2359.0]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[49.8686481303931, 2114.5110258868676]], "isOverall": false, "label": "(POST) INSERT New User-Aggregated", "isController": false}, {"data": [[32.0, 5535.0], [2.0, 2884.0], [35.0, 6283.0], [37.0, 6188.0], [36.0, 6083.0], [39.0, 6179.0], [38.0, 5670.0], [41.0, 6261.0], [40.0, 6292.0], [42.0, 5959.0], [48.0, 5623.0], [3.0, 3351.0], [50.0, 5013.430968360506], [4.0, 2887.0], [5.0, 3374.0], [6.0, 3255.0], [7.0, 3507.0], [8.0, 3500.0], [9.0, 3494.0], [10.0, 3353.0], [11.0, 3479.0], [12.0, 3422.0], [13.0, 3946.0], [14.0, 4252.0], [15.0, 4716.0], [16.0, 4747.0], [1.0, 2806.0], [17.0, 5243.0], [19.0, 4520.0], [20.0, 4800.0], [21.0, 5522.0], [23.0, 5728.0], [25.0, 5221.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}, {"data": [[49.550991501416455, 5007.600094428712]], "isOverall": false, "label": "(GET) Registration Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 522939.35, "minX": 1.6164915E12, "maxY": 8160508.083333333, "series": [{"data": [[1.61649168E12, 7990209.6], [1.61649156E12, 7686502.7], [1.61649174E12, 8160508.083333333], [1.61649162E12, 8116588.133333334], [1.6164918E12, 6482965.233333333], [1.6164915E12, 3707365.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61649168E12, 2217246.6], [1.61649156E12, 2212145.533333333], [1.61649174E12, 2292661.7666666666], [1.61649162E12, 2263171.3666666667], [1.6164918E12, 1678955.9333333333], [1.6164915E12, 522939.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164918E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1747.718052738337, "minX": 1.6164915E12, "maxY": 13140.7, "series": [{"data": [[1.61649168E12, 6003.196754563894], [1.61649156E12, 7985.9105263157935], [1.61649174E12, 7164.167848699767], [1.61649162E12, 6292.834033613441], [1.6164918E12, 7526.065217391307], [1.6164915E12, 13140.7]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61649168E12, 1747.718052738337], [1.61649156E12, 2460.0078947368434], [1.61649174E12, 2164.380614657213], [1.61649162E12, 1913.336134453781], [1.6164918E12, 2215.8401639344256], [1.6164915E12, 3535.657142857143]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61649168E12, 4222.678068410464], [1.61649156E12, 5569.135734072026], [1.61649174E12, 5038.738609112707], [1.61649162E12, 4395.256249999999], [1.6164918E12, 5539.8897338403], [1.6164915E12, 8291.0]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164918E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6164915E12, "maxY": 1620.5571428571423, "series": [{"data": [[1.61649168E12, 0.0], [1.61649156E12, 0.0], [1.61649174E12, 0.0], [1.61649162E12, 0.0], [1.6164918E12, 0.0], [1.6164915E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61649168E12, 858.7363083164305], [1.61649156E12, 1243.9131578947374], [1.61649174E12, 1061.2222222222226], [1.61649162E12, 951.6680672268905], [1.6164918E12, 1129.7254098360668], [1.6164915E12, 1620.5571428571423]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61649168E12, 633.0402414486922], [1.61649156E12, 831.969529085873], [1.61649174E12, 730.5803357314151], [1.61649162E12, 657.9958333333327], [1.6164918E12, 832.6692015209128], [1.6164915E12, 178.12000000000003]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164918E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6164915E12, "maxY": 26.057142857142868, "series": [{"data": [[1.61649168E12, 0.0], [1.61649156E12, 0.0], [1.61649174E12, 0.0], [1.61649162E12, 0.0], [1.6164918E12, 0.0], [1.6164915E12, 0.0]], "isOverall": false, "label": "INSERT Test", "isController": true}, {"data": [[1.61649168E12, 14.858012170385402], [1.61649156E12, 7.465789473684213], [1.61649174E12, 16.026004728132396], [1.61649162E12, 17.048319327731114], [1.6164918E12, 11.495901639344263], [1.6164915E12, 26.057142857142868]], "isOverall": false, "label": "(POST) INSERT New User", "isController": false}, {"data": [[1.61649168E12, 14.877263581488938], [1.61649156E12, 7.9279778393351785], [1.61649174E12, 15.410071942446052], [1.61649162E12, 14.331249999999994], [1.6164918E12, 10.76425855513308], [1.6164915E12, 12.039999999999996]], "isOverall": false, "label": "(GET) Registration Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164918E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1308.0, "minX": 1.6164915E12, "maxY": 12436.0, "series": [{"data": [[1.61649168E12, 7101.0], [1.61649156E12, 7118.0], [1.61649174E12, 7100.0], [1.61649162E12, 7282.0], [1.6164918E12, 7071.0], [1.6164915E12, 12436.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61649168E12, 1350.0], [1.61649156E12, 1308.0], [1.61649174E12, 1545.0], [1.61649162E12, 1592.0], [1.6164918E12, 1709.0], [1.6164915E12, 2086.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61649168E12, 6115.6], [1.61649156E12, 6229.5], [1.61649174E12, 6095.0], [1.61649162E12, 6161.3], [1.6164918E12, 6126.2], [1.6164915E12, 12169.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61649168E12, 12151.400000000001], [1.61649156E12, 12316.550000000001], [1.61649174E12, 11958.699999999997], [1.61649162E12, 12251.11], [1.6164918E12, 11866.159999999996], [1.6164915E12, 12427.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61649168E12, 6319.699999999999], [1.61649156E12, 11602.5], [1.61649174E12, 6276.5], [1.61649162E12, 6433.5], [1.6164918E12, 6288.599999999999], [1.6164915E12, 12304.949999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164918E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 1000.0, "maxY": 5479.0, "series": [{"data": [[3000.0, 5479.0], [1000.0, 2672.0], [2000.0, 3422.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3000.0, 8.0], [6000.0, 11.5], [1000.0, 3342.5], [2000.0, 995.0], [4000.0, 10.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 6000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 1090.0, "series": [{"data": [[3000.0, 775.0], [1000.0, 1090.0], [2000.0, 872.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3000.0, 0.0], [6000.0, 0.0], [1000.0, 722.0], [2000.0, 0.0], [4000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 6000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.6666666666666665, "minX": 1.6164915E12, "maxY": 16.5, "series": [{"data": [[1.61649168E12, 16.5], [1.61649156E12, 12.35], [1.61649174E12, 14.0], [1.61649162E12, 15.933333333333334], [1.6164918E12, 8.45], [1.6164915E12, 3.6666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164918E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.6164915E12, "maxY": 12.666666666666666, "series": [{"data": [[1.61649168E12, 12.35], [1.61649156E12, 11.983333333333333], [1.61649174E12, 12.666666666666666], [1.61649162E12, 12.616666666666667], [1.6164918E12, 8.9], [1.6164915E12, 2.8333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61649168E12, 4.15], [1.61649156E12, 0.36666666666666664], [1.61649174E12, 1.3333333333333333], [1.61649162E12, 3.316666666666667], [1.6164918E12, 0.38333333333333336]], "isOverall": false, "label": "Non HTTP response code: java.net.NoRouteToHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6164918E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6164915E12, "maxY": 6.016666666666667, "series": [{"data": [[1.61649168E12, 2.4833333333333334], [1.61649156E12, 5.416666666666667], [1.61649174E12, 2.55], [1.61649162E12, 2.183333333333333], [1.6164918E12, 3.0], [1.6164915E12, 1.15]], "isOverall": false, "label": "INSERT Test-success", "isController": true}, {"data": [[1.61649168E12, 5.733333333333333], [1.61649156E12, 0.9166666666666666], [1.61649174E12, 4.5], [1.61649162E12, 5.75], [1.6164918E12, 1.6], [1.6164915E12, 0.016666666666666666]], "isOverall": false, "label": "INSERT Test-failure", "isController": true}, {"data": [[1.61649168E12, 3.0833333333333335], [1.61649156E12, 0.31666666666666665], [1.61649174E12, 1.5], [1.61649162E12, 2.3333333333333335], [1.6164918E12, 0.48333333333333334]], "isOverall": false, "label": "(POST) INSERT New User-failure", "isController": false}, {"data": [[1.61649168E12, 3.0166666666666666], [1.61649156E12, 5.05], [1.61649174E12, 2.9833333333333334], [1.61649162E12, 2.5], [1.6164918E12, 2.966666666666667], [1.6164915E12, 1.6333333333333333]], "isOverall": false, "label": "(GET) Registration Page-success", "isController": false}, {"data": [[1.61649168E12, 5.133333333333334], [1.61649156E12, 6.016666666666667], [1.61649174E12, 5.55], [1.61649162E12, 5.6], [1.6164918E12, 3.5833333333333335], [1.6164915E12, 1.1666666666666667]], "isOverall": false, "label": "(POST) INSERT New User-success", "isController": false}, {"data": [[1.61649168E12, 5.266666666666667], [1.61649156E12, 0.9666666666666667], [1.61649174E12, 3.966666666666667], [1.61649162E12, 5.5], [1.6164918E12, 1.4166666666666667], [1.6164915E12, 0.03333333333333333]], "isOverall": false, "label": "(GET) Registration Page-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164918E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6164915E12, "maxY": 16.483333333333334, "series": [{"data": [[1.61649168E12, 10.633333333333333], [1.61649156E12, 16.483333333333334], [1.61649174E12, 11.083333333333334], [1.61649162E12, 10.283333333333333], [1.6164918E12, 9.55], [1.6164915E12, 3.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61649168E12, 14.083333333333334], [1.61649156E12, 2.2], [1.61649174E12, 9.966666666666667], [1.61649162E12, 13.583333333333334], [1.6164918E12, 3.5], [1.6164915E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6164918E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

