/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2779.0, "minX": 0.0, "maxY": 52185.0, "series": [{"data": [[0.0, 3229.0], [0.1, 3484.0], [0.2, 3620.0], [0.3, 4436.0], [0.4, 4497.0], [0.5, 4507.0], [0.6, 4523.0], [0.7, 4533.0], [0.8, 4544.0], [0.9, 4552.0], [1.0, 4571.0], [1.1, 4584.0], [1.2, 4600.0], [1.3, 7842.0], [1.4, 7889.0], [1.5, 7978.0], [1.6, 8010.0], [1.7, 8012.0], [1.8, 8088.0], [1.9, 8163.0], [2.0, 8295.0], [2.1, 8335.0], [2.2, 8655.0], [2.3, 8661.0], [2.4, 8780.0], [2.5, 8801.0], [2.6, 8807.0], [2.7, 8817.0], [2.8, 8819.0], [2.9, 8832.0], [3.0, 8833.0], [3.1, 8834.0], [3.2, 8836.0], [3.3, 8839.0], [3.4, 8847.0], [3.5, 8851.0], [3.6, 8853.0], [3.7, 8854.0], [3.8, 8866.0], [3.9, 8875.0], [4.0, 8881.0], [4.1, 8886.0], [4.2, 8901.0], [4.3, 8904.0], [4.4, 8905.0], [4.5, 8906.0], [4.6, 8908.0], [4.7, 8909.0], [4.8, 8910.0], [4.9, 8910.0], [5.0, 8919.0], [5.1, 8919.0], [5.2, 8919.0], [5.3, 8920.0], [5.4, 8923.0], [5.5, 8927.0], [5.6, 8927.0], [5.7, 8928.0], [5.8, 8930.0], [5.9, 8939.0], [6.0, 8939.0], [6.1, 8940.0], [6.2, 8940.0], [6.3, 8941.0], [6.4, 8943.0], [6.5, 8944.0], [6.6, 8944.0], [6.7, 8946.0], [6.8, 8949.0], [6.9, 8950.0], [7.0, 8951.0], [7.1, 8951.0], [7.2, 8953.0], [7.3, 8955.0], [7.4, 8955.0], [7.5, 8956.0], [7.6, 8957.0], [7.7, 8958.0], [7.8, 8959.0], [7.9, 8960.0], [8.0, 8960.0], [8.1, 8960.0], [8.2, 8963.0], [8.3, 8965.0], [8.4, 8966.0], [8.5, 8968.0], [8.6, 8968.0], [8.7, 8972.0], [8.8, 8972.0], [8.9, 8973.0], [9.0, 8974.0], [9.1, 8975.0], [9.2, 8977.0], [9.3, 8978.0], [9.4, 8978.0], [9.5, 8980.0], [9.6, 8980.0], [9.7, 8981.0], [9.8, 8981.0], [9.9, 8983.0], [10.0, 8984.0], [10.1, 8984.0], [10.2, 8985.0], [10.3, 8985.0], [10.4, 8985.0], [10.5, 8985.0], [10.6, 8986.0], [10.7, 8986.0], [10.8, 8987.0], [10.9, 8987.0], [11.0, 8987.0], [11.1, 8988.0], [11.2, 8988.0], [11.3, 8990.0], [11.4, 8991.0], [11.5, 8992.0], [11.6, 8993.0], [11.7, 8993.0], [11.8, 8994.0], [11.9, 8995.0], [12.0, 8995.0], [12.1, 8995.0], [12.2, 8995.0], [12.3, 8996.0], [12.4, 8996.0], [12.5, 8997.0], [12.6, 8997.0], [12.7, 8998.0], [12.8, 8998.0], [12.9, 8998.0], [13.0, 8998.0], [13.1, 9000.0], [13.2, 9000.0], [13.3, 9000.0], [13.4, 9001.0], [13.5, 9002.0], [13.6, 9003.0], [13.7, 9003.0], [13.8, 9005.0], [13.9, 9006.0], [14.0, 9007.0], [14.1, 9010.0], [14.2, 9011.0], [14.3, 9012.0], [14.4, 9012.0], [14.5, 9012.0], [14.6, 9013.0], [14.7, 9013.0], [14.8, 9014.0], [14.9, 9014.0], [15.0, 9015.0], [15.1, 9016.0], [15.2, 9016.0], [15.3, 9016.0], [15.4, 9018.0], [15.5, 9018.0], [15.6, 9018.0], [15.7, 9019.0], [15.8, 9019.0], [15.9, 9019.0], [16.0, 9020.0], [16.1, 9022.0], [16.2, 9022.0], [16.3, 9022.0], [16.4, 9022.0], [16.5, 9023.0], [16.6, 9023.0], [16.7, 9024.0], [16.8, 9025.0], [16.9, 9027.0], [17.0, 9027.0], [17.1, 9028.0], [17.2, 9029.0], [17.3, 9030.0], [17.4, 9031.0], [17.5, 9031.0], [17.6, 9031.0], [17.7, 9031.0], [17.8, 9033.0], [17.9, 9033.0], [18.0, 9033.0], [18.1, 9034.0], [18.2, 9035.0], [18.3, 9035.0], [18.4, 9038.0], [18.5, 9038.0], [18.6, 9039.0], [18.7, 9040.0], [18.8, 9040.0], [18.9, 9041.0], [19.0, 9041.0], [19.1, 9042.0], [19.2, 9042.0], [19.3, 9044.0], [19.4, 9044.0], [19.5, 9044.0], [19.6, 9044.0], [19.7, 9044.0], [19.8, 9047.0], [19.9, 9047.0], [20.0, 9048.0], [20.1, 9048.0], [20.2, 9049.0], [20.3, 9049.0], [20.4, 9049.0], [20.5, 9049.0], [20.6, 9050.0], [20.7, 9050.0], [20.8, 9050.0], [20.9, 9050.0], [21.0, 9051.0], [21.1, 9051.0], [21.2, 9051.0], [21.3, 9051.0], [21.4, 9052.0], [21.5, 9052.0], [21.6, 9053.0], [21.7, 9053.0], [21.8, 9053.0], [21.9, 9054.0], [22.0, 9055.0], [22.1, 9055.0], [22.2, 9055.0], [22.3, 9056.0], [22.4, 9057.0], [22.5, 9057.0], [22.6, 9058.0], [22.7, 9058.0], [22.8, 9058.0], [22.9, 9058.0], [23.0, 9058.0], [23.1, 9059.0], [23.2, 9060.0], [23.3, 9060.0], [23.4, 9060.0], [23.5, 9060.0], [23.6, 9061.0], [23.7, 9062.0], [23.8, 9062.0], [23.9, 9063.0], [24.0, 9063.0], [24.1, 9063.0], [24.2, 9064.0], [24.3, 9064.0], [24.4, 9065.0], [24.5, 9065.0], [24.6, 9066.0], [24.7, 9066.0], [24.8, 9067.0], [24.9, 9067.0], [25.0, 9068.0], [25.1, 9068.0], [25.2, 9069.0], [25.3, 9070.0], [25.4, 9070.0], [25.5, 9070.0], [25.6, 9071.0], [25.7, 9071.0], [25.8, 9071.0], [25.9, 9071.0], [26.0, 9072.0], [26.1, 9072.0], [26.2, 9072.0], [26.3, 9073.0], [26.4, 9073.0], [26.5, 9073.0], [26.6, 9073.0], [26.7, 9074.0], [26.8, 9074.0], [26.9, 9074.0], [27.0, 9075.0], [27.1, 9075.0], [27.2, 9075.0], [27.3, 9075.0], [27.4, 9076.0], [27.5, 9076.0], [27.6, 9077.0], [27.7, 9077.0], [27.8, 9078.0], [27.9, 9079.0], [28.0, 9082.0], [28.1, 9083.0], [28.2, 9083.0], [28.3, 9083.0], [28.4, 9083.0], [28.5, 9084.0], [28.6, 9084.0], [28.7, 9084.0], [28.8, 9085.0], [28.9, 9086.0], [29.0, 9086.0], [29.1, 9086.0], [29.2, 9086.0], [29.3, 9087.0], [29.4, 9087.0], [29.5, 9087.0], [29.6, 9089.0], [29.7, 9090.0], [29.8, 9090.0], [29.9, 9090.0], [30.0, 9091.0], [30.1, 9091.0], [30.2, 9092.0], [30.3, 9093.0], [30.4, 9093.0], [30.5, 9094.0], [30.6, 9094.0], [30.7, 9095.0], [30.8, 9096.0], [30.9, 9096.0], [31.0, 9096.0], [31.1, 9096.0], [31.2, 9097.0], [31.3, 9097.0], [31.4, 9097.0], [31.5, 9098.0], [31.6, 9098.0], [31.7, 9098.0], [31.8, 9100.0], [31.9, 9101.0], [32.0, 9101.0], [32.1, 9102.0], [32.2, 9102.0], [32.3, 9104.0], [32.4, 9104.0], [32.5, 9104.0], [32.6, 9105.0], [32.7, 9105.0], [32.8, 9106.0], [32.9, 9107.0], [33.0, 9107.0], [33.1, 9108.0], [33.2, 9109.0], [33.3, 9109.0], [33.4, 9111.0], [33.5, 9111.0], [33.6, 9111.0], [33.7, 9112.0], [33.8, 9113.0], [33.9, 9113.0], [34.0, 9114.0], [34.1, 9114.0], [34.2, 9114.0], [34.3, 9116.0], [34.4, 9117.0], [34.5, 9117.0], [34.6, 9117.0], [34.7, 9118.0], [34.8, 9118.0], [34.9, 9118.0], [35.0, 9118.0], [35.1, 9120.0], [35.2, 9120.0], [35.3, 9120.0], [35.4, 9120.0], [35.5, 9121.0], [35.6, 9122.0], [35.7, 9122.0], [35.8, 9122.0], [35.9, 9122.0], [36.0, 9123.0], [36.1, 9124.0], [36.2, 9124.0], [36.3, 9125.0], [36.4, 9127.0], [36.5, 9127.0], [36.6, 9128.0], [36.7, 9129.0], [36.8, 9129.0], [36.9, 9129.0], [37.0, 9130.0], [37.1, 9131.0], [37.2, 9131.0], [37.3, 9132.0], [37.4, 9132.0], [37.5, 9132.0], [37.6, 9132.0], [37.7, 9132.0], [37.8, 9132.0], [37.9, 9133.0], [38.0, 9134.0], [38.1, 9134.0], [38.2, 9134.0], [38.3, 9134.0], [38.4, 9135.0], [38.5, 9135.0], [38.6, 9135.0], [38.7, 9135.0], [38.8, 9138.0], [38.9, 9138.0], [39.0, 9139.0], [39.1, 9139.0], [39.2, 9139.0], [39.3, 9139.0], [39.4, 9139.0], [39.5, 9140.0], [39.6, 9141.0], [39.7, 9141.0], [39.8, 9142.0], [39.9, 9142.0], [40.0, 9142.0], [40.1, 9142.0], [40.2, 9143.0], [40.3, 9144.0], [40.4, 9144.0], [40.5, 9144.0], [40.6, 9145.0], [40.7, 9145.0], [40.8, 9146.0], [40.9, 9146.0], [41.0, 9147.0], [41.1, 9147.0], [41.2, 9148.0], [41.3, 9148.0], [41.4, 9149.0], [41.5, 9149.0], [41.6, 9149.0], [41.7, 9149.0], [41.8, 9149.0], [41.9, 9150.0], [42.0, 9151.0], [42.1, 9151.0], [42.2, 9151.0], [42.3, 9151.0], [42.4, 9153.0], [42.5, 9153.0], [42.6, 9153.0], [42.7, 9154.0], [42.8, 9154.0], [42.9, 9155.0], [43.0, 9155.0], [43.1, 9157.0], [43.2, 9160.0], [43.3, 9160.0], [43.4, 9162.0], [43.5, 9163.0], [43.6, 9163.0], [43.7, 9164.0], [43.8, 9165.0], [43.9, 9165.0], [44.0, 9165.0], [44.1, 9165.0], [44.2, 9166.0], [44.3, 9168.0], [44.4, 9168.0], [44.5, 9169.0], [44.6, 9170.0], [44.7, 9171.0], [44.8, 9171.0], [44.9, 9171.0], [45.0, 9172.0], [45.1, 9173.0], [45.2, 9174.0], [45.3, 9174.0], [45.4, 9175.0], [45.5, 9176.0], [45.6, 9179.0], [45.7, 9180.0], [45.8, 9181.0], [45.9, 9182.0], [46.0, 9183.0], [46.1, 9183.0], [46.2, 9184.0], [46.3, 9185.0], [46.4, 9186.0], [46.5, 9187.0], [46.6, 9187.0], [46.7, 9188.0], [46.8, 9189.0], [46.9, 9190.0], [47.0, 9190.0], [47.1, 9192.0], [47.2, 9192.0], [47.3, 9194.0], [47.4, 9195.0], [47.5, 9195.0], [47.6, 9195.0], [47.7, 9195.0], [47.8, 9195.0], [47.9, 9196.0], [48.0, 9200.0], [48.1, 9201.0], [48.2, 9202.0], [48.3, 9202.0], [48.4, 9203.0], [48.5, 9205.0], [48.6, 9206.0], [48.7, 9206.0], [48.8, 9206.0], [48.9, 9209.0], [49.0, 9209.0], [49.1, 9210.0], [49.2, 9212.0], [49.3, 9213.0], [49.4, 9213.0], [49.5, 9213.0], [49.6, 9214.0], [49.7, 9215.0], [49.8, 9215.0], [49.9, 9216.0], [50.0, 9216.0], [50.1, 9216.0], [50.2, 9218.0], [50.3, 9219.0], [50.4, 9221.0], [50.5, 9222.0], [50.6, 9223.0], [50.7, 9224.0], [50.8, 9224.0], [50.9, 9225.0], [51.0, 9226.0], [51.1, 9227.0], [51.2, 9228.0], [51.3, 9228.0], [51.4, 9229.0], [51.5, 9230.0], [51.6, 9230.0], [51.7, 9232.0], [51.8, 9232.0], [51.9, 9232.0], [52.0, 9232.0], [52.1, 9233.0], [52.2, 9233.0], [52.3, 9234.0], [52.4, 9235.0], [52.5, 9236.0], [52.6, 9238.0], [52.7, 9239.0], [52.8, 9243.0], [52.9, 9243.0], [53.0, 9243.0], [53.1, 9243.0], [53.2, 9244.0], [53.3, 9245.0], [53.4, 9245.0], [53.5, 9246.0], [53.6, 9246.0], [53.7, 9247.0], [53.8, 9248.0], [53.9, 9251.0], [54.0, 9252.0], [54.1, 9253.0], [54.2, 9255.0], [54.3, 9257.0], [54.4, 9259.0], [54.5, 9263.0], [54.6, 9263.0], [54.7, 9264.0], [54.8, 9264.0], [54.9, 9267.0], [55.0, 9271.0], [55.1, 9273.0], [55.2, 9276.0], [55.3, 9277.0], [55.4, 9278.0], [55.5, 9279.0], [55.6, 9281.0], [55.7, 9281.0], [55.8, 9283.0], [55.9, 9283.0], [56.0, 9286.0], [56.1, 9292.0], [56.2, 9298.0], [56.3, 9303.0], [56.4, 9304.0], [56.5, 9304.0], [56.6, 9308.0], [56.7, 9312.0], [56.8, 9317.0], [56.9, 9319.0], [57.0, 9322.0], [57.1, 9328.0], [57.2, 9331.0], [57.3, 9346.0], [57.4, 9348.0], [57.5, 9351.0], [57.6, 9357.0], [57.7, 9374.0], [57.8, 9378.0], [57.9, 9381.0], [58.0, 9383.0], [58.1, 9394.0], [58.2, 9404.0], [58.3, 9411.0], [58.4, 9429.0], [58.5, 9434.0], [58.6, 9440.0], [58.7, 9529.0], [58.8, 9535.0], [58.9, 9561.0], [59.0, 9582.0], [59.1, 9600.0], [59.2, 9614.0], [59.3, 9625.0], [59.4, 9627.0], [59.5, 9627.0], [59.6, 9627.0], [59.7, 9662.0], [59.8, 9673.0], [59.9, 9715.0], [60.0, 9722.0], [60.1, 9762.0], [60.2, 9766.0], [60.3, 9770.0], [60.4, 9770.0], [60.5, 9771.0], [60.6, 9800.0], [60.7, 9800.0], [60.8, 9805.0], [60.9, 9827.0], [61.0, 9843.0], [61.1, 9846.0], [61.2, 9905.0], [61.3, 9909.0], [61.4, 9936.0], [61.5, 9946.0], [61.6, 10005.0], [61.7, 10030.0], [61.8, 10031.0], [61.9, 10078.0], [62.0, 10097.0], [62.1, 10150.0], [62.2, 10214.0], [62.3, 10245.0], [62.4, 10338.0], [62.5, 10490.0], [62.6, 10555.0], [62.7, 10606.0], [62.8, 10634.0], [62.9, 10650.0], [63.0, 10733.0], [63.1, 10768.0], [63.2, 10785.0], [63.3, 10789.0], [63.4, 10801.0], [63.5, 10806.0], [63.6, 10839.0], [63.7, 10876.0], [63.8, 10877.0], [63.9, 10886.0], [64.0, 10931.0], [64.1, 10958.0], [64.2, 11012.0], [64.3, 11240.0], [64.4, 11296.0], [64.5, 11343.0], [64.6, 11344.0], [64.7, 11421.0], [64.8, 11435.0], [64.9, 11449.0], [65.0, 11476.0], [65.1, 11480.0], [65.2, 11492.0], [65.3, 11512.0], [65.4, 11536.0], [65.5, 11546.0], [65.6, 11548.0], [65.7, 11558.0], [65.8, 11569.0], [65.9, 11605.0], [66.0, 11623.0], [66.1, 11670.0], [66.2, 11841.0], [66.3, 11889.0], [66.4, 11916.0], [66.5, 11931.0], [66.6, 11950.0], [66.7, 12027.0], [66.8, 12092.0], [66.9, 12101.0], [67.0, 12119.0], [67.1, 12126.0], [67.2, 12147.0], [67.3, 12148.0], [67.4, 12160.0], [67.5, 12200.0], [67.6, 12206.0], [67.7, 12213.0], [67.8, 12280.0], [67.9, 12295.0], [68.0, 12298.0], [68.1, 12324.0], [68.2, 12330.0], [68.3, 12368.0], [68.4, 12403.0], [68.5, 12409.0], [68.6, 12416.0], [68.7, 12417.0], [68.8, 12424.0], [68.9, 12430.0], [69.0, 12436.0], [69.1, 12445.0], [69.2, 12451.0], [69.3, 12491.0], [69.4, 12494.0], [69.5, 12514.0], [69.6, 12525.0], [69.7, 12531.0], [69.8, 12600.0], [69.9, 12602.0], [70.0, 12613.0], [70.1, 12636.0], [70.2, 12684.0], [70.3, 12704.0], [70.4, 12715.0], [70.5, 12722.0], [70.6, 12746.0], [70.7, 12759.0], [70.8, 12774.0], [70.9, 12777.0], [71.0, 12779.0], [71.1, 12825.0], [71.2, 12899.0], [71.3, 12900.0], [71.4, 12900.0], [71.5, 12905.0], [71.6, 12936.0], [71.7, 12968.0], [71.8, 12968.0], [71.9, 12970.0], [72.0, 12978.0], [72.1, 12988.0], [72.2, 13020.0], [72.3, 13037.0], [72.4, 13040.0], [72.5, 13044.0], [72.6, 13049.0], [72.7, 13060.0], [72.8, 13069.0], [72.9, 13113.0], [73.0, 13132.0], [73.1, 13147.0], [73.2, 13163.0], [73.3, 13175.0], [73.4, 13216.0], [73.5, 13216.0], [73.6, 13288.0], [73.7, 13289.0], [73.8, 13329.0], [73.9, 13336.0], [74.0, 13342.0], [74.1, 13382.0], [74.2, 13408.0], [74.3, 13487.0], [74.4, 13495.0], [74.5, 13515.0], [74.6, 13569.0], [74.7, 13580.0], [74.8, 13593.0], [74.9, 13639.0], [75.0, 13656.0], [75.1, 13677.0], [75.2, 13684.0], [75.3, 13686.0], [75.4, 13686.0], [75.5, 13725.0], [75.6, 13731.0], [75.7, 13750.0], [75.8, 13776.0], [75.9, 13781.0], [76.0, 13789.0], [76.1, 13806.0], [76.2, 13810.0], [76.3, 13824.0], [76.4, 13827.0], [76.5, 13851.0], [76.6, 13856.0], [76.7, 13857.0], [76.8, 13861.0], [76.9, 13870.0], [77.0, 13901.0], [77.1, 13911.0], [77.2, 13931.0], [77.3, 13937.0], [77.4, 13939.0], [77.5, 13945.0], [77.6, 13961.0], [77.7, 13965.0], [77.8, 13968.0], [77.9, 14016.0], [78.0, 14032.0], [78.1, 14049.0], [78.2, 14058.0], [78.3, 14067.0], [78.4, 14133.0], [78.5, 14215.0], [78.6, 14222.0], [78.7, 14224.0], [78.8, 14255.0], [78.9, 14362.0], [79.0, 14411.0], [79.1, 14527.0], [79.2, 14546.0], [79.3, 14554.0], [79.4, 14655.0], [79.5, 14681.0], [79.6, 14698.0], [79.7, 14710.0], [79.8, 14718.0], [79.9, 14739.0], [80.0, 14759.0], [80.1, 14773.0], [80.2, 14774.0], [80.3, 14830.0], [80.4, 14832.0], [80.5, 14851.0], [80.6, 14853.0], [80.7, 14865.0], [80.8, 14879.0], [80.9, 14885.0], [81.0, 14906.0], [81.1, 14920.0], [81.2, 14934.0], [81.3, 14945.0], [81.4, 14961.0], [81.5, 14981.0], [81.6, 14992.0], [81.7, 15006.0], [81.8, 15036.0], [81.9, 15040.0], [82.0, 15054.0], [82.1, 15090.0], [82.2, 15110.0], [82.3, 15129.0], [82.4, 15158.0], [82.5, 15160.0], [82.6, 15197.0], [82.7, 15225.0], [82.8, 15249.0], [82.9, 15261.0], [83.0, 15467.0], [83.1, 15802.0], [83.2, 15988.0], [83.3, 16003.0], [83.4, 16095.0], [83.5, 16118.0], [83.6, 16124.0], [83.7, 16220.0], [83.8, 16236.0], [83.9, 16276.0], [84.0, 16281.0], [84.1, 16287.0], [84.2, 16292.0], [84.3, 16299.0], [84.4, 16302.0], [84.5, 16333.0], [84.6, 16359.0], [84.7, 16363.0], [84.8, 16369.0], [84.9, 16378.0], [85.0, 16388.0], [85.1, 16404.0], [85.2, 16417.0], [85.3, 16432.0], [85.4, 16433.0], [85.5, 16436.0], [85.6, 16454.0], [85.7, 16460.0], [85.8, 16460.0], [85.9, 16464.0], [86.0, 16470.0], [86.1, 16482.0], [86.2, 16504.0], [86.3, 16539.0], [86.4, 16543.0], [86.5, 16564.0], [86.6, 16577.0], [86.7, 16577.0], [86.8, 16612.0], [86.9, 16620.0], [87.0, 16625.0], [87.1, 16644.0], [87.2, 16652.0], [87.3, 16671.0], [87.4, 16678.0], [87.5, 16692.0], [87.6, 16705.0], [87.7, 16708.0], [87.8, 16709.0], [87.9, 16710.0], [88.0, 16729.0], [88.1, 16743.0], [88.2, 16754.0], [88.3, 16761.0], [88.4, 16772.0], [88.5, 16797.0], [88.6, 16807.0], [88.7, 16827.0], [88.8, 16834.0], [88.9, 16834.0], [89.0, 16854.0], [89.1, 16859.0], [89.2, 16863.0], [89.3, 16871.0], [89.4, 16885.0], [89.5, 16893.0], [89.6, 16893.0], [89.7, 16899.0], [89.8, 16899.0], [89.9, 16900.0], [90.0, 16920.0], [90.1, 16924.0], [90.2, 16926.0], [90.3, 16935.0], [90.4, 16947.0], [90.5, 16951.0], [90.6, 16959.0], [90.7, 16994.0], [90.8, 16998.0], [90.9, 17007.0], [91.0, 17020.0], [91.1, 17026.0], [91.2, 17057.0], [91.3, 17063.0], [91.4, 17085.0], [91.5, 17089.0], [91.6, 17102.0], [91.7, 17161.0], [91.8, 17188.0], [91.9, 17273.0], [92.0, 17325.0], [92.1, 17350.0], [92.2, 17489.0], [92.3, 17513.0], [92.4, 17670.0], [92.5, 17707.0], [92.6, 17783.0], [92.7, 17802.0], [92.8, 17820.0], [92.9, 17826.0], [93.0, 17830.0], [93.1, 17874.0], [93.2, 17881.0], [93.3, 17914.0], [93.4, 17966.0], [93.5, 17972.0], [93.6, 18052.0], [93.7, 18082.0], [93.8, 18163.0], [93.9, 18168.0], [94.0, 18175.0], [94.1, 18188.0], [94.2, 18245.0], [94.3, 18258.0], [94.4, 18294.0], [94.5, 18308.0], [94.6, 18402.0], [94.7, 18424.0], [94.8, 18453.0], [94.9, 18472.0], [95.0, 18574.0], [95.1, 18594.0], [95.2, 18650.0], [95.3, 18654.0], [95.4, 18688.0], [95.5, 18689.0], [95.6, 18711.0], [95.7, 18746.0], [95.8, 18786.0], [95.9, 30538.0], [96.0, 30692.0], [96.1, 31179.0], [96.2, 37954.0], [96.3, 44417.0], [96.4, 44473.0], [96.5, 45570.0], [96.6, 45581.0], [96.7, 45787.0], [96.8, 45793.0], [96.9, 45834.0], [97.0, 45868.0], [97.1, 45883.0], [97.2, 45900.0], [97.3, 45924.0], [97.4, 45933.0], [97.5, 45941.0], [97.6, 45999.0], [97.7, 46043.0], [97.8, 46127.0], [97.9, 46142.0], [98.0, 46700.0], [98.1, 47366.0], [98.2, 47507.0], [98.3, 48114.0], [98.4, 48474.0], [98.5, 49286.0], [98.6, 49731.0], [98.7, 49836.0], [98.8, 50475.0], [98.9, 50485.0], [99.0, 50562.0], [99.1, 50659.0], [99.2, 50790.0], [99.3, 51166.0], [99.4, 51172.0], [99.5, 51234.0], [99.6, 51708.0], [99.7, 51790.0], [99.8, 51928.0], [99.9, 51935.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[0.0, 2779.0], [0.1, 2871.0], [0.2, 2929.0], [0.3, 3328.0], [0.4, 3348.0], [0.5, 3365.0], [0.6, 3401.0], [0.7, 3440.0], [0.8, 3479.0], [0.9, 3502.0], [1.0, 3504.0], [1.1, 3576.0], [1.2, 3600.0], [1.3, 3679.0], [1.4, 3741.0], [1.5, 3748.0], [1.6, 3859.0], [1.7, 4012.0], [1.8, 4016.0], [1.9, 4039.0], [2.0, 4063.0], [2.1, 4115.0], [2.2, 4266.0], [2.3, 4292.0], [2.4, 4311.0], [2.5, 4343.0], [2.6, 4363.0], [2.7, 4382.0], [2.8, 4383.0], [2.9, 4390.0], [3.0, 4391.0], [3.1, 4394.0], [3.2, 4395.0], [3.3, 4395.0], [3.4, 4398.0], [3.5, 4401.0], [3.6, 4401.0], [3.7, 4410.0], [3.8, 4413.0], [3.9, 4413.0], [4.0, 4414.0], [4.1, 4417.0], [4.2, 4419.0], [4.3, 4420.0], [4.4, 4421.0], [4.5, 4424.0], [4.6, 4425.0], [4.7, 4425.0], [4.8, 4426.0], [4.9, 4427.0], [5.0, 4428.0], [5.1, 4429.0], [5.2, 4430.0], [5.3, 4432.0], [5.4, 4432.0], [5.5, 4435.0], [5.6, 4436.0], [5.7, 4437.0], [5.8, 4437.0], [5.9, 4437.0], [6.0, 4440.0], [6.1, 4440.0], [6.2, 4441.0], [6.3, 4443.0], [6.4, 4443.0], [6.5, 4445.0], [6.6, 4445.0], [6.7, 4445.0], [6.8, 4445.0], [6.9, 4446.0], [7.0, 4446.0], [7.1, 4446.0], [7.2, 4447.0], [7.3, 4448.0], [7.4, 4448.0], [7.5, 4448.0], [7.6, 4448.0], [7.7, 4448.0], [7.8, 4449.0], [7.9, 4450.0], [8.0, 4451.0], [8.1, 4452.0], [8.2, 4452.0], [8.3, 4453.0], [8.4, 4453.0], [8.5, 4455.0], [8.6, 4456.0], [8.7, 4457.0], [8.8, 4457.0], [8.9, 4458.0], [9.0, 4459.0], [9.1, 4459.0], [9.2, 4460.0], [9.3, 4461.0], [9.4, 4462.0], [9.5, 4463.0], [9.6, 4464.0], [9.7, 4465.0], [9.8, 4465.0], [9.9, 4466.0], [10.0, 4466.0], [10.1, 4466.0], [10.2, 4466.0], [10.3, 4467.0], [10.4, 4468.0], [10.5, 4469.0], [10.6, 4469.0], [10.7, 4469.0], [10.8, 4470.0], [10.9, 4470.0], [11.0, 4473.0], [11.1, 4473.0], [11.2, 4474.0], [11.3, 4474.0], [11.4, 4475.0], [11.5, 4475.0], [11.6, 4475.0], [11.7, 4475.0], [11.8, 4476.0], [11.9, 4476.0], [12.0, 4476.0], [12.1, 4477.0], [12.2, 4477.0], [12.3, 4478.0], [12.4, 4478.0], [12.5, 4478.0], [12.6, 4478.0], [12.7, 4479.0], [12.8, 4479.0], [12.9, 4479.0], [13.0, 4479.0], [13.1, 4479.0], [13.2, 4480.0], [13.3, 4481.0], [13.4, 4481.0], [13.5, 4481.0], [13.6, 4482.0], [13.7, 4482.0], [13.8, 4483.0], [13.9, 4483.0], [14.0, 4484.0], [14.1, 4485.0], [14.2, 4486.0], [14.3, 4487.0], [14.4, 4487.0], [14.5, 4487.0], [14.6, 4488.0], [14.7, 4489.0], [14.8, 4489.0], [14.9, 4490.0], [15.0, 4490.0], [15.1, 4491.0], [15.2, 4491.0], [15.3, 4491.0], [15.4, 4491.0], [15.5, 4491.0], [15.6, 4491.0], [15.7, 4492.0], [15.8, 4492.0], [15.9, 4492.0], [16.0, 4492.0], [16.1, 4493.0], [16.2, 4493.0], [16.3, 4493.0], [16.4, 4493.0], [16.5, 4494.0], [16.6, 4494.0], [16.7, 4494.0], [16.8, 4495.0], [16.9, 4495.0], [17.0, 4496.0], [17.1, 4497.0], [17.2, 4498.0], [17.3, 4498.0], [17.4, 4498.0], [17.5, 4498.0], [17.6, 4498.0], [17.7, 4499.0], [17.8, 4499.0], [17.9, 4499.0], [18.0, 4499.0], [18.1, 4499.0], [18.2, 4500.0], [18.3, 4501.0], [18.4, 4501.0], [18.5, 4501.0], [18.6, 4502.0], [18.7, 4503.0], [18.8, 4504.0], [18.9, 4504.0], [19.0, 4504.0], [19.1, 4504.0], [19.2, 4504.0], [19.3, 4505.0], [19.4, 4505.0], [19.5, 4506.0], [19.6, 4506.0], [19.7, 4506.0], [19.8, 4507.0], [19.9, 4508.0], [20.0, 4508.0], [20.1, 4508.0], [20.2, 4509.0], [20.3, 4509.0], [20.4, 4509.0], [20.5, 4510.0], [20.6, 4510.0], [20.7, 4510.0], [20.8, 4511.0], [20.9, 4511.0], [21.0, 4512.0], [21.1, 4512.0], [21.2, 4512.0], [21.3, 4513.0], [21.4, 4514.0], [21.5, 4515.0], [21.6, 4515.0], [21.7, 4516.0], [21.8, 4518.0], [21.9, 4518.0], [22.0, 4519.0], [22.1, 4519.0], [22.2, 4519.0], [22.3, 4520.0], [22.4, 4521.0], [22.5, 4521.0], [22.6, 4521.0], [22.7, 4521.0], [22.8, 4521.0], [22.9, 4522.0], [23.0, 4522.0], [23.1, 4523.0], [23.2, 4523.0], [23.3, 4523.0], [23.4, 4524.0], [23.5, 4524.0], [23.6, 4524.0], [23.7, 4524.0], [23.8, 4524.0], [23.9, 4525.0], [24.0, 4525.0], [24.1, 4525.0], [24.2, 4525.0], [24.3, 4525.0], [24.4, 4527.0], [24.5, 4527.0], [24.6, 4528.0], [24.7, 4528.0], [24.8, 4528.0], [24.9, 4528.0], [25.0, 4528.0], [25.1, 4529.0], [25.2, 4529.0], [25.3, 4529.0], [25.4, 4530.0], [25.5, 4530.0], [25.6, 4531.0], [25.7, 4532.0], [25.8, 4532.0], [25.9, 4532.0], [26.0, 4533.0], [26.1, 4533.0], [26.2, 4534.0], [26.3, 4534.0], [26.4, 4534.0], [26.5, 4535.0], [26.6, 4535.0], [26.7, 4535.0], [26.8, 4536.0], [26.9, 4536.0], [27.0, 4536.0], [27.1, 4537.0], [27.2, 4537.0], [27.3, 4537.0], [27.4, 4537.0], [27.5, 4537.0], [27.6, 4538.0], [27.7, 4538.0], [27.8, 4538.0], [27.9, 4539.0], [28.0, 4540.0], [28.1, 4540.0], [28.2, 4540.0], [28.3, 4540.0], [28.4, 4541.0], [28.5, 4541.0], [28.6, 4541.0], [28.7, 4541.0], [28.8, 4542.0], [28.9, 4542.0], [29.0, 4542.0], [29.1, 4542.0], [29.2, 4543.0], [29.3, 4543.0], [29.4, 4543.0], [29.5, 4544.0], [29.6, 4544.0], [29.7, 4545.0], [29.8, 4545.0], [29.9, 4545.0], [30.0, 4545.0], [30.1, 4545.0], [30.2, 4546.0], [30.3, 4547.0], [30.4, 4547.0], [30.5, 4547.0], [30.6, 4547.0], [30.7, 4548.0], [30.8, 4548.0], [30.9, 4548.0], [31.0, 4548.0], [31.1, 4549.0], [31.2, 4549.0], [31.3, 4549.0], [31.4, 4549.0], [31.5, 4550.0], [31.6, 4550.0], [31.7, 4550.0], [31.8, 4550.0], [31.9, 4550.0], [32.0, 4550.0], [32.1, 4550.0], [32.2, 4551.0], [32.3, 4551.0], [32.4, 4551.0], [32.5, 4551.0], [32.6, 4551.0], [32.7, 4552.0], [32.8, 4552.0], [32.9, 4552.0], [33.0, 4552.0], [33.1, 4552.0], [33.2, 4553.0], [33.3, 4553.0], [33.4, 4554.0], [33.5, 4554.0], [33.6, 4554.0], [33.7, 4554.0], [33.8, 4554.0], [33.9, 4555.0], [34.0, 4555.0], [34.1, 4555.0], [34.2, 4555.0], [34.3, 4555.0], [34.4, 4556.0], [34.5, 4556.0], [34.6, 4556.0], [34.7, 4556.0], [34.8, 4558.0], [34.9, 4558.0], [35.0, 4559.0], [35.1, 4559.0], [35.2, 4559.0], [35.3, 4560.0], [35.4, 4560.0], [35.5, 4561.0], [35.6, 4561.0], [35.7, 4561.0], [35.8, 4562.0], [35.9, 4562.0], [36.0, 4562.0], [36.1, 4562.0], [36.2, 4562.0], [36.3, 4564.0], [36.4, 4564.0], [36.5, 4564.0], [36.6, 4565.0], [36.7, 4565.0], [36.8, 4566.0], [36.9, 4566.0], [37.0, 4566.0], [37.1, 4566.0], [37.2, 4566.0], [37.3, 4567.0], [37.4, 4567.0], [37.5, 4567.0], [37.6, 4568.0], [37.7, 4568.0], [37.8, 4568.0], [37.9, 4569.0], [38.0, 4569.0], [38.1, 4570.0], [38.2, 4570.0], [38.3, 4570.0], [38.4, 4571.0], [38.5, 4571.0], [38.6, 4571.0], [38.7, 4572.0], [38.8, 4572.0], [38.9, 4573.0], [39.0, 4573.0], [39.1, 4573.0], [39.2, 4573.0], [39.3, 4574.0], [39.4, 4574.0], [39.5, 4574.0], [39.6, 4574.0], [39.7, 4574.0], [39.8, 4574.0], [39.9, 4575.0], [40.0, 4575.0], [40.1, 4576.0], [40.2, 4576.0], [40.3, 4576.0], [40.4, 4577.0], [40.5, 4577.0], [40.6, 4577.0], [40.7, 4577.0], [40.8, 4577.0], [40.9, 4577.0], [41.0, 4578.0], [41.1, 4579.0], [41.2, 4579.0], [41.3, 4579.0], [41.4, 4579.0], [41.5, 4580.0], [41.6, 4580.0], [41.7, 4580.0], [41.8, 4580.0], [41.9, 4581.0], [42.0, 4581.0], [42.1, 4582.0], [42.2, 4582.0], [42.3, 4582.0], [42.4, 4582.0], [42.5, 4583.0], [42.6, 4583.0], [42.7, 4583.0], [42.8, 4583.0], [42.9, 4584.0], [43.0, 4584.0], [43.1, 4584.0], [43.2, 4585.0], [43.3, 4585.0], [43.4, 4586.0], [43.5, 4587.0], [43.6, 4587.0], [43.7, 4587.0], [43.8, 4587.0], [43.9, 4587.0], [44.0, 4588.0], [44.1, 4588.0], [44.2, 4588.0], [44.3, 4589.0], [44.4, 4589.0], [44.5, 4589.0], [44.6, 4589.0], [44.7, 4590.0], [44.8, 4590.0], [44.9, 4590.0], [45.0, 4590.0], [45.1, 4591.0], [45.2, 4591.0], [45.3, 4592.0], [45.4, 4592.0], [45.5, 4592.0], [45.6, 4593.0], [45.7, 4593.0], [45.8, 4593.0], [45.9, 4593.0], [46.0, 4594.0], [46.1, 4595.0], [46.2, 4596.0], [46.3, 4596.0], [46.4, 4596.0], [46.5, 4596.0], [46.6, 4596.0], [46.7, 4596.0], [46.8, 4597.0], [46.9, 4597.0], [47.0, 4597.0], [47.1, 4597.0], [47.2, 4598.0], [47.3, 4600.0], [47.4, 4600.0], [47.5, 4601.0], [47.6, 4601.0], [47.7, 4601.0], [47.8, 4602.0], [47.9, 4602.0], [48.0, 4603.0], [48.1, 4603.0], [48.2, 4603.0], [48.3, 4604.0], [48.4, 4604.0], [48.5, 4604.0], [48.6, 4604.0], [48.7, 4604.0], [48.8, 4605.0], [48.9, 4606.0], [49.0, 4607.0], [49.1, 4607.0], [49.2, 4607.0], [49.3, 4608.0], [49.4, 4609.0], [49.5, 4609.0], [49.6, 4609.0], [49.7, 4611.0], [49.8, 4612.0], [49.9, 4612.0], [50.0, 4612.0], [50.1, 4612.0], [50.2, 4612.0], [50.3, 4613.0], [50.4, 4613.0], [50.5, 4614.0], [50.6, 4614.0], [50.7, 4615.0], [50.8, 4616.0], [50.9, 4616.0], [51.0, 4616.0], [51.1, 4616.0], [51.2, 4616.0], [51.3, 4618.0], [51.4, 4619.0], [51.5, 4621.0], [51.6, 4621.0], [51.7, 4621.0], [51.8, 4621.0], [51.9, 4622.0], [52.0, 4622.0], [52.1, 4622.0], [52.2, 4623.0], [52.3, 4623.0], [52.4, 4624.0], [52.5, 4624.0], [52.6, 4625.0], [52.7, 4625.0], [52.8, 4625.0], [52.9, 4626.0], [53.0, 4627.0], [53.1, 4627.0], [53.2, 4627.0], [53.3, 4628.0], [53.4, 4628.0], [53.5, 4628.0], [53.6, 4628.0], [53.7, 4629.0], [53.8, 4629.0], [53.9, 4631.0], [54.0, 4632.0], [54.1, 4633.0], [54.2, 4635.0], [54.3, 4635.0], [54.4, 4637.0], [54.5, 4639.0], [54.6, 4639.0], [54.7, 4640.0], [54.8, 4640.0], [54.9, 4640.0], [55.0, 4641.0], [55.1, 4642.0], [55.2, 4644.0], [55.3, 4646.0], [55.4, 4646.0], [55.5, 4647.0], [55.6, 4650.0], [55.7, 4653.0], [55.8, 4653.0], [55.9, 4653.0], [56.0, 4654.0], [56.1, 4655.0], [56.2, 4655.0], [56.3, 4657.0], [56.4, 4658.0], [56.5, 4658.0], [56.6, 4661.0], [56.7, 4661.0], [56.8, 4662.0], [56.9, 4662.0], [57.0, 4663.0], [57.1, 4663.0], [57.2, 4664.0], [57.3, 4664.0], [57.4, 4665.0], [57.5, 4667.0], [57.6, 4668.0], [57.7, 4668.0], [57.8, 4669.0], [57.9, 4672.0], [58.0, 4673.0], [58.1, 4674.0], [58.2, 4674.0], [58.3, 4674.0], [58.4, 4676.0], [58.5, 4679.0], [58.6, 4679.0], [58.7, 4684.0], [58.8, 4684.0], [58.9, 4685.0], [59.0, 4687.0], [59.1, 4694.0], [59.2, 4694.0], [59.3, 4694.0], [59.4, 4696.0], [59.5, 4696.0], [59.6, 4698.0], [59.7, 4704.0], [59.8, 4711.0], [59.9, 4717.0], [60.0, 4723.0], [60.1, 4724.0], [60.2, 4728.0], [60.3, 4730.0], [60.4, 4730.0], [60.5, 4733.0], [60.6, 4738.0], [60.7, 4741.0], [60.8, 4756.0], [60.9, 4756.0], [61.0, 4762.0], [61.1, 4766.0], [61.2, 4784.0], [61.3, 4790.0], [61.4, 4791.0], [61.5, 4791.0], [61.6, 4795.0], [61.7, 4800.0], [61.8, 4800.0], [61.9, 4806.0], [62.0, 4829.0], [62.1, 4830.0], [62.2, 4835.0], [62.3, 4872.0], [62.4, 4889.0], [62.5, 4891.0], [62.6, 4903.0], [62.7, 4920.0], [62.8, 4925.0], [62.9, 4945.0], [63.0, 4946.0], [63.1, 4947.0], [63.2, 4955.0], [63.3, 4976.0], [63.4, 4979.0], [63.5, 4988.0], [63.6, 5016.0], [63.7, 5028.0], [63.8, 5106.0], [63.9, 5146.0], [64.0, 5149.0], [64.1, 5165.0], [64.2, 5178.0], [64.3, 5187.0], [64.4, 5190.0], [64.5, 5197.0], [64.6, 5215.0], [64.7, 5236.0], [64.8, 5259.0], [64.9, 5261.0], [65.0, 5288.0], [65.1, 5313.0], [65.2, 5317.0], [65.3, 5329.0], [65.4, 5332.0], [65.5, 5340.0], [65.6, 5353.0], [65.7, 5365.0], [65.8, 5374.0], [65.9, 5385.0], [66.0, 5388.0], [66.1, 5393.0], [66.2, 5401.0], [66.3, 5407.0], [66.4, 5433.0], [66.5, 5436.0], [66.6, 5438.0], [66.7, 5470.0], [66.8, 5470.0], [66.9, 5490.0], [67.0, 5494.0], [67.1, 5498.0], [67.2, 5503.0], [67.3, 5508.0], [67.4, 5534.0], [67.5, 5547.0], [67.6, 5578.0], [67.7, 5643.0], [67.8, 5649.0], [67.9, 5744.0], [68.0, 5785.0], [68.1, 5788.0], [68.2, 5886.0], [68.3, 5902.0], [68.4, 5928.0], [68.5, 5929.0], [68.6, 5940.0], [68.7, 5949.0], [68.8, 5953.0], [68.9, 5961.0], [69.0, 5967.0], [69.1, 5978.0], [69.2, 6032.0], [69.3, 6037.0], [69.4, 6056.0], [69.5, 6072.0], [69.6, 6098.0], [69.7, 6099.0], [69.8, 6120.0], [69.9, 6134.0], [70.0, 6141.0], [70.1, 6151.0], [70.2, 6161.0], [70.3, 6168.0], [70.4, 6175.0], [70.5, 6192.0], [70.6, 6200.0], [70.7, 6201.0], [70.8, 6215.0], [70.9, 6234.0], [71.0, 6251.0], [71.1, 6252.0], [71.2, 6266.0], [71.3, 6273.0], [71.4, 6273.0], [71.5, 6274.0], [71.6, 6280.0], [71.7, 6280.0], [71.8, 6282.0], [71.9, 6287.0], [72.0, 6298.0], [72.1, 6302.0], [72.2, 6305.0], [72.3, 6307.0], [72.4, 6310.0], [72.5, 6319.0], [72.6, 6332.0], [72.7, 6336.0], [72.8, 6354.0], [72.9, 6357.0], [73.0, 6365.0], [73.1, 6366.0], [73.2, 6369.0], [73.3, 6370.0], [73.4, 6373.0], [73.5, 6381.0], [73.6, 6387.0], [73.7, 6400.0], [73.8, 6404.0], [73.9, 6405.0], [74.0, 6411.0], [74.1, 6419.0], [74.2, 6420.0], [74.3, 6436.0], [74.4, 6446.0], [74.5, 6449.0], [74.6, 6470.0], [74.7, 6474.0], [74.8, 6476.0], [74.9, 6480.0], [75.0, 6480.0], [75.1, 6490.0], [75.2, 6493.0], [75.3, 6500.0], [75.4, 6534.0], [75.5, 6538.0], [75.6, 6546.0], [75.7, 6555.0], [75.8, 6558.0], [75.9, 6573.0], [76.0, 6574.0], [76.1, 6583.0], [76.2, 6590.0], [76.3, 6592.0], [76.4, 6596.0], [76.5, 6599.0], [76.6, 6606.0], [76.7, 6637.0], [76.8, 6651.0], [76.9, 6651.0], [77.0, 6651.0], [77.1, 6670.0], [77.2, 6675.0], [77.3, 6716.0], [77.4, 6745.0], [77.5, 6748.0], [77.6, 6750.0], [77.7, 6759.0], [77.8, 6760.0], [77.9, 6763.0], [78.0, 6793.0], [78.1, 6796.0], [78.2, 6866.0], [78.3, 6882.0], [78.4, 6904.0], [78.5, 6907.0], [78.6, 6930.0], [78.7, 6942.0], [78.8, 6947.0], [78.9, 6948.0], [79.0, 6962.0], [79.1, 6963.0], [79.2, 6964.0], [79.3, 6977.0], [79.4, 6980.0], [79.5, 6981.0], [79.6, 6996.0], [79.7, 6998.0], [79.8, 7012.0], [79.9, 7017.0], [80.0, 7032.0], [80.1, 7033.0], [80.2, 7033.0], [80.3, 7035.0], [80.4, 7055.0], [80.5, 7055.0], [80.6, 7057.0], [80.7, 7062.0], [80.8, 7075.0], [80.9, 7083.0], [81.0, 7087.0], [81.1, 7099.0], [81.2, 7105.0], [81.3, 7106.0], [81.4, 7110.0], [81.5, 7115.0], [81.6, 7116.0], [81.7, 7126.0], [81.8, 7128.0], [81.9, 7145.0], [82.0, 7145.0], [82.1, 7148.0], [82.2, 7157.0], [82.3, 7162.0], [82.4, 7198.0], [82.5, 7230.0], [82.6, 7243.0], [82.7, 7248.0], [82.8, 7253.0], [82.9, 7258.0], [83.0, 7273.0], [83.1, 7275.0], [83.2, 7278.0], [83.3, 7279.0], [83.4, 7285.0], [83.5, 7295.0], [83.6, 7295.0], [83.7, 7297.0], [83.8, 7307.0], [83.9, 7310.0], [84.0, 7319.0], [84.1, 7323.0], [84.2, 7331.0], [84.3, 7333.0], [84.4, 7341.0], [84.5, 7353.0], [84.6, 7355.0], [84.7, 7359.0], [84.8, 7362.0], [84.9, 7365.0], [85.0, 7367.0], [85.1, 7387.0], [85.2, 7391.0], [85.3, 7396.0], [85.4, 7397.0], [85.5, 7410.0], [85.6, 7431.0], [85.7, 7439.0], [85.8, 7445.0], [85.9, 7451.0], [86.0, 7452.0], [86.1, 7490.0], [86.2, 7495.0], [86.3, 7515.0], [86.4, 7543.0], [86.5, 7545.0], [86.6, 7615.0], [86.7, 7653.0], [86.8, 7656.0], [86.9, 7658.0], [87.0, 7662.0], [87.1, 7702.0], [87.2, 7715.0], [87.3, 7724.0], [87.4, 7744.0], [87.5, 7747.0], [87.6, 7755.0], [87.7, 7761.0], [87.8, 7779.0], [87.9, 7787.0], [88.0, 7809.0], [88.1, 7895.0], [88.2, 7896.0], [88.3, 7920.0], [88.4, 7923.0], [88.5, 7956.0], [88.6, 7964.0], [88.7, 7976.0], [88.8, 8001.0], [88.9, 8041.0], [89.0, 8046.0], [89.1, 8087.0], [89.2, 8100.0], [89.3, 8127.0], [89.4, 8129.0], [89.5, 8132.0], [89.6, 8143.0], [89.7, 8176.0], [89.8, 8190.0], [89.9, 8196.0], [90.0, 8204.0], [90.1, 8205.0], [90.2, 8228.0], [90.3, 8233.0], [90.4, 8235.0], [90.5, 8236.0], [90.6, 8241.0], [90.7, 8249.0], [90.8, 8266.0], [90.9, 8269.0], [91.0, 8284.0], [91.1, 8284.0], [91.2, 8305.0], [91.3, 8306.0], [91.4, 8314.0], [91.5, 8321.0], [91.6, 8322.0], [91.7, 8324.0], [91.8, 8332.0], [91.9, 8341.0], [92.0, 8350.0], [92.1, 8361.0], [92.2, 8374.0], [92.3, 8420.0], [92.4, 8421.0], [92.5, 8422.0], [92.6, 8432.0], [92.7, 8436.0], [92.8, 8437.0], [92.9, 8460.0], [93.0, 8492.0], [93.1, 8494.0], [93.2, 8496.0], [93.3, 8543.0], [93.4, 8545.0], [93.5, 8616.0], [93.6, 8652.0], [93.7, 8669.0], [93.8, 8750.0], [93.9, 8755.0], [94.0, 8765.0], [94.1, 8777.0], [94.2, 8787.0], [94.3, 8810.0], [94.4, 8847.0], [94.5, 8855.0], [94.6, 8940.0], [94.7, 8944.0], [94.8, 8949.0], [94.9, 8962.0], [95.0, 8986.0], [95.1, 8998.0], [95.2, 9009.0], [95.3, 9014.0], [95.4, 9026.0], [95.5, 9029.0], [95.6, 9031.0], [95.7, 9035.0], [95.8, 9039.0], [95.9, 9053.0], [96.0, 9053.0], [96.1, 9060.0], [96.2, 9063.0], [96.3, 9066.0], [96.4, 9079.0], [96.5, 9082.0], [96.6, 9087.0], [96.7, 9088.0], [96.8, 9093.0], [96.9, 9115.0], [97.0, 9120.0], [97.1, 9132.0], [97.2, 9153.0], [97.3, 9172.0], [97.4, 9183.0], [97.5, 9186.0], [97.6, 9187.0], [97.7, 9214.0], [97.8, 9220.0], [97.9, 9231.0], [98.0, 9244.0], [98.1, 9252.0], [98.2, 9254.0], [98.3, 9272.0], [98.4, 9275.0], [98.5, 9279.0], [98.6, 9284.0], [98.7, 9286.0], [98.8, 9288.0], [98.9, 9388.0], [99.0, 9430.0], [99.1, 9529.0], [99.2, 9617.0], [99.3, 9674.0], [99.4, 10427.0], [99.5, 13357.0], [99.6, 13560.0], [99.7, 15216.0], [99.8, 21582.0], [99.9, 22478.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[0.0, 3229.0], [0.1, 3484.0], [0.2, 3619.0], [0.3, 4301.0], [0.4, 4334.0], [0.5, 4339.0], [0.6, 4361.0], [0.7, 4361.0], [0.8, 4362.0], [0.9, 4365.0], [1.0, 4371.0], [1.1, 4374.0], [1.2, 4379.0], [1.3, 4380.0], [1.4, 4386.0], [1.5, 4395.0], [1.6, 4397.0], [1.7, 4398.0], [1.8, 4398.0], [1.9, 4398.0], [2.0, 4403.0], [2.1, 4403.0], [2.2, 4403.0], [2.3, 4403.0], [2.4, 4404.0], [2.5, 4405.0], [2.6, 4405.0], [2.7, 4409.0], [2.8, 4411.0], [2.9, 4416.0], [3.0, 4416.0], [3.1, 4419.0], [3.2, 4422.0], [3.3, 4424.0], [3.4, 4425.0], [3.5, 4426.0], [3.6, 4426.0], [3.7, 4427.0], [3.8, 4428.0], [3.9, 4430.0], [4.0, 4430.0], [4.1, 4432.0], [4.2, 4433.0], [4.3, 4433.0], [4.4, 4434.0], [4.5, 4435.0], [4.6, 4436.0], [4.7, 4440.0], [4.8, 4441.0], [4.9, 4442.0], [5.0, 4443.0], [5.1, 4443.0], [5.2, 4444.0], [5.3, 4445.0], [5.4, 4446.0], [5.5, 4446.0], [5.6, 4447.0], [5.7, 4449.0], [5.8, 4450.0], [5.9, 4450.0], [6.0, 4451.0], [6.1, 4451.0], [6.2, 4451.0], [6.3, 4453.0], [6.4, 4453.0], [6.5, 4455.0], [6.6, 4455.0], [6.7, 4456.0], [6.8, 4459.0], [6.9, 4459.0], [7.0, 4460.0], [7.1, 4461.0], [7.2, 4461.0], [7.3, 4462.0], [7.4, 4462.0], [7.5, 4463.0], [7.6, 4464.0], [7.7, 4465.0], [7.8, 4465.0], [7.9, 4466.0], [8.0, 4466.0], [8.1, 4466.0], [8.2, 4468.0], [8.3, 4469.0], [8.4, 4469.0], [8.5, 4469.0], [8.6, 4470.0], [8.7, 4472.0], [8.8, 4473.0], [8.9, 4473.0], [9.0, 4473.0], [9.1, 4473.0], [9.2, 4474.0], [9.3, 4474.0], [9.4, 4475.0], [9.5, 4475.0], [9.6, 4476.0], [9.7, 4477.0], [9.8, 4477.0], [9.9, 4478.0], [10.0, 4479.0], [10.1, 4480.0], [10.2, 4480.0], [10.3, 4480.0], [10.4, 4481.0], [10.5, 4482.0], [10.6, 4483.0], [10.7, 4483.0], [10.8, 4483.0], [10.9, 4484.0], [11.0, 4484.0], [11.1, 4485.0], [11.2, 4486.0], [11.3, 4486.0], [11.4, 4486.0], [11.5, 4486.0], [11.6, 4488.0], [11.7, 4488.0], [11.8, 4488.0], [11.9, 4489.0], [12.0, 4489.0], [12.1, 4490.0], [12.2, 4490.0], [12.3, 4490.0], [12.4, 4490.0], [12.5, 4491.0], [12.6, 4491.0], [12.7, 4491.0], [12.8, 4492.0], [12.9, 4492.0], [13.0, 4495.0], [13.1, 4495.0], [13.2, 4496.0], [13.3, 4496.0], [13.4, 4496.0], [13.5, 4497.0], [13.6, 4497.0], [13.7, 4497.0], [13.8, 4497.0], [13.9, 4497.0], [14.0, 4498.0], [14.1, 4498.0], [14.2, 4498.0], [14.3, 4500.0], [14.4, 4501.0], [14.5, 4501.0], [14.6, 4502.0], [14.7, 4502.0], [14.8, 4503.0], [14.9, 4503.0], [15.0, 4504.0], [15.1, 4504.0], [15.2, 4504.0], [15.3, 4504.0], [15.4, 4505.0], [15.5, 4505.0], [15.6, 4505.0], [15.7, 4505.0], [15.8, 4506.0], [15.9, 4506.0], [16.0, 4506.0], [16.1, 4507.0], [16.2, 4508.0], [16.3, 4508.0], [16.4, 4508.0], [16.5, 4508.0], [16.6, 4509.0], [16.7, 4509.0], [16.8, 4509.0], [16.9, 4509.0], [17.0, 4510.0], [17.1, 4510.0], [17.2, 4510.0], [17.3, 4510.0], [17.4, 4511.0], [17.5, 4511.0], [17.6, 4511.0], [17.7, 4511.0], [17.8, 4512.0], [17.9, 4512.0], [18.0, 4512.0], [18.1, 4513.0], [18.2, 4513.0], [18.3, 4514.0], [18.4, 4514.0], [18.5, 4514.0], [18.6, 4514.0], [18.7, 4515.0], [18.8, 4515.0], [18.9, 4516.0], [19.0, 4516.0], [19.1, 4517.0], [19.2, 4517.0], [19.3, 4518.0], [19.4, 4518.0], [19.5, 4518.0], [19.6, 4519.0], [19.7, 4519.0], [19.8, 4519.0], [19.9, 4519.0], [20.0, 4520.0], [20.1, 4520.0], [20.2, 4520.0], [20.3, 4521.0], [20.4, 4521.0], [20.5, 4521.0], [20.6, 4521.0], [20.7, 4522.0], [20.8, 4523.0], [20.9, 4523.0], [21.0, 4523.0], [21.1, 4523.0], [21.2, 4525.0], [21.3, 4525.0], [21.4, 4526.0], [21.5, 4526.0], [21.6, 4526.0], [21.7, 4528.0], [21.8, 4528.0], [21.9, 4528.0], [22.0, 4528.0], [22.1, 4528.0], [22.2, 4529.0], [22.3, 4530.0], [22.4, 4531.0], [22.5, 4531.0], [22.6, 4532.0], [22.7, 4532.0], [22.8, 4532.0], [22.9, 4532.0], [23.0, 4532.0], [23.1, 4533.0], [23.2, 4533.0], [23.3, 4533.0], [23.4, 4533.0], [23.5, 4533.0], [23.6, 4534.0], [23.7, 4534.0], [23.8, 4535.0], [23.9, 4535.0], [24.0, 4536.0], [24.1, 4536.0], [24.2, 4536.0], [24.3, 4536.0], [24.4, 4536.0], [24.5, 4537.0], [24.6, 4537.0], [24.7, 4537.0], [24.8, 4537.0], [24.9, 4537.0], [25.0, 4537.0], [25.1, 4537.0], [25.2, 4538.0], [25.3, 4538.0], [25.4, 4538.0], [25.5, 4538.0], [25.6, 4539.0], [25.7, 4539.0], [25.8, 4539.0], [25.9, 4539.0], [26.0, 4540.0], [26.1, 4540.0], [26.2, 4540.0], [26.3, 4540.0], [26.4, 4541.0], [26.5, 4541.0], [26.6, 4541.0], [26.7, 4541.0], [26.8, 4541.0], [26.9, 4542.0], [27.0, 4542.0], [27.1, 4542.0], [27.2, 4543.0], [27.3, 4543.0], [27.4, 4543.0], [27.5, 4544.0], [27.6, 4544.0], [27.7, 4544.0], [27.8, 4544.0], [27.9, 4545.0], [28.0, 4545.0], [28.1, 4546.0], [28.2, 4546.0], [28.3, 4547.0], [28.4, 4547.0], [28.5, 4547.0], [28.6, 4547.0], [28.7, 4547.0], [28.8, 4547.0], [28.9, 4548.0], [29.0, 4548.0], [29.1, 4548.0], [29.2, 4548.0], [29.3, 4548.0], [29.4, 4550.0], [29.5, 4550.0], [29.6, 4550.0], [29.7, 4550.0], [29.8, 4550.0], [29.9, 4551.0], [30.0, 4551.0], [30.1, 4551.0], [30.2, 4552.0], [30.3, 4552.0], [30.4, 4552.0], [30.5, 4553.0], [30.6, 4553.0], [30.7, 4553.0], [30.8, 4554.0], [30.9, 4555.0], [31.0, 4555.0], [31.1, 4555.0], [31.2, 4555.0], [31.3, 4555.0], [31.4, 4555.0], [31.5, 4555.0], [31.6, 4555.0], [31.7, 4555.0], [31.8, 4556.0], [31.9, 4556.0], [32.0, 4556.0], [32.1, 4556.0], [32.2, 4556.0], [32.3, 4557.0], [32.4, 4557.0], [32.5, 4557.0], [32.6, 4557.0], [32.7, 4558.0], [32.8, 4558.0], [32.9, 4559.0], [33.0, 4560.0], [33.1, 4560.0], [33.2, 4560.0], [33.3, 4560.0], [33.4, 4560.0], [33.5, 4561.0], [33.6, 4561.0], [33.7, 4561.0], [33.8, 4561.0], [33.9, 4561.0], [34.0, 4561.0], [34.1, 4561.0], [34.2, 4561.0], [34.3, 4562.0], [34.4, 4562.0], [34.5, 4562.0], [34.6, 4562.0], [34.7, 4563.0], [34.8, 4563.0], [34.9, 4563.0], [35.0, 4564.0], [35.1, 4564.0], [35.2, 4564.0], [35.3, 4564.0], [35.4, 4564.0], [35.5, 4565.0], [35.6, 4565.0], [35.7, 4566.0], [35.8, 4566.0], [35.9, 4566.0], [36.0, 4567.0], [36.1, 4567.0], [36.2, 4567.0], [36.3, 4567.0], [36.4, 4567.0], [36.5, 4568.0], [36.6, 4570.0], [36.7, 4570.0], [36.8, 4570.0], [36.9, 4570.0], [37.0, 4571.0], [37.1, 4571.0], [37.2, 4572.0], [37.3, 4572.0], [37.4, 4572.0], [37.5, 4572.0], [37.6, 4573.0], [37.7, 4573.0], [37.8, 4573.0], [37.9, 4575.0], [38.0, 4575.0], [38.1, 4575.0], [38.2, 4576.0], [38.3, 4577.0], [38.4, 4577.0], [38.5, 4577.0], [38.6, 4577.0], [38.7, 4578.0], [38.8, 4578.0], [38.9, 4578.0], [39.0, 4580.0], [39.1, 4580.0], [39.2, 4580.0], [39.3, 4581.0], [39.4, 4581.0], [39.5, 4581.0], [39.6, 4582.0], [39.7, 4582.0], [39.8, 4583.0], [39.9, 4584.0], [40.0, 4584.0], [40.1, 4584.0], [40.2, 4584.0], [40.3, 4585.0], [40.4, 4586.0], [40.5, 4586.0], [40.6, 4586.0], [40.7, 4587.0], [40.8, 4587.0], [40.9, 4587.0], [41.0, 4588.0], [41.1, 4588.0], [41.2, 4588.0], [41.3, 4589.0], [41.4, 4589.0], [41.5, 4589.0], [41.6, 4590.0], [41.7, 4591.0], [41.8, 4591.0], [41.9, 4591.0], [42.0, 4592.0], [42.1, 4592.0], [42.2, 4592.0], [42.3, 4592.0], [42.4, 4593.0], [42.5, 4593.0], [42.6, 4593.0], [42.7, 4593.0], [42.8, 4594.0], [42.9, 4594.0], [43.0, 4594.0], [43.1, 4595.0], [43.2, 4595.0], [43.3, 4596.0], [43.4, 4596.0], [43.5, 4597.0], [43.6, 4598.0], [43.7, 4598.0], [43.8, 4599.0], [43.9, 4599.0], [44.0, 4599.0], [44.1, 4599.0], [44.2, 4599.0], [44.3, 4599.0], [44.4, 4599.0], [44.5, 4599.0], [44.6, 4599.0], [44.7, 4599.0], [44.8, 4600.0], [44.9, 4600.0], [45.0, 4601.0], [45.1, 4601.0], [45.2, 4601.0], [45.3, 4602.0], [45.4, 4602.0], [45.5, 4602.0], [45.6, 4602.0], [45.7, 4603.0], [45.8, 4603.0], [45.9, 4603.0], [46.0, 4604.0], [46.1, 4604.0], [46.2, 4605.0], [46.3, 4606.0], [46.4, 4606.0], [46.5, 4606.0], [46.6, 4606.0], [46.7, 4607.0], [46.8, 4608.0], [46.9, 4608.0], [47.0, 4608.0], [47.1, 4609.0], [47.2, 4610.0], [47.3, 4610.0], [47.4, 4610.0], [47.5, 4612.0], [47.6, 4616.0], [47.7, 4616.0], [47.8, 4616.0], [47.9, 4617.0], [48.0, 4617.0], [48.1, 4618.0], [48.2, 4618.0], [48.3, 4618.0], [48.4, 4618.0], [48.5, 4618.0], [48.6, 4619.0], [48.7, 4620.0], [48.8, 4622.0], [48.9, 4623.0], [49.0, 4624.0], [49.1, 4624.0], [49.2, 4625.0], [49.3, 4625.0], [49.4, 4626.0], [49.5, 4627.0], [49.6, 4627.0], [49.7, 4629.0], [49.8, 4630.0], [49.9, 4631.0], [50.0, 4632.0], [50.1, 4634.0], [50.2, 4635.0], [50.3, 4636.0], [50.4, 4636.0], [50.5, 4639.0], [50.6, 4640.0], [50.7, 4640.0], [50.8, 4640.0], [50.9, 4642.0], [51.0, 4643.0], [51.1, 4645.0], [51.2, 4646.0], [51.3, 4646.0], [51.4, 4647.0], [51.5, 4647.0], [51.6, 4648.0], [51.7, 4652.0], [51.8, 4653.0], [51.9, 4654.0], [52.0, 4655.0], [52.1, 4657.0], [52.2, 4658.0], [52.3, 4659.0], [52.4, 4660.0], [52.5, 4661.0], [52.6, 4661.0], [52.7, 4663.0], [52.8, 4663.0], [52.9, 4666.0], [53.0, 4667.0], [53.1, 4667.0], [53.2, 4669.0], [53.3, 4671.0], [53.4, 4672.0], [53.5, 4673.0], [53.6, 4673.0], [53.7, 4674.0], [53.8, 4674.0], [53.9, 4675.0], [54.0, 4675.0], [54.1, 4676.0], [54.2, 4676.0], [54.3, 4678.0], [54.4, 4681.0], [54.5, 4681.0], [54.6, 4682.0], [54.7, 4682.0], [54.8, 4682.0], [54.9, 4684.0], [55.0, 4684.0], [55.1, 4685.0], [55.2, 4685.0], [55.3, 4690.0], [55.4, 4690.0], [55.5, 4691.0], [55.6, 4691.0], [55.7, 4691.0], [55.8, 4692.0], [55.9, 4695.0], [56.0, 4696.0], [56.1, 4696.0], [56.2, 4697.0], [56.3, 4700.0], [56.4, 4701.0], [56.5, 4701.0], [56.6, 4704.0], [56.7, 4705.0], [56.8, 4710.0], [56.9, 4711.0], [57.0, 4718.0], [57.1, 4727.0], [57.2, 4728.0], [57.3, 4731.0], [57.4, 4732.0], [57.5, 4733.0], [57.6, 4734.0], [57.7, 4750.0], [57.8, 4750.0], [57.9, 4753.0], [58.0, 4780.0], [58.1, 4781.0], [58.2, 4792.0], [58.3, 4801.0], [58.4, 4839.0], [58.5, 4851.0], [58.6, 4860.0], [58.7, 4865.0], [58.8, 4875.0], [58.9, 4877.0], [59.0, 4882.0], [59.1, 4896.0], [59.2, 4923.0], [59.3, 4936.0], [59.4, 4941.0], [59.5, 4944.0], [59.6, 4951.0], [59.7, 4954.0], [59.8, 4956.0], [59.9, 4957.0], [60.0, 4959.0], [60.1, 4966.0], [60.2, 4968.0], [60.3, 4968.0], [60.4, 4971.0], [60.5, 4973.0], [60.6, 4999.0], [60.7, 5005.0], [60.8, 5014.0], [60.9, 5018.0], [61.0, 5037.0], [61.1, 5045.0], [61.2, 5064.0], [61.3, 5085.0], [61.4, 5098.0], [61.5, 5101.0], [61.6, 5110.0], [61.7, 5112.0], [61.8, 5132.0], [61.9, 5142.0], [62.0, 5162.0], [62.1, 5174.0], [62.2, 5179.0], [62.3, 5269.0], [62.4, 5269.0], [62.5, 5396.0], [62.6, 5428.0], [62.7, 5460.0], [62.8, 5462.0], [62.9, 5464.0], [63.0, 5492.0], [63.1, 5497.0], [63.2, 5524.0], [63.3, 5530.0], [63.4, 5539.0], [63.5, 5578.0], [63.6, 5599.0], [63.7, 5604.0], [63.8, 5617.0], [63.9, 5619.0], [64.0, 5629.0], [64.1, 5641.0], [64.2, 5699.0], [64.3, 5700.0], [64.4, 5756.0], [64.5, 5850.0], [64.6, 5911.0], [64.7, 5927.0], [64.8, 5945.0], [64.9, 5955.0], [65.0, 5974.0], [65.1, 5977.0], [65.2, 6006.0], [65.3, 6010.0], [65.4, 6019.0], [65.5, 6027.0], [65.6, 6029.0], [65.7, 6030.0], [65.8, 6033.0], [65.9, 6049.0], [66.0, 6050.0], [66.1, 6051.0], [66.2, 6069.0], [66.3, 6095.0], [66.4, 6115.0], [66.5, 6118.0], [66.6, 6122.0], [66.7, 6123.0], [66.8, 6125.0], [66.9, 6126.0], [67.0, 6127.0], [67.1, 6133.0], [67.2, 6136.0], [67.3, 6137.0], [67.4, 6147.0], [67.5, 6150.0], [67.6, 6152.0], [67.7, 6153.0], [67.8, 6157.0], [67.9, 6159.0], [68.0, 6159.0], [68.1, 6162.0], [68.2, 6170.0], [68.3, 6172.0], [68.4, 6180.0], [68.5, 6181.0], [68.6, 6188.0], [68.7, 6192.0], [68.8, 6198.0], [68.9, 6201.0], [69.0, 6206.0], [69.1, 6206.0], [69.2, 6217.0], [69.3, 6242.0], [69.4, 6246.0], [69.5, 6259.0], [69.6, 6264.0], [69.7, 6269.0], [69.8, 6287.0], [69.9, 6295.0], [70.0, 6316.0], [70.1, 6317.0], [70.2, 6339.0], [70.3, 6355.0], [70.4, 6370.0], [70.5, 6376.0], [70.6, 6390.0], [70.7, 6396.0], [70.8, 6408.0], [70.9, 6408.0], [71.0, 6437.0], [71.1, 6441.0], [71.2, 6498.0], [71.3, 6499.0], [71.4, 6526.0], [71.5, 6532.0], [71.6, 6539.0], [71.7, 6567.0], [71.8, 6567.0], [71.9, 6570.0], [72.0, 6579.0], [72.1, 6583.0], [72.2, 6588.0], [72.3, 6591.0], [72.4, 6591.0], [72.5, 6595.0], [72.6, 6605.0], [72.7, 6609.0], [72.8, 6612.0], [72.9, 6644.0], [73.0, 6645.0], [73.1, 6667.0], [73.2, 6683.0], [73.3, 6685.0], [73.4, 6687.0], [73.5, 6692.0], [73.6, 6697.0], [73.7, 6698.0], [73.8, 6699.0], [73.9, 6702.0], [74.0, 6703.0], [74.1, 6714.0], [74.2, 6717.0], [74.3, 6719.0], [74.4, 6727.0], [74.5, 6736.0], [74.6, 6744.0], [74.7, 6748.0], [74.8, 6756.0], [74.9, 6757.0], [75.0, 6769.0], [75.1, 6769.0], [75.2, 6770.0], [75.3, 6773.0], [75.4, 6774.0], [75.5, 6779.0], [75.6, 6783.0], [75.7, 6785.0], [75.8, 6793.0], [75.9, 6795.0], [76.0, 6810.0], [76.1, 6812.0], [76.2, 6815.0], [76.3, 6816.0], [76.4, 6817.0], [76.5, 6831.0], [76.6, 6836.0], [76.7, 6844.0], [76.8, 6848.0], [76.9, 6885.0], [77.0, 6894.0], [77.1, 6927.0], [77.2, 6929.0], [77.3, 6934.0], [77.4, 6936.0], [77.5, 6956.0], [77.6, 6969.0], [77.7, 6974.0], [77.8, 6979.0], [77.9, 7007.0], [78.0, 7012.0], [78.1, 7016.0], [78.2, 7021.0], [78.3, 7027.0], [78.4, 7033.0], [78.5, 7068.0], [78.6, 7088.0], [78.7, 7139.0], [78.8, 7147.0], [78.9, 7218.0], [79.0, 7252.0], [79.1, 7268.0], [79.2, 7304.0], [79.3, 7330.0], [79.4, 7384.0], [79.5, 7401.0], [79.6, 7440.0], [79.7, 7457.0], [79.8, 7463.0], [79.9, 7470.0], [80.0, 7474.0], [80.1, 7482.0], [80.2, 7482.0], [80.3, 7491.0], [80.4, 7499.0], [80.5, 7506.0], [80.6, 7524.0], [80.7, 7536.0], [80.8, 7554.0], [80.9, 7558.0], [81.0, 7558.0], [81.1, 7559.0], [81.2, 7562.0], [81.3, 7575.0], [81.4, 7583.0], [81.5, 7594.0], [81.6, 7594.0], [81.7, 7608.0], [81.8, 7632.0], [81.9, 7637.0], [82.0, 7646.0], [82.1, 7653.0], [82.2, 7656.0], [82.3, 7668.0], [82.4, 7674.0], [82.5, 7677.0], [82.6, 7682.0], [82.7, 7702.0], [82.8, 7704.0], [82.9, 7721.0], [83.0, 7727.0], [83.1, 7744.0], [83.2, 7759.0], [83.3, 7761.0], [83.4, 7764.0], [83.5, 7776.0], [83.6, 7776.0], [83.7, 7801.0], [83.8, 7801.0], [83.9, 7834.0], [84.0, 7840.0], [84.1, 7852.0], [84.2, 7884.0], [84.3, 7887.0], [84.4, 7888.0], [84.5, 7888.0], [84.6, 7904.0], [84.7, 7923.0], [84.8, 7927.0], [84.9, 7929.0], [85.0, 7938.0], [85.1, 7960.0], [85.2, 7967.0], [85.3, 7984.0], [85.4, 7985.0], [85.5, 7995.0], [85.6, 7996.0], [85.7, 8000.0], [85.8, 8014.0], [85.9, 8027.0], [86.0, 8035.0], [86.1, 8047.0], [86.2, 8052.0], [86.3, 8057.0], [86.4, 8065.0], [86.5, 8068.0], [86.6, 8077.0], [86.7, 8090.0], [86.8, 8096.0], [86.9, 8106.0], [87.0, 8109.0], [87.1, 8119.0], [87.2, 8126.0], [87.3, 8139.0], [87.4, 8148.0], [87.5, 8149.0], [87.6, 8156.0], [87.7, 8180.0], [87.8, 8189.0], [87.9, 8201.0], [88.0, 8207.0], [88.1, 8227.0], [88.2, 8228.0], [88.3, 8229.0], [88.4, 8241.0], [88.5, 8257.0], [88.6, 8260.0], [88.7, 8260.0], [88.8, 8275.0], [88.9, 8280.0], [89.0, 8304.0], [89.1, 8314.0], [89.2, 8322.0], [89.3, 8326.0], [89.4, 8339.0], [89.5, 8384.0], [89.6, 8412.0], [89.7, 8419.0], [89.8, 8424.0], [89.9, 8442.0], [90.0, 8473.0], [90.1, 8496.0], [90.2, 8510.0], [90.3, 8590.0], [90.4, 8662.0], [90.5, 8688.0], [90.6, 8746.0], [90.7, 8793.0], [90.8, 8866.0], [90.9, 8921.0], [91.0, 8956.0], [91.1, 8964.0], [91.2, 8981.0], [91.3, 8993.0], [91.4, 9023.0], [91.5, 9034.0], [91.6, 9043.0], [91.7, 9078.0], [91.8, 9087.0], [91.9, 9111.0], [92.0, 9124.0], [92.1, 9137.0], [92.2, 9151.0], [92.3, 9151.0], [92.4, 9211.0], [92.5, 9212.0], [92.6, 9214.0], [92.7, 9218.0], [92.8, 9220.0], [92.9, 9223.0], [93.0, 9229.0], [93.1, 9233.0], [93.2, 9247.0], [93.3, 9262.0], [93.4, 9271.0], [93.5, 9289.0], [93.6, 9292.0], [93.7, 9296.0], [93.8, 9313.0], [93.9, 9334.0], [94.0, 9351.0], [94.1, 9364.0], [94.2, 9374.0], [94.3, 9408.0], [94.4, 9410.0], [94.5, 9411.0], [94.6, 9427.0], [94.7, 9428.0], [94.8, 9474.0], [94.9, 9476.0], [95.0, 9491.0], [95.1, 9584.0], [95.2, 9601.0], [95.3, 9604.0], [95.4, 9654.0], [95.5, 9659.0], [95.6, 9737.0], [95.7, 9824.0], [95.8, 12441.0], [95.9, 12829.0], [96.0, 13023.0], [96.1, 13762.0], [96.2, 24597.0], [96.3, 30913.0], [96.4, 31127.0], [96.5, 35154.0], [96.6, 36839.0], [96.7, 38426.0], [96.8, 38883.0], [96.9, 39369.0], [97.0, 39881.0], [97.1, 40430.0], [97.2, 41463.0], [97.3, 41515.0], [97.4, 41748.0], [97.5, 41871.0], [97.6, 42519.0], [97.7, 42532.0], [97.8, 43198.0], [97.9, 43271.0], [98.0, 43327.0], [98.1, 43491.0], [98.2, 43649.0], [98.3, 43687.0], [98.4, 43845.0], [98.5, 43849.0], [98.6, 43921.0], [98.7, 44039.0], [98.8, 44094.0], [98.9, 44265.0], [99.0, 44288.0], [99.1, 44379.0], [99.2, 44467.0], [99.3, 44474.0], [99.4, 44598.0], [99.5, 44618.0], [99.6, 44778.0], [99.7, 44810.0], [99.8, 44825.0], [99.9, 44844.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2700.0, "maxY": 368.0, "series": [{"data": [[37900.0, 1.0], [45500.0, 2.0], [45700.0, 2.0], [45900.0, 6.0], [46100.0, 2.0], [46700.0, 1.0], [47300.0, 1.0], [47500.0, 1.0], [48100.0, 1.0], [49700.0, 1.0], [50500.0, 2.0], [50700.0, 1.0], [51100.0, 2.0], [51700.0, 2.0], [51900.0, 2.0], [52100.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3600.0, 1.0], [4500.0, 8.0], [4600.0, 1.0], [4400.0, 3.0], [7800.0, 2.0], [7900.0, 2.0], [8000.0, 3.0], [8100.0, 1.0], [8700.0, 2.0], [8600.0, 2.0], [8200.0, 2.0], [8300.0, 1.0], [9200.0, 100.0], [9100.0, 196.0], [9000.0, 225.0], [8900.0, 108.0], [8800.0, 20.0], [9700.0, 9.0], [9600.0, 10.0], [9500.0, 5.0], [9400.0, 6.0], [9300.0, 23.0], [10200.0, 2.0], [10100.0, 2.0], [9900.0, 4.0], [10000.0, 6.0], [9800.0, 7.0], [10700.0, 4.0], [10600.0, 4.0], [10300.0, 2.0], [10400.0, 1.0], [10500.0, 1.0], [11200.0, 2.0], [10800.0, 8.0], [11000.0, 1.0], [10900.0, 2.0], [11500.0, 8.0], [11300.0, 3.0], [11400.0, 7.0], [11600.0, 3.0], [12100.0, 7.0], [12000.0, 3.0], [12200.0, 7.0], [11900.0, 3.0], [11800.0, 3.0], [12700.0, 9.0], [12600.0, 6.0], [12500.0, 4.0], [12400.0, 13.0], [12300.0, 4.0], [13300.0, 5.0], [12900.0, 11.0], [13200.0, 5.0], [13100.0, 6.0], [13000.0, 8.0], [12800.0, 3.0], [13700.0, 7.0], [13500.0, 5.0], [13800.0, 11.0], [13600.0, 8.0], [13400.0, 3.0], [14200.0, 5.0], [14300.0, 1.0], [14000.0, 7.0], [13900.0, 10.0], [14100.0, 1.0], [14800.0, 9.0], [14600.0, 4.0], [14700.0, 7.0], [14500.0, 3.0], [14400.0, 1.0], [15100.0, 6.0], [15200.0, 4.0], [15000.0, 6.0], [14900.0, 8.0], [15800.0, 1.0], [15400.0, 1.0], [16000.0, 2.0], [16300.0, 8.0], [16200.0, 8.0], [15900.0, 2.0], [16100.0, 3.0], [16500.0, 7.0], [16800.0, 15.0], [16700.0, 12.0], [17000.0, 9.0], [17100.0, 3.0], [17400.0, 1.0], [16600.0, 10.0], [16900.0, 12.0], [16400.0, 14.0], [17300.0, 2.0], [17200.0, 2.0], [18400.0, 5.0], [18100.0, 5.0], [17500.0, 2.0], [17800.0, 8.0], [18000.0, 2.0], [18200.0, 4.0], [17600.0, 1.0], [18300.0, 1.0], [17900.0, 3.0], [17700.0, 2.0], [18600.0, 5.0], [18700.0, 4.0], [18500.0, 2.0], [30500.0, 1.0], [30600.0, 1.0], [31100.0, 1.0], [32200.0, 1.0], [44400.0, 2.0], [45800.0, 4.0], [45600.0, 1.0], [46000.0, 1.0], [46800.0, 1.0], [48400.0, 1.0], [49200.0, 1.0], [49600.0, 1.0], [49800.0, 1.0], [50400.0, 2.0], [50600.0, 1.0], [51200.0, 1.0], [51600.0, 1.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[2800.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3300.0, 4.0], [3400.0, 3.0], [3500.0, 4.0], [3700.0, 3.0], [3600.0, 2.0], [3800.0, 1.0], [4000.0, 4.0], [4300.0, 13.0], [4200.0, 2.0], [4100.0, 2.0], [4500.0, 348.0], [4400.0, 175.0], [4600.0, 148.0], [4700.0, 24.0], [4800.0, 10.0], [5000.0, 3.0], [5100.0, 9.0], [4900.0, 12.0], [5300.0, 13.0], [5200.0, 6.0], [5400.0, 12.0], [5600.0, 3.0], [5500.0, 6.0], [5700.0, 3.0], [5800.0, 1.0], [5900.0, 11.0], [6100.0, 10.0], [6000.0, 7.0], [6300.0, 20.0], [6200.0, 17.0], [6500.0, 15.0], [6400.0, 19.0], [6600.0, 9.0], [6700.0, 10.0], [6900.0, 16.0], [6800.0, 3.0], [7100.0, 16.0], [7000.0, 17.0], [7300.0, 20.0], [7400.0, 10.0], [7200.0, 15.0], [7600.0, 7.0], [7500.0, 3.0], [7900.0, 6.0], [7800.0, 4.0], [7700.0, 10.0], [8000.0, 5.0], [8100.0, 9.0], [8700.0, 6.0], [8600.0, 3.0], [8500.0, 3.0], [8400.0, 12.0], [8200.0, 15.0], [8300.0, 12.0], [9200.0, 14.0], [9100.0, 9.0], [8800.0, 4.0], [9000.0, 21.0], [8900.0, 7.0], [9600.0, 2.0], [9400.0, 2.0], [9500.0, 1.0], [9300.0, 1.0], [10400.0, 1.0], [13300.0, 1.0], [13200.0, 1.0], [13500.0, 1.0], [15200.0, 1.0], [21500.0, 1.0], [22400.0, 1.0], [22600.0, 1.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[35100.0, 1.0], [37900.0, 1.0], [39300.0, 1.0], [41700.0, 1.0], [41500.0, 1.0], [42500.0, 2.0], [43100.0, 1.0], [43300.0, 2.0], [43900.0, 1.0], [44700.0, 1.0], [44900.0, 1.0], [44500.0, 1.0], [44300.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3600.0, 1.0], [4300.0, 20.0], [4500.0, 368.0], [4600.0, 140.0], [4400.0, 149.0], [4800.0, 10.0], [4700.0, 24.0], [5100.0, 10.0], [5000.0, 9.0], [4900.0, 19.0], [5300.0, 2.0], [5200.0, 2.0], [5600.0, 7.0], [5500.0, 6.0], [5400.0, 7.0], [5700.0, 2.0], [5800.0, 2.0], [6100.0, 30.0], [6000.0, 15.0], [5900.0, 7.0], [6300.0, 10.0], [6200.0, 13.0], [6600.0, 15.0], [6500.0, 15.0], [6400.0, 7.0], [6800.0, 14.0], [6900.0, 10.0], [6700.0, 25.0], [7100.0, 3.0], [7000.0, 9.0], [7400.0, 12.0], [7300.0, 4.0], [7200.0, 3.0], [7600.0, 13.0], [7500.0, 14.0], [7900.0, 14.0], [7800.0, 10.0], [7700.0, 12.0], [8000.0, 14.0], [8100.0, 12.0], [8500.0, 2.0], [8200.0, 14.0], [8300.0, 7.0], [8600.0, 3.0], [8700.0, 2.0], [8400.0, 7.0], [8900.0, 6.0], [9000.0, 7.0], [8800.0, 1.0], [9200.0, 16.0], [9100.0, 6.0], [9700.0, 2.0], [9400.0, 10.0], [9500.0, 2.0], [9300.0, 6.0], [9600.0, 4.0], [9800.0, 1.0], [12400.0, 1.0], [13000.0, 1.0], [12800.0, 1.0], [13700.0, 1.0], [15400.0, 1.0], [24500.0, 1.0], [31100.0, 1.0], [30900.0, 1.0], [36800.0, 1.0], [38400.0, 1.0], [38800.0, 1.0], [40400.0, 1.0], [39800.0, 1.0], [40600.0, 1.0], [41800.0, 1.0], [42200.0, 1.0], [41400.0, 1.0], [43200.0, 1.0], [43600.0, 2.0], [43400.0, 1.0], [43800.0, 3.0], [44000.0, 2.0], [44200.0, 3.0], [44600.0, 2.0], [44800.0, 3.0], [44400.0, 2.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 52100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2451.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2451.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2451.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 44.194312796208536, "minX": 1.6165872E12, "maxY": 50.0, "series": [{"data": [[1.61658726E12, 50.0], [1.61658738E12, 50.0], [1.6165872E12, 50.0], [1.6165875E12, 44.194312796208536], [1.61658732E12, 50.0], [1.61658744E12, 50.0]], "isOverall": false, "label": "Thread Group 50", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6165875E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3229.0, "minX": 1.0, "maxY": 12671.652286453838, "series": [{"data": [[2.0, 8012.0], [3.0, 3229.0], [4.0, 8010.0], [5.0, 7978.0], [6.0, 8163.0], [7.0, 7904.0], [8.0, 3484.0], [9.0, 7842.0], [10.0, 8088.0], [11.0, 8231.0], [12.0, 3620.0], [13.0, 8335.0], [14.0, 8661.0], [15.0, 8295.0], [16.0, 8655.0], [17.0, 8930.0], [18.0, 9114.0], [19.0, 9186.0], [20.0, 8988.0], [21.0, 9216.0], [22.0, 8995.0], [23.0, 9018.0], [24.0, 9216.0], [25.0, 9083.0], [26.0, 8991.0], [27.0, 9180.0], [28.0, 4564.0], [29.0, 9051.0], [30.0, 9132.0], [31.0, 4498.0], [33.0, 9226.0], [32.0, 9070.0], [35.0, 8994.0], [34.0, 4544.0], [37.0, 9020.0], [36.0, 4584.0], [39.0, 9054.0], [38.0, 4552.0], [41.0, 4571.0], [40.0, 9019.0], [43.0, 4436.0], [42.0, 4523.0], [45.0, 4497.0], [44.0, 9055.0], [47.0, 9075.0], [46.0, 9072.0], [49.0, 4507.0], [48.0, 4600.0], [50.0, 12671.652286453838], [1.0, 7889.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[48.98592715231789, 12460.597682119207]], "isOverall": false, "label": "DELETE Test-Aggregated", "isController": true}, {"data": [[33.0, 4639.0], [32.0, 4564.0], [2.0, 3348.0], [35.0, 4473.0], [37.0, 4573.0], [39.0, 4536.0], [40.0, 4584.0], [44.0, 4625.0], [47.0, 4516.0], [46.0, 4527.0], [50.0, 5612.730569948187], [4.0, 3502.0], [5.0, 3440.0], [6.0, 3600.0], [7.0, 3391.0], [9.0, 3504.0], [10.0, 3576.0], [11.0, 3748.0], [13.0, 3859.0], [14.0, 4115.0], [15.0, 3771.0], [16.0, 4113.0], [1.0, 3328.0], [17.0, 4345.0], [18.0, 4498.0], [19.0, 4592.0], [20.0, 4448.0], [21.0, 4595.0], [22.0, 4496.0], [23.0, 4536.0], [24.0, 4668.0], [25.0, 4530.0], [26.0, 4504.0], [27.0, 4573.0], [29.0, 4524.0], [30.0, 4529.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[49.176026823134954, 5571.426655490359]], "isOverall": false, "label": "POST DELETE participant-Aggregated", "isController": false}, {"data": [[8.0, 3484.0], [34.0, 4544.0], [36.0, 4584.0], [38.0, 4551.0], [41.0, 4571.0], [43.0, 4436.0], [42.0, 4523.0], [45.0, 4497.0], [49.0, 4507.0], [48.0, 4600.0], [12.0, 3619.0], [3.0, 3229.0], [50.0, 6989.499162479063], [28.0, 4563.0], [31.0, 4498.0]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}, {"data": [[49.7996688741722, 6958.334437086097]], "isOverall": false, "label": "POST USER LOGIN-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 151959.81666666668, "minX": 1.6165872E12, "maxY": 5.745127955E7, "series": [{"data": [[1.61658726E12, 5.745127955E7], [1.61658738E12, 887971.25], [1.6165872E12, 1.7109614533333335E7], [1.6165875E12, 388299.56666666665], [1.61658732E12, 2686226.433333333], [1.61658744E12, 720732.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61658726E12, 2795195.2333333334], [1.61658738E12, 448072.06666666665], [1.6165872E12, 151959.81666666668], [1.6165875E12, 174924.75], [1.61658732E12, 1798522.75], [1.61658744E12, 324698.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6165875E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4449.311594202895, "minX": 1.6165872E12, "maxY": 32515.6, "series": [{"data": [[1.61658726E12, 25254.226744186046], [1.61658738E12, 9510.558730158731], [1.6165872E12, 32515.6], [1.6165875E12, 8563.3660130719], [1.61658732E12, 13984.64912280701], [1.61658744E12, 9109.182089552236]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.61658726E12, 7879.133720930235], [1.61658738E12, 4698.701587301591], [1.6165872E12, 19060.4], [1.6165875E12, 4449.311594202895], [1.61658732E12, 6910.969298245615], [1.61658744E12, 4556.423880597016]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.61658726E12, 15462.715025906726], [1.61658738E12, 4711.283987915408], [1.6165872E12, 26380.166666666668], [1.6165875E12, 4543.67175572519], [1.61658732E12, 6776.817351598173], [1.61658744E12, 4552.866459627327]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6165875E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6165872E12, "maxY": 4318.088082901552, "series": [{"data": [[1.61658726E12, 0.0], [1.61658738E12, 0.0], [1.6165872E12, 0.0], [1.6165875E12, 0.0], [1.61658732E12, 0.0], [1.61658744E12, 0.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.61658726E12, 3308.116279069765], [1.61658738E12, 2335.1873015873025], [1.6165872E12, 4187.2], [1.6165875E12, 2156.615942028985], [1.61658732E12, 3456.9078947368416], [1.61658744E12, 2256.5970149253735]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.61658726E12, 4318.088082901552], [1.61658738E12, 2348.211480362538], [1.6165872E12, 1741.3333333333335], [1.6165875E12, 2172.4961832061063], [1.61658732E12, 3317.2785388127854], [1.61658744E12, 2248.462732919252]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6165875E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6165872E12, "maxY": 24.6, "series": [{"data": [[1.61658726E12, 0.0], [1.61658738E12, 0.0], [1.6165872E12, 0.0], [1.6165875E12, 0.0], [1.61658732E12, 0.0], [1.61658744E12, 0.0]], "isOverall": false, "label": "DELETE Test", "isController": true}, {"data": [[1.61658726E12, 15.726744186046497], [1.61658738E12, 0.0], [1.6165872E12, 24.6], [1.6165875E12, 0.0], [1.61658732E12, 0.0], [1.61658744E12, 0.0]], "isOverall": false, "label": "POST DELETE participant", "isController": false}, {"data": [[1.61658726E12, 5.036269430051809], [1.61658738E12, 1.4501510574018122], [1.6165872E12, 12.666666666666666], [1.6165875E12, 1.3587786259541992], [1.61658732E12, 1.3424657534246578], [1.61658744E12, 1.2732919254658386]], "isOverall": false, "label": "POST USER LOGIN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6165875E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2779.0, "minX": 1.6165872E12, "maxY": 44917.0, "series": [{"data": [[1.61658726E12, 44917.0], [1.61658738E12, 6118.0], [1.6165872E12, 38883.0], [1.6165875E12, 9226.0], [1.61658732E12, 9087.0], [1.61658744E12, 4792.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61658726E12, 2779.0], [1.61658738E12, 4266.0], [1.6165872E12, 8510.0], [1.6165875E12, 3229.0], [1.61658732E12, 5744.0], [1.61658744E12, 4311.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61658726E12, 39522.600000000006], [1.61658738E12, 9003.5], [1.6165872E12, 38517.4], [1.6165875E12, 8309.2], [1.61658732E12, 9367.0], [1.61658744E12, 8322.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61658726E12, 44813.45], [1.61658738E12, 44222.25], [1.6165872E12, 38883.0], [1.6165875E12, 43419.23999999999], [1.61658732E12, 44598.6], [1.61658744E12, 43769.159999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61658726E12, 43850.35], [1.61658738E12, 9427.75], [1.6165872E12, 38883.0], [1.6165875E12, 9157.199999999999], [1.61658732E12, 25576.49999999985], [1.61658744E12, 9219.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6165875E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4575.0, "minX": 1000.0, "maxY": 27602.5, "series": [{"data": [[1000.0, 4625.0], [4000.0, 27602.5], [2000.0, 4575.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2070.5, "minX": 1000.0, "maxY": 4724.5, "series": [{"data": [[1000.0, 2324.0], [4000.0, 4724.5], [2000.0, 2070.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.1166666666666667, "minX": 1.6165872E12, "maxY": 10.95, "series": [{"data": [[1.61658726E12, 6.083333333333333], [1.61658738E12, 10.766666666666667], [1.6165872E12, 1.1166666666666667], [1.6165875E12, 4.483333333333333], [1.61658732E12, 7.45], [1.61658744E12, 10.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6165875E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.6165872E12, "maxY": 10.95, "series": [{"data": [[1.61658726E12, 6.083333333333333], [1.61658738E12, 10.766666666666667], [1.6165872E12, 0.2833333333333333], [1.6165875E12, 5.316666666666666], [1.61658732E12, 7.45], [1.61658744E12, 10.95]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6165875E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.6165872E12, "maxY": 5.583333333333333, "series": [{"data": [[1.61658726E12, 2.8666666666666667], [1.61658738E12, 5.25], [1.6165872E12, 0.08333333333333333], [1.6165875E12, 2.55], [1.61658732E12, 3.8], [1.61658744E12, 5.583333333333333]], "isOverall": false, "label": "DELETE Test-success", "isController": true}, {"data": [[1.61658726E12, 3.216666666666667], [1.61658738E12, 5.516666666666667], [1.6165872E12, 0.2], [1.6165875E12, 2.183333333333333], [1.61658732E12, 3.65], [1.61658744E12, 5.366666666666666]], "isOverall": false, "label": "POST USER LOGIN-success", "isController": false}, {"data": [[1.61658726E12, 2.8666666666666667], [1.61658738E12, 5.25], [1.6165872E12, 0.08333333333333333], [1.6165875E12, 2.3], [1.61658732E12, 3.8], [1.61658744E12, 5.583333333333333]], "isOverall": false, "label": "POST DELETE participant-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6165875E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.6165872E12, "maxY": 16.533333333333335, "series": [{"data": [[1.61658726E12, 8.95], [1.61658738E12, 16.016666666666666], [1.6165872E12, 0.36666666666666664], [1.6165875E12, 7.033333333333333], [1.61658732E12, 11.25], [1.61658744E12, 16.533333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6165875E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

